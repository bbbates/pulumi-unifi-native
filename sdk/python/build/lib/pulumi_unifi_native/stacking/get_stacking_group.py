# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetStackingGroupResult',
    'AwaitableGetStackingGroupResult',
    'get_stacking_group',
    'get_stacking_group_output',
]

@pulumi.output_type
class GetStackingGroupResult:
    def __init__(__self__, id=None, description=None, lag_groups=None, links=None, name=None, units=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if lag_groups and not isinstance(lag_groups, list):
            raise TypeError("Expected argument 'lag_groups' to be a list")
        pulumi.set(__self__, "lag_groups", lag_groups)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if units and not isinstance(units, list):
            raise TypeError("Expected argument 'units' to be a list")
        pulumi.set(__self__, "units", units)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="lagGroups")
    def lag_groups(self) -> Sequence['outputs.StackingLagGroupDto']:
        return pulumi.get(self, "lag_groups")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.StackingLinkDto']:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def units(self) -> Sequence['outputs.StackingUnitDto']:
        return pulumi.get(self, "units")


class AwaitableGetStackingGroupResult(GetStackingGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStackingGroupResult(
            id=self.id,
            description=self.description,
            lag_groups=self.lag_groups,
            links=self.links,
            name=self.name,
            units=self.units)


def get_stacking_group(site_name: Optional[builtins.str] = None,
                       stacking_group_id: Optional[builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStackingGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    __args__['stackingGroupId'] = stacking_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:stacking:getStackingGroup', __args__, opts=opts, typ=GetStackingGroupResult).value

    return AwaitableGetStackingGroupResult(
        id=pulumi.get(__ret__, 'id'),
        description=pulumi.get(__ret__, 'description'),
        lag_groups=pulumi.get(__ret__, 'lag_groups'),
        links=pulumi.get(__ret__, 'links'),
        name=pulumi.get(__ret__, 'name'),
        units=pulumi.get(__ret__, 'units'))
def get_stacking_group_output(site_name: Optional[pulumi.Input[builtins.str]] = None,
                              stacking_group_id: Optional[pulumi.Input[builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetStackingGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    __args__['stackingGroupId'] = stacking_group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:stacking:getStackingGroup', __args__, opts=opts, typ=GetStackingGroupResult)
    return __ret__.apply(lambda __response__: GetStackingGroupResult(
        id=pulumi.get(__response__, 'id'),
        description=pulumi.get(__response__, 'description'),
        lag_groups=pulumi.get(__response__, 'lag_groups'),
        links=pulumi.get(__response__, 'links'),
        name=pulumi.get(__response__, 'name'),
        units=pulumi.get(__response__, 'units')))
