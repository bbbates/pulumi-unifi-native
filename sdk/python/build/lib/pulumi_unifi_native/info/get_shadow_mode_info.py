# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetShadowModeInfoResult',
    'AwaitableGetShadowModeInfoResult',
    'get_shadow_mode_info',
    'get_shadow_mode_info_output',
]

@pulumi.output_type
class GetShadowModeInfoResult:
    def __init__(__self__, management_interface=None):
        if management_interface and not isinstance(management_interface, str):
            raise TypeError("Expected argument 'management_interface' to be a str")
        pulumi.set(__self__, "management_interface", management_interface)

    @property
    @pulumi.getter(name="managementInterface")
    def management_interface(self) -> Optional[builtins.str]:
        return pulumi.get(self, "management_interface")


class AwaitableGetShadowModeInfoResult(GetShadowModeInfoResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetShadowModeInfoResult(
            management_interface=self.management_interface)


def get_shadow_mode_info(site_name: Optional[builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetShadowModeInfoResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:info:getShadowModeInfo', __args__, opts=opts, typ=GetShadowModeInfoResult).value

    return AwaitableGetShadowModeInfoResult(
        management_interface=pulumi.get(__ret__, 'management_interface'))
def get_shadow_mode_info_output(site_name: Optional[pulumi.Input[builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetShadowModeInfoResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:info:getShadowModeInfo', __args__, opts=opts, typ=GetShadowModeInfoResult)
    return __ret__.apply(lambda __response__: GetShadowModeInfoResult(
        management_interface=pulumi.get(__response__, 'management_interface')))
