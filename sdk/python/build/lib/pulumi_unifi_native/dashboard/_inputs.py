# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'DashboardModulesArgs',
    'DashboardModulesArgsDict',
    'SettingDashboardWidgetsArgs',
    'SettingDashboardWidgetsArgsDict',
]

MYPY = False

if not MYPY:
    class DashboardModulesArgsDict(TypedDict):
        config: NotRequired[pulumi.Input[builtins.str]]
        id: NotRequired[pulumi.Input[builtins.str]]
        module_id: NotRequired[pulumi.Input[builtins.str]]
        restrictions: NotRequired[pulumi.Input[builtins.str]]
elif False:
    DashboardModulesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardModulesArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[builtins.str]] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 module_id: Optional[pulumi.Input[builtins.str]] = None,
                 restrictions: Optional[pulumi.Input[builtins.str]] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if module_id is not None:
            pulumi.set(__self__, "module_id", module_id)
        if restrictions is not None:
            pulumi.set(__self__, "restrictions", restrictions)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "module_id", value)

    @property
    @pulumi.getter
    def restrictions(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "restrictions")

    @restrictions.setter
    def restrictions(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "restrictions", value)


if not MYPY:
    class SettingDashboardWidgetsArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[builtins.bool]]
        name: NotRequired[pulumi.Input[builtins.str]]
elif False:
    SettingDashboardWidgetsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingDashboardWidgetsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)


