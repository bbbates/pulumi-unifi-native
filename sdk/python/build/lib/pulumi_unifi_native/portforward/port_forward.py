# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PortForwardArgs', 'PortForward']

@pulumi.input_type
class PortForwardArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 destination_ip: Optional[pulumi.Input[builtins.str]] = None,
                 destination_ips: Optional[pulumi.Input[Sequence[pulumi.Input['PortForwardDestinationIPsArgs']]]] = None,
                 dst_port: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 fwd: Optional[pulumi.Input[builtins.str]] = None,
                 fwd_port: Optional[pulumi.Input[builtins.str]] = None,
                 log: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 pfwd_interface: Optional[pulumi.Input[builtins.str]] = None,
                 proto: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 src: Optional[pulumi.Input[builtins.str]] = None,
                 src_firewall_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 src_limiting_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 src_limiting_type: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a PortForward resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_ips is not None:
            pulumi.set(__self__, "destination_ips", destination_ips)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if fwd is not None:
            pulumi.set(__self__, "fwd", fwd)
        if fwd_port is not None:
            pulumi.set(__self__, "fwd_port", fwd_port)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pfwd_interface is not None:
            pulumi.set(__self__, "pfwd_interface", pfwd_interface)
        if proto is not None:
            pulumi.set(__self__, "proto", proto)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if src is not None:
            pulumi.set(__self__, "src", src)
        if src_firewall_group_id is not None:
            pulumi.set(__self__, "src_firewall_group_id", src_firewall_group_id)
        if src_limiting_enabled is not None:
            pulumi.set(__self__, "src_limiting_enabled", src_limiting_enabled)
        if src_limiting_type is not None:
            pulumi.set(__self__, "src_limiting_type", src_limiting_type)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "destination_ip")

    @destination_ip.setter
    def destination_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "destination_ip", value)

    @property
    @pulumi.getter(name="destinationIps")
    def destination_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortForwardDestinationIPsArgs']]]]:
        return pulumi.get(self, "destination_ips")

    @destination_ips.setter
    def destination_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortForwardDestinationIPsArgs']]]]):
        pulumi.set(self, "destination_ips", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def fwd(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "fwd")

    @fwd.setter
    def fwd(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fwd", value)

    @property
    @pulumi.getter(name="fwdPort")
    def fwd_port(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "fwd_port")

    @fwd_port.setter
    def fwd_port(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fwd_port", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pfwdInterface")
    def pfwd_interface(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "pfwd_interface")

    @pfwd_interface.setter
    def pfwd_interface(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pfwd_interface", value)

    @property
    @pulumi.getter
    def proto(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "proto")

    @proto.setter
    def proto(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "proto", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def src(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "src")

    @src.setter
    def src(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "src", value)

    @property
    @pulumi.getter(name="srcFirewallGroupId")
    def src_firewall_group_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "src_firewall_group_id")

    @src_firewall_group_id.setter
    def src_firewall_group_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "src_firewall_group_id", value)

    @property
    @pulumi.getter(name="srcLimitingEnabled")
    def src_limiting_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "src_limiting_enabled")

    @src_limiting_enabled.setter
    def src_limiting_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "src_limiting_enabled", value)

    @property
    @pulumi.getter(name="srcLimitingType")
    def src_limiting_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "src_limiting_type")

    @src_limiting_type.setter
    def src_limiting_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "src_limiting_type", value)


@pulumi.type_token("unifi-native:portforward:PortForward")
class PortForward(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 destination_ip: Optional[pulumi.Input[builtins.str]] = None,
                 destination_ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortForwardDestinationIPsArgs', 'PortForwardDestinationIPsArgsDict']]]]] = None,
                 dst_port: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 fwd: Optional[pulumi.Input[builtins.str]] = None,
                 fwd_port: Optional[pulumi.Input[builtins.str]] = None,
                 log: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 pfwd_interface: Optional[pulumi.Input[builtins.str]] = None,
                 proto: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 src: Optional[pulumi.Input[builtins.str]] = None,
                 src_firewall_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 src_limiting_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 src_limiting_type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a PortForward resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PortForwardArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PortForward resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PortForwardArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PortForwardArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 destination_ip: Optional[pulumi.Input[builtins.str]] = None,
                 destination_ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PortForwardDestinationIPsArgs', 'PortForwardDestinationIPsArgsDict']]]]] = None,
                 dst_port: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 fwd: Optional[pulumi.Input[builtins.str]] = None,
                 fwd_port: Optional[pulumi.Input[builtins.str]] = None,
                 log: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 pfwd_interface: Optional[pulumi.Input[builtins.str]] = None,
                 proto: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 src: Optional[pulumi.Input[builtins.str]] = None,
                 src_firewall_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 src_limiting_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 src_limiting_type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PortForwardArgs.__new__(PortForwardArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["destination_ip"] = destination_ip
            __props__.__dict__["destination_ips"] = destination_ips
            __props__.__dict__["dst_port"] = dst_port
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["fwd"] = fwd
            __props__.__dict__["fwd_port"] = fwd_port
            __props__.__dict__["log"] = log
            __props__.__dict__["name"] = name
            __props__.__dict__["pfwd_interface"] = pfwd_interface
            __props__.__dict__["proto"] = proto
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["src"] = src
            __props__.__dict__["src_firewall_group_id"] = src_firewall_group_id
            __props__.__dict__["src_limiting_enabled"] = src_limiting_enabled
            __props__.__dict__["src_limiting_type"] = src_limiting_type
        super(PortForward, __self__).__init__(
            'unifi-native:portforward:PortForward',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'PortForward':
        """
        Get an existing PortForward resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PortForwardArgs.__new__(PortForwardArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["destination_ip"] = None
        __props__.__dict__["destination_ips"] = None
        __props__.__dict__["dst_port"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["fwd"] = None
        __props__.__dict__["fwd_port"] = None
        __props__.__dict__["log"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["pfwd_interface"] = None
        __props__.__dict__["proto"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["src"] = None
        __props__.__dict__["src_firewall_group_id"] = None
        __props__.__dict__["src_limiting_enabled"] = None
        __props__.__dict__["src_limiting_type"] = None
        return PortForward(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "destination_ip")

    @property
    @pulumi.getter(name="destinationIps")
    def destination_ips(self) -> pulumi.Output[Optional[Sequence['outputs.PortForwardDestinationIPs']]]:
        return pulumi.get(self, "destination_ips")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def fwd(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "fwd")

    @property
    @pulumi.getter(name="fwdPort")
    def fwd_port(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "fwd_port")

    @property
    @pulumi.getter
    def log(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pfwdInterface")
    def pfwd_interface(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "pfwd_interface")

    @property
    @pulumi.getter
    def proto(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "proto")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def src(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "src")

    @property
    @pulumi.getter(name="srcFirewallGroupId")
    def src_firewall_group_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "src_firewall_group_id")

    @property
    @pulumi.getter(name="srcLimitingEnabled")
    def src_limiting_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "src_limiting_enabled")

    @property
    @pulumi.getter(name="srcLimitingType")
    def src_limiting_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "src_limiting_type")

