# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetWanSlaResult',
    'AwaitableGetWanSlaResult',
    'get_wan_sla',
    'get_wan_sla_output',
]

@pulumi.output_type
class GetWanSlaResult:
    def __init__(__self__, id=None, monitor_down_threshold=None, monitor_health_type=None, monitors=None, name=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if monitor_down_threshold and not isinstance(monitor_down_threshold, int):
            raise TypeError("Expected argument 'monitor_down_threshold' to be a int")
        pulumi.set(__self__, "monitor_down_threshold", monitor_down_threshold)
        if monitor_health_type and not isinstance(monitor_health_type, str):
            raise TypeError("Expected argument 'monitor_health_type' to be a str")
        pulumi.set(__self__, "monitor_health_type", monitor_health_type)
        if monitors and not isinstance(monitors, list):
            raise TypeError("Expected argument 'monitors' to be a list")
        pulumi.set(__self__, "monitors", monitors)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monitorDownThreshold")
    def monitor_down_threshold(self) -> Optional[builtins.int]:
        return pulumi.get(self, "monitor_down_threshold")

    @property
    @pulumi.getter(name="monitorHealthType")
    def monitor_health_type(self) -> Optional['WanSlaDtoMonitorHealthType']:
        return pulumi.get(self, "monitor_health_type")

    @property
    @pulumi.getter
    def monitors(self) -> Optional[Sequence['outputs.WanMonitorDto']]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")


class AwaitableGetWanSlaResult(GetWanSlaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWanSlaResult(
            id=self.id,
            monitor_down_threshold=self.monitor_down_threshold,
            monitor_health_type=self.monitor_health_type,
            monitors=self.monitors,
            name=self.name)


def get_wan_sla(id: Optional[builtins.str] = None,
                site_name: Optional[builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWanSlaResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:wan-slas:getWanSla', __args__, opts=opts, typ=GetWanSlaResult).value

    return AwaitableGetWanSlaResult(
        id=pulumi.get(__ret__, 'id'),
        monitor_down_threshold=pulumi.get(__ret__, 'monitor_down_threshold'),
        monitor_health_type=pulumi.get(__ret__, 'monitor_health_type'),
        monitors=pulumi.get(__ret__, 'monitors'),
        name=pulumi.get(__ret__, 'name'))
def get_wan_sla_output(id: Optional[pulumi.Input[builtins.str]] = None,
                       site_name: Optional[pulumi.Input[builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWanSlaResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:wan-slas:getWanSla', __args__, opts=opts, typ=GetWanSlaResult)
    return __ret__.apply(lambda __response__: GetWanSlaResult(
        id=pulumi.get(__response__, 'id'),
        monitor_down_threshold=pulumi.get(__response__, 'monitor_down_threshold'),
        monitor_health_type=pulumi.get(__response__, 'monitor_health_type'),
        monitors=pulumi.get(__response__, 'monitors'),
        name=pulumi.get(__response__, 'name')))
