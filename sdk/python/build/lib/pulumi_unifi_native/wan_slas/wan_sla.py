# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['WanSlaArgs', 'WanSla']

@pulumi.input_type
class WanSlaArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 monitor_down_threshold: Optional[pulumi.Input[builtins.int]] = None,
                 monitor_health_type: Optional[pulumi.Input['MonitorHealthType']] = None,
                 monitors: Optional[pulumi.Input[Sequence[pulumi.Input['WanMonitorDtoArgs']]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a WanSla resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monitor_down_threshold is not None:
            pulumi.set(__self__, "monitor_down_threshold", monitor_down_threshold)
        if monitor_health_type is not None:
            pulumi.set(__self__, "monitor_health_type", monitor_health_type)
        if monitors is not None:
            pulumi.set(__self__, "monitors", monitors)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="monitorDownThreshold")
    def monitor_down_threshold(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "monitor_down_threshold")

    @monitor_down_threshold.setter
    def monitor_down_threshold(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "monitor_down_threshold", value)

    @property
    @pulumi.getter(name="monitorHealthType")
    def monitor_health_type(self) -> Optional[pulumi.Input['MonitorHealthType']]:
        return pulumi.get(self, "monitor_health_type")

    @monitor_health_type.setter
    def monitor_health_type(self, value: Optional[pulumi.Input['MonitorHealthType']]):
        pulumi.set(self, "monitor_health_type", value)

    @property
    @pulumi.getter
    def monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WanMonitorDtoArgs']]]]:
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WanMonitorDtoArgs']]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)


@pulumi.type_token("unifi-native:wan-slas:WanSla")
class WanSla(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 monitor_down_threshold: Optional[pulumi.Input[builtins.int]] = None,
                 monitor_health_type: Optional[pulumi.Input['MonitorHealthType']] = None,
                 monitors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WanMonitorDtoArgs', 'WanMonitorDtoArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a WanSla resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WanSlaArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WanSla resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WanSlaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WanSlaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 monitor_down_threshold: Optional[pulumi.Input[builtins.int]] = None,
                 monitor_health_type: Optional[pulumi.Input['MonitorHealthType']] = None,
                 monitors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WanMonitorDtoArgs', 'WanMonitorDtoArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WanSlaArgs.__new__(WanSlaArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["monitor_down_threshold"] = monitor_down_threshold
            __props__.__dict__["monitor_health_type"] = monitor_health_type
            __props__.__dict__["monitors"] = monitors
            __props__.__dict__["name"] = name
            __props__.__dict__["site_name"] = site_name
        super(WanSla, __self__).__init__(
            'unifi-native:wan-slas:WanSla',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'WanSla':
        """
        Get an existing WanSla resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = WanSlaArgs.__new__(WanSlaArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["monitor_down_threshold"] = None
        __props__.__dict__["monitor_health_type"] = None
        __props__.__dict__["monitors"] = None
        __props__.__dict__["name"] = None
        return WanSla(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monitorDownThreshold")
    def monitor_down_threshold(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "monitor_down_threshold")

    @property
    @pulumi.getter(name="monitorHealthType")
    def monitor_health_type(self) -> pulumi.Output[Optional['MonitorHealthType']]:
        return pulumi.get(self, "monitor_health_type")

    @property
    @pulumi.getter
    def monitors(self) -> pulumi.Output[Optional[Sequence['outputs.WanMonitorDto']]]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

