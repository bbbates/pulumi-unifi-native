# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetFirewallPolicyResult',
    'AwaitableGetFirewallPolicyResult',
    'get_firewall_policy',
    'get_firewall_policy_output',
]

@pulumi.output_type
class GetFirewallPolicyResult:
    def __init__(__self__, id=None, action=None, connection_state_type=None, connection_states=None, create_allow_respond=None, description=None, destination=None, enabled=None, icmp_typename=None, icmp_v6_typename=None, index=None, ip_version=None, logging=None, match_ip_sec=None, match_ip_sec_type=None, match_opposite_protocol=None, name=None, origin_id=None, origin_type=None, predefined=None, protocol=None, schedule=None, source=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if connection_state_type and not isinstance(connection_state_type, str):
            raise TypeError("Expected argument 'connection_state_type' to be a str")
        pulumi.set(__self__, "connection_state_type", connection_state_type)
        if connection_states and not isinstance(connection_states, list):
            raise TypeError("Expected argument 'connection_states' to be a list")
        pulumi.set(__self__, "connection_states", connection_states)
        if create_allow_respond and not isinstance(create_allow_respond, bool):
            raise TypeError("Expected argument 'create_allow_respond' to be a bool")
        pulumi.set(__self__, "create_allow_respond", create_allow_respond)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if destination and not isinstance(destination, dict):
            raise TypeError("Expected argument 'destination' to be a dict")
        pulumi.set(__self__, "destination", destination)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if icmp_typename and not isinstance(icmp_typename, str):
            raise TypeError("Expected argument 'icmp_typename' to be a str")
        pulumi.set(__self__, "icmp_typename", icmp_typename)
        if icmp_v6_typename and not isinstance(icmp_v6_typename, str):
            raise TypeError("Expected argument 'icmp_v6_typename' to be a str")
        pulumi.set(__self__, "icmp_v6_typename", icmp_v6_typename)
        if index and not isinstance(index, int):
            raise TypeError("Expected argument 'index' to be a int")
        pulumi.set(__self__, "index", index)
        if ip_version and not isinstance(ip_version, str):
            raise TypeError("Expected argument 'ip_version' to be a str")
        pulumi.set(__self__, "ip_version", ip_version)
        if logging and not isinstance(logging, bool):
            raise TypeError("Expected argument 'logging' to be a bool")
        pulumi.set(__self__, "logging", logging)
        if match_ip_sec and not isinstance(match_ip_sec, bool):
            raise TypeError("Expected argument 'match_ip_sec' to be a bool")
        pulumi.set(__self__, "match_ip_sec", match_ip_sec)
        if match_ip_sec_type and not isinstance(match_ip_sec_type, str):
            raise TypeError("Expected argument 'match_ip_sec_type' to be a str")
        pulumi.set(__self__, "match_ip_sec_type", match_ip_sec_type)
        if match_opposite_protocol and not isinstance(match_opposite_protocol, bool):
            raise TypeError("Expected argument 'match_opposite_protocol' to be a bool")
        pulumi.set(__self__, "match_opposite_protocol", match_opposite_protocol)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if origin_id and not isinstance(origin_id, str):
            raise TypeError("Expected argument 'origin_id' to be a str")
        pulumi.set(__self__, "origin_id", origin_id)
        if origin_type and not isinstance(origin_type, str):
            raise TypeError("Expected argument 'origin_type' to be a str")
        pulumi.set(__self__, "origin_type", origin_type)
        if predefined and not isinstance(predefined, bool):
            raise TypeError("Expected argument 'predefined' to be a bool")
        pulumi.set(__self__, "predefined", predefined)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if schedule and not isinstance(schedule, dict):
            raise TypeError("Expected argument 'schedule' to be a dict")
        pulumi.set(__self__, "schedule", schedule)
        if source and not isinstance(source, dict):
            raise TypeError("Expected argument 'source' to be a dict")
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def action(self) -> 'FirewallPolicyDtoAction':
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="connectionStateType")
    def connection_state_type(self) -> Optional['FirewallPolicyDtoConnectionStateType']:
        return pulumi.get(self, "connection_state_type")

    @property
    @pulumi.getter(name="connectionStates")
    def connection_states(self) -> Optional[Sequence['FirewallPolicyDtoConnectionStatesItem']]:
        return pulumi.get(self, "connection_states")

    @property
    @pulumi.getter(name="createAllowRespond")
    def create_allow_respond(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "create_allow_respond")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.FirewallPolicyDestinationDto':
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="icmpTypename")
    def icmp_typename(self) -> Optional['FirewallPolicyDtoIcmpTypename']:
        return pulumi.get(self, "icmp_typename")

    @property
    @pulumi.getter(name="icmpV6Typename")
    def icmp_v6_typename(self) -> Optional['FirewallPolicyDtoIcmpV6Typename']:
        return pulumi.get(self, "icmp_v6_typename")

    @property
    @pulumi.getter
    def index(self) -> Optional[builtins.int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> 'FirewallPolicyDtoIpVersion':
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def logging(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter(name="matchIpSec")
    def match_ip_sec(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "match_ip_sec")

    @property
    @pulumi.getter(name="matchIpSecType")
    def match_ip_sec_type(self) -> Optional['FirewallPolicyDtoMatchIpSecType']:
        return pulumi.get(self, "match_ip_sec_type")

    @property
    @pulumi.getter(name="matchOppositeProtocol")
    def match_opposite_protocol(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "match_opposite_protocol")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional['FirewallPolicyDtoOriginType']:
        return pulumi.get(self, "origin_type")

    @property
    @pulumi.getter
    def predefined(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "predefined")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def schedule(self) -> 'outputs.FirewallPolicyScheduleDto':
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def source(self) -> 'outputs.FirewallPolicySourceDto':
        return pulumi.get(self, "source")


class AwaitableGetFirewallPolicyResult(GetFirewallPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFirewallPolicyResult(
            id=self.id,
            action=self.action,
            connection_state_type=self.connection_state_type,
            connection_states=self.connection_states,
            create_allow_respond=self.create_allow_respond,
            description=self.description,
            destination=self.destination,
            enabled=self.enabled,
            icmp_typename=self.icmp_typename,
            icmp_v6_typename=self.icmp_v6_typename,
            index=self.index,
            ip_version=self.ip_version,
            logging=self.logging,
            match_ip_sec=self.match_ip_sec,
            match_ip_sec_type=self.match_ip_sec_type,
            match_opposite_protocol=self.match_opposite_protocol,
            name=self.name,
            origin_id=self.origin_id,
            origin_type=self.origin_type,
            predefined=self.predefined,
            protocol=self.protocol,
            schedule=self.schedule,
            source=self.source)


def get_firewall_policy(id: Optional[builtins.str] = None,
                        site_name: Optional[builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFirewallPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:firewall-policies:getFirewallPolicy', __args__, opts=opts, typ=GetFirewallPolicyResult).value

    return AwaitableGetFirewallPolicyResult(
        id=pulumi.get(__ret__, 'id'),
        action=pulumi.get(__ret__, 'action'),
        connection_state_type=pulumi.get(__ret__, 'connection_state_type'),
        connection_states=pulumi.get(__ret__, 'connection_states'),
        create_allow_respond=pulumi.get(__ret__, 'create_allow_respond'),
        description=pulumi.get(__ret__, 'description'),
        destination=pulumi.get(__ret__, 'destination'),
        enabled=pulumi.get(__ret__, 'enabled'),
        icmp_typename=pulumi.get(__ret__, 'icmp_typename'),
        icmp_v6_typename=pulumi.get(__ret__, 'icmp_v6_typename'),
        index=pulumi.get(__ret__, 'index'),
        ip_version=pulumi.get(__ret__, 'ip_version'),
        logging=pulumi.get(__ret__, 'logging'),
        match_ip_sec=pulumi.get(__ret__, 'match_ip_sec'),
        match_ip_sec_type=pulumi.get(__ret__, 'match_ip_sec_type'),
        match_opposite_protocol=pulumi.get(__ret__, 'match_opposite_protocol'),
        name=pulumi.get(__ret__, 'name'),
        origin_id=pulumi.get(__ret__, 'origin_id'),
        origin_type=pulumi.get(__ret__, 'origin_type'),
        predefined=pulumi.get(__ret__, 'predefined'),
        protocol=pulumi.get(__ret__, 'protocol'),
        schedule=pulumi.get(__ret__, 'schedule'),
        source=pulumi.get(__ret__, 'source'))
def get_firewall_policy_output(id: Optional[pulumi.Input[builtins.str]] = None,
                               site_name: Optional[pulumi.Input[builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFirewallPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:firewall-policies:getFirewallPolicy', __args__, opts=opts, typ=GetFirewallPolicyResult)
    return __ret__.apply(lambda __response__: GetFirewallPolicyResult(
        id=pulumi.get(__response__, 'id'),
        action=pulumi.get(__response__, 'action'),
        connection_state_type=pulumi.get(__response__, 'connection_state_type'),
        connection_states=pulumi.get(__response__, 'connection_states'),
        create_allow_respond=pulumi.get(__response__, 'create_allow_respond'),
        description=pulumi.get(__response__, 'description'),
        destination=pulumi.get(__response__, 'destination'),
        enabled=pulumi.get(__response__, 'enabled'),
        icmp_typename=pulumi.get(__response__, 'icmp_typename'),
        icmp_v6_typename=pulumi.get(__response__, 'icmp_v6_typename'),
        index=pulumi.get(__response__, 'index'),
        ip_version=pulumi.get(__response__, 'ip_version'),
        logging=pulumi.get(__response__, 'logging'),
        match_ip_sec=pulumi.get(__response__, 'match_ip_sec'),
        match_ip_sec_type=pulumi.get(__response__, 'match_ip_sec_type'),
        match_opposite_protocol=pulumi.get(__response__, 'match_opposite_protocol'),
        name=pulumi.get(__response__, 'name'),
        origin_id=pulumi.get(__response__, 'origin_id'),
        origin_type=pulumi.get(__response__, 'origin_type'),
        predefined=pulumi.get(__response__, 'predefined'),
        protocol=pulumi.get(__response__, 'protocol'),
        schedule=pulumi.get(__response__, 'schedule'),
        source=pulumi.get(__response__, 'source')))
