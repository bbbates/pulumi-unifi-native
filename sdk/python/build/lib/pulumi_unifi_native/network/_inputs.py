# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'IgmpQuerierSwitchDtoArgs',
    'IgmpQuerierSwitchDtoArgsDict',
    'WanGroupDtoArgs',
    'WanGroupDtoArgsDict',
]

MYPY = False

if not MYPY:
    class IgmpQuerierSwitchDtoArgsDict(TypedDict):
        mac: pulumi.Input[builtins.str]
        network_id: pulumi.Input[builtins.str]
        querier_address: NotRequired[pulumi.Input[builtins.str]]
elif False:
    IgmpQuerierSwitchDtoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IgmpQuerierSwitchDtoArgs:
    def __init__(__self__, *,
                 mac: pulumi.Input[builtins.str],
                 network_id: pulumi.Input[builtins.str],
                 querier_address: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "network_id", network_id)
        if querier_address is not None:
            pulumi.set(__self__, "querier_address", querier_address)

    @property
    @pulumi.getter
    def mac(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="querierAddress")
    def querier_address(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "querier_address")

    @querier_address.setter
    def querier_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "querier_address", value)


if not MYPY:
    class WanGroupDtoArgsDict(TypedDict):
        wan_id: NotRequired[pulumi.Input[builtins.str]]
        wan_networkgroup: NotRequired[pulumi.Input['WanGroupDtoWanNetworkgroup']]
elif False:
    WanGroupDtoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WanGroupDtoArgs:
    def __init__(__self__, *,
                 wan_id: Optional[pulumi.Input[builtins.str]] = None,
                 wan_networkgroup: Optional[pulumi.Input['WanGroupDtoWanNetworkgroup']] = None):
        if wan_id is not None:
            pulumi.set(__self__, "wan_id", wan_id)
        if wan_networkgroup is not None:
            pulumi.set(__self__, "wan_networkgroup", wan_networkgroup)

    @property
    @pulumi.getter(name="wanId")
    def wan_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_id")

    @wan_id.setter
    def wan_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_id", value)

    @property
    @pulumi.getter(name="wanNetworkgroup")
    def wan_networkgroup(self) -> Optional[pulumi.Input['WanGroupDtoWanNetworkgroup']]:
        return pulumi.get(self, "wan_networkgroup")

    @wan_networkgroup.setter
    def wan_networkgroup(self, value: Optional[pulumi.Input['WanGroupDtoWanNetworkgroup']]):
        pulumi.set(self, "wan_networkgroup", value)


