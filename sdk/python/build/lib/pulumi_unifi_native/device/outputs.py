# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'Device',
    'DeviceConfigNetwork',
    'DeviceEtherLighting',
    'DeviceEthernetOverrides',
    'DeviceLogDto',
    'DeviceOutletOverrides',
    'DevicePortOverrides',
    'DeviceQOSMarking',
    'DeviceQOSMatching',
    'DeviceQOSPolicies',
    'DeviceQOSProfile',
    'DeviceRadioIDentifiers',
    'DeviceRadioTable',
    'DeviceRpsOverride',
    'DeviceRpsPortTable',
    'Meta',
    'UnifiDeviceDto',
]

@pulumi.output_type
class Device(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 adopted: Optional[builtins.bool] = None,
                 afc_enabled: Optional[builtins.bool] = None,
                 atf_enabled: Optional[builtins.bool] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 bandsteering_mode: Optional[builtins.str] = None,
                 baresip_auth_user: Optional[builtins.str] = None,
                 baresip_enabled: Optional[builtins.bool] = None,
                 baresip_extension: Optional[builtins.str] = None,
                 config_network: Optional['outputs.DeviceConfigNetwork'] = None,
                 disabled: Optional[builtins.bool] = None,
                 dot1x_fallback_networkconf_id: Optional[builtins.str] = None,
                 dot1x_portctrl_enabled: Optional[builtins.bool] = None,
                 dpi_enabled: Optional[builtins.bool] = None,
                 ether_lighting: Optional['outputs.DeviceEtherLighting'] = None,
                 ethernet_overrides: Optional[Sequence['outputs.DeviceEthernetOverrides']] = None,
                 fan_mode_override: Optional[builtins.str] = None,
                 flowctrl_enabled: Optional[builtins.bool] = None,
                 gateway_vrrp_mode: Optional[builtins.str] = None,
                 gateway_vrrp_priority: Optional[builtins.int] = None,
                 green_ap_enabled: Optional[builtins.bool] = None,
                 height_in_meters: Optional[builtins.float] = None,
                 hostname: Optional[builtins.str] = None,
                 jumboframe_enabled: Optional[builtins.bool] = None,
                 lcm_brightness: Optional[builtins.int] = None,
                 lcm_brightness_override: Optional[builtins.bool] = None,
                 lcm_idle_timeout: Optional[builtins.int] = None,
                 lcm_idle_timeout_override: Optional[builtins.bool] = None,
                 lcm_night_mode_begins: Optional[builtins.str] = None,
                 lcm_night_mode_ends: Optional[builtins.str] = None,
                 lcm_orientation_override: Optional[builtins.int] = None,
                 lcm_settings_restricted_access: Optional[builtins.bool] = None,
                 lcm_tracker_enabled: Optional[builtins.bool] = None,
                 lcm_tracker_seed: Optional[builtins.str] = None,
                 led_override: Optional[builtins.str] = None,
                 led_override_color: Optional[builtins.str] = None,
                 led_override_color_brightness: Optional[builtins.int] = None,
                 locked: Optional[builtins.bool] = None,
                 lowpfmode_override: Optional[builtins.bool] = None,
                 lte_apn: Optional[builtins.str] = None,
                 lte_auth_type: Optional[builtins.str] = None,
                 lte_data_limit_enabled: Optional[builtins.bool] = None,
                 lte_data_warning_enabled: Optional[builtins.bool] = None,
                 lte_ext_ant: Optional[builtins.bool] = None,
                 lte_hard_limit: Optional[builtins.int] = None,
                 lte_password: Optional[builtins.str] = None,
                 lte_poe: Optional[builtins.bool] = None,
                 lte_roaming_allowed: Optional[builtins.bool] = None,
                 lte_sim_pin: Optional[builtins.int] = None,
                 lte_soft_limit: Optional[builtins.int] = None,
                 lte_username: Optional[builtins.str] = None,
                 mac: Optional[builtins.str] = None,
                 map_id: Optional[builtins.str] = None,
                 mesh_sta_vap_enabled: Optional[builtins.bool] = None,
                 mgmt_network_id: Optional[builtins.str] = None,
                 model: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 outdoor_mode_override: Optional[builtins.str] = None,
                 outlet_enabled: Optional[builtins.bool] = None,
                 outlet_overrides: Optional[Sequence['outputs.DeviceOutletOverrides']] = None,
                 outlet_power_cycle_enabled: Optional[builtins.bool] = None,
                 peer_to_peer_mode: Optional[builtins.str] = None,
                 poe_mode: Optional[builtins.str] = None,
                 port_overrides: Optional[Sequence['outputs.DevicePortOverrides']] = None,
                 power_source_ctrl: Optional[builtins.str] = None,
                 power_source_ctrl_budget: Optional[builtins.int] = None,
                 power_source_ctrl_enabled: Optional[builtins.bool] = None,
                 ptmp_ap_mac: Optional[builtins.str] = None,
                 ptp_ap_mac: Optional[builtins.str] = None,
                 radio_table: Optional[Sequence['outputs.DeviceRadioTable']] = None,
                 radiusprofile_id: Optional[builtins.str] = None,
                 resetbtn_enabled: Optional[builtins.str] = None,
                 rps_override: Optional['outputs.DeviceRpsOverride'] = None,
                 site_id: Optional[builtins.str] = None,
                 snmp_contact: Optional[builtins.str] = None,
                 snmp_location: Optional[builtins.str] = None,
                 state: Optional[builtins.int] = None,
                 station_mode: Optional[builtins.str] = None,
                 stp_priority: Optional[builtins.str] = None,
                 stp_version: Optional[builtins.str] = None,
                 switch_vlan_enabled: Optional[builtins.bool] = None,
                 type: Optional[builtins.str] = None,
                 ubb_pair_name: Optional[builtins.str] = None,
                 volume: Optional[builtins.int] = None,
                 x: Optional[builtins.float] = None,
                 x_baresip_password: Optional[builtins.str] = None,
                 y: Optional[builtins.float] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if adopted is not None:
            pulumi.set(__self__, "adopted", adopted)
        if afc_enabled is not None:
            pulumi.set(__self__, "afc_enabled", afc_enabled)
        if atf_enabled is not None:
            pulumi.set(__self__, "atf_enabled", atf_enabled)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if bandsteering_mode is not None:
            pulumi.set(__self__, "bandsteering_mode", bandsteering_mode)
        if baresip_auth_user is not None:
            pulumi.set(__self__, "baresip_auth_user", baresip_auth_user)
        if baresip_enabled is not None:
            pulumi.set(__self__, "baresip_enabled", baresip_enabled)
        if baresip_extension is not None:
            pulumi.set(__self__, "baresip_extension", baresip_extension)
        if config_network is not None:
            pulumi.set(__self__, "config_network", config_network)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if dot1x_fallback_networkconf_id is not None:
            pulumi.set(__self__, "dot1x_fallback_networkconf_id", dot1x_fallback_networkconf_id)
        if dot1x_portctrl_enabled is not None:
            pulumi.set(__self__, "dot1x_portctrl_enabled", dot1x_portctrl_enabled)
        if dpi_enabled is not None:
            pulumi.set(__self__, "dpi_enabled", dpi_enabled)
        if ether_lighting is not None:
            pulumi.set(__self__, "ether_lighting", ether_lighting)
        if ethernet_overrides is not None:
            pulumi.set(__self__, "ethernet_overrides", ethernet_overrides)
        if fan_mode_override is not None:
            pulumi.set(__self__, "fan_mode_override", fan_mode_override)
        if flowctrl_enabled is not None:
            pulumi.set(__self__, "flowctrl_enabled", flowctrl_enabled)
        if gateway_vrrp_mode is not None:
            pulumi.set(__self__, "gateway_vrrp_mode", gateway_vrrp_mode)
        if gateway_vrrp_priority is not None:
            pulumi.set(__self__, "gateway_vrrp_priority", gateway_vrrp_priority)
        if green_ap_enabled is not None:
            pulumi.set(__self__, "green_ap_enabled", green_ap_enabled)
        if height_in_meters is not None:
            pulumi.set(__self__, "height_in_meters", height_in_meters)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if jumboframe_enabled is not None:
            pulumi.set(__self__, "jumboframe_enabled", jumboframe_enabled)
        if lcm_brightness is not None:
            pulumi.set(__self__, "lcm_brightness", lcm_brightness)
        if lcm_brightness_override is not None:
            pulumi.set(__self__, "lcm_brightness_override", lcm_brightness_override)
        if lcm_idle_timeout is not None:
            pulumi.set(__self__, "lcm_idle_timeout", lcm_idle_timeout)
        if lcm_idle_timeout_override is not None:
            pulumi.set(__self__, "lcm_idle_timeout_override", lcm_idle_timeout_override)
        if lcm_night_mode_begins is not None:
            pulumi.set(__self__, "lcm_night_mode_begins", lcm_night_mode_begins)
        if lcm_night_mode_ends is not None:
            pulumi.set(__self__, "lcm_night_mode_ends", lcm_night_mode_ends)
        if lcm_orientation_override is not None:
            pulumi.set(__self__, "lcm_orientation_override", lcm_orientation_override)
        if lcm_settings_restricted_access is not None:
            pulumi.set(__self__, "lcm_settings_restricted_access", lcm_settings_restricted_access)
        if lcm_tracker_enabled is not None:
            pulumi.set(__self__, "lcm_tracker_enabled", lcm_tracker_enabled)
        if lcm_tracker_seed is not None:
            pulumi.set(__self__, "lcm_tracker_seed", lcm_tracker_seed)
        if led_override is not None:
            pulumi.set(__self__, "led_override", led_override)
        if led_override_color is not None:
            pulumi.set(__self__, "led_override_color", led_override_color)
        if led_override_color_brightness is not None:
            pulumi.set(__self__, "led_override_color_brightness", led_override_color_brightness)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lowpfmode_override is not None:
            pulumi.set(__self__, "lowpfmode_override", lowpfmode_override)
        if lte_apn is not None:
            pulumi.set(__self__, "lte_apn", lte_apn)
        if lte_auth_type is not None:
            pulumi.set(__self__, "lte_auth_type", lte_auth_type)
        if lte_data_limit_enabled is not None:
            pulumi.set(__self__, "lte_data_limit_enabled", lte_data_limit_enabled)
        if lte_data_warning_enabled is not None:
            pulumi.set(__self__, "lte_data_warning_enabled", lte_data_warning_enabled)
        if lte_ext_ant is not None:
            pulumi.set(__self__, "lte_ext_ant", lte_ext_ant)
        if lte_hard_limit is not None:
            pulumi.set(__self__, "lte_hard_limit", lte_hard_limit)
        if lte_password is not None:
            pulumi.set(__self__, "lte_password", lte_password)
        if lte_poe is not None:
            pulumi.set(__self__, "lte_poe", lte_poe)
        if lte_roaming_allowed is not None:
            pulumi.set(__self__, "lte_roaming_allowed", lte_roaming_allowed)
        if lte_sim_pin is not None:
            pulumi.set(__self__, "lte_sim_pin", lte_sim_pin)
        if lte_soft_limit is not None:
            pulumi.set(__self__, "lte_soft_limit", lte_soft_limit)
        if lte_username is not None:
            pulumi.set(__self__, "lte_username", lte_username)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if map_id is not None:
            pulumi.set(__self__, "map_id", map_id)
        if mesh_sta_vap_enabled is not None:
            pulumi.set(__self__, "mesh_sta_vap_enabled", mesh_sta_vap_enabled)
        if mgmt_network_id is not None:
            pulumi.set(__self__, "mgmt_network_id", mgmt_network_id)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if outdoor_mode_override is not None:
            pulumi.set(__self__, "outdoor_mode_override", outdoor_mode_override)
        if outlet_enabled is not None:
            pulumi.set(__self__, "outlet_enabled", outlet_enabled)
        if outlet_overrides is not None:
            pulumi.set(__self__, "outlet_overrides", outlet_overrides)
        if outlet_power_cycle_enabled is not None:
            pulumi.set(__self__, "outlet_power_cycle_enabled", outlet_power_cycle_enabled)
        if peer_to_peer_mode is not None:
            pulumi.set(__self__, "peer_to_peer_mode", peer_to_peer_mode)
        if poe_mode is not None:
            pulumi.set(__self__, "poe_mode", poe_mode)
        if port_overrides is not None:
            pulumi.set(__self__, "port_overrides", port_overrides)
        if power_source_ctrl is not None:
            pulumi.set(__self__, "power_source_ctrl", power_source_ctrl)
        if power_source_ctrl_budget is not None:
            pulumi.set(__self__, "power_source_ctrl_budget", power_source_ctrl_budget)
        if power_source_ctrl_enabled is not None:
            pulumi.set(__self__, "power_source_ctrl_enabled", power_source_ctrl_enabled)
        if ptmp_ap_mac is not None:
            pulumi.set(__self__, "ptmp_ap_mac", ptmp_ap_mac)
        if ptp_ap_mac is not None:
            pulumi.set(__self__, "ptp_ap_mac", ptp_ap_mac)
        if radio_table is not None:
            pulumi.set(__self__, "radio_table", radio_table)
        if radiusprofile_id is not None:
            pulumi.set(__self__, "radiusprofile_id", radiusprofile_id)
        if resetbtn_enabled is not None:
            pulumi.set(__self__, "resetbtn_enabled", resetbtn_enabled)
        if rps_override is not None:
            pulumi.set(__self__, "rps_override", rps_override)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if snmp_contact is not None:
            pulumi.set(__self__, "snmp_contact", snmp_contact)
        if snmp_location is not None:
            pulumi.set(__self__, "snmp_location", snmp_location)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if station_mode is not None:
            pulumi.set(__self__, "station_mode", station_mode)
        if stp_priority is not None:
            pulumi.set(__self__, "stp_priority", stp_priority)
        if stp_version is not None:
            pulumi.set(__self__, "stp_version", stp_version)
        if switch_vlan_enabled is not None:
            pulumi.set(__self__, "switch_vlan_enabled", switch_vlan_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if ubb_pair_name is not None:
            pulumi.set(__self__, "ubb_pair_name", ubb_pair_name)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_baresip_password is not None:
            pulumi.set(__self__, "x_baresip_password", x_baresip_password)
        if y is not None:
            pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def adopted(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "adopted")

    @property
    @pulumi.getter(name="afcEnabled")
    def afc_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "afc_enabled")

    @property
    @pulumi.getter(name="atfEnabled")
    def atf_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "atf_enabled")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="bandsteeringMode")
    def bandsteering_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "bandsteering_mode")

    @property
    @pulumi.getter(name="baresipAuthUser")
    def baresip_auth_user(self) -> Optional[builtins.str]:
        return pulumi.get(self, "baresip_auth_user")

    @property
    @pulumi.getter(name="baresipEnabled")
    def baresip_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "baresip_enabled")

    @property
    @pulumi.getter(name="baresipExtension")
    def baresip_extension(self) -> Optional[builtins.str]:
        return pulumi.get(self, "baresip_extension")

    @property
    @pulumi.getter(name="configNetwork")
    def config_network(self) -> Optional['outputs.DeviceConfigNetwork']:
        return pulumi.get(self, "config_network")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="dot1xFallbackNetworkconfId")
    def dot1x_fallback_networkconf_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dot1x_fallback_networkconf_id")

    @property
    @pulumi.getter(name="dot1xPortctrlEnabled")
    def dot1x_portctrl_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dot1x_portctrl_enabled")

    @property
    @pulumi.getter(name="dpiEnabled")
    def dpi_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dpi_enabled")

    @property
    @pulumi.getter(name="etherLighting")
    def ether_lighting(self) -> Optional['outputs.DeviceEtherLighting']:
        return pulumi.get(self, "ether_lighting")

    @property
    @pulumi.getter(name="ethernetOverrides")
    def ethernet_overrides(self) -> Optional[Sequence['outputs.DeviceEthernetOverrides']]:
        return pulumi.get(self, "ethernet_overrides")

    @property
    @pulumi.getter(name="fanModeOverride")
    def fan_mode_override(self) -> Optional[builtins.str]:
        return pulumi.get(self, "fan_mode_override")

    @property
    @pulumi.getter(name="flowctrlEnabled")
    def flowctrl_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "flowctrl_enabled")

    @property
    @pulumi.getter(name="gatewayVrrpMode")
    def gateway_vrrp_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "gateway_vrrp_mode")

    @property
    @pulumi.getter(name="gatewayVrrpPriority")
    def gateway_vrrp_priority(self) -> Optional[builtins.int]:
        return pulumi.get(self, "gateway_vrrp_priority")

    @property
    @pulumi.getter(name="greenApEnabled")
    def green_ap_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "green_ap_enabled")

    @property
    @pulumi.getter(name="heightInMeters")
    def height_in_meters(self) -> Optional[builtins.float]:
        return pulumi.get(self, "height_in_meters")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[builtins.str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="jumboframeEnabled")
    def jumboframe_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "jumboframe_enabled")

    @property
    @pulumi.getter(name="lcmBrightness")
    def lcm_brightness(self) -> Optional[builtins.int]:
        return pulumi.get(self, "lcm_brightness")

    @property
    @pulumi.getter(name="lcmBrightnessOverride")
    def lcm_brightness_override(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "lcm_brightness_override")

    @property
    @pulumi.getter(name="lcmIdleTimeout")
    def lcm_idle_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "lcm_idle_timeout")

    @property
    @pulumi.getter(name="lcmIdleTimeoutOverride")
    def lcm_idle_timeout_override(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "lcm_idle_timeout_override")

    @property
    @pulumi.getter(name="lcmNightModeBegins")
    def lcm_night_mode_begins(self) -> Optional[builtins.str]:
        return pulumi.get(self, "lcm_night_mode_begins")

    @property
    @pulumi.getter(name="lcmNightModeEnds")
    def lcm_night_mode_ends(self) -> Optional[builtins.str]:
        return pulumi.get(self, "lcm_night_mode_ends")

    @property
    @pulumi.getter(name="lcmOrientationOverride")
    def lcm_orientation_override(self) -> Optional[builtins.int]:
        return pulumi.get(self, "lcm_orientation_override")

    @property
    @pulumi.getter(name="lcmSettingsRestrictedAccess")
    def lcm_settings_restricted_access(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "lcm_settings_restricted_access")

    @property
    @pulumi.getter(name="lcmTrackerEnabled")
    def lcm_tracker_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "lcm_tracker_enabled")

    @property
    @pulumi.getter(name="lcmTrackerSeed")
    def lcm_tracker_seed(self) -> Optional[builtins.str]:
        return pulumi.get(self, "lcm_tracker_seed")

    @property
    @pulumi.getter(name="ledOverride")
    def led_override(self) -> Optional[builtins.str]:
        return pulumi.get(self, "led_override")

    @property
    @pulumi.getter(name="ledOverrideColor")
    def led_override_color(self) -> Optional[builtins.str]:
        return pulumi.get(self, "led_override_color")

    @property
    @pulumi.getter(name="ledOverrideColorBrightness")
    def led_override_color_brightness(self) -> Optional[builtins.int]:
        return pulumi.get(self, "led_override_color_brightness")

    @property
    @pulumi.getter
    def locked(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowpfmodeOverride")
    def lowpfmode_override(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "lowpfmode_override")

    @property
    @pulumi.getter(name="lteApn")
    def lte_apn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "lte_apn")

    @property
    @pulumi.getter(name="lteAuthType")
    def lte_auth_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "lte_auth_type")

    @property
    @pulumi.getter(name="lteDataLimitEnabled")
    def lte_data_limit_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "lte_data_limit_enabled")

    @property
    @pulumi.getter(name="lteDataWarningEnabled")
    def lte_data_warning_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "lte_data_warning_enabled")

    @property
    @pulumi.getter(name="lteExtAnt")
    def lte_ext_ant(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "lte_ext_ant")

    @property
    @pulumi.getter(name="lteHardLimit")
    def lte_hard_limit(self) -> Optional[builtins.int]:
        return pulumi.get(self, "lte_hard_limit")

    @property
    @pulumi.getter(name="ltePassword")
    def lte_password(self) -> Optional[builtins.str]:
        return pulumi.get(self, "lte_password")

    @property
    @pulumi.getter(name="ltePoe")
    def lte_poe(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "lte_poe")

    @property
    @pulumi.getter(name="lteRoamingAllowed")
    def lte_roaming_allowed(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "lte_roaming_allowed")

    @property
    @pulumi.getter(name="lteSimPin")
    def lte_sim_pin(self) -> Optional[builtins.int]:
        return pulumi.get(self, "lte_sim_pin")

    @property
    @pulumi.getter(name="lteSoftLimit")
    def lte_soft_limit(self) -> Optional[builtins.int]:
        return pulumi.get(self, "lte_soft_limit")

    @property
    @pulumi.getter(name="lteUsername")
    def lte_username(self) -> Optional[builtins.str]:
        return pulumi.get(self, "lte_username")

    @property
    @pulumi.getter
    def mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="mapId")
    def map_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "map_id")

    @property
    @pulumi.getter(name="meshStaVapEnabled")
    def mesh_sta_vap_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "mesh_sta_vap_enabled")

    @property
    @pulumi.getter(name="mgmtNetworkId")
    def mgmt_network_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mgmt_network_id")

    @property
    @pulumi.getter
    def model(self) -> Optional[builtins.str]:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outdoorModeOverride")
    def outdoor_mode_override(self) -> Optional[builtins.str]:
        return pulumi.get(self, "outdoor_mode_override")

    @property
    @pulumi.getter(name="outletEnabled")
    def outlet_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "outlet_enabled")

    @property
    @pulumi.getter(name="outletOverrides")
    def outlet_overrides(self) -> Optional[Sequence['outputs.DeviceOutletOverrides']]:
        return pulumi.get(self, "outlet_overrides")

    @property
    @pulumi.getter(name="outletPowerCycleEnabled")
    def outlet_power_cycle_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "outlet_power_cycle_enabled")

    @property
    @pulumi.getter(name="peerToPeerMode")
    def peer_to_peer_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "peer_to_peer_mode")

    @property
    @pulumi.getter(name="poeMode")
    def poe_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "poe_mode")

    @property
    @pulumi.getter(name="portOverrides")
    def port_overrides(self) -> Optional[Sequence['outputs.DevicePortOverrides']]:
        return pulumi.get(self, "port_overrides")

    @property
    @pulumi.getter(name="powerSourceCtrl")
    def power_source_ctrl(self) -> Optional[builtins.str]:
        return pulumi.get(self, "power_source_ctrl")

    @property
    @pulumi.getter(name="powerSourceCtrlBudget")
    def power_source_ctrl_budget(self) -> Optional[builtins.int]:
        return pulumi.get(self, "power_source_ctrl_budget")

    @property
    @pulumi.getter(name="powerSourceCtrlEnabled")
    def power_source_ctrl_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "power_source_ctrl_enabled")

    @property
    @pulumi.getter(name="ptmpApMac")
    def ptmp_ap_mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ptmp_ap_mac")

    @property
    @pulumi.getter(name="ptpApMac")
    def ptp_ap_mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ptp_ap_mac")

    @property
    @pulumi.getter(name="radioTable")
    def radio_table(self) -> Optional[Sequence['outputs.DeviceRadioTable']]:
        return pulumi.get(self, "radio_table")

    @property
    @pulumi.getter(name="radiusprofileId")
    def radiusprofile_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "radiusprofile_id")

    @property
    @pulumi.getter(name="resetbtnEnabled")
    def resetbtn_enabled(self) -> Optional[builtins.str]:
        return pulumi.get(self, "resetbtn_enabled")

    @property
    @pulumi.getter(name="rpsOverride")
    def rps_override(self) -> Optional['outputs.DeviceRpsOverride']:
        return pulumi.get(self, "rps_override")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="snmpContact")
    def snmp_contact(self) -> Optional[builtins.str]:
        return pulumi.get(self, "snmp_contact")

    @property
    @pulumi.getter(name="snmpLocation")
    def snmp_location(self) -> Optional[builtins.str]:
        return pulumi.get(self, "snmp_location")

    @property
    @pulumi.getter
    def state(self) -> Optional[builtins.int]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stationMode")
    def station_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "station_mode")

    @property
    @pulumi.getter(name="stpPriority")
    def stp_priority(self) -> Optional[builtins.str]:
        return pulumi.get(self, "stp_priority")

    @property
    @pulumi.getter(name="stpVersion")
    def stp_version(self) -> Optional[builtins.str]:
        return pulumi.get(self, "stp_version")

    @property
    @pulumi.getter(name="switchVlanEnabled")
    def switch_vlan_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "switch_vlan_enabled")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="ubbPairName")
    def ubb_pair_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ubb_pair_name")

    @property
    @pulumi.getter
    def volume(self) -> Optional[builtins.int]:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter
    def x(self) -> Optional[builtins.float]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xBaresipPassword")
    def x_baresip_password(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_baresip_password")

    @property
    @pulumi.getter
    def y(self) -> Optional[builtins.float]:
        return pulumi.get(self, "y")


@pulumi.output_type
class DeviceConfigNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bondingEnabled":
            suggest = "bonding_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceConfigNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceConfigNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceConfigNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bonding_enabled: Optional[builtins.bool] = None,
                 dns1: Optional[builtins.str] = None,
                 dns2: Optional[builtins.str] = None,
                 dnssuffix: Optional[builtins.str] = None,
                 gateway: Optional[builtins.str] = None,
                 ip: Optional[builtins.str] = None,
                 netmask: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        if bonding_enabled is not None:
            pulumi.set(__self__, "bonding_enabled", bonding_enabled)
        if dns1 is not None:
            pulumi.set(__self__, "dns1", dns1)
        if dns2 is not None:
            pulumi.set(__self__, "dns2", dns2)
        if dnssuffix is not None:
            pulumi.set(__self__, "dnssuffix", dnssuffix)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bondingEnabled")
    def bonding_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "bonding_enabled")

    @property
    @pulumi.getter
    def dns1(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dns1")

    @property
    @pulumi.getter
    def dns2(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dns2")

    @property
    @pulumi.getter
    def dnssuffix(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dnssuffix")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[builtins.str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[builtins.str]:
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DeviceEtherLighting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ledMode":
            suggest = "led_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceEtherLighting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceEtherLighting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceEtherLighting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 behavior: Optional[builtins.str] = None,
                 brightness: Optional[builtins.int] = None,
                 led_mode: Optional[builtins.str] = None,
                 mode: Optional[builtins.str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if brightness is not None:
            pulumi.set(__self__, "brightness", brightness)
        if led_mode is not None:
            pulumi.set(__self__, "led_mode", led_mode)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[builtins.str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def brightness(self) -> Optional[builtins.int]:
        return pulumi.get(self, "brightness")

    @property
    @pulumi.getter(name="ledMode")
    def led_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "led_mode")

    @property
    @pulumi.getter
    def mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class DeviceEthernetOverrides(dict):
    def __init__(__self__, *,
                 disabled: Optional[builtins.bool] = None,
                 ifname: Optional[builtins.str] = None,
                 networkgroup: Optional[builtins.str] = None):
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if networkgroup is not None:
            pulumi.set(__self__, "networkgroup", networkgroup)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def ifname(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ifname")

    @property
    @pulumi.getter
    def networkgroup(self) -> Optional[builtins.str]:
        return pulumi.get(self, "networkgroup")


@pulumi.output_type
class DeviceLogDto(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 key: Optional['DeviceLogDtoKey'] = None,
                 message: Optional[builtins.str] = None,
                 message_raw: Optional[builtins.str] = None,
                 parameters: Optional[Any] = None,
                 target: Optional['DeviceLogDtoTarget'] = None,
                 timestamp: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if message_raw is not None:
            pulumi.set(__self__, "message_raw", message_raw)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> Optional['DeviceLogDtoKey']:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def message(self) -> Optional[builtins.str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="messageRaw")
    def message_raw(self) -> Optional[builtins.str]:
        return pulumi.get(self, "message_raw")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Any]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def target(self) -> Optional['DeviceLogDtoTarget']:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[builtins.int]:
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class DeviceOutletOverrides(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cycleEnabled":
            suggest = "cycle_enabled"
        elif key == "relayState":
            suggest = "relay_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceOutletOverrides. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceOutletOverrides.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceOutletOverrides.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cycle_enabled: Optional[builtins.bool] = None,
                 index: Optional[builtins.int] = None,
                 name: Optional[builtins.str] = None,
                 relay_state: Optional[builtins.bool] = None):
        if cycle_enabled is not None:
            pulumi.set(__self__, "cycle_enabled", cycle_enabled)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if relay_state is not None:
            pulumi.set(__self__, "relay_state", relay_state)

    @property
    @pulumi.getter(name="cycleEnabled")
    def cycle_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "cycle_enabled")

    @property
    @pulumi.getter
    def index(self) -> Optional[builtins.int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="relayState")
    def relay_state(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "relay_state")


@pulumi.output_type
class DevicePortOverrides(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregateNumPorts":
            suggest = "aggregate_num_ports"
        elif key == "dot1xCtrl":
            suggest = "dot1x_ctrl"
        elif key == "dot1xIdleTimeout":
            suggest = "dot1x_idle_timeout"
        elif key == "egressRateLimitKbps":
            suggest = "egress_rate_limit_kbps"
        elif key == "egressRateLimitKbpsEnabled":
            suggest = "egress_rate_limit_kbps_enabled"
        elif key == "excludedNetworkconfIds":
            suggest = "excluded_networkconf_ids"
        elif key == "fecMode":
            suggest = "fec_mode"
        elif key == "fullDuplex":
            suggest = "full_duplex"
        elif key == "lldpmedEnabled":
            suggest = "lldpmed_enabled"
        elif key == "lldpmedNotifyEnabled":
            suggest = "lldpmed_notify_enabled"
        elif key == "mirrorPortIdx":
            suggest = "mirror_port_idx"
        elif key == "multicastRouterNetworkconfIds":
            suggest = "multicast_router_networkconf_ids"
        elif key == "nativeNetworkconfId":
            suggest = "native_networkconf_id"
        elif key == "opMode":
            suggest = "op_mode"
        elif key == "poeMode":
            suggest = "poe_mode"
        elif key == "portIdx":
            suggest = "port_idx"
        elif key == "portKeepaliveEnabled":
            suggest = "port_keepalive_enabled"
        elif key == "portSecurityEnabled":
            suggest = "port_security_enabled"
        elif key == "portSecurityMacAddress":
            suggest = "port_security_mac_address"
        elif key == "portconfId":
            suggest = "portconf_id"
        elif key == "priorityQueue1Level":
            suggest = "priority_queue1_level"
        elif key == "priorityQueue2Level":
            suggest = "priority_queue2_level"
        elif key == "priorityQueue3Level":
            suggest = "priority_queue3_level"
        elif key == "priorityQueue4Level":
            suggest = "priority_queue4_level"
        elif key == "qosProfile":
            suggest = "qos_profile"
        elif key == "settingPreference":
            suggest = "setting_preference"
        elif key == "stormctrlBcastEnabled":
            suggest = "stormctrl_bcast_enabled"
        elif key == "stormctrlBcastLevel":
            suggest = "stormctrl_bcast_level"
        elif key == "stormctrlBcastRate":
            suggest = "stormctrl_bcast_rate"
        elif key == "stormctrlMcastEnabled":
            suggest = "stormctrl_mcast_enabled"
        elif key == "stormctrlMcastLevel":
            suggest = "stormctrl_mcast_level"
        elif key == "stormctrlMcastRate":
            suggest = "stormctrl_mcast_rate"
        elif key == "stormctrlType":
            suggest = "stormctrl_type"
        elif key == "stormctrlUcastEnabled":
            suggest = "stormctrl_ucast_enabled"
        elif key == "stormctrlUcastLevel":
            suggest = "stormctrl_ucast_level"
        elif key == "stormctrlUcastRate":
            suggest = "stormctrl_ucast_rate"
        elif key == "stpPortMode":
            suggest = "stp_port_mode"
        elif key == "taggedVlanMgmt":
            suggest = "tagged_vlan_mgmt"
        elif key == "voiceNetworkconfId":
            suggest = "voice_networkconf_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DevicePortOverrides. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DevicePortOverrides.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DevicePortOverrides.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregate_num_ports: Optional[builtins.int] = None,
                 autoneg: Optional[builtins.bool] = None,
                 dot1x_ctrl: Optional[builtins.str] = None,
                 dot1x_idle_timeout: Optional[builtins.int] = None,
                 egress_rate_limit_kbps: Optional[builtins.int] = None,
                 egress_rate_limit_kbps_enabled: Optional[builtins.bool] = None,
                 excluded_networkconf_ids: Optional[Sequence[builtins.str]] = None,
                 fec_mode: Optional[builtins.str] = None,
                 forward: Optional[builtins.str] = None,
                 full_duplex: Optional[builtins.bool] = None,
                 isolation: Optional[builtins.bool] = None,
                 lldpmed_enabled: Optional[builtins.bool] = None,
                 lldpmed_notify_enabled: Optional[builtins.bool] = None,
                 mirror_port_idx: Optional[builtins.int] = None,
                 multicast_router_networkconf_ids: Optional[Sequence[builtins.str]] = None,
                 name: Optional[builtins.str] = None,
                 native_networkconf_id: Optional[builtins.str] = None,
                 op_mode: Optional[builtins.str] = None,
                 poe_mode: Optional[builtins.str] = None,
                 port_idx: Optional[builtins.int] = None,
                 port_keepalive_enabled: Optional[builtins.bool] = None,
                 port_security_enabled: Optional[builtins.bool] = None,
                 port_security_mac_address: Optional[Sequence[builtins.str]] = None,
                 portconf_id: Optional[builtins.str] = None,
                 priority_queue1_level: Optional[builtins.int] = None,
                 priority_queue2_level: Optional[builtins.int] = None,
                 priority_queue3_level: Optional[builtins.int] = None,
                 priority_queue4_level: Optional[builtins.int] = None,
                 qos_profile: Optional['outputs.DeviceQOSProfile'] = None,
                 setting_preference: Optional[builtins.str] = None,
                 speed: Optional[builtins.int] = None,
                 stormctrl_bcast_enabled: Optional[builtins.bool] = None,
                 stormctrl_bcast_level: Optional[builtins.int] = None,
                 stormctrl_bcast_rate: Optional[builtins.int] = None,
                 stormctrl_mcast_enabled: Optional[builtins.bool] = None,
                 stormctrl_mcast_level: Optional[builtins.int] = None,
                 stormctrl_mcast_rate: Optional[builtins.int] = None,
                 stormctrl_type: Optional[builtins.str] = None,
                 stormctrl_ucast_enabled: Optional[builtins.bool] = None,
                 stormctrl_ucast_level: Optional[builtins.int] = None,
                 stormctrl_ucast_rate: Optional[builtins.int] = None,
                 stp_port_mode: Optional[builtins.bool] = None,
                 tagged_vlan_mgmt: Optional[builtins.str] = None,
                 voice_networkconf_id: Optional[builtins.str] = None):
        if aggregate_num_ports is not None:
            pulumi.set(__self__, "aggregate_num_ports", aggregate_num_ports)
        if autoneg is not None:
            pulumi.set(__self__, "autoneg", autoneg)
        if dot1x_ctrl is not None:
            pulumi.set(__self__, "dot1x_ctrl", dot1x_ctrl)
        if dot1x_idle_timeout is not None:
            pulumi.set(__self__, "dot1x_idle_timeout", dot1x_idle_timeout)
        if egress_rate_limit_kbps is not None:
            pulumi.set(__self__, "egress_rate_limit_kbps", egress_rate_limit_kbps)
        if egress_rate_limit_kbps_enabled is not None:
            pulumi.set(__self__, "egress_rate_limit_kbps_enabled", egress_rate_limit_kbps_enabled)
        if excluded_networkconf_ids is not None:
            pulumi.set(__self__, "excluded_networkconf_ids", excluded_networkconf_ids)
        if fec_mode is not None:
            pulumi.set(__self__, "fec_mode", fec_mode)
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if full_duplex is not None:
            pulumi.set(__self__, "full_duplex", full_duplex)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if lldpmed_enabled is not None:
            pulumi.set(__self__, "lldpmed_enabled", lldpmed_enabled)
        if lldpmed_notify_enabled is not None:
            pulumi.set(__self__, "lldpmed_notify_enabled", lldpmed_notify_enabled)
        if mirror_port_idx is not None:
            pulumi.set(__self__, "mirror_port_idx", mirror_port_idx)
        if multicast_router_networkconf_ids is not None:
            pulumi.set(__self__, "multicast_router_networkconf_ids", multicast_router_networkconf_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if native_networkconf_id is not None:
            pulumi.set(__self__, "native_networkconf_id", native_networkconf_id)
        if op_mode is not None:
            pulumi.set(__self__, "op_mode", op_mode)
        if poe_mode is not None:
            pulumi.set(__self__, "poe_mode", poe_mode)
        if port_idx is not None:
            pulumi.set(__self__, "port_idx", port_idx)
        if port_keepalive_enabled is not None:
            pulumi.set(__self__, "port_keepalive_enabled", port_keepalive_enabled)
        if port_security_enabled is not None:
            pulumi.set(__self__, "port_security_enabled", port_security_enabled)
        if port_security_mac_address is not None:
            pulumi.set(__self__, "port_security_mac_address", port_security_mac_address)
        if portconf_id is not None:
            pulumi.set(__self__, "portconf_id", portconf_id)
        if priority_queue1_level is not None:
            pulumi.set(__self__, "priority_queue1_level", priority_queue1_level)
        if priority_queue2_level is not None:
            pulumi.set(__self__, "priority_queue2_level", priority_queue2_level)
        if priority_queue3_level is not None:
            pulumi.set(__self__, "priority_queue3_level", priority_queue3_level)
        if priority_queue4_level is not None:
            pulumi.set(__self__, "priority_queue4_level", priority_queue4_level)
        if qos_profile is not None:
            pulumi.set(__self__, "qos_profile", qos_profile)
        if setting_preference is not None:
            pulumi.set(__self__, "setting_preference", setting_preference)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if stormctrl_bcast_enabled is not None:
            pulumi.set(__self__, "stormctrl_bcast_enabled", stormctrl_bcast_enabled)
        if stormctrl_bcast_level is not None:
            pulumi.set(__self__, "stormctrl_bcast_level", stormctrl_bcast_level)
        if stormctrl_bcast_rate is not None:
            pulumi.set(__self__, "stormctrl_bcast_rate", stormctrl_bcast_rate)
        if stormctrl_mcast_enabled is not None:
            pulumi.set(__self__, "stormctrl_mcast_enabled", stormctrl_mcast_enabled)
        if stormctrl_mcast_level is not None:
            pulumi.set(__self__, "stormctrl_mcast_level", stormctrl_mcast_level)
        if stormctrl_mcast_rate is not None:
            pulumi.set(__self__, "stormctrl_mcast_rate", stormctrl_mcast_rate)
        if stormctrl_type is not None:
            pulumi.set(__self__, "stormctrl_type", stormctrl_type)
        if stormctrl_ucast_enabled is not None:
            pulumi.set(__self__, "stormctrl_ucast_enabled", stormctrl_ucast_enabled)
        if stormctrl_ucast_level is not None:
            pulumi.set(__self__, "stormctrl_ucast_level", stormctrl_ucast_level)
        if stormctrl_ucast_rate is not None:
            pulumi.set(__self__, "stormctrl_ucast_rate", stormctrl_ucast_rate)
        if stp_port_mode is not None:
            pulumi.set(__self__, "stp_port_mode", stp_port_mode)
        if tagged_vlan_mgmt is not None:
            pulumi.set(__self__, "tagged_vlan_mgmt", tagged_vlan_mgmt)
        if voice_networkconf_id is not None:
            pulumi.set(__self__, "voice_networkconf_id", voice_networkconf_id)

    @property
    @pulumi.getter(name="aggregateNumPorts")
    def aggregate_num_ports(self) -> Optional[builtins.int]:
        return pulumi.get(self, "aggregate_num_ports")

    @property
    @pulumi.getter
    def autoneg(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "autoneg")

    @property
    @pulumi.getter(name="dot1xCtrl")
    def dot1x_ctrl(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dot1x_ctrl")

    @property
    @pulumi.getter(name="dot1xIdleTimeout")
    def dot1x_idle_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dot1x_idle_timeout")

    @property
    @pulumi.getter(name="egressRateLimitKbps")
    def egress_rate_limit_kbps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "egress_rate_limit_kbps")

    @property
    @pulumi.getter(name="egressRateLimitKbpsEnabled")
    def egress_rate_limit_kbps_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "egress_rate_limit_kbps_enabled")

    @property
    @pulumi.getter(name="excludedNetworkconfIds")
    def excluded_networkconf_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "excluded_networkconf_ids")

    @property
    @pulumi.getter(name="fecMode")
    def fec_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "fec_mode")

    @property
    @pulumi.getter
    def forward(self) -> Optional[builtins.str]:
        return pulumi.get(self, "forward")

    @property
    @pulumi.getter(name="fullDuplex")
    def full_duplex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "full_duplex")

    @property
    @pulumi.getter
    def isolation(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "isolation")

    @property
    @pulumi.getter(name="lldpmedEnabled")
    def lldpmed_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "lldpmed_enabled")

    @property
    @pulumi.getter(name="lldpmedNotifyEnabled")
    def lldpmed_notify_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "lldpmed_notify_enabled")

    @property
    @pulumi.getter(name="mirrorPortIdx")
    def mirror_port_idx(self) -> Optional[builtins.int]:
        return pulumi.get(self, "mirror_port_idx")

    @property
    @pulumi.getter(name="multicastRouterNetworkconfIds")
    def multicast_router_networkconf_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "multicast_router_networkconf_ids")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nativeNetworkconfId")
    def native_networkconf_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "native_networkconf_id")

    @property
    @pulumi.getter(name="opMode")
    def op_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "op_mode")

    @property
    @pulumi.getter(name="poeMode")
    def poe_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "poe_mode")

    @property
    @pulumi.getter(name="portIdx")
    def port_idx(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port_idx")

    @property
    @pulumi.getter(name="portKeepaliveEnabled")
    def port_keepalive_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "port_keepalive_enabled")

    @property
    @pulumi.getter(name="portSecurityEnabled")
    def port_security_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "port_security_enabled")

    @property
    @pulumi.getter(name="portSecurityMacAddress")
    def port_security_mac_address(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "port_security_mac_address")

    @property
    @pulumi.getter(name="portconfId")
    def portconf_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "portconf_id")

    @property
    @pulumi.getter(name="priorityQueue1Level")
    def priority_queue1_level(self) -> Optional[builtins.int]:
        return pulumi.get(self, "priority_queue1_level")

    @property
    @pulumi.getter(name="priorityQueue2Level")
    def priority_queue2_level(self) -> Optional[builtins.int]:
        return pulumi.get(self, "priority_queue2_level")

    @property
    @pulumi.getter(name="priorityQueue3Level")
    def priority_queue3_level(self) -> Optional[builtins.int]:
        return pulumi.get(self, "priority_queue3_level")

    @property
    @pulumi.getter(name="priorityQueue4Level")
    def priority_queue4_level(self) -> Optional[builtins.int]:
        return pulumi.get(self, "priority_queue4_level")

    @property
    @pulumi.getter(name="qosProfile")
    def qos_profile(self) -> Optional['outputs.DeviceQOSProfile']:
        return pulumi.get(self, "qos_profile")

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> Optional[builtins.str]:
        return pulumi.get(self, "setting_preference")

    @property
    @pulumi.getter
    def speed(self) -> Optional[builtins.int]:
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter(name="stormctrlBcastEnabled")
    def stormctrl_bcast_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "stormctrl_bcast_enabled")

    @property
    @pulumi.getter(name="stormctrlBcastLevel")
    def stormctrl_bcast_level(self) -> Optional[builtins.int]:
        return pulumi.get(self, "stormctrl_bcast_level")

    @property
    @pulumi.getter(name="stormctrlBcastRate")
    def stormctrl_bcast_rate(self) -> Optional[builtins.int]:
        return pulumi.get(self, "stormctrl_bcast_rate")

    @property
    @pulumi.getter(name="stormctrlMcastEnabled")
    def stormctrl_mcast_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "stormctrl_mcast_enabled")

    @property
    @pulumi.getter(name="stormctrlMcastLevel")
    def stormctrl_mcast_level(self) -> Optional[builtins.int]:
        return pulumi.get(self, "stormctrl_mcast_level")

    @property
    @pulumi.getter(name="stormctrlMcastRate")
    def stormctrl_mcast_rate(self) -> Optional[builtins.int]:
        return pulumi.get(self, "stormctrl_mcast_rate")

    @property
    @pulumi.getter(name="stormctrlType")
    def stormctrl_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "stormctrl_type")

    @property
    @pulumi.getter(name="stormctrlUcastEnabled")
    def stormctrl_ucast_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "stormctrl_ucast_enabled")

    @property
    @pulumi.getter(name="stormctrlUcastLevel")
    def stormctrl_ucast_level(self) -> Optional[builtins.int]:
        return pulumi.get(self, "stormctrl_ucast_level")

    @property
    @pulumi.getter(name="stormctrlUcastRate")
    def stormctrl_ucast_rate(self) -> Optional[builtins.int]:
        return pulumi.get(self, "stormctrl_ucast_rate")

    @property
    @pulumi.getter(name="stpPortMode")
    def stp_port_mode(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "stp_port_mode")

    @property
    @pulumi.getter(name="taggedVlanMgmt")
    def tagged_vlan_mgmt(self) -> Optional[builtins.str]:
        return pulumi.get(self, "tagged_vlan_mgmt")

    @property
    @pulumi.getter(name="voiceNetworkconfId")
    def voice_networkconf_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "voice_networkconf_id")


@pulumi.output_type
class DeviceQOSMarking(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosCode":
            suggest = "cos_code"
        elif key == "dscpCode":
            suggest = "dscp_code"
        elif key == "ipPrecedenceCode":
            suggest = "ip_precedence_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceQOSMarking. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceQOSMarking.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceQOSMarking.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cos_code: Optional[builtins.int] = None,
                 dscp_code: Optional[builtins.int] = None,
                 ip_precedence_code: Optional[builtins.int] = None,
                 queue: Optional[builtins.int] = None):
        if cos_code is not None:
            pulumi.set(__self__, "cos_code", cos_code)
        if dscp_code is not None:
            pulumi.set(__self__, "dscp_code", dscp_code)
        if ip_precedence_code is not None:
            pulumi.set(__self__, "ip_precedence_code", ip_precedence_code)
        if queue is not None:
            pulumi.set(__self__, "queue", queue)

    @property
    @pulumi.getter(name="cosCode")
    def cos_code(self) -> Optional[builtins.int]:
        return pulumi.get(self, "cos_code")

    @property
    @pulumi.getter(name="dscpCode")
    def dscp_code(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dscp_code")

    @property
    @pulumi.getter(name="ipPrecedenceCode")
    def ip_precedence_code(self) -> Optional[builtins.int]:
        return pulumi.get(self, "ip_precedence_code")

    @property
    @pulumi.getter
    def queue(self) -> Optional[builtins.int]:
        return pulumi.get(self, "queue")


@pulumi.output_type
class DeviceQOSMatching(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosCode":
            suggest = "cos_code"
        elif key == "dscpCode":
            suggest = "dscp_code"
        elif key == "dstPort":
            suggest = "dst_port"
        elif key == "ipPrecedenceCode":
            suggest = "ip_precedence_code"
        elif key == "srcPort":
            suggest = "src_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceQOSMatching. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceQOSMatching.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceQOSMatching.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cos_code: Optional[builtins.int] = None,
                 dscp_code: Optional[builtins.int] = None,
                 dst_port: Optional[builtins.int] = None,
                 ip_precedence_code: Optional[builtins.int] = None,
                 protocol: Optional[builtins.str] = None,
                 src_port: Optional[builtins.int] = None):
        if cos_code is not None:
            pulumi.set(__self__, "cos_code", cos_code)
        if dscp_code is not None:
            pulumi.set(__self__, "dscp_code", dscp_code)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if ip_precedence_code is not None:
            pulumi.set(__self__, "ip_precedence_code", ip_precedence_code)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="cosCode")
    def cos_code(self) -> Optional[builtins.int]:
        return pulumi.get(self, "cos_code")

    @property
    @pulumi.getter(name="dscpCode")
    def dscp_code(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dscp_code")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter(name="ipPrecedenceCode")
    def ip_precedence_code(self) -> Optional[builtins.int]:
        return pulumi.get(self, "ip_precedence_code")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "src_port")


@pulumi.output_type
class DeviceQOSPolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "qosMarking":
            suggest = "qos_marking"
        elif key == "qosMatching":
            suggest = "qos_matching"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceQOSPolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceQOSPolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceQOSPolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 qos_marking: Optional['outputs.DeviceQOSMarking'] = None,
                 qos_matching: Optional['outputs.DeviceQOSMatching'] = None):
        if qos_marking is not None:
            pulumi.set(__self__, "qos_marking", qos_marking)
        if qos_matching is not None:
            pulumi.set(__self__, "qos_matching", qos_matching)

    @property
    @pulumi.getter(name="qosMarking")
    def qos_marking(self) -> Optional['outputs.DeviceQOSMarking']:
        return pulumi.get(self, "qos_marking")

    @property
    @pulumi.getter(name="qosMatching")
    def qos_matching(self) -> Optional['outputs.DeviceQOSMatching']:
        return pulumi.get(self, "qos_matching")


@pulumi.output_type
class DeviceQOSProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "qosPolicies":
            suggest = "qos_policies"
        elif key == "qosProfileMode":
            suggest = "qos_profile_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceQOSProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceQOSProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceQOSProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 qos_policies: Optional[Sequence['outputs.DeviceQOSPolicies']] = None,
                 qos_profile_mode: Optional[builtins.str] = None):
        if qos_policies is not None:
            pulumi.set(__self__, "qos_policies", qos_policies)
        if qos_profile_mode is not None:
            pulumi.set(__self__, "qos_profile_mode", qos_profile_mode)

    @property
    @pulumi.getter(name="qosPolicies")
    def qos_policies(self) -> Optional[Sequence['outputs.DeviceQOSPolicies']]:
        return pulumi.get(self, "qos_policies")

    @property
    @pulumi.getter(name="qosProfileMode")
    def qos_profile_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "qos_profile_mode")


@pulumi.output_type
class DeviceRadioIDentifiers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceId":
            suggest = "device_id"
        elif key == "radioName":
            suggest = "radio_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceRadioIDentifiers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceRadioIDentifiers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceRadioIDentifiers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_id: Optional[builtins.str] = None,
                 radio_name: Optional[builtins.str] = None):
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if radio_name is not None:
            pulumi.set(__self__, "radio_name", radio_name)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="radioName")
    def radio_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "radio_name")


@pulumi.output_type
class DeviceRadioTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "antennaGain":
            suggest = "antenna_gain"
        elif key == "antennaId":
            suggest = "antenna_id"
        elif key == "backupChannel":
            suggest = "backup_channel"
        elif key == "channelOptimizationEnabled":
            suggest = "channel_optimization_enabled"
        elif key == "hardNoiseFloorEnabled":
            suggest = "hard_noise_floor_enabled"
        elif key == "loadbalanceEnabled":
            suggest = "loadbalance_enabled"
        elif key == "minRssi":
            suggest = "min_rssi"
        elif key == "minRssiEnabled":
            suggest = "min_rssi_enabled"
        elif key == "radioIdentifiers":
            suggest = "radio_identifiers"
        elif key == "sensLevel":
            suggest = "sens_level"
        elif key == "sensLevelEnabled":
            suggest = "sens_level_enabled"
        elif key == "txPower":
            suggest = "tx_power"
        elif key == "txPowerMode":
            suggest = "tx_power_mode"
        elif key == "vwireEnabled":
            suggest = "vwire_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceRadioTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceRadioTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceRadioTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 antenna_gain: Optional[builtins.int] = None,
                 antenna_id: Optional[builtins.int] = None,
                 backup_channel: Optional[builtins.str] = None,
                 channel: Optional[builtins.str] = None,
                 channel_optimization_enabled: Optional[builtins.bool] = None,
                 dfs: Optional[builtins.bool] = None,
                 hard_noise_floor_enabled: Optional[builtins.bool] = None,
                 ht: Optional[builtins.int] = None,
                 loadbalance_enabled: Optional[builtins.bool] = None,
                 maxsta: Optional[builtins.int] = None,
                 min_rssi: Optional[builtins.int] = None,
                 min_rssi_enabled: Optional[builtins.bool] = None,
                 name: Optional[builtins.str] = None,
                 radio: Optional[builtins.str] = None,
                 radio_identifiers: Optional[Sequence['outputs.DeviceRadioIDentifiers']] = None,
                 sens_level: Optional[builtins.int] = None,
                 sens_level_enabled: Optional[builtins.bool] = None,
                 tx_power: Optional[builtins.str] = None,
                 tx_power_mode: Optional[builtins.str] = None,
                 vwire_enabled: Optional[builtins.bool] = None):
        if antenna_gain is not None:
            pulumi.set(__self__, "antenna_gain", antenna_gain)
        if antenna_id is not None:
            pulumi.set(__self__, "antenna_id", antenna_id)
        if backup_channel is not None:
            pulumi.set(__self__, "backup_channel", backup_channel)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channel_optimization_enabled is not None:
            pulumi.set(__self__, "channel_optimization_enabled", channel_optimization_enabled)
        if dfs is not None:
            pulumi.set(__self__, "dfs", dfs)
        if hard_noise_floor_enabled is not None:
            pulumi.set(__self__, "hard_noise_floor_enabled", hard_noise_floor_enabled)
        if ht is not None:
            pulumi.set(__self__, "ht", ht)
        if loadbalance_enabled is not None:
            pulumi.set(__self__, "loadbalance_enabled", loadbalance_enabled)
        if maxsta is not None:
            pulumi.set(__self__, "maxsta", maxsta)
        if min_rssi is not None:
            pulumi.set(__self__, "min_rssi", min_rssi)
        if min_rssi_enabled is not None:
            pulumi.set(__self__, "min_rssi_enabled", min_rssi_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if radio is not None:
            pulumi.set(__self__, "radio", radio)
        if radio_identifiers is not None:
            pulumi.set(__self__, "radio_identifiers", radio_identifiers)
        if sens_level is not None:
            pulumi.set(__self__, "sens_level", sens_level)
        if sens_level_enabled is not None:
            pulumi.set(__self__, "sens_level_enabled", sens_level_enabled)
        if tx_power is not None:
            pulumi.set(__self__, "tx_power", tx_power)
        if tx_power_mode is not None:
            pulumi.set(__self__, "tx_power_mode", tx_power_mode)
        if vwire_enabled is not None:
            pulumi.set(__self__, "vwire_enabled", vwire_enabled)

    @property
    @pulumi.getter(name="antennaGain")
    def antenna_gain(self) -> Optional[builtins.int]:
        return pulumi.get(self, "antenna_gain")

    @property
    @pulumi.getter(name="antennaId")
    def antenna_id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "antenna_id")

    @property
    @pulumi.getter(name="backupChannel")
    def backup_channel(self) -> Optional[builtins.str]:
        return pulumi.get(self, "backup_channel")

    @property
    @pulumi.getter
    def channel(self) -> Optional[builtins.str]:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="channelOptimizationEnabled")
    def channel_optimization_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "channel_optimization_enabled")

    @property
    @pulumi.getter
    def dfs(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dfs")

    @property
    @pulumi.getter(name="hardNoiseFloorEnabled")
    def hard_noise_floor_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "hard_noise_floor_enabled")

    @property
    @pulumi.getter
    def ht(self) -> Optional[builtins.int]:
        return pulumi.get(self, "ht")

    @property
    @pulumi.getter(name="loadbalanceEnabled")
    def loadbalance_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "loadbalance_enabled")

    @property
    @pulumi.getter
    def maxsta(self) -> Optional[builtins.int]:
        return pulumi.get(self, "maxsta")

    @property
    @pulumi.getter(name="minRssi")
    def min_rssi(self) -> Optional[builtins.int]:
        return pulumi.get(self, "min_rssi")

    @property
    @pulumi.getter(name="minRssiEnabled")
    def min_rssi_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "min_rssi_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def radio(self) -> Optional[builtins.str]:
        return pulumi.get(self, "radio")

    @property
    @pulumi.getter(name="radioIdentifiers")
    def radio_identifiers(self) -> Optional[Sequence['outputs.DeviceRadioIDentifiers']]:
        return pulumi.get(self, "radio_identifiers")

    @property
    @pulumi.getter(name="sensLevel")
    def sens_level(self) -> Optional[builtins.int]:
        return pulumi.get(self, "sens_level")

    @property
    @pulumi.getter(name="sensLevelEnabled")
    def sens_level_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "sens_level_enabled")

    @property
    @pulumi.getter(name="txPower")
    def tx_power(self) -> Optional[builtins.str]:
        return pulumi.get(self, "tx_power")

    @property
    @pulumi.getter(name="txPowerMode")
    def tx_power_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "tx_power_mode")

    @property
    @pulumi.getter(name="vwireEnabled")
    def vwire_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "vwire_enabled")


@pulumi.output_type
class DeviceRpsOverride(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "powerManagementMode":
            suggest = "power_management_mode"
        elif key == "rpsPortTable":
            suggest = "rps_port_table"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceRpsOverride. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceRpsOverride.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceRpsOverride.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 power_management_mode: Optional[builtins.str] = None,
                 rps_port_table: Optional[Sequence['outputs.DeviceRpsPortTable']] = None):
        if power_management_mode is not None:
            pulumi.set(__self__, "power_management_mode", power_management_mode)
        if rps_port_table is not None:
            pulumi.set(__self__, "rps_port_table", rps_port_table)

    @property
    @pulumi.getter(name="powerManagementMode")
    def power_management_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "power_management_mode")

    @property
    @pulumi.getter(name="rpsPortTable")
    def rps_port_table(self) -> Optional[Sequence['outputs.DeviceRpsPortTable']]:
        return pulumi.get(self, "rps_port_table")


@pulumi.output_type
class DeviceRpsPortTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portIdx":
            suggest = "port_idx"
        elif key == "portMode":
            suggest = "port_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceRpsPortTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceRpsPortTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceRpsPortTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 port_idx: Optional[builtins.int] = None,
                 port_mode: Optional[builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port_idx is not None:
            pulumi.set(__self__, "port_idx", port_idx)
        if port_mode is not None:
            pulumi.set(__self__, "port_mode", port_mode)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="portIdx")
    def port_idx(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port_idx")

    @property
    @pulumi.getter(name="portMode")
    def port_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "port_mode")


@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


@pulumi.output_type
class UnifiDeviceDto(dict):
    def __init__(__self__, *,
                 controller_that_could_manage_this_device: Optional['UnifiDeviceDtoControllerThatCouldManageThisDevice'] = None,
                 device_ip_v4_lease_expiration_timestamp_in_seconds: Optional[builtins.int] = None,
                 device_model_shortname: Optional[builtins.str] = None,
                 device_name: Optional[builtins.str] = None,
                 download_speed_in_bytes_per_second: Optional[builtins.int] = None,
                 experience: Optional[builtins.int] = None,
                 firmware_version: Optional[builtins.str] = None,
                 firmware_version_in_user_friendly_form: Optional[builtins.str] = None,
                 ip_address: Optional[builtins.str] = None,
                 mac_address: Optional[builtins.str] = None,
                 network_id_where_the_device_is_connected_to: Optional[builtins.str] = None,
                 network_name_where_the_device_is_connected_to: Optional[builtins.str] = None,
                 object_id: Optional[builtins.str] = None,
                 stacking_group_that_the_device_belongs_to: Optional[builtins.str] = None,
                 state: Optional[builtins.int] = None,
                 upload_speed_in_bytes: Optional[builtins.int] = None,
                 uptime_in_seconds: Optional[builtins.int] = None,
                 _24h_usage_in_bytes_per_second: Optional[builtins.float] = None,
                 default: Optional[builtins.bool] = None,
                 device_type: Optional['UnifiDeviceDtoDeviceType'] = None,
                 last_connection_network_id: Optional[builtins.str] = None,
                 last_connection_network_name: Optional[builtins.str] = None,
                 last_seen: Optional[builtins.int] = None):
        """
        :param 'UnifiDeviceDtoDeviceType' device_type: Information whether the device is considered a client or device from the NET point of view
        :param builtins.int last_seen: Information about when the device was seen for the last time in unix timestamp in seconds
        """
        if controller_that_could_manage_this_device is not None:
            pulumi.set(__self__, "controller_that_could_manage_this_device", controller_that_could_manage_this_device)
        if device_ip_v4_lease_expiration_timestamp_in_seconds is not None:
            pulumi.set(__self__, "device_ip_v4_lease_expiration_timestamp_in_seconds", device_ip_v4_lease_expiration_timestamp_in_seconds)
        if device_model_shortname is not None:
            pulumi.set(__self__, "device_model_shortname", device_model_shortname)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if download_speed_in_bytes_per_second is not None:
            pulumi.set(__self__, "download_speed_in_bytes_per_second", download_speed_in_bytes_per_second)
        if experience is not None:
            pulumi.set(__self__, "experience", experience)
        if firmware_version is not None:
            pulumi.set(__self__, "firmware_version", firmware_version)
        if firmware_version_in_user_friendly_form is not None:
            pulumi.set(__self__, "firmware_version_in_user_friendly_form", firmware_version_in_user_friendly_form)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if network_id_where_the_device_is_connected_to is not None:
            pulumi.set(__self__, "network_id_where_the_device_is_connected_to", network_id_where_the_device_is_connected_to)
        if network_name_where_the_device_is_connected_to is not None:
            pulumi.set(__self__, "network_name_where_the_device_is_connected_to", network_name_where_the_device_is_connected_to)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if stacking_group_that_the_device_belongs_to is not None:
            pulumi.set(__self__, "stacking_group_that_the_device_belongs_to", stacking_group_that_the_device_belongs_to)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if upload_speed_in_bytes is not None:
            pulumi.set(__self__, "upload_speed_in_bytes", upload_speed_in_bytes)
        if uptime_in_seconds is not None:
            pulumi.set(__self__, "uptime_in_seconds", uptime_in_seconds)
        if _24h_usage_in_bytes_per_second is not None:
            pulumi.set(__self__, "_24h_usage_in_bytes_per_second", _24h_usage_in_bytes_per_second)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if last_connection_network_id is not None:
            pulumi.set(__self__, "last_connection_network_id", last_connection_network_id)
        if last_connection_network_name is not None:
            pulumi.set(__self__, "last_connection_network_name", last_connection_network_name)
        if last_seen is not None:
            pulumi.set(__self__, "last_seen", last_seen)

    @property
    @pulumi.getter(name="ControllerThatCouldManageThisDevice")
    def controller_that_could_manage_this_device(self) -> Optional['UnifiDeviceDtoControllerThatCouldManageThisDevice']:
        return pulumi.get(self, "controller_that_could_manage_this_device")

    @property
    @pulumi.getter(name="DeviceIpV4LeaseExpirationTimestampInSeconds")
    def device_ip_v4_lease_expiration_timestamp_in_seconds(self) -> Optional[builtins.int]:
        return pulumi.get(self, "device_ip_v4_lease_expiration_timestamp_in_seconds")

    @property
    @pulumi.getter(name="DeviceModelShortname")
    def device_model_shortname(self) -> Optional[builtins.str]:
        return pulumi.get(self, "device_model_shortname")

    @property
    @pulumi.getter(name="DeviceName")
    def device_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="DownloadSpeedInBytesPerSecond")
    def download_speed_in_bytes_per_second(self) -> Optional[builtins.int]:
        return pulumi.get(self, "download_speed_in_bytes_per_second")

    @property
    @pulumi.getter(name="Experience")
    def experience(self) -> Optional[builtins.int]:
        return pulumi.get(self, "experience")

    @property
    @pulumi.getter(name="FirmwareVersion")
    def firmware_version(self) -> Optional[builtins.str]:
        return pulumi.get(self, "firmware_version")

    @property
    @pulumi.getter(name="FirmwareVersionInUserFriendlyForm")
    def firmware_version_in_user_friendly_form(self) -> Optional[builtins.str]:
        return pulumi.get(self, "firmware_version_in_user_friendly_form")

    @property
    @pulumi.getter(name="IPAddress")
    def ip_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="MACAddress")
    def mac_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="NetworkIdWhereTheDeviceIsConnectedTo")
    def network_id_where_the_device_is_connected_to(self) -> Optional[builtins.str]:
        return pulumi.get(self, "network_id_where_the_device_is_connected_to")

    @property
    @pulumi.getter(name="NetworkNameWhereTheDeviceIsConnectedTo")
    def network_name_where_the_device_is_connected_to(self) -> Optional[builtins.str]:
        return pulumi.get(self, "network_name_where_the_device_is_connected_to")

    @property
    @pulumi.getter(name="ObjectId")
    def object_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter(name="StackingGroupThatTheDeviceBelongsTo")
    def stacking_group_that_the_device_belongs_to(self) -> Optional[builtins.str]:
        return pulumi.get(self, "stacking_group_that_the_device_belongs_to")

    @property
    @pulumi.getter(name="State")
    def state(self) -> Optional[builtins.int]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="UploadSpeedInBytes")
    def upload_speed_in_bytes(self) -> Optional[builtins.int]:
        return pulumi.get(self, "upload_speed_in_bytes")

    @property
    @pulumi.getter(name="UptimeInSeconds")
    def uptime_in_seconds(self) -> Optional[builtins.int]:
        return pulumi.get(self, "uptime_in_seconds")

    @property
    @pulumi.getter(name="_24hUsageInBytesPerSecond")
    def _24h_usage_in_bytes_per_second(self) -> Optional[builtins.float]:
        return pulumi.get(self, "_24h_usage_in_bytes_per_second")

    @property
    @pulumi.getter
    def default(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional['UnifiDeviceDtoDeviceType']:
        """
        Information whether the device is considered a client or device from the NET point of view
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="lastConnectionNetworkId")
    def last_connection_network_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "last_connection_network_id")

    @property
    @pulumi.getter(name="lastConnectionNetworkName")
    def last_connection_network_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "last_connection_network_name")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> Optional[builtins.int]:
        """
        Information about when the device was seen for the last time in unix timestamp in seconds
        """
        return pulumi.get(self, "last_seen")


