# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'SettingEtherLightingNetworkOverridesArgs',
    'SettingEtherLightingNetworkOverridesArgsDict',
    'SettingEtherLightingSpeedOverridesArgs',
    'SettingEtherLightingSpeedOverridesArgsDict',
]

MYPY = False

if not MYPY:
    class SettingEtherLightingNetworkOverridesArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        raw_color_hex: NotRequired[pulumi.Input[builtins.str]]
elif False:
    SettingEtherLightingNetworkOverridesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingEtherLightingNetworkOverridesArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 raw_color_hex: Optional[pulumi.Input[builtins.str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if raw_color_hex is not None:
            pulumi.set(__self__, "raw_color_hex", raw_color_hex)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="rawColorHex")
    def raw_color_hex(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "raw_color_hex")

    @raw_color_hex.setter
    def raw_color_hex(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "raw_color_hex", value)


if not MYPY:
    class SettingEtherLightingSpeedOverridesArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        raw_color_hex: NotRequired[pulumi.Input[builtins.str]]
elif False:
    SettingEtherLightingSpeedOverridesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingEtherLightingSpeedOverridesArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 raw_color_hex: Optional[pulumi.Input[builtins.str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if raw_color_hex is not None:
            pulumi.set(__self__, "raw_color_hex", raw_color_hex)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="rawColorHex")
    def raw_color_hex(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "raw_color_hex")

    @raw_color_hex.setter
    def raw_color_hex(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "raw_color_hex", value)


