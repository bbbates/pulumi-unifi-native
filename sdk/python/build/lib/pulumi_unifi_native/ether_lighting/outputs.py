# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'Meta',
    'SettingEtherLighting',
    'SettingEtherLightingNetworkOverrides',
    'SettingEtherLightingSpeedOverrides',
]

@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


@pulumi.output_type
class SettingEtherLighting(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 key: Optional[builtins.str] = None,
                 network_overrides: Optional[Sequence['outputs.SettingEtherLightingNetworkOverrides']] = None,
                 site_id: Optional[builtins.str] = None,
                 speed_overrides: Optional[Sequence['outputs.SettingEtherLightingSpeedOverrides']] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if network_overrides is not None:
            pulumi.set(__self__, "network_overrides", network_overrides)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if speed_overrides is not None:
            pulumi.set(__self__, "speed_overrides", speed_overrides)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="networkOverrides")
    def network_overrides(self) -> Optional[Sequence['outputs.SettingEtherLightingNetworkOverrides']]:
        return pulumi.get(self, "network_overrides")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="speedOverrides")
    def speed_overrides(self) -> Optional[Sequence['outputs.SettingEtherLightingSpeedOverrides']]:
        return pulumi.get(self, "speed_overrides")


@pulumi.output_type
class SettingEtherLightingNetworkOverrides(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rawColorHex":
            suggest = "raw_color_hex"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingEtherLightingNetworkOverrides. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingEtherLightingNetworkOverrides.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingEtherLightingNetworkOverrides.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: Optional[builtins.str] = None,
                 raw_color_hex: Optional[builtins.str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if raw_color_hex is not None:
            pulumi.set(__self__, "raw_color_hex", raw_color_hex)

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="rawColorHex")
    def raw_color_hex(self) -> Optional[builtins.str]:
        return pulumi.get(self, "raw_color_hex")


@pulumi.output_type
class SettingEtherLightingSpeedOverrides(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rawColorHex":
            suggest = "raw_color_hex"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingEtherLightingSpeedOverrides. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingEtherLightingSpeedOverrides.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingEtherLightingSpeedOverrides.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: Optional[builtins.str] = None,
                 raw_color_hex: Optional[builtins.str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if raw_color_hex is not None:
            pulumi.set(__self__, "raw_color_hex", raw_color_hex)

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="rawColorHex")
    def raw_color_hex(self) -> Optional[builtins.str]:
        return pulumi.get(self, "raw_color_hex")


