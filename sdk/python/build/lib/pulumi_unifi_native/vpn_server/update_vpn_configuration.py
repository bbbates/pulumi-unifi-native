# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['UpdateVpnConfigurationArgs', 'UpdateVpnConfiguration']

@pulumi.input_type
class UpdateVpnConfigurationArgs:
    def __init__(__self__, *,
                 by_defaultopenvpn_for_backward_compatibility: Optional[pulumi.Input['ByDefaultopenvpnForBackwardCompatibility']] = None,
                 renegotiate_data_channel_key_after_n_seconds_open_vpn_only: Optional[pulumi.Input[builtins.int]] = None,
                 required_only_for_open_vpn: Optional[pulumi.Input[builtins.str]] = None,
                 server_key_for_open_vpn_or_private_key_of_wire_guard_server: Optional[pulumi.Input[builtins.str]] = None,
                 vpn_server_protocol: Optional[pulumi.Input['VPNServerProtocol']] = None,
                 custom_routing: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 default_dns_suffix: Optional[pulumi.Input[builtins.str]] = None,
                 dns: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ip_subnet: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_subnet: Optional[pulumi.Input[builtins.str]] = None,
                 local_wan_ip: Optional[pulumi.Input[builtins.str]] = None,
                 mac_connection_time_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 masquerade_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 public_gateway_port: Optional[pulumi.Input[builtins.int]] = None,
                 radius: Optional[pulumi.Input['UidVpnServerRadiusConfigurationDtoArgs']] = None,
                 server_port: Optional[pulumi.Input[builtins.int]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 strict_client_common_name: Optional[pulumi.Input[builtins.bool]] = None,
                 sync_public_ip: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_policy_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_policy_name: Optional[pulumi.Input[builtins.str]] = None,
                 uid_workspace_url: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a UpdateVpnConfiguration resource.
        :param pulumi.Input[builtins.int] public_gateway_port: If VPN is behind NAT, user can set a port forward on a 3rd party gateway. In this case, the UID App may use this port to connect to the VPN
        :param pulumi.Input[builtins.bool] strict_client_common_name: If true, then client certificate's common name must match client's username. Effective for the server mode only (OpenVPN only)
        """
        if by_defaultopenvpn_for_backward_compatibility is not None:
            pulumi.set(__self__, "by_defaultopenvpn_for_backward_compatibility", by_defaultopenvpn_for_backward_compatibility)
        if renegotiate_data_channel_key_after_n_seconds_open_vpn_only is not None:
            pulumi.set(__self__, "renegotiate_data_channel_key_after_n_seconds_open_vpn_only", renegotiate_data_channel_key_after_n_seconds_open_vpn_only)
        if required_only_for_open_vpn is not None:
            pulumi.set(__self__, "required_only_for_open_vpn", required_only_for_open_vpn)
        if server_key_for_open_vpn_or_private_key_of_wire_guard_server is not None:
            pulumi.set(__self__, "server_key_for_open_vpn_or_private_key_of_wire_guard_server", server_key_for_open_vpn_or_private_key_of_wire_guard_server)
        if vpn_server_protocol is not None:
            pulumi.set(__self__, "vpn_server_protocol", vpn_server_protocol)
        if custom_routing is not None:
            pulumi.set(__self__, "custom_routing", custom_routing)
        if default_dns_suffix is not None:
            pulumi.set(__self__, "default_dns_suffix", default_dns_suffix)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ip_subnet is not None:
            pulumi.set(__self__, "ip_subnet", ip_subnet)
        if ipv6_subnet is not None:
            pulumi.set(__self__, "ipv6_subnet", ipv6_subnet)
        if local_wan_ip is not None:
            pulumi.set(__self__, "local_wan_ip", local_wan_ip)
        if mac_connection_time_seconds is not None:
            pulumi.set(__self__, "mac_connection_time_seconds", mac_connection_time_seconds)
        if masquerade_enabled is not None:
            pulumi.set(__self__, "masquerade_enabled", masquerade_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if public_gateway_port is not None:
            pulumi.set(__self__, "public_gateway_port", public_gateway_port)
        if radius is not None:
            pulumi.set(__self__, "radius", radius)
        if server_port is not None:
            pulumi.set(__self__, "server_port", server_port)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)
        if strict_client_common_name is not None:
            pulumi.set(__self__, "strict_client_common_name", strict_client_common_name)
        if sync_public_ip is not None:
            pulumi.set(__self__, "sync_public_ip", sync_public_ip)
        if uid_policy_enabled is not None:
            pulumi.set(__self__, "uid_policy_enabled", uid_policy_enabled)
        if uid_policy_name is not None:
            pulumi.set(__self__, "uid_policy_name", uid_policy_name)
        if uid_workspace_url is not None:
            pulumi.set(__self__, "uid_workspace_url", uid_workspace_url)

    @property
    @pulumi.getter(name="ByDefaultopenvpnForBackwardCompatibility")
    def by_defaultopenvpn_for_backward_compatibility(self) -> Optional[pulumi.Input['ByDefaultopenvpnForBackwardCompatibility']]:
        return pulumi.get(self, "by_defaultopenvpn_for_backward_compatibility")

    @by_defaultopenvpn_for_backward_compatibility.setter
    def by_defaultopenvpn_for_backward_compatibility(self, value: Optional[pulumi.Input['ByDefaultopenvpnForBackwardCompatibility']]):
        pulumi.set(self, "by_defaultopenvpn_for_backward_compatibility", value)

    @property
    @pulumi.getter(name="RenegotiateDataChannelKeyAfterNSecondsOpenVPNOnly")
    def renegotiate_data_channel_key_after_n_seconds_open_vpn_only(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "renegotiate_data_channel_key_after_n_seconds_open_vpn_only")

    @renegotiate_data_channel_key_after_n_seconds_open_vpn_only.setter
    def renegotiate_data_channel_key_after_n_seconds_open_vpn_only(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "renegotiate_data_channel_key_after_n_seconds_open_vpn_only", value)

    @property
    @pulumi.getter(name="RequiredOnlyForOpenVPN")
    def required_only_for_open_vpn(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "required_only_for_open_vpn")

    @required_only_for_open_vpn.setter
    def required_only_for_open_vpn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "required_only_for_open_vpn", value)

    @property
    @pulumi.getter(name="ServerKeyForOpenVPNOrPrivateKeyOfWireGuardServer")
    def server_key_for_open_vpn_or_private_key_of_wire_guard_server(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "server_key_for_open_vpn_or_private_key_of_wire_guard_server")

    @server_key_for_open_vpn_or_private_key_of_wire_guard_server.setter
    def server_key_for_open_vpn_or_private_key_of_wire_guard_server(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server_key_for_open_vpn_or_private_key_of_wire_guard_server", value)

    @property
    @pulumi.getter(name="VPNServerProtocol")
    def vpn_server_protocol(self) -> Optional[pulumi.Input['VPNServerProtocol']]:
        return pulumi.get(self, "vpn_server_protocol")

    @vpn_server_protocol.setter
    def vpn_server_protocol(self, value: Optional[pulumi.Input['VPNServerProtocol']]):
        pulumi.set(self, "vpn_server_protocol", value)

    @property
    @pulumi.getter(name="customRouting")
    def custom_routing(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "custom_routing")

    @custom_routing.setter
    def custom_routing(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "custom_routing", value)

    @property
    @pulumi.getter(name="defaultDnsSuffix")
    def default_dns_suffix(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "default_dns_suffix")

    @default_dns_suffix.setter
    def default_dns_suffix(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default_dns_suffix", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ip_subnet")

    @ip_subnet.setter
    def ip_subnet(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip_subnet", value)

    @property
    @pulumi.getter(name="ipv6Subnet")
    def ipv6_subnet(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipv6_subnet")

    @ipv6_subnet.setter
    def ipv6_subnet(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_subnet", value)

    @property
    @pulumi.getter(name="localWanIp")
    def local_wan_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "local_wan_ip")

    @local_wan_ip.setter
    def local_wan_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "local_wan_ip", value)

    @property
    @pulumi.getter(name="macConnectionTimeSeconds")
    def mac_connection_time_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "mac_connection_time_seconds")

    @mac_connection_time_seconds.setter
    def mac_connection_time_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "mac_connection_time_seconds", value)

    @property
    @pulumi.getter(name="masqueradeEnabled")
    def masquerade_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "masquerade_enabled")

    @masquerade_enabled.setter
    def masquerade_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "masquerade_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicGatewayPort")
    def public_gateway_port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        If VPN is behind NAT, user can set a port forward on a 3rd party gateway. In this case, the UID App may use this port to connect to the VPN
        """
        return pulumi.get(self, "public_gateway_port")

    @public_gateway_port.setter
    def public_gateway_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "public_gateway_port", value)

    @property
    @pulumi.getter
    def radius(self) -> Optional[pulumi.Input['UidVpnServerRadiusConfigurationDtoArgs']]:
        return pulumi.get(self, "radius")

    @radius.setter
    def radius(self, value: Optional[pulumi.Input['UidVpnServerRadiusConfigurationDtoArgs']]):
        pulumi.set(self, "radius", value)

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "server_port")

    @server_port.setter
    def server_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "server_port", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)

    @property
    @pulumi.getter(name="strictClientCommonName")
    def strict_client_common_name(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If true, then client certificate's common name must match client's username. Effective for the server mode only (OpenVPN only)
        """
        return pulumi.get(self, "strict_client_common_name")

    @strict_client_common_name.setter
    def strict_client_common_name(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "strict_client_common_name", value)

    @property
    @pulumi.getter(name="syncPublicIp")
    def sync_public_ip(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "sync_public_ip")

    @sync_public_ip.setter
    def sync_public_ip(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sync_public_ip", value)

    @property
    @pulumi.getter(name="uidPolicyEnabled")
    def uid_policy_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "uid_policy_enabled")

    @uid_policy_enabled.setter
    def uid_policy_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "uid_policy_enabled", value)

    @property
    @pulumi.getter(name="uidPolicyName")
    def uid_policy_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "uid_policy_name")

    @uid_policy_name.setter
    def uid_policy_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uid_policy_name", value)

    @property
    @pulumi.getter(name="uidWorkspaceUrl")
    def uid_workspace_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "uid_workspace_url")

    @uid_workspace_url.setter
    def uid_workspace_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uid_workspace_url", value)


@pulumi.type_token("unifi-native:vpn-server:UpdateVpnConfiguration")
class UpdateVpnConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 by_defaultopenvpn_for_backward_compatibility: Optional[pulumi.Input['ByDefaultopenvpnForBackwardCompatibility']] = None,
                 renegotiate_data_channel_key_after_n_seconds_open_vpn_only: Optional[pulumi.Input[builtins.int]] = None,
                 required_only_for_open_vpn: Optional[pulumi.Input[builtins.str]] = None,
                 server_key_for_open_vpn_or_private_key_of_wire_guard_server: Optional[pulumi.Input[builtins.str]] = None,
                 vpn_server_protocol: Optional[pulumi.Input['VPNServerProtocol']] = None,
                 custom_routing: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 default_dns_suffix: Optional[pulumi.Input[builtins.str]] = None,
                 dns: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ip_subnet: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_subnet: Optional[pulumi.Input[builtins.str]] = None,
                 local_wan_ip: Optional[pulumi.Input[builtins.str]] = None,
                 mac_connection_time_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 masquerade_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 public_gateway_port: Optional[pulumi.Input[builtins.int]] = None,
                 radius: Optional[pulumi.Input[Union['UidVpnServerRadiusConfigurationDtoArgs', 'UidVpnServerRadiusConfigurationDtoArgsDict']]] = None,
                 server_port: Optional[pulumi.Input[builtins.int]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 strict_client_common_name: Optional[pulumi.Input[builtins.bool]] = None,
                 sync_public_ip: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_policy_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_policy_name: Optional[pulumi.Input[builtins.str]] = None,
                 uid_workspace_url: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a UpdateVpnConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.int] public_gateway_port: If VPN is behind NAT, user can set a port forward on a 3rd party gateway. In this case, the UID App may use this port to connect to the VPN
        :param pulumi.Input[builtins.bool] strict_client_common_name: If true, then client certificate's common name must match client's username. Effective for the server mode only (OpenVPN only)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[UpdateVpnConfigurationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a UpdateVpnConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UpdateVpnConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UpdateVpnConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 by_defaultopenvpn_for_backward_compatibility: Optional[pulumi.Input['ByDefaultopenvpnForBackwardCompatibility']] = None,
                 renegotiate_data_channel_key_after_n_seconds_open_vpn_only: Optional[pulumi.Input[builtins.int]] = None,
                 required_only_for_open_vpn: Optional[pulumi.Input[builtins.str]] = None,
                 server_key_for_open_vpn_or_private_key_of_wire_guard_server: Optional[pulumi.Input[builtins.str]] = None,
                 vpn_server_protocol: Optional[pulumi.Input['VPNServerProtocol']] = None,
                 custom_routing: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 default_dns_suffix: Optional[pulumi.Input[builtins.str]] = None,
                 dns: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ip_subnet: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_subnet: Optional[pulumi.Input[builtins.str]] = None,
                 local_wan_ip: Optional[pulumi.Input[builtins.str]] = None,
                 mac_connection_time_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 masquerade_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 public_gateway_port: Optional[pulumi.Input[builtins.int]] = None,
                 radius: Optional[pulumi.Input[Union['UidVpnServerRadiusConfigurationDtoArgs', 'UidVpnServerRadiusConfigurationDtoArgsDict']]] = None,
                 server_port: Optional[pulumi.Input[builtins.int]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 strict_client_common_name: Optional[pulumi.Input[builtins.bool]] = None,
                 sync_public_ip: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_policy_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_policy_name: Optional[pulumi.Input[builtins.str]] = None,
                 uid_workspace_url: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UpdateVpnConfigurationArgs.__new__(UpdateVpnConfigurationArgs)

            __props__.__dict__["by_defaultopenvpn_for_backward_compatibility"] = by_defaultopenvpn_for_backward_compatibility
            __props__.__dict__["renegotiate_data_channel_key_after_n_seconds_open_vpn_only"] = renegotiate_data_channel_key_after_n_seconds_open_vpn_only
            __props__.__dict__["required_only_for_open_vpn"] = required_only_for_open_vpn
            __props__.__dict__["server_key_for_open_vpn_or_private_key_of_wire_guard_server"] = server_key_for_open_vpn_or_private_key_of_wire_guard_server
            __props__.__dict__["vpn_server_protocol"] = vpn_server_protocol
            __props__.__dict__["custom_routing"] = custom_routing
            __props__.__dict__["default_dns_suffix"] = default_dns_suffix
            __props__.__dict__["dns"] = dns
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["ip_subnet"] = ip_subnet
            __props__.__dict__["ipv6_subnet"] = ipv6_subnet
            __props__.__dict__["local_wan_ip"] = local_wan_ip
            __props__.__dict__["mac_connection_time_seconds"] = mac_connection_time_seconds
            __props__.__dict__["masquerade_enabled"] = masquerade_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["public_gateway_port"] = public_gateway_port
            __props__.__dict__["radius"] = radius
            __props__.__dict__["server_port"] = server_port
            __props__.__dict__["site_name"] = site_name
            __props__.__dict__["strict_client_common_name"] = strict_client_common_name
            __props__.__dict__["sync_public_ip"] = sync_public_ip
            __props__.__dict__["uid_policy_enabled"] = uid_policy_enabled
            __props__.__dict__["uid_policy_name"] = uid_policy_name
            __props__.__dict__["uid_workspace_url"] = uid_workspace_url
            __props__.__dict__["networkconf_id"] = None
        super(UpdateVpnConfiguration, __self__).__init__(
            'unifi-native:vpn-server:UpdateVpnConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'UpdateVpnConfiguration':
        """
        Get an existing UpdateVpnConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = UpdateVpnConfigurationArgs.__new__(UpdateVpnConfigurationArgs)

        __props__.__dict__["by_defaultopenvpn_for_backward_compatibility"] = None
        __props__.__dict__["renegotiate_data_channel_key_after_n_seconds_open_vpn_only"] = None
        __props__.__dict__["required_only_for_open_vpn"] = None
        __props__.__dict__["server_key_for_open_vpn_or_private_key_of_wire_guard_server"] = None
        __props__.__dict__["vpn_server_protocol"] = None
        __props__.__dict__["custom_routing"] = None
        __props__.__dict__["default_dns_suffix"] = None
        __props__.__dict__["dns"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["ip_subnet"] = None
        __props__.__dict__["ipv6_subnet"] = None
        __props__.__dict__["local_wan_ip"] = None
        __props__.__dict__["mac_connection_time_seconds"] = None
        __props__.__dict__["masquerade_enabled"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["networkconf_id"] = None
        __props__.__dict__["public_gateway_port"] = None
        __props__.__dict__["radius"] = None
        __props__.__dict__["server_port"] = None
        __props__.__dict__["strict_client_common_name"] = None
        __props__.__dict__["sync_public_ip"] = None
        __props__.__dict__["uid_policy_enabled"] = None
        __props__.__dict__["uid_policy_name"] = None
        __props__.__dict__["uid_workspace_url"] = None
        return UpdateVpnConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="ByDefaultopenvpnForBackwardCompatibility")
    def by_defaultopenvpn_for_backward_compatibility(self) -> pulumi.Output[Optional['ByDefaultopenvpnForBackwardCompatibility']]:
        return pulumi.get(self, "by_defaultopenvpn_for_backward_compatibility")

    @property
    @pulumi.getter(name="RenegotiateDataChannelKeyAfterNSecondsOpenVPNOnly")
    def renegotiate_data_channel_key_after_n_seconds_open_vpn_only(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "renegotiate_data_channel_key_after_n_seconds_open_vpn_only")

    @property
    @pulumi.getter(name="RequiredOnlyForOpenVPN")
    def required_only_for_open_vpn(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "required_only_for_open_vpn")

    @property
    @pulumi.getter(name="ServerKeyForOpenVPNOrPrivateKeyOfWireGuardServer")
    def server_key_for_open_vpn_or_private_key_of_wire_guard_server(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "server_key_for_open_vpn_or_private_key_of_wire_guard_server")

    @property
    @pulumi.getter(name="VPNServerProtocol")
    def vpn_server_protocol(self) -> pulumi.Output[Optional['VPNServerProtocol']]:
        return pulumi.get(self, "vpn_server_protocol")

    @property
    @pulumi.getter(name="customRouting")
    def custom_routing(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "custom_routing")

    @property
    @pulumi.getter(name="defaultDnsSuffix")
    def default_dns_suffix(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "default_dns_suffix")

    @property
    @pulumi.getter
    def dns(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipv6Subnet")
    def ipv6_subnet(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipv6_subnet")

    @property
    @pulumi.getter(name="localWanIp")
    def local_wan_ip(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "local_wan_ip")

    @property
    @pulumi.getter(name="macConnectionTimeSeconds")
    def mac_connection_time_seconds(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "mac_connection_time_seconds")

    @property
    @pulumi.getter(name="masqueradeEnabled")
    def masquerade_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "masquerade_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkconfId")
    def networkconf_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "networkconf_id")

    @property
    @pulumi.getter(name="publicGatewayPort")
    def public_gateway_port(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        If VPN is behind NAT, user can set a port forward on a 3rd party gateway. In this case, the UID App may use this port to connect to the VPN
        """
        return pulumi.get(self, "public_gateway_port")

    @property
    @pulumi.getter
    def radius(self) -> pulumi.Output[Optional['outputs.UidVpnServerRadiusConfigurationDto']]:
        return pulumi.get(self, "radius")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "server_port")

    @property
    @pulumi.getter(name="strictClientCommonName")
    def strict_client_common_name(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        If true, then client certificate's common name must match client's username. Effective for the server mode only (OpenVPN only)
        """
        return pulumi.get(self, "strict_client_common_name")

    @property
    @pulumi.getter(name="syncPublicIp")
    def sync_public_ip(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "sync_public_ip")

    @property
    @pulumi.getter(name="uidPolicyEnabled")
    def uid_policy_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "uid_policy_enabled")

    @property
    @pulumi.getter(name="uidPolicyName")
    def uid_policy_name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "uid_policy_name")

    @property
    @pulumi.getter(name="uidWorkspaceUrl")
    def uid_workspace_url(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "uid_workspace_url")

