# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ChannelPlanApBlacklistedChannelsArgs',
    'ChannelPlanApBlacklistedChannelsArgsDict',
    'ChannelPlanCouplingArgs',
    'ChannelPlanCouplingArgsDict',
    'ChannelPlanRadioTableArgs',
    'ChannelPlanRadioTableArgsDict',
    'ChannelPlanSatisfactionTableArgs',
    'ChannelPlanSatisfactionTableArgsDict',
    'ChannelPlanSiteBlacklistedChannelsArgs',
    'ChannelPlanSiteBlacklistedChannelsArgsDict',
]

MYPY = False

if not MYPY:
    class ChannelPlanApBlacklistedChannelsArgsDict(TypedDict):
        channel: NotRequired[pulumi.Input[builtins.int]]
        mac: NotRequired[pulumi.Input[builtins.str]]
        timestamp: NotRequired[pulumi.Input[builtins.int]]
elif False:
    ChannelPlanApBlacklistedChannelsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ChannelPlanApBlacklistedChannelsArgs:
    def __init__(__self__, *,
                 channel: Optional[pulumi.Input[builtins.int]] = None,
                 mac: Optional[pulumi.Input[builtins.str]] = None,
                 timestamp: Optional[pulumi.Input[builtins.int]] = None):
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "timestamp", value)


if not MYPY:
    class ChannelPlanCouplingArgsDict(TypedDict):
        rssi: NotRequired[pulumi.Input[builtins.int]]
        source: NotRequired[pulumi.Input[builtins.str]]
        target: NotRequired[pulumi.Input[builtins.str]]
elif False:
    ChannelPlanCouplingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ChannelPlanCouplingArgs:
    def __init__(__self__, *,
                 rssi: Optional[pulumi.Input[builtins.int]] = None,
                 source: Optional[pulumi.Input[builtins.str]] = None,
                 target: Optional[pulumi.Input[builtins.str]] = None):
        if rssi is not None:
            pulumi.set(__self__, "rssi", rssi)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def rssi(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "rssi")

    @rssi.setter
    def rssi(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rssi", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "target", value)


if not MYPY:
    class ChannelPlanRadioTableArgsDict(TypedDict):
        backup_channel: NotRequired[pulumi.Input[builtins.str]]
        channel: NotRequired[pulumi.Input[builtins.str]]
        device_mac: NotRequired[pulumi.Input[builtins.str]]
        name: NotRequired[pulumi.Input[builtins.str]]
        tx_power: NotRequired[pulumi.Input[builtins.str]]
        tx_power_mode: NotRequired[pulumi.Input[builtins.str]]
        width: NotRequired[pulumi.Input[builtins.int]]
elif False:
    ChannelPlanRadioTableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ChannelPlanRadioTableArgs:
    def __init__(__self__, *,
                 backup_channel: Optional[pulumi.Input[builtins.str]] = None,
                 channel: Optional[pulumi.Input[builtins.str]] = None,
                 device_mac: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 tx_power: Optional[pulumi.Input[builtins.str]] = None,
                 tx_power_mode: Optional[pulumi.Input[builtins.str]] = None,
                 width: Optional[pulumi.Input[builtins.int]] = None):
        if backup_channel is not None:
            pulumi.set(__self__, "backup_channel", backup_channel)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if device_mac is not None:
            pulumi.set(__self__, "device_mac", device_mac)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tx_power is not None:
            pulumi.set(__self__, "tx_power", tx_power)
        if tx_power_mode is not None:
            pulumi.set(__self__, "tx_power_mode", tx_power_mode)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="backupChannel")
    def backup_channel(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "backup_channel")

    @backup_channel.setter
    def backup_channel(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "backup_channel", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter(name="deviceMac")
    def device_mac(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "device_mac")

    @device_mac.setter
    def device_mac(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "device_mac", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="txPower")
    def tx_power(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "tx_power")

    @tx_power.setter
    def tx_power(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tx_power", value)

    @property
    @pulumi.getter(name="txPowerMode")
    def tx_power_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "tx_power_mode")

    @tx_power_mode.setter
    def tx_power_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tx_power_mode", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "width", value)


if not MYPY:
    class ChannelPlanSatisfactionTableArgsDict(TypedDict):
        device_mac: NotRequired[pulumi.Input[builtins.str]]
        satisfaction: NotRequired[pulumi.Input[builtins.float]]
elif False:
    ChannelPlanSatisfactionTableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ChannelPlanSatisfactionTableArgs:
    def __init__(__self__, *,
                 device_mac: Optional[pulumi.Input[builtins.str]] = None,
                 satisfaction: Optional[pulumi.Input[builtins.float]] = None):
        if device_mac is not None:
            pulumi.set(__self__, "device_mac", device_mac)
        if satisfaction is not None:
            pulumi.set(__self__, "satisfaction", satisfaction)

    @property
    @pulumi.getter(name="deviceMac")
    def device_mac(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "device_mac")

    @device_mac.setter
    def device_mac(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "device_mac", value)

    @property
    @pulumi.getter
    def satisfaction(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "satisfaction")

    @satisfaction.setter
    def satisfaction(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "satisfaction", value)


if not MYPY:
    class ChannelPlanSiteBlacklistedChannelsArgsDict(TypedDict):
        channel: NotRequired[pulumi.Input[builtins.int]]
        timestamp: NotRequired[pulumi.Input[builtins.int]]
elif False:
    ChannelPlanSiteBlacklistedChannelsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ChannelPlanSiteBlacklistedChannelsArgs:
    def __init__(__self__, *,
                 channel: Optional[pulumi.Input[builtins.int]] = None,
                 timestamp: Optional[pulumi.Input[builtins.int]] = None):
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "timestamp", value)


