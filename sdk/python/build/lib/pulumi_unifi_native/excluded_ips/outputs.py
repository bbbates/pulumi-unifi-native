# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ClientExcludedIpDto',
    'ClientFingerprintData',
    'ReportedExcludedIpDto',
]

@pulumi.output_type
class ClientExcludedIpDto(dict):
    def __init__(__self__, *,
                 client_type: Optional['ClientExcludedIpDtoClientType'] = None,
                 display_name: Optional[builtins.str] = None,
                 fingerprint: Optional['outputs.ClientFingerprintData'] = None,
                 hostname: Optional[builtins.str] = None,
                 icon_filename: Optional[builtins.str] = None,
                 icon_resolutions: Optional[Sequence[Sequence[builtins.int]]] = None,
                 ip: Optional[builtins.str] = None,
                 mac: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 network_id: Optional[builtins.str] = None,
                 oui: Optional[builtins.str] = None,
                 status: Optional['ClientExcludedIpDtoStatus'] = None):
        if client_type is not None:
            pulumi.set(__self__, "client_type", client_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if icon_filename is not None:
            pulumi.set(__self__, "icon_filename", icon_filename)
        if icon_resolutions is not None:
            pulumi.set(__self__, "icon_resolutions", icon_resolutions)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if oui is not None:
            pulumi.set(__self__, "oui", oui)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clientType")
    def client_type(self) -> Optional['ClientExcludedIpDtoClientType']:
        return pulumi.get(self, "client_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional['outputs.ClientFingerprintData']:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[builtins.str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="iconFilename")
    def icon_filename(self) -> Optional[builtins.str]:
        return pulumi.get(self, "icon_filename")

    @property
    @pulumi.getter(name="iconResolutions")
    def icon_resolutions(self) -> Optional[Sequence[Sequence[builtins.int]]]:
        return pulumi.get(self, "icon_resolutions")

    @property
    @pulumi.getter
    def ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def oui(self) -> Optional[builtins.str]:
        return pulumi.get(self, "oui")

    @property
    @pulumi.getter
    def status(self) -> Optional['ClientExcludedIpDtoStatus']:
        return pulumi.get(self, "status")


@pulumi.output_type
class ClientFingerprintData(dict):
    def __init__(__self__, *,
                 computed_fingerprint_device_id: Optional[builtins.int] = None,
                 computed_fingerprint_engine_code: Optional[builtins.int] = None,
                 device_category: Optional[builtins.int] = None,
                 device_family: Optional[builtins.int] = None,
                 device_id: Optional[builtins.int] = None,
                 device_id_override: Optional[builtins.int] = None,
                 device_vendor: Optional[builtins.int] = None,
                 os_class: Optional[builtins.int] = None,
                 os_name: Optional[builtins.int] = None,
                 confidence: Optional[builtins.int] = None,
                 has_override: Optional[builtins.bool] = None):
        if computed_fingerprint_device_id is not None:
            pulumi.set(__self__, "computed_fingerprint_device_id", computed_fingerprint_device_id)
        if computed_fingerprint_engine_code is not None:
            pulumi.set(__self__, "computed_fingerprint_engine_code", computed_fingerprint_engine_code)
        if device_category is not None:
            pulumi.set(__self__, "device_category", device_category)
        if device_family is not None:
            pulumi.set(__self__, "device_family", device_family)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if device_id_override is not None:
            pulumi.set(__self__, "device_id_override", device_id_override)
        if device_vendor is not None:
            pulumi.set(__self__, "device_vendor", device_vendor)
        if os_class is not None:
            pulumi.set(__self__, "os_class", os_class)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if confidence is not None:
            pulumi.set(__self__, "confidence", confidence)
        if has_override is not None:
            pulumi.set(__self__, "has_override", has_override)

    @property
    @pulumi.getter(name="ComputedFingerprintDeviceId")
    def computed_fingerprint_device_id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "computed_fingerprint_device_id")

    @property
    @pulumi.getter(name="ComputedFingerprintEngineCode")
    def computed_fingerprint_engine_code(self) -> Optional[builtins.int]:
        return pulumi.get(self, "computed_fingerprint_engine_code")

    @property
    @pulumi.getter(name="DeviceCategory")
    def device_category(self) -> Optional[builtins.int]:
        return pulumi.get(self, "device_category")

    @property
    @pulumi.getter(name="DeviceFamily")
    def device_family(self) -> Optional[builtins.int]:
        return pulumi.get(self, "device_family")

    @property
    @pulumi.getter(name="DeviceId")
    def device_id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="DeviceIdOverride")
    def device_id_override(self) -> Optional[builtins.int]:
        return pulumi.get(self, "device_id_override")

    @property
    @pulumi.getter(name="DeviceVendor")
    def device_vendor(self) -> Optional[builtins.int]:
        return pulumi.get(self, "device_vendor")

    @property
    @pulumi.getter(name="OSClass")
    def os_class(self) -> Optional[builtins.int]:
        return pulumi.get(self, "os_class")

    @property
    @pulumi.getter(name="OSName")
    def os_name(self) -> Optional[builtins.int]:
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter
    def confidence(self) -> Optional[builtins.int]:
        return pulumi.get(self, "confidence")

    @property
    @pulumi.getter(name="hasOverride")
    def has_override(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "has_override")


@pulumi.output_type
class ReportedExcludedIpDto(dict):
    def __init__(__self__, *,
                 ip: Optional[builtins.str] = None,
                 mac: Optional[builtins.str] = None,
                 network_id: Optional[builtins.str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)

    @property
    @pulumi.getter
    def ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "network_id")


