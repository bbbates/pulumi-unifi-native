# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'Hotspot2ConfCapabArgs',
    'Hotspot2ConfCapabArgsDict',
    'Hotspot2ConfCellularNetworkListArgs',
    'Hotspot2ConfCellularNetworkListArgsDict',
    'Hotspot2ConfDescriptionArgs',
    'Hotspot2ConfDescriptionArgsDict',
    'Hotspot2ConfFriendlyNameArgs',
    'Hotspot2ConfFriendlyNameArgsDict',
    'Hotspot2ConfIconsArgs',
    'Hotspot2ConfIconsArgsDict',
    'Hotspot2ConfIconArgs',
    'Hotspot2ConfIconArgsDict',
    'Hotspot2ConfNaiRealmListArgs',
    'Hotspot2ConfNaiRealmListArgsDict',
    'Hotspot2ConfOsuArgs',
    'Hotspot2ConfOsuArgsDict',
    'Hotspot2ConfQOSMapDcspArgs',
    'Hotspot2ConfQOSMapDcspArgsDict',
    'Hotspot2ConfQOSMapExceptionsArgs',
    'Hotspot2ConfQOSMapExceptionsArgsDict',
    'Hotspot2ConfRoamingConsortiumListArgs',
    'Hotspot2ConfRoamingConsortiumListArgsDict',
    'Hotspot2ConfVenueNameArgs',
    'Hotspot2ConfVenueNameArgsDict',
]

MYPY = False

if not MYPY:
    class Hotspot2ConfCapabArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[builtins.int]]
        protocol: NotRequired[pulumi.Input[builtins.str]]
        status: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Hotspot2ConfCapabArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Hotspot2ConfCapabArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class Hotspot2ConfCellularNetworkListArgsDict(TypedDict):
        mcc: NotRequired[pulumi.Input[builtins.int]]
        mnc: NotRequired[pulumi.Input[builtins.int]]
        name: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Hotspot2ConfCellularNetworkListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Hotspot2ConfCellularNetworkListArgs:
    def __init__(__self__, *,
                 mcc: Optional[pulumi.Input[builtins.int]] = None,
                 mnc: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None):
        if mcc is not None:
            pulumi.set(__self__, "mcc", mcc)
        if mnc is not None:
            pulumi.set(__self__, "mnc", mnc)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def mcc(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "mcc")

    @mcc.setter
    def mcc(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "mcc", value)

    @property
    @pulumi.getter
    def mnc(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "mnc")

    @mnc.setter
    def mnc(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "mnc", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class Hotspot2ConfDescriptionArgsDict(TypedDict):
        language: NotRequired[pulumi.Input[builtins.str]]
        text: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Hotspot2ConfDescriptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Hotspot2ConfDescriptionArgs:
    def __init__(__self__, *,
                 language: Optional[pulumi.Input[builtins.str]] = None,
                 text: Optional[pulumi.Input[builtins.str]] = None):
        if language is not None:
            pulumi.set(__self__, "language", language)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "text", value)


if not MYPY:
    class Hotspot2ConfFriendlyNameArgsDict(TypedDict):
        language: NotRequired[pulumi.Input[builtins.str]]
        text: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Hotspot2ConfFriendlyNameArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Hotspot2ConfFriendlyNameArgs:
    def __init__(__self__, *,
                 language: Optional[pulumi.Input[builtins.str]] = None,
                 text: Optional[pulumi.Input[builtins.str]] = None):
        if language is not None:
            pulumi.set(__self__, "language", language)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "text", value)


if not MYPY:
    class Hotspot2ConfIconsArgsDict(TypedDict):
        data: NotRequired[pulumi.Input[builtins.str]]
        filename: NotRequired[pulumi.Input[builtins.str]]
        height: NotRequired[pulumi.Input[builtins.int]]
        language: NotRequired[pulumi.Input[builtins.str]]
        media: NotRequired[pulumi.Input[builtins.str]]
        name: NotRequired[pulumi.Input[builtins.str]]
        size: NotRequired[pulumi.Input[builtins.int]]
        width: NotRequired[pulumi.Input[builtins.int]]
elif False:
    Hotspot2ConfIconsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Hotspot2ConfIconsArgs:
    def __init__(__self__, *,
                 data: Optional[pulumi.Input[builtins.str]] = None,
                 filename: Optional[pulumi.Input[builtins.str]] = None,
                 height: Optional[pulumi.Input[builtins.int]] = None,
                 language: Optional[pulumi.Input[builtins.str]] = None,
                 media: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 size: Optional[pulumi.Input[builtins.int]] = None,
                 width: Optional[pulumi.Input[builtins.int]] = None):
        if data is not None:
            pulumi.set(__self__, "data", data)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if media is not None:
            pulumi.set(__self__, "media", media)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def media(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "media")

    @media.setter
    def media(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "media", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "width", value)


if not MYPY:
    class Hotspot2ConfIconArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Hotspot2ConfIconArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Hotspot2ConfIconArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[builtins.str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class Hotspot2ConfNaiRealmListArgsDict(TypedDict):
        auth_ids: NotRequired[pulumi.Input[builtins.str]]
        auth_vals: NotRequired[pulumi.Input[builtins.str]]
        eap_method: NotRequired[pulumi.Input[builtins.int]]
        encoding: NotRequired[pulumi.Input[builtins.int]]
        name: NotRequired[pulumi.Input[builtins.str]]
        status: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    Hotspot2ConfNaiRealmListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Hotspot2ConfNaiRealmListArgs:
    def __init__(__self__, *,
                 auth_ids: Optional[pulumi.Input[builtins.str]] = None,
                 auth_vals: Optional[pulumi.Input[builtins.str]] = None,
                 eap_method: Optional[pulumi.Input[builtins.int]] = None,
                 encoding: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.bool]] = None):
        if auth_ids is not None:
            pulumi.set(__self__, "auth_ids", auth_ids)
        if auth_vals is not None:
            pulumi.set(__self__, "auth_vals", auth_vals)
        if eap_method is not None:
            pulumi.set(__self__, "eap_method", eap_method)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="authIds")
    def auth_ids(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "auth_ids")

    @auth_ids.setter
    def auth_ids(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "auth_ids", value)

    @property
    @pulumi.getter(name="authVals")
    def auth_vals(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "auth_vals")

    @auth_vals.setter
    def auth_vals(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "auth_vals", value)

    @property
    @pulumi.getter(name="eapMethod")
    def eap_method(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "eap_method")

    @eap_method.setter
    def eap_method(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "eap_method", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class Hotspot2ConfOsuArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfDescriptionArgsDict']]]]
        friendly_name: NotRequired[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfFriendlyNameArgsDict']]]]
        icon: NotRequired[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfIconArgsDict']]]]
        method_oma_dm: NotRequired[pulumi.Input[builtins.bool]]
        method_soap_xml_spp: NotRequired[pulumi.Input[builtins.bool]]
        nai: NotRequired[pulumi.Input[builtins.str]]
        nai2: NotRequired[pulumi.Input[builtins.str]]
        operating_class: NotRequired[pulumi.Input[builtins.str]]
        server_uri: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Hotspot2ConfOsuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Hotspot2ConfOsuArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfDescriptionArgs']]]] = None,
                 friendly_name: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfFriendlyNameArgs']]]] = None,
                 icon: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfIconArgs']]]] = None,
                 method_oma_dm: Optional[pulumi.Input[builtins.bool]] = None,
                 method_soap_xml_spp: Optional[pulumi.Input[builtins.bool]] = None,
                 nai: Optional[pulumi.Input[builtins.str]] = None,
                 nai2: Optional[pulumi.Input[builtins.str]] = None,
                 operating_class: Optional[pulumi.Input[builtins.str]] = None,
                 server_uri: Optional[pulumi.Input[builtins.str]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if method_oma_dm is not None:
            pulumi.set(__self__, "method_oma_dm", method_oma_dm)
        if method_soap_xml_spp is not None:
            pulumi.set(__self__, "method_soap_xml_spp", method_soap_xml_spp)
        if nai is not None:
            pulumi.set(__self__, "nai", nai)
        if nai2 is not None:
            pulumi.set(__self__, "nai2", nai2)
        if operating_class is not None:
            pulumi.set(__self__, "operating_class", operating_class)
        if server_uri is not None:
            pulumi.set(__self__, "server_uri", server_uri)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfDescriptionArgs']]]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfDescriptionArgs']]]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfFriendlyNameArgs']]]]:
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfFriendlyNameArgs']]]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfIconArgs']]]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfIconArgs']]]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="methodOmaDm")
    def method_oma_dm(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "method_oma_dm")

    @method_oma_dm.setter
    def method_oma_dm(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "method_oma_dm", value)

    @property
    @pulumi.getter(name="methodSoapXmlSpp")
    def method_soap_xml_spp(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "method_soap_xml_spp")

    @method_soap_xml_spp.setter
    def method_soap_xml_spp(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "method_soap_xml_spp", value)

    @property
    @pulumi.getter
    def nai(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "nai")

    @nai.setter
    def nai(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "nai", value)

    @property
    @pulumi.getter
    def nai2(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "nai2")

    @nai2.setter
    def nai2(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "nai2", value)

    @property
    @pulumi.getter(name="operatingClass")
    def operating_class(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operating_class")

    @operating_class.setter
    def operating_class(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operating_class", value)

    @property
    @pulumi.getter(name="serverUri")
    def server_uri(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "server_uri")

    @server_uri.setter
    def server_uri(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server_uri", value)


if not MYPY:
    class Hotspot2ConfQOSMapDcspArgsDict(TypedDict):
        high: NotRequired[pulumi.Input[builtins.int]]
        low: NotRequired[pulumi.Input[builtins.int]]
elif False:
    Hotspot2ConfQOSMapDcspArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Hotspot2ConfQOSMapDcspArgs:
    def __init__(__self__, *,
                 high: Optional[pulumi.Input[builtins.int]] = None,
                 low: Optional[pulumi.Input[builtins.int]] = None):
        if high is not None:
            pulumi.set(__self__, "high", high)
        if low is not None:
            pulumi.set(__self__, "low", low)

    @property
    @pulumi.getter
    def high(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "high")

    @high.setter
    def high(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "high", value)

    @property
    @pulumi.getter
    def low(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "low")

    @low.setter
    def low(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "low", value)


if not MYPY:
    class Hotspot2ConfQOSMapExceptionsArgsDict(TypedDict):
        dcsp: NotRequired[pulumi.Input[builtins.int]]
        up: NotRequired[pulumi.Input[builtins.int]]
elif False:
    Hotspot2ConfQOSMapExceptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Hotspot2ConfQOSMapExceptionsArgs:
    def __init__(__self__, *,
                 dcsp: Optional[pulumi.Input[builtins.int]] = None,
                 up: Optional[pulumi.Input[builtins.int]] = None):
        if dcsp is not None:
            pulumi.set(__self__, "dcsp", dcsp)
        if up is not None:
            pulumi.set(__self__, "up", up)

    @property
    @pulumi.getter
    def dcsp(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dcsp")

    @dcsp.setter
    def dcsp(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dcsp", value)

    @property
    @pulumi.getter
    def up(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "up")

    @up.setter
    def up(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "up", value)


if not MYPY:
    class Hotspot2ConfRoamingConsortiumListArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[builtins.str]]
        oid: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Hotspot2ConfRoamingConsortiumListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Hotspot2ConfRoamingConsortiumListArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 oid: Optional[pulumi.Input[builtins.str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oid is not None:
            pulumi.set(__self__, "oid", oid)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def oid(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "oid")

    @oid.setter
    def oid(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "oid", value)


if not MYPY:
    class Hotspot2ConfVenueNameArgsDict(TypedDict):
        language: NotRequired[pulumi.Input[builtins.str]]
        name: NotRequired[pulumi.Input[builtins.str]]
        url: NotRequired[pulumi.Input[builtins.str]]
elif False:
    Hotspot2ConfVenueNameArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Hotspot2ConfVenueNameArgs:
    def __init__(__self__, *,
                 language: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 url: Optional[pulumi.Input[builtins.str]] = None):
        if language is not None:
            pulumi.set(__self__, "language", language)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "url", value)


