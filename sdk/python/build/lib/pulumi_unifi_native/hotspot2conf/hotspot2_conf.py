# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['Hotspot2ConfArgs', 'Hotspot2Conf']

@pulumi.input_type
class Hotspot2ConfArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 anqp_domain_id: Optional[pulumi.Input[builtins.int]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 capab: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfCapabArgs']]]] = None,
                 cellular_network_list: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfCellularNetworkListArgs']]]] = None,
                 deauth_req_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 disable_dgaf: Optional[pulumi.Input[builtins.bool]] = None,
                 domain_name_list: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 friendly_name: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfFriendlyNameArgs']]]] = None,
                 gas_advanced: Optional[pulumi.Input[builtins.bool]] = None,
                 gas_comeback_delay: Optional[pulumi.Input[builtins.int]] = None,
                 gas_frag_limit: Optional[pulumi.Input[builtins.int]] = None,
                 hessid: Optional[pulumi.Input[builtins.str]] = None,
                 hessid_used: Optional[pulumi.Input[builtins.bool]] = None,
                 icons: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfIconsArgs']]]] = None,
                 ipaddr_type_avail_v4: Optional[pulumi.Input[builtins.int]] = None,
                 ipaddr_type_avail_v6: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_downlink_load: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_downlink_load_set: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_downlink_speed: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_downlink_speed_set: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_info_at_capacity: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_info_link_status: Optional[pulumi.Input[builtins.str]] = None,
                 metrics_info_symmetric: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_measurement: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_measurement_set: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_status: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_uplink_load: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_uplink_load_set: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_uplink_speed: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_uplink_speed_set: Optional[pulumi.Input[builtins.bool]] = None,
                 nai_realm_list: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfNaiRealmListArgs']]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 network_access_asra: Optional[pulumi.Input[builtins.bool]] = None,
                 network_access_esr: Optional[pulumi.Input[builtins.bool]] = None,
                 network_access_internet: Optional[pulumi.Input[builtins.bool]] = None,
                 network_access_uesa: Optional[pulumi.Input[builtins.bool]] = None,
                 network_auth_type: Optional[pulumi.Input[builtins.int]] = None,
                 network_auth_url: Optional[pulumi.Input[builtins.str]] = None,
                 network_type: Optional[pulumi.Input[builtins.int]] = None,
                 osu: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfOsuArgs']]]] = None,
                 osu_ssid: Optional[pulumi.Input[builtins.str]] = None,
                 qos_map_dcsp: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfQOSMapDcspArgs']]]] = None,
                 qos_map_exceptions: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfQOSMapExceptionsArgs']]]] = None,
                 qos_map_status: Optional[pulumi.Input[builtins.bool]] = None,
                 roaming_consortium_list: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfRoamingConsortiumListArgs']]]] = None,
                 save_timestamp: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 t_c_filename: Optional[pulumi.Input[builtins.str]] = None,
                 t_c_timestamp: Optional[pulumi.Input[builtins.int]] = None,
                 venue_group: Optional[pulumi.Input[builtins.int]] = None,
                 venue_name: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfVenueNameArgs']]]] = None,
                 venue_type: Optional[pulumi.Input[builtins.int]] = None):
        """
        The set of arguments for constructing a Hotspot2Conf resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if anqp_domain_id is not None:
            pulumi.set(__self__, "anqp_domain_id", anqp_domain_id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if capab is not None:
            pulumi.set(__self__, "capab", capab)
        if cellular_network_list is not None:
            pulumi.set(__self__, "cellular_network_list", cellular_network_list)
        if deauth_req_timeout is not None:
            pulumi.set(__self__, "deauth_req_timeout", deauth_req_timeout)
        if disable_dgaf is not None:
            pulumi.set(__self__, "disable_dgaf", disable_dgaf)
        if domain_name_list is not None:
            pulumi.set(__self__, "domain_name_list", domain_name_list)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if gas_advanced is not None:
            pulumi.set(__self__, "gas_advanced", gas_advanced)
        if gas_comeback_delay is not None:
            pulumi.set(__self__, "gas_comeback_delay", gas_comeback_delay)
        if gas_frag_limit is not None:
            pulumi.set(__self__, "gas_frag_limit", gas_frag_limit)
        if hessid is not None:
            pulumi.set(__self__, "hessid", hessid)
        if hessid_used is not None:
            pulumi.set(__self__, "hessid_used", hessid_used)
        if icons is not None:
            pulumi.set(__self__, "icons", icons)
        if ipaddr_type_avail_v4 is not None:
            pulumi.set(__self__, "ipaddr_type_avail_v4", ipaddr_type_avail_v4)
        if ipaddr_type_avail_v6 is not None:
            pulumi.set(__self__, "ipaddr_type_avail_v6", ipaddr_type_avail_v6)
        if metrics_downlink_load is not None:
            pulumi.set(__self__, "metrics_downlink_load", metrics_downlink_load)
        if metrics_downlink_load_set is not None:
            pulumi.set(__self__, "metrics_downlink_load_set", metrics_downlink_load_set)
        if metrics_downlink_speed is not None:
            pulumi.set(__self__, "metrics_downlink_speed", metrics_downlink_speed)
        if metrics_downlink_speed_set is not None:
            pulumi.set(__self__, "metrics_downlink_speed_set", metrics_downlink_speed_set)
        if metrics_info_at_capacity is not None:
            pulumi.set(__self__, "metrics_info_at_capacity", metrics_info_at_capacity)
        if metrics_info_link_status is not None:
            pulumi.set(__self__, "metrics_info_link_status", metrics_info_link_status)
        if metrics_info_symmetric is not None:
            pulumi.set(__self__, "metrics_info_symmetric", metrics_info_symmetric)
        if metrics_measurement is not None:
            pulumi.set(__self__, "metrics_measurement", metrics_measurement)
        if metrics_measurement_set is not None:
            pulumi.set(__self__, "metrics_measurement_set", metrics_measurement_set)
        if metrics_status is not None:
            pulumi.set(__self__, "metrics_status", metrics_status)
        if metrics_uplink_load is not None:
            pulumi.set(__self__, "metrics_uplink_load", metrics_uplink_load)
        if metrics_uplink_load_set is not None:
            pulumi.set(__self__, "metrics_uplink_load_set", metrics_uplink_load_set)
        if metrics_uplink_speed is not None:
            pulumi.set(__self__, "metrics_uplink_speed", metrics_uplink_speed)
        if metrics_uplink_speed_set is not None:
            pulumi.set(__self__, "metrics_uplink_speed_set", metrics_uplink_speed_set)
        if nai_realm_list is not None:
            pulumi.set(__self__, "nai_realm_list", nai_realm_list)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_access_asra is not None:
            pulumi.set(__self__, "network_access_asra", network_access_asra)
        if network_access_esr is not None:
            pulumi.set(__self__, "network_access_esr", network_access_esr)
        if network_access_internet is not None:
            pulumi.set(__self__, "network_access_internet", network_access_internet)
        if network_access_uesa is not None:
            pulumi.set(__self__, "network_access_uesa", network_access_uesa)
        if network_auth_type is not None:
            pulumi.set(__self__, "network_auth_type", network_auth_type)
        if network_auth_url is not None:
            pulumi.set(__self__, "network_auth_url", network_auth_url)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if osu is not None:
            pulumi.set(__self__, "osu", osu)
        if osu_ssid is not None:
            pulumi.set(__self__, "osu_ssid", osu_ssid)
        if qos_map_dcsp is not None:
            pulumi.set(__self__, "qos_map_dcsp", qos_map_dcsp)
        if qos_map_exceptions is not None:
            pulumi.set(__self__, "qos_map_exceptions", qos_map_exceptions)
        if qos_map_status is not None:
            pulumi.set(__self__, "qos_map_status", qos_map_status)
        if roaming_consortium_list is not None:
            pulumi.set(__self__, "roaming_consortium_list", roaming_consortium_list)
        if save_timestamp is not None:
            pulumi.set(__self__, "save_timestamp", save_timestamp)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if t_c_filename is not None:
            pulumi.set(__self__, "t_c_filename", t_c_filename)
        if t_c_timestamp is not None:
            pulumi.set(__self__, "t_c_timestamp", t_c_timestamp)
        if venue_group is not None:
            pulumi.set(__self__, "venue_group", venue_group)
        if venue_name is not None:
            pulumi.set(__self__, "venue_name", venue_name)
        if venue_type is not None:
            pulumi.set(__self__, "venue_type", venue_type)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="anqpDomainId")
    def anqp_domain_id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "anqp_domain_id")

    @anqp_domain_id.setter
    def anqp_domain_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "anqp_domain_id", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter
    def capab(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfCapabArgs']]]]:
        return pulumi.get(self, "capab")

    @capab.setter
    def capab(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfCapabArgs']]]]):
        pulumi.set(self, "capab", value)

    @property
    @pulumi.getter(name="cellularNetworkList")
    def cellular_network_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfCellularNetworkListArgs']]]]:
        return pulumi.get(self, "cellular_network_list")

    @cellular_network_list.setter
    def cellular_network_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfCellularNetworkListArgs']]]]):
        pulumi.set(self, "cellular_network_list", value)

    @property
    @pulumi.getter(name="deauthReqTimeout")
    def deauth_req_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "deauth_req_timeout")

    @deauth_req_timeout.setter
    def deauth_req_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "deauth_req_timeout", value)

    @property
    @pulumi.getter(name="disableDgaf")
    def disable_dgaf(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "disable_dgaf")

    @disable_dgaf.setter
    def disable_dgaf(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "disable_dgaf", value)

    @property
    @pulumi.getter(name="domainNameList")
    def domain_name_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "domain_name_list")

    @domain_name_list.setter
    def domain_name_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "domain_name_list", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfFriendlyNameArgs']]]]:
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfFriendlyNameArgs']]]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter(name="gasAdvanced")
    def gas_advanced(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "gas_advanced")

    @gas_advanced.setter
    def gas_advanced(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "gas_advanced", value)

    @property
    @pulumi.getter(name="gasComebackDelay")
    def gas_comeback_delay(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "gas_comeback_delay")

    @gas_comeback_delay.setter
    def gas_comeback_delay(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "gas_comeback_delay", value)

    @property
    @pulumi.getter(name="gasFragLimit")
    def gas_frag_limit(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "gas_frag_limit")

    @gas_frag_limit.setter
    def gas_frag_limit(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "gas_frag_limit", value)

    @property
    @pulumi.getter
    def hessid(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "hessid")

    @hessid.setter
    def hessid(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "hessid", value)

    @property
    @pulumi.getter(name="hessidUsed")
    def hessid_used(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "hessid_used")

    @hessid_used.setter
    def hessid_used(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "hessid_used", value)

    @property
    @pulumi.getter
    def icons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfIconsArgs']]]]:
        return pulumi.get(self, "icons")

    @icons.setter
    def icons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfIconsArgs']]]]):
        pulumi.set(self, "icons", value)

    @property
    @pulumi.getter(name="ipaddrTypeAvailV4")
    def ipaddr_type_avail_v4(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "ipaddr_type_avail_v4")

    @ipaddr_type_avail_v4.setter
    def ipaddr_type_avail_v4(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ipaddr_type_avail_v4", value)

    @property
    @pulumi.getter(name="ipaddrTypeAvailV6")
    def ipaddr_type_avail_v6(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "ipaddr_type_avail_v6")

    @ipaddr_type_avail_v6.setter
    def ipaddr_type_avail_v6(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ipaddr_type_avail_v6", value)

    @property
    @pulumi.getter(name="metricsDownlinkLoad")
    def metrics_downlink_load(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "metrics_downlink_load")

    @metrics_downlink_load.setter
    def metrics_downlink_load(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "metrics_downlink_load", value)

    @property
    @pulumi.getter(name="metricsDownlinkLoadSet")
    def metrics_downlink_load_set(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "metrics_downlink_load_set")

    @metrics_downlink_load_set.setter
    def metrics_downlink_load_set(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "metrics_downlink_load_set", value)

    @property
    @pulumi.getter(name="metricsDownlinkSpeed")
    def metrics_downlink_speed(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "metrics_downlink_speed")

    @metrics_downlink_speed.setter
    def metrics_downlink_speed(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "metrics_downlink_speed", value)

    @property
    @pulumi.getter(name="metricsDownlinkSpeedSet")
    def metrics_downlink_speed_set(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "metrics_downlink_speed_set")

    @metrics_downlink_speed_set.setter
    def metrics_downlink_speed_set(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "metrics_downlink_speed_set", value)

    @property
    @pulumi.getter(name="metricsInfoAtCapacity")
    def metrics_info_at_capacity(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "metrics_info_at_capacity")

    @metrics_info_at_capacity.setter
    def metrics_info_at_capacity(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "metrics_info_at_capacity", value)

    @property
    @pulumi.getter(name="metricsInfoLinkStatus")
    def metrics_info_link_status(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "metrics_info_link_status")

    @metrics_info_link_status.setter
    def metrics_info_link_status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "metrics_info_link_status", value)

    @property
    @pulumi.getter(name="metricsInfoSymmetric")
    def metrics_info_symmetric(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "metrics_info_symmetric")

    @metrics_info_symmetric.setter
    def metrics_info_symmetric(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "metrics_info_symmetric", value)

    @property
    @pulumi.getter(name="metricsMeasurement")
    def metrics_measurement(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "metrics_measurement")

    @metrics_measurement.setter
    def metrics_measurement(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "metrics_measurement", value)

    @property
    @pulumi.getter(name="metricsMeasurementSet")
    def metrics_measurement_set(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "metrics_measurement_set")

    @metrics_measurement_set.setter
    def metrics_measurement_set(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "metrics_measurement_set", value)

    @property
    @pulumi.getter(name="metricsStatus")
    def metrics_status(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "metrics_status")

    @metrics_status.setter
    def metrics_status(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "metrics_status", value)

    @property
    @pulumi.getter(name="metricsUplinkLoad")
    def metrics_uplink_load(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "metrics_uplink_load")

    @metrics_uplink_load.setter
    def metrics_uplink_load(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "metrics_uplink_load", value)

    @property
    @pulumi.getter(name="metricsUplinkLoadSet")
    def metrics_uplink_load_set(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "metrics_uplink_load_set")

    @metrics_uplink_load_set.setter
    def metrics_uplink_load_set(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "metrics_uplink_load_set", value)

    @property
    @pulumi.getter(name="metricsUplinkSpeed")
    def metrics_uplink_speed(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "metrics_uplink_speed")

    @metrics_uplink_speed.setter
    def metrics_uplink_speed(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "metrics_uplink_speed", value)

    @property
    @pulumi.getter(name="metricsUplinkSpeedSet")
    def metrics_uplink_speed_set(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "metrics_uplink_speed_set")

    @metrics_uplink_speed_set.setter
    def metrics_uplink_speed_set(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "metrics_uplink_speed_set", value)

    @property
    @pulumi.getter(name="naiRealmList")
    def nai_realm_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfNaiRealmListArgs']]]]:
        return pulumi.get(self, "nai_realm_list")

    @nai_realm_list.setter
    def nai_realm_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfNaiRealmListArgs']]]]):
        pulumi.set(self, "nai_realm_list", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkAccessAsra")
    def network_access_asra(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "network_access_asra")

    @network_access_asra.setter
    def network_access_asra(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "network_access_asra", value)

    @property
    @pulumi.getter(name="networkAccessEsr")
    def network_access_esr(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "network_access_esr")

    @network_access_esr.setter
    def network_access_esr(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "network_access_esr", value)

    @property
    @pulumi.getter(name="networkAccessInternet")
    def network_access_internet(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "network_access_internet")

    @network_access_internet.setter
    def network_access_internet(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "network_access_internet", value)

    @property
    @pulumi.getter(name="networkAccessUesa")
    def network_access_uesa(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "network_access_uesa")

    @network_access_uesa.setter
    def network_access_uesa(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "network_access_uesa", value)

    @property
    @pulumi.getter(name="networkAuthType")
    def network_auth_type(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "network_auth_type")

    @network_auth_type.setter
    def network_auth_type(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "network_auth_type", value)

    @property
    @pulumi.getter(name="networkAuthUrl")
    def network_auth_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "network_auth_url")

    @network_auth_url.setter
    def network_auth_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "network_auth_url", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter
    def osu(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfOsuArgs']]]]:
        return pulumi.get(self, "osu")

    @osu.setter
    def osu(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfOsuArgs']]]]):
        pulumi.set(self, "osu", value)

    @property
    @pulumi.getter(name="osuSsid")
    def osu_ssid(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "osu_ssid")

    @osu_ssid.setter
    def osu_ssid(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "osu_ssid", value)

    @property
    @pulumi.getter(name="qosMapDcsp")
    def qos_map_dcsp(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfQOSMapDcspArgs']]]]:
        return pulumi.get(self, "qos_map_dcsp")

    @qos_map_dcsp.setter
    def qos_map_dcsp(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfQOSMapDcspArgs']]]]):
        pulumi.set(self, "qos_map_dcsp", value)

    @property
    @pulumi.getter(name="qosMapExceptions")
    def qos_map_exceptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfQOSMapExceptionsArgs']]]]:
        return pulumi.get(self, "qos_map_exceptions")

    @qos_map_exceptions.setter
    def qos_map_exceptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfQOSMapExceptionsArgs']]]]):
        pulumi.set(self, "qos_map_exceptions", value)

    @property
    @pulumi.getter(name="qosMapStatus")
    def qos_map_status(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "qos_map_status")

    @qos_map_status.setter
    def qos_map_status(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "qos_map_status", value)

    @property
    @pulumi.getter(name="roamingConsortiumList")
    def roaming_consortium_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfRoamingConsortiumListArgs']]]]:
        return pulumi.get(self, "roaming_consortium_list")

    @roaming_consortium_list.setter
    def roaming_consortium_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfRoamingConsortiumListArgs']]]]):
        pulumi.set(self, "roaming_consortium_list", value)

    @property
    @pulumi.getter(name="saveTimestamp")
    def save_timestamp(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "save_timestamp")

    @save_timestamp.setter
    def save_timestamp(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "save_timestamp", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="tCFilename")
    def t_c_filename(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "t_c_filename")

    @t_c_filename.setter
    def t_c_filename(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "t_c_filename", value)

    @property
    @pulumi.getter(name="tCTimestamp")
    def t_c_timestamp(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "t_c_timestamp")

    @t_c_timestamp.setter
    def t_c_timestamp(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "t_c_timestamp", value)

    @property
    @pulumi.getter(name="venueGroup")
    def venue_group(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "venue_group")

    @venue_group.setter
    def venue_group(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "venue_group", value)

    @property
    @pulumi.getter(name="venueName")
    def venue_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfVenueNameArgs']]]]:
        return pulumi.get(self, "venue_name")

    @venue_name.setter
    def venue_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Hotspot2ConfVenueNameArgs']]]]):
        pulumi.set(self, "venue_name", value)

    @property
    @pulumi.getter(name="venueType")
    def venue_type(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "venue_type")

    @venue_type.setter
    def venue_type(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "venue_type", value)


@pulumi.type_token("unifi-native:hotspot2conf:Hotspot2Conf")
class Hotspot2Conf(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 anqp_domain_id: Optional[pulumi.Input[builtins.int]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 capab: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfCapabArgs', 'Hotspot2ConfCapabArgsDict']]]]] = None,
                 cellular_network_list: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfCellularNetworkListArgs', 'Hotspot2ConfCellularNetworkListArgsDict']]]]] = None,
                 deauth_req_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 disable_dgaf: Optional[pulumi.Input[builtins.bool]] = None,
                 domain_name_list: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 friendly_name: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfFriendlyNameArgs', 'Hotspot2ConfFriendlyNameArgsDict']]]]] = None,
                 gas_advanced: Optional[pulumi.Input[builtins.bool]] = None,
                 gas_comeback_delay: Optional[pulumi.Input[builtins.int]] = None,
                 gas_frag_limit: Optional[pulumi.Input[builtins.int]] = None,
                 hessid: Optional[pulumi.Input[builtins.str]] = None,
                 hessid_used: Optional[pulumi.Input[builtins.bool]] = None,
                 icons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfIconsArgs', 'Hotspot2ConfIconsArgsDict']]]]] = None,
                 ipaddr_type_avail_v4: Optional[pulumi.Input[builtins.int]] = None,
                 ipaddr_type_avail_v6: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_downlink_load: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_downlink_load_set: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_downlink_speed: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_downlink_speed_set: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_info_at_capacity: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_info_link_status: Optional[pulumi.Input[builtins.str]] = None,
                 metrics_info_symmetric: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_measurement: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_measurement_set: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_status: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_uplink_load: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_uplink_load_set: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_uplink_speed: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_uplink_speed_set: Optional[pulumi.Input[builtins.bool]] = None,
                 nai_realm_list: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfNaiRealmListArgs', 'Hotspot2ConfNaiRealmListArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 network_access_asra: Optional[pulumi.Input[builtins.bool]] = None,
                 network_access_esr: Optional[pulumi.Input[builtins.bool]] = None,
                 network_access_internet: Optional[pulumi.Input[builtins.bool]] = None,
                 network_access_uesa: Optional[pulumi.Input[builtins.bool]] = None,
                 network_auth_type: Optional[pulumi.Input[builtins.int]] = None,
                 network_auth_url: Optional[pulumi.Input[builtins.str]] = None,
                 network_type: Optional[pulumi.Input[builtins.int]] = None,
                 osu: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfOsuArgs', 'Hotspot2ConfOsuArgsDict']]]]] = None,
                 osu_ssid: Optional[pulumi.Input[builtins.str]] = None,
                 qos_map_dcsp: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfQOSMapDcspArgs', 'Hotspot2ConfQOSMapDcspArgsDict']]]]] = None,
                 qos_map_exceptions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfQOSMapExceptionsArgs', 'Hotspot2ConfQOSMapExceptionsArgsDict']]]]] = None,
                 qos_map_status: Optional[pulumi.Input[builtins.bool]] = None,
                 roaming_consortium_list: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfRoamingConsortiumListArgs', 'Hotspot2ConfRoamingConsortiumListArgsDict']]]]] = None,
                 save_timestamp: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 t_c_filename: Optional[pulumi.Input[builtins.str]] = None,
                 t_c_timestamp: Optional[pulumi.Input[builtins.int]] = None,
                 venue_group: Optional[pulumi.Input[builtins.int]] = None,
                 venue_name: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfVenueNameArgs', 'Hotspot2ConfVenueNameArgsDict']]]]] = None,
                 venue_type: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        """
        Create a Hotspot2Conf resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[Hotspot2ConfArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Hotspot2Conf resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param Hotspot2ConfArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Hotspot2ConfArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 anqp_domain_id: Optional[pulumi.Input[builtins.int]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 capab: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfCapabArgs', 'Hotspot2ConfCapabArgsDict']]]]] = None,
                 cellular_network_list: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfCellularNetworkListArgs', 'Hotspot2ConfCellularNetworkListArgsDict']]]]] = None,
                 deauth_req_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 disable_dgaf: Optional[pulumi.Input[builtins.bool]] = None,
                 domain_name_list: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 friendly_name: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfFriendlyNameArgs', 'Hotspot2ConfFriendlyNameArgsDict']]]]] = None,
                 gas_advanced: Optional[pulumi.Input[builtins.bool]] = None,
                 gas_comeback_delay: Optional[pulumi.Input[builtins.int]] = None,
                 gas_frag_limit: Optional[pulumi.Input[builtins.int]] = None,
                 hessid: Optional[pulumi.Input[builtins.str]] = None,
                 hessid_used: Optional[pulumi.Input[builtins.bool]] = None,
                 icons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfIconsArgs', 'Hotspot2ConfIconsArgsDict']]]]] = None,
                 ipaddr_type_avail_v4: Optional[pulumi.Input[builtins.int]] = None,
                 ipaddr_type_avail_v6: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_downlink_load: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_downlink_load_set: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_downlink_speed: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_downlink_speed_set: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_info_at_capacity: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_info_link_status: Optional[pulumi.Input[builtins.str]] = None,
                 metrics_info_symmetric: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_measurement: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_measurement_set: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_status: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_uplink_load: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_uplink_load_set: Optional[pulumi.Input[builtins.bool]] = None,
                 metrics_uplink_speed: Optional[pulumi.Input[builtins.int]] = None,
                 metrics_uplink_speed_set: Optional[pulumi.Input[builtins.bool]] = None,
                 nai_realm_list: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfNaiRealmListArgs', 'Hotspot2ConfNaiRealmListArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 network_access_asra: Optional[pulumi.Input[builtins.bool]] = None,
                 network_access_esr: Optional[pulumi.Input[builtins.bool]] = None,
                 network_access_internet: Optional[pulumi.Input[builtins.bool]] = None,
                 network_access_uesa: Optional[pulumi.Input[builtins.bool]] = None,
                 network_auth_type: Optional[pulumi.Input[builtins.int]] = None,
                 network_auth_url: Optional[pulumi.Input[builtins.str]] = None,
                 network_type: Optional[pulumi.Input[builtins.int]] = None,
                 osu: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfOsuArgs', 'Hotspot2ConfOsuArgsDict']]]]] = None,
                 osu_ssid: Optional[pulumi.Input[builtins.str]] = None,
                 qos_map_dcsp: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfQOSMapDcspArgs', 'Hotspot2ConfQOSMapDcspArgsDict']]]]] = None,
                 qos_map_exceptions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfQOSMapExceptionsArgs', 'Hotspot2ConfQOSMapExceptionsArgsDict']]]]] = None,
                 qos_map_status: Optional[pulumi.Input[builtins.bool]] = None,
                 roaming_consortium_list: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfRoamingConsortiumListArgs', 'Hotspot2ConfRoamingConsortiumListArgsDict']]]]] = None,
                 save_timestamp: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 t_c_filename: Optional[pulumi.Input[builtins.str]] = None,
                 t_c_timestamp: Optional[pulumi.Input[builtins.int]] = None,
                 venue_group: Optional[pulumi.Input[builtins.int]] = None,
                 venue_name: Optional[pulumi.Input[Sequence[pulumi.Input[Union['Hotspot2ConfVenueNameArgs', 'Hotspot2ConfVenueNameArgsDict']]]]] = None,
                 venue_type: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Hotspot2ConfArgs.__new__(Hotspot2ConfArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["anqp_domain_id"] = anqp_domain_id
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["capab"] = capab
            __props__.__dict__["cellular_network_list"] = cellular_network_list
            __props__.__dict__["deauth_req_timeout"] = deauth_req_timeout
            __props__.__dict__["disable_dgaf"] = disable_dgaf
            __props__.__dict__["domain_name_list"] = domain_name_list
            __props__.__dict__["friendly_name"] = friendly_name
            __props__.__dict__["gas_advanced"] = gas_advanced
            __props__.__dict__["gas_comeback_delay"] = gas_comeback_delay
            __props__.__dict__["gas_frag_limit"] = gas_frag_limit
            __props__.__dict__["hessid"] = hessid
            __props__.__dict__["hessid_used"] = hessid_used
            __props__.__dict__["icons"] = icons
            __props__.__dict__["ipaddr_type_avail_v4"] = ipaddr_type_avail_v4
            __props__.__dict__["ipaddr_type_avail_v6"] = ipaddr_type_avail_v6
            __props__.__dict__["metrics_downlink_load"] = metrics_downlink_load
            __props__.__dict__["metrics_downlink_load_set"] = metrics_downlink_load_set
            __props__.__dict__["metrics_downlink_speed"] = metrics_downlink_speed
            __props__.__dict__["metrics_downlink_speed_set"] = metrics_downlink_speed_set
            __props__.__dict__["metrics_info_at_capacity"] = metrics_info_at_capacity
            __props__.__dict__["metrics_info_link_status"] = metrics_info_link_status
            __props__.__dict__["metrics_info_symmetric"] = metrics_info_symmetric
            __props__.__dict__["metrics_measurement"] = metrics_measurement
            __props__.__dict__["metrics_measurement_set"] = metrics_measurement_set
            __props__.__dict__["metrics_status"] = metrics_status
            __props__.__dict__["metrics_uplink_load"] = metrics_uplink_load
            __props__.__dict__["metrics_uplink_load_set"] = metrics_uplink_load_set
            __props__.__dict__["metrics_uplink_speed"] = metrics_uplink_speed
            __props__.__dict__["metrics_uplink_speed_set"] = metrics_uplink_speed_set
            __props__.__dict__["nai_realm_list"] = nai_realm_list
            __props__.__dict__["name"] = name
            __props__.__dict__["network_access_asra"] = network_access_asra
            __props__.__dict__["network_access_esr"] = network_access_esr
            __props__.__dict__["network_access_internet"] = network_access_internet
            __props__.__dict__["network_access_uesa"] = network_access_uesa
            __props__.__dict__["network_auth_type"] = network_auth_type
            __props__.__dict__["network_auth_url"] = network_auth_url
            __props__.__dict__["network_type"] = network_type
            __props__.__dict__["osu"] = osu
            __props__.__dict__["osu_ssid"] = osu_ssid
            __props__.__dict__["qos_map_dcsp"] = qos_map_dcsp
            __props__.__dict__["qos_map_exceptions"] = qos_map_exceptions
            __props__.__dict__["qos_map_status"] = qos_map_status
            __props__.__dict__["roaming_consortium_list"] = roaming_consortium_list
            __props__.__dict__["save_timestamp"] = save_timestamp
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["t_c_filename"] = t_c_filename
            __props__.__dict__["t_c_timestamp"] = t_c_timestamp
            __props__.__dict__["venue_group"] = venue_group
            __props__.__dict__["venue_name"] = venue_name
            __props__.__dict__["venue_type"] = venue_type
        super(Hotspot2Conf, __self__).__init__(
            'unifi-native:hotspot2conf:Hotspot2Conf',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Hotspot2Conf':
        """
        Get an existing Hotspot2Conf resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = Hotspot2ConfArgs.__new__(Hotspot2ConfArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["anqp_domain_id"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["capab"] = None
        __props__.__dict__["cellular_network_list"] = None
        __props__.__dict__["deauth_req_timeout"] = None
        __props__.__dict__["disable_dgaf"] = None
        __props__.__dict__["domain_name_list"] = None
        __props__.__dict__["friendly_name"] = None
        __props__.__dict__["gas_advanced"] = None
        __props__.__dict__["gas_comeback_delay"] = None
        __props__.__dict__["gas_frag_limit"] = None
        __props__.__dict__["hessid"] = None
        __props__.__dict__["hessid_used"] = None
        __props__.__dict__["icons"] = None
        __props__.__dict__["ipaddr_type_avail_v4"] = None
        __props__.__dict__["ipaddr_type_avail_v6"] = None
        __props__.__dict__["metrics_downlink_load"] = None
        __props__.__dict__["metrics_downlink_load_set"] = None
        __props__.__dict__["metrics_downlink_speed"] = None
        __props__.__dict__["metrics_downlink_speed_set"] = None
        __props__.__dict__["metrics_info_at_capacity"] = None
        __props__.__dict__["metrics_info_link_status"] = None
        __props__.__dict__["metrics_info_symmetric"] = None
        __props__.__dict__["metrics_measurement"] = None
        __props__.__dict__["metrics_measurement_set"] = None
        __props__.__dict__["metrics_status"] = None
        __props__.__dict__["metrics_uplink_load"] = None
        __props__.__dict__["metrics_uplink_load_set"] = None
        __props__.__dict__["metrics_uplink_speed"] = None
        __props__.__dict__["metrics_uplink_speed_set"] = None
        __props__.__dict__["nai_realm_list"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["network_access_asra"] = None
        __props__.__dict__["network_access_esr"] = None
        __props__.__dict__["network_access_internet"] = None
        __props__.__dict__["network_access_uesa"] = None
        __props__.__dict__["network_auth_type"] = None
        __props__.__dict__["network_auth_url"] = None
        __props__.__dict__["network_type"] = None
        __props__.__dict__["osu"] = None
        __props__.__dict__["osu_ssid"] = None
        __props__.__dict__["qos_map_dcsp"] = None
        __props__.__dict__["qos_map_exceptions"] = None
        __props__.__dict__["qos_map_status"] = None
        __props__.__dict__["roaming_consortium_list"] = None
        __props__.__dict__["save_timestamp"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["t_c_filename"] = None
        __props__.__dict__["t_c_timestamp"] = None
        __props__.__dict__["venue_group"] = None
        __props__.__dict__["venue_name"] = None
        __props__.__dict__["venue_type"] = None
        return Hotspot2Conf(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="anqpDomainId")
    def anqp_domain_id(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "anqp_domain_id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter
    def capab(self) -> pulumi.Output[Optional[Sequence['outputs.Hotspot2ConfCapab']]]:
        return pulumi.get(self, "capab")

    @property
    @pulumi.getter(name="cellularNetworkList")
    def cellular_network_list(self) -> pulumi.Output[Optional[Sequence['outputs.Hotspot2ConfCellularNetworkList']]]:
        return pulumi.get(self, "cellular_network_list")

    @property
    @pulumi.getter(name="deauthReqTimeout")
    def deauth_req_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "deauth_req_timeout")

    @property
    @pulumi.getter(name="disableDgaf")
    def disable_dgaf(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "disable_dgaf")

    @property
    @pulumi.getter(name="domainNameList")
    def domain_name_list(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "domain_name_list")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> pulumi.Output[Optional[Sequence['outputs.Hotspot2ConfFriendlyName']]]:
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter(name="gasAdvanced")
    def gas_advanced(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "gas_advanced")

    @property
    @pulumi.getter(name="gasComebackDelay")
    def gas_comeback_delay(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "gas_comeback_delay")

    @property
    @pulumi.getter(name="gasFragLimit")
    def gas_frag_limit(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "gas_frag_limit")

    @property
    @pulumi.getter
    def hessid(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "hessid")

    @property
    @pulumi.getter(name="hessidUsed")
    def hessid_used(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "hessid_used")

    @property
    @pulumi.getter
    def icons(self) -> pulumi.Output[Optional[Sequence['outputs.Hotspot2ConfIcons']]]:
        return pulumi.get(self, "icons")

    @property
    @pulumi.getter(name="ipaddrTypeAvailV4")
    def ipaddr_type_avail_v4(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "ipaddr_type_avail_v4")

    @property
    @pulumi.getter(name="ipaddrTypeAvailV6")
    def ipaddr_type_avail_v6(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "ipaddr_type_avail_v6")

    @property
    @pulumi.getter(name="metricsDownlinkLoad")
    def metrics_downlink_load(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "metrics_downlink_load")

    @property
    @pulumi.getter(name="metricsDownlinkLoadSet")
    def metrics_downlink_load_set(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "metrics_downlink_load_set")

    @property
    @pulumi.getter(name="metricsDownlinkSpeed")
    def metrics_downlink_speed(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "metrics_downlink_speed")

    @property
    @pulumi.getter(name="metricsDownlinkSpeedSet")
    def metrics_downlink_speed_set(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "metrics_downlink_speed_set")

    @property
    @pulumi.getter(name="metricsInfoAtCapacity")
    def metrics_info_at_capacity(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "metrics_info_at_capacity")

    @property
    @pulumi.getter(name="metricsInfoLinkStatus")
    def metrics_info_link_status(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "metrics_info_link_status")

    @property
    @pulumi.getter(name="metricsInfoSymmetric")
    def metrics_info_symmetric(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "metrics_info_symmetric")

    @property
    @pulumi.getter(name="metricsMeasurement")
    def metrics_measurement(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "metrics_measurement")

    @property
    @pulumi.getter(name="metricsMeasurementSet")
    def metrics_measurement_set(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "metrics_measurement_set")

    @property
    @pulumi.getter(name="metricsStatus")
    def metrics_status(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "metrics_status")

    @property
    @pulumi.getter(name="metricsUplinkLoad")
    def metrics_uplink_load(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "metrics_uplink_load")

    @property
    @pulumi.getter(name="metricsUplinkLoadSet")
    def metrics_uplink_load_set(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "metrics_uplink_load_set")

    @property
    @pulumi.getter(name="metricsUplinkSpeed")
    def metrics_uplink_speed(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "metrics_uplink_speed")

    @property
    @pulumi.getter(name="metricsUplinkSpeedSet")
    def metrics_uplink_speed_set(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "metrics_uplink_speed_set")

    @property
    @pulumi.getter(name="naiRealmList")
    def nai_realm_list(self) -> pulumi.Output[Optional[Sequence['outputs.Hotspot2ConfNaiRealmList']]]:
        return pulumi.get(self, "nai_realm_list")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkAccessAsra")
    def network_access_asra(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "network_access_asra")

    @property
    @pulumi.getter(name="networkAccessEsr")
    def network_access_esr(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "network_access_esr")

    @property
    @pulumi.getter(name="networkAccessInternet")
    def network_access_internet(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "network_access_internet")

    @property
    @pulumi.getter(name="networkAccessUesa")
    def network_access_uesa(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "network_access_uesa")

    @property
    @pulumi.getter(name="networkAuthType")
    def network_auth_type(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "network_auth_type")

    @property
    @pulumi.getter(name="networkAuthUrl")
    def network_auth_url(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "network_auth_url")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def osu(self) -> pulumi.Output[Optional[Sequence['outputs.Hotspot2ConfOsu']]]:
        return pulumi.get(self, "osu")

    @property
    @pulumi.getter(name="osuSsid")
    def osu_ssid(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "osu_ssid")

    @property
    @pulumi.getter(name="qosMapDcsp")
    def qos_map_dcsp(self) -> pulumi.Output[Optional[Sequence['outputs.Hotspot2ConfQOSMapDcsp']]]:
        return pulumi.get(self, "qos_map_dcsp")

    @property
    @pulumi.getter(name="qosMapExceptions")
    def qos_map_exceptions(self) -> pulumi.Output[Optional[Sequence['outputs.Hotspot2ConfQOSMapExceptions']]]:
        return pulumi.get(self, "qos_map_exceptions")

    @property
    @pulumi.getter(name="qosMapStatus")
    def qos_map_status(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "qos_map_status")

    @property
    @pulumi.getter(name="roamingConsortiumList")
    def roaming_consortium_list(self) -> pulumi.Output[Optional[Sequence['outputs.Hotspot2ConfRoamingConsortiumList']]]:
        return pulumi.get(self, "roaming_consortium_list")

    @property
    @pulumi.getter(name="saveTimestamp")
    def save_timestamp(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "save_timestamp")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="tCFilename")
    def t_c_filename(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "t_c_filename")

    @property
    @pulumi.getter(name="tCTimestamp")
    def t_c_timestamp(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "t_c_timestamp")

    @property
    @pulumi.getter(name="venueGroup")
    def venue_group(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "venue_group")

    @property
    @pulumi.getter(name="venueName")
    def venue_name(self) -> pulumi.Output[Optional[Sequence['outputs.Hotspot2ConfVenueName']]]:
        return pulumi.get(self, "venue_name")

    @property
    @pulumi.getter(name="venueType")
    def venue_type(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "venue_type")

