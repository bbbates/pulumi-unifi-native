# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SettingRsyslogdArgs', 'SettingRsyslogd']

@pulumi.input_type
class SettingRsyslogdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 debug: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ip: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 log_all_contents: Optional[pulumi.Input[builtins.bool]] = None,
                 netconsole_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 netconsole_host: Optional[pulumi.Input[builtins.str]] = None,
                 netconsole_port: Optional[pulumi.Input[builtins.int]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 this_controller: Optional[pulumi.Input[builtins.bool]] = None,
                 this_controller_encrypted_only: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a SettingRsyslogd resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if log_all_contents is not None:
            pulumi.set(__self__, "log_all_contents", log_all_contents)
        if netconsole_enabled is not None:
            pulumi.set(__self__, "netconsole_enabled", netconsole_enabled)
        if netconsole_host is not None:
            pulumi.set(__self__, "netconsole_host", netconsole_host)
        if netconsole_port is not None:
            pulumi.set(__self__, "netconsole_port", netconsole_port)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if this_controller is not None:
            pulumi.set(__self__, "this_controller", this_controller)
        if this_controller_encrypted_only is not None:
            pulumi.set(__self__, "this_controller_encrypted_only", this_controller_encrypted_only)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "contents", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="logAllContents")
    def log_all_contents(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "log_all_contents")

    @log_all_contents.setter
    def log_all_contents(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "log_all_contents", value)

    @property
    @pulumi.getter(name="netconsoleEnabled")
    def netconsole_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "netconsole_enabled")

    @netconsole_enabled.setter
    def netconsole_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "netconsole_enabled", value)

    @property
    @pulumi.getter(name="netconsoleHost")
    def netconsole_host(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "netconsole_host")

    @netconsole_host.setter
    def netconsole_host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "netconsole_host", value)

    @property
    @pulumi.getter(name="netconsolePort")
    def netconsole_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "netconsole_port")

    @netconsole_port.setter
    def netconsole_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "netconsole_port", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="thisController")
    def this_controller(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "this_controller")

    @this_controller.setter
    def this_controller(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "this_controller", value)

    @property
    @pulumi.getter(name="thisControllerEncryptedOnly")
    def this_controller_encrypted_only(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "this_controller_encrypted_only")

    @this_controller_encrypted_only.setter
    def this_controller_encrypted_only(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "this_controller_encrypted_only", value)


@pulumi.type_token("unifi-native:rsyslogd:SettingRsyslogd")
class SettingRsyslogd(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 debug: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ip: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 log_all_contents: Optional[pulumi.Input[builtins.bool]] = None,
                 netconsole_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 netconsole_host: Optional[pulumi.Input[builtins.str]] = None,
                 netconsole_port: Optional[pulumi.Input[builtins.int]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 this_controller: Optional[pulumi.Input[builtins.bool]] = None,
                 this_controller_encrypted_only: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        Create a SettingRsyslogd resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SettingRsyslogdArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SettingRsyslogd resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SettingRsyslogdArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingRsyslogdArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 debug: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ip: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 log_all_contents: Optional[pulumi.Input[builtins.bool]] = None,
                 netconsole_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 netconsole_host: Optional[pulumi.Input[builtins.str]] = None,
                 netconsole_port: Optional[pulumi.Input[builtins.int]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 this_controller: Optional[pulumi.Input[builtins.bool]] = None,
                 this_controller_encrypted_only: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingRsyslogdArgs.__new__(SettingRsyslogdArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["contents"] = contents
            __props__.__dict__["debug"] = debug
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["ip"] = ip
            __props__.__dict__["key"] = key
            __props__.__dict__["log_all_contents"] = log_all_contents
            __props__.__dict__["netconsole_enabled"] = netconsole_enabled
            __props__.__dict__["netconsole_host"] = netconsole_host
            __props__.__dict__["netconsole_port"] = netconsole_port
            __props__.__dict__["port"] = port
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["this_controller"] = this_controller
            __props__.__dict__["this_controller_encrypted_only"] = this_controller_encrypted_only
        super(SettingRsyslogd, __self__).__init__(
            'unifi-native:rsyslogd:SettingRsyslogd',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SettingRsyslogd':
        """
        Get an existing SettingRsyslogd resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SettingRsyslogdArgs.__new__(SettingRsyslogdArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["contents"] = None
        __props__.__dict__["debug"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["ip"] = None
        __props__.__dict__["key"] = None
        __props__.__dict__["log_all_contents"] = None
        __props__.__dict__["netconsole_enabled"] = None
        __props__.__dict__["netconsole_host"] = None
        __props__.__dict__["netconsole_port"] = None
        __props__.__dict__["port"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["this_controller"] = None
        __props__.__dict__["this_controller_encrypted_only"] = None
        return SettingRsyslogd(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter
    def contents(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def debug(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="logAllContents")
    def log_all_contents(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "log_all_contents")

    @property
    @pulumi.getter(name="netconsoleEnabled")
    def netconsole_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "netconsole_enabled")

    @property
    @pulumi.getter(name="netconsoleHost")
    def netconsole_host(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "netconsole_host")

    @property
    @pulumi.getter(name="netconsolePort")
    def netconsole_port(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "netconsole_port")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="thisController")
    def this_controller(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "this_controller")

    @property
    @pulumi.getter(name="thisControllerEncryptedOnly")
    def this_controller_encrypted_only(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "this_controller_encrypted_only")

