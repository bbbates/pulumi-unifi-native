# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 dev_id_override: Optional[pulumi.Input[builtins.int]] = None,
                 fixed_ap_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 fixed_ap_mac: Optional[pulumi.Input[builtins.str]] = None,
                 fixed_ip: Optional[pulumi.Input[builtins.str]] = None,
                 hostname: Optional[pulumi.Input[builtins.str]] = None,
                 ip: Optional[pulumi.Input[builtins.str]] = None,
                 last_seen: Optional[pulumi.Input[builtins.int]] = None,
                 local_dns_record: Optional[pulumi.Input[builtins.str]] = None,
                 local_dns_record_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mac: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 network_id: Optional[pulumi.Input[builtins.str]] = None,
                 note: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 use_fixedip: Optional[pulumi.Input[builtins.bool]] = None,
                 usergroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 virtual_network_override_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 virtual_network_override_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a User resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if blocked is not None:
            pulumi.set(__self__, "blocked", blocked)
        if dev_id_override is not None:
            pulumi.set(__self__, "dev_id_override", dev_id_override)
        if fixed_ap_enabled is not None:
            pulumi.set(__self__, "fixed_ap_enabled", fixed_ap_enabled)
        if fixed_ap_mac is not None:
            pulumi.set(__self__, "fixed_ap_mac", fixed_ap_mac)
        if fixed_ip is not None:
            pulumi.set(__self__, "fixed_ip", fixed_ip)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if last_seen is not None:
            pulumi.set(__self__, "last_seen", last_seen)
        if local_dns_record is not None:
            pulumi.set(__self__, "local_dns_record", local_dns_record)
        if local_dns_record_enabled is not None:
            pulumi.set(__self__, "local_dns_record_enabled", local_dns_record_enabled)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if use_fixedip is not None:
            pulumi.set(__self__, "use_fixedip", use_fixedip)
        if usergroup_id is not None:
            pulumi.set(__self__, "usergroup_id", usergroup_id)
        if virtual_network_override_enabled is not None:
            pulumi.set(__self__, "virtual_network_override_enabled", virtual_network_override_enabled)
        if virtual_network_override_id is not None:
            pulumi.set(__self__, "virtual_network_override_id", virtual_network_override_id)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter
    def blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "blocked")

    @blocked.setter
    def blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "blocked", value)

    @property
    @pulumi.getter(name="devIdOverride")
    def dev_id_override(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dev_id_override")

    @dev_id_override.setter
    def dev_id_override(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dev_id_override", value)

    @property
    @pulumi.getter(name="fixedApEnabled")
    def fixed_ap_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "fixed_ap_enabled")

    @fixed_ap_enabled.setter
    def fixed_ap_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "fixed_ap_enabled", value)

    @property
    @pulumi.getter(name="fixedApMac")
    def fixed_ap_mac(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "fixed_ap_mac")

    @fixed_ap_mac.setter
    def fixed_ap_mac(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fixed_ap_mac", value)

    @property
    @pulumi.getter(name="fixedIp")
    def fixed_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "fixed_ip")

    @fixed_ip.setter
    def fixed_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fixed_ip", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "last_seen")

    @last_seen.setter
    def last_seen(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "last_seen", value)

    @property
    @pulumi.getter(name="localDnsRecord")
    def local_dns_record(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "local_dns_record")

    @local_dns_record.setter
    def local_dns_record(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "local_dns_record", value)

    @property
    @pulumi.getter(name="localDnsRecordEnabled")
    def local_dns_record_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "local_dns_record_enabled")

    @local_dns_record_enabled.setter
    def local_dns_record_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "local_dns_record_enabled", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="useFixedip")
    def use_fixedip(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "use_fixedip")

    @use_fixedip.setter
    def use_fixedip(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "use_fixedip", value)

    @property
    @pulumi.getter(name="usergroupId")
    def usergroup_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "usergroup_id")

    @usergroup_id.setter
    def usergroup_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "usergroup_id", value)

    @property
    @pulumi.getter(name="virtualNetworkOverrideEnabled")
    def virtual_network_override_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "virtual_network_override_enabled")

    @virtual_network_override_enabled.setter
    def virtual_network_override_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "virtual_network_override_enabled", value)

    @property
    @pulumi.getter(name="virtualNetworkOverrideId")
    def virtual_network_override_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "virtual_network_override_id")

    @virtual_network_override_id.setter
    def virtual_network_override_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "virtual_network_override_id", value)


@pulumi.type_token("unifi-native:user:User")
class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 dev_id_override: Optional[pulumi.Input[builtins.int]] = None,
                 fixed_ap_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 fixed_ap_mac: Optional[pulumi.Input[builtins.str]] = None,
                 fixed_ip: Optional[pulumi.Input[builtins.str]] = None,
                 hostname: Optional[pulumi.Input[builtins.str]] = None,
                 ip: Optional[pulumi.Input[builtins.str]] = None,
                 last_seen: Optional[pulumi.Input[builtins.int]] = None,
                 local_dns_record: Optional[pulumi.Input[builtins.str]] = None,
                 local_dns_record_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mac: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 network_id: Optional[pulumi.Input[builtins.str]] = None,
                 note: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 use_fixedip: Optional[pulumi.Input[builtins.bool]] = None,
                 usergroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 virtual_network_override_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 virtual_network_override_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a User resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[UserArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a User resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 dev_id_override: Optional[pulumi.Input[builtins.int]] = None,
                 fixed_ap_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 fixed_ap_mac: Optional[pulumi.Input[builtins.str]] = None,
                 fixed_ip: Optional[pulumi.Input[builtins.str]] = None,
                 hostname: Optional[pulumi.Input[builtins.str]] = None,
                 ip: Optional[pulumi.Input[builtins.str]] = None,
                 last_seen: Optional[pulumi.Input[builtins.int]] = None,
                 local_dns_record: Optional[pulumi.Input[builtins.str]] = None,
                 local_dns_record_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mac: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 network_id: Optional[pulumi.Input[builtins.str]] = None,
                 note: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 use_fixedip: Optional[pulumi.Input[builtins.bool]] = None,
                 usergroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 virtual_network_override_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 virtual_network_override_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["blocked"] = blocked
            __props__.__dict__["dev_id_override"] = dev_id_override
            __props__.__dict__["fixed_ap_enabled"] = fixed_ap_enabled
            __props__.__dict__["fixed_ap_mac"] = fixed_ap_mac
            __props__.__dict__["fixed_ip"] = fixed_ip
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["ip"] = ip
            __props__.__dict__["last_seen"] = last_seen
            __props__.__dict__["local_dns_record"] = local_dns_record
            __props__.__dict__["local_dns_record_enabled"] = local_dns_record_enabled
            __props__.__dict__["mac"] = mac
            __props__.__dict__["name"] = name
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["note"] = note
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["use_fixedip"] = use_fixedip
            __props__.__dict__["usergroup_id"] = usergroup_id
            __props__.__dict__["virtual_network_override_enabled"] = virtual_network_override_enabled
            __props__.__dict__["virtual_network_override_id"] = virtual_network_override_id
        super(User, __self__).__init__(
            'unifi-native:user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = UserArgs.__new__(UserArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["blocked"] = None
        __props__.__dict__["dev_id_override"] = None
        __props__.__dict__["fixed_ap_enabled"] = None
        __props__.__dict__["fixed_ap_mac"] = None
        __props__.__dict__["fixed_ip"] = None
        __props__.__dict__["hostname"] = None
        __props__.__dict__["ip"] = None
        __props__.__dict__["last_seen"] = None
        __props__.__dict__["local_dns_record"] = None
        __props__.__dict__["local_dns_record_enabled"] = None
        __props__.__dict__["mac"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["network_id"] = None
        __props__.__dict__["note"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["use_fixedip"] = None
        __props__.__dict__["usergroup_id"] = None
        __props__.__dict__["virtual_network_override_enabled"] = None
        __props__.__dict__["virtual_network_override_id"] = None
        return User(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter
    def blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "blocked")

    @property
    @pulumi.getter(name="devIdOverride")
    def dev_id_override(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "dev_id_override")

    @property
    @pulumi.getter(name="fixedApEnabled")
    def fixed_ap_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "fixed_ap_enabled")

    @property
    @pulumi.getter(name="fixedApMac")
    def fixed_ap_mac(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "fixed_ap_mac")

    @property
    @pulumi.getter(name="fixedIp")
    def fixed_ip(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "fixed_ip")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter(name="localDnsRecord")
    def local_dns_record(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "local_dns_record")

    @property
    @pulumi.getter(name="localDnsRecordEnabled")
    def local_dns_record_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "local_dns_record_enabled")

    @property
    @pulumi.getter
    def mac(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def note(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="useFixedip")
    def use_fixedip(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "use_fixedip")

    @property
    @pulumi.getter(name="usergroupId")
    def usergroup_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "usergroup_id")

    @property
    @pulumi.getter(name="virtualNetworkOverrideEnabled")
    def virtual_network_override_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "virtual_network_override_enabled")

    @property
    @pulumi.getter(name="virtualNetworkOverrideId")
    def virtual_network_override_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "virtual_network_override_id")

