# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'FirewallPolicyScheduleDto',
    'SimpleAppBlocking',
]

@pulumi.output_type
class FirewallPolicyScheduleDto(dict):
    def __init__(__self__, *,
                 mode: 'FirewallPolicyScheduleDtoMode',
                 end_date_applicable_to_custom: Optional[builtins.str] = None,
                 start_date_applicable_to_custom: Optional[builtins.str] = None,
                 date: Optional[builtins.str] = None,
                 repeat_on_days: Optional[Sequence['FirewallPolicyScheduleDtoRepeatOnDaysItem']] = None,
                 time_all_day: Optional[builtins.bool] = None,
                 time_range_end: Optional[builtins.str] = None,
                 time_range_start: Optional[builtins.str] = None):
        """
        :param builtins.str date: Start date. Applicable to: ONE_TIME_ONLY
        :param Sequence['FirewallPolicyScheduleDtoRepeatOnDaysItem'] repeat_on_days: Repeat on on days. Applicable to: EVERY_WEEK, CUSTOM
        :param builtins.bool time_all_day: Rule will be running for all day. Time range start/end are ignored. Applicable to: EVERY_WEEK, CUSTOM
        :param builtins.str time_range_end: End time in 24 hours format. It accepts 24:00 as end of the day. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        :param builtins.str time_range_start: Start time in 24 hours format. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        """
        pulumi.set(__self__, "mode", mode)
        if end_date_applicable_to_custom is not None:
            pulumi.set(__self__, "end_date_applicable_to_custom", end_date_applicable_to_custom)
        if start_date_applicable_to_custom is not None:
            pulumi.set(__self__, "start_date_applicable_to_custom", start_date_applicable_to_custom)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if repeat_on_days is not None:
            pulumi.set(__self__, "repeat_on_days", repeat_on_days)
        if time_all_day is not None:
            pulumi.set(__self__, "time_all_day", time_all_day)
        if time_range_end is not None:
            pulumi.set(__self__, "time_range_end", time_range_end)
        if time_range_start is not None:
            pulumi.set(__self__, "time_range_start", time_range_start)

    @property
    @pulumi.getter
    def mode(self) -> 'FirewallPolicyScheduleDtoMode':
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="EndDateApplicableToCUSTOM")
    def end_date_applicable_to_custom(self) -> Optional[builtins.str]:
        return pulumi.get(self, "end_date_applicable_to_custom")

    @property
    @pulumi.getter(name="StartDateApplicableToCUSTOM")
    def start_date_applicable_to_custom(self) -> Optional[builtins.str]:
        return pulumi.get(self, "start_date_applicable_to_custom")

    @property
    @pulumi.getter
    def date(self) -> Optional[builtins.str]:
        """
        Start date. Applicable to: ONE_TIME_ONLY
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter(name="repeatOnDays")
    def repeat_on_days(self) -> Optional[Sequence['FirewallPolicyScheduleDtoRepeatOnDaysItem']]:
        """
        Repeat on on days. Applicable to: EVERY_WEEK, CUSTOM
        """
        return pulumi.get(self, "repeat_on_days")

    @property
    @pulumi.getter(name="timeAllDay")
    def time_all_day(self) -> Optional[builtins.bool]:
        """
        Rule will be running for all day. Time range start/end are ignored. Applicable to: EVERY_WEEK, CUSTOM
        """
        return pulumi.get(self, "time_all_day")

    @property
    @pulumi.getter(name="timeRangeEnd")
    def time_range_end(self) -> Optional[builtins.str]:
        """
        End time in 24 hours format. It accepts 24:00 as end of the day. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        """
        return pulumi.get(self, "time_range_end")

    @property
    @pulumi.getter(name="timeRangeStart")
    def time_range_start(self) -> Optional[builtins.str]:
        """
        Start time in 24 hours format. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        """
        return pulumi.get(self, "time_range_start")


@pulumi.output_type
class SimpleAppBlocking(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 schedule: 'outputs.FirewallPolicyScheduleDto',
                 id: Optional[builtins.str] = None,
                 app_category_ids: Optional[Sequence[builtins.int]] = None,
                 app_ids: Optional[Sequence[builtins.int]] = None,
                 client_macs: Optional[Sequence[builtins.str]] = None,
                 network_ids: Optional[Sequence[builtins.str]] = None,
                 target_type: Optional['SimpleAppBlockingTargetType'] = None,
                 type: Optional['SimpleAppBlockingType'] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schedule", schedule)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if app_category_ids is not None:
            pulumi.set(__self__, "app_category_ids", app_category_ids)
        if app_ids is not None:
            pulumi.set(__self__, "app_ids", app_ids)
        if client_macs is not None:
            pulumi.set(__self__, "client_macs", client_macs)
        if network_ids is not None:
            pulumi.set(__self__, "network_ids", network_ids)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schedule(self) -> 'outputs.FirewallPolicyScheduleDto':
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="appCategoryIds")
    def app_category_ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "app_category_ids")

    @property
    @pulumi.getter(name="appIds")
    def app_ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "app_ids")

    @property
    @pulumi.getter(name="clientMacs")
    def client_macs(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "client_macs")

    @property
    @pulumi.getter(name="networkIds")
    def network_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "network_ids")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional['SimpleAppBlockingTargetType']:
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter
    def type(self) -> Optional['SimpleAppBlockingType']:
        return pulumi.get(self, "type")


