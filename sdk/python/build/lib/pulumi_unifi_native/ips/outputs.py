# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'Meta',
    'SettingIps',
    'SettingIpsAdBlockingConfigurations',
    'SettingIpsAlerts',
    'SettingIpsDNSFilters',
    'SettingIpsHoneypot',
    'SettingIpsSuppression',
    'SettingIpsTracking',
    'SettingIpsWhitelist',
]

@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


@pulumi.output_type
class SettingIps(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 ad_blocking_configurations: Optional[Sequence['outputs.SettingIpsAdBlockingConfigurations']] = None,
                 ad_blocking_enabled: Optional[builtins.bool] = None,
                 advanced_filtering_preference: Optional[builtins.str] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 dns_filtering: Optional[builtins.bool] = None,
                 dns_filters: Optional[Sequence['outputs.SettingIpsDNSFilters']] = None,
                 enabled_categories: Optional[Sequence[builtins.str]] = None,
                 enabled_networks: Optional[Sequence[builtins.str]] = None,
                 honeypot: Optional[Sequence['outputs.SettingIpsHoneypot']] = None,
                 honeypot_enabled: Optional[builtins.bool] = None,
                 ips_mode: Optional[builtins.str] = None,
                 key: Optional[builtins.str] = None,
                 memory_optimized: Optional[builtins.bool] = None,
                 restrict_torrents: Optional[builtins.bool] = None,
                 site_id: Optional[builtins.str] = None,
                 suppression: Optional['outputs.SettingIpsSuppression'] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ad_blocking_configurations is not None:
            pulumi.set(__self__, "ad_blocking_configurations", ad_blocking_configurations)
        if ad_blocking_enabled is not None:
            pulumi.set(__self__, "ad_blocking_enabled", ad_blocking_enabled)
        if advanced_filtering_preference is not None:
            pulumi.set(__self__, "advanced_filtering_preference", advanced_filtering_preference)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if dns_filtering is not None:
            pulumi.set(__self__, "dns_filtering", dns_filtering)
        if dns_filters is not None:
            pulumi.set(__self__, "dns_filters", dns_filters)
        if enabled_categories is not None:
            pulumi.set(__self__, "enabled_categories", enabled_categories)
        if enabled_networks is not None:
            pulumi.set(__self__, "enabled_networks", enabled_networks)
        if honeypot is not None:
            pulumi.set(__self__, "honeypot", honeypot)
        if honeypot_enabled is not None:
            pulumi.set(__self__, "honeypot_enabled", honeypot_enabled)
        if ips_mode is not None:
            pulumi.set(__self__, "ips_mode", ips_mode)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if memory_optimized is not None:
            pulumi.set(__self__, "memory_optimized", memory_optimized)
        if restrict_torrents is not None:
            pulumi.set(__self__, "restrict_torrents", restrict_torrents)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if suppression is not None:
            pulumi.set(__self__, "suppression", suppression)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="adBlockingConfigurations")
    def ad_blocking_configurations(self) -> Optional[Sequence['outputs.SettingIpsAdBlockingConfigurations']]:
        return pulumi.get(self, "ad_blocking_configurations")

    @property
    @pulumi.getter(name="adBlockingEnabled")
    def ad_blocking_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "ad_blocking_enabled")

    @property
    @pulumi.getter(name="advancedFilteringPreference")
    def advanced_filtering_preference(self) -> Optional[builtins.str]:
        return pulumi.get(self, "advanced_filtering_preference")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="dnsFiltering")
    def dns_filtering(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dns_filtering")

    @property
    @pulumi.getter(name="dnsFilters")
    def dns_filters(self) -> Optional[Sequence['outputs.SettingIpsDNSFilters']]:
        return pulumi.get(self, "dns_filters")

    @property
    @pulumi.getter(name="enabledCategories")
    def enabled_categories(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "enabled_categories")

    @property
    @pulumi.getter(name="enabledNetworks")
    def enabled_networks(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "enabled_networks")

    @property
    @pulumi.getter
    def honeypot(self) -> Optional[Sequence['outputs.SettingIpsHoneypot']]:
        return pulumi.get(self, "honeypot")

    @property
    @pulumi.getter(name="honeypotEnabled")
    def honeypot_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "honeypot_enabled")

    @property
    @pulumi.getter(name="ipsMode")
    def ips_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ips_mode")

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="memoryOptimized")
    def memory_optimized(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "memory_optimized")

    @property
    @pulumi.getter(name="restrictTorrents")
    def restrict_torrents(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "restrict_torrents")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def suppression(self) -> Optional['outputs.SettingIpsSuppression']:
        return pulumi.get(self, "suppression")


@pulumi.output_type
class SettingIpsAdBlockingConfigurations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkId":
            suggest = "network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingIpsAdBlockingConfigurations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingIpsAdBlockingConfigurations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingIpsAdBlockingConfigurations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_id: Optional[builtins.str] = None):
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "network_id")


@pulumi.output_type
class SettingIpsAlerts(dict):
    def __init__(__self__, *,
                 category: Optional[builtins.str] = None,
                 gid: Optional[builtins.int] = None,
                 id: Optional[builtins.int] = None,
                 signature: Optional[builtins.str] = None,
                 tracking: Optional[Sequence['outputs.SettingIpsTracking']] = None,
                 type: Optional[builtins.str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if gid is not None:
            pulumi.set(__self__, "gid", gid)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if signature is not None:
            pulumi.set(__self__, "signature", signature)
        if tracking is not None:
            pulumi.set(__self__, "tracking", tracking)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def category(self) -> Optional[builtins.str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def gid(self) -> Optional[builtins.int]:
        return pulumi.get(self, "gid")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def signature(self) -> Optional[builtins.str]:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter
    def tracking(self) -> Optional[Sequence['outputs.SettingIpsTracking']]:
        return pulumi.get(self, "tracking")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SettingIpsDNSFilters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedSites":
            suggest = "allowed_sites"
        elif key == "blockedSites":
            suggest = "blocked_sites"
        elif key == "blockedTld":
            suggest = "blocked_tld"
        elif key == "networkId":
            suggest = "network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingIpsDNSFilters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingIpsDNSFilters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingIpsDNSFilters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_sites: Optional[Sequence[builtins.str]] = None,
                 blocked_sites: Optional[Sequence[builtins.str]] = None,
                 blocked_tld: Optional[Sequence[builtins.str]] = None,
                 description: Optional[builtins.str] = None,
                 filter: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 network_id: Optional[builtins.str] = None,
                 version: Optional[builtins.str] = None):
        if allowed_sites is not None:
            pulumi.set(__self__, "allowed_sites", allowed_sites)
        if blocked_sites is not None:
            pulumi.set(__self__, "blocked_sites", blocked_sites)
        if blocked_tld is not None:
            pulumi.set(__self__, "blocked_tld", blocked_tld)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="allowedSites")
    def allowed_sites(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "allowed_sites")

    @property
    @pulumi.getter(name="blockedSites")
    def blocked_sites(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "blocked_sites")

    @property
    @pulumi.getter(name="blockedTld")
    def blocked_tld(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "blocked_tld")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> Optional[builtins.str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class SettingIpsHoneypot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "networkId":
            suggest = "network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingIpsHoneypot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingIpsHoneypot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingIpsHoneypot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[builtins.str] = None,
                 network_id: Optional[builtins.str] = None,
                 version: Optional[builtins.str] = None):
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class SettingIpsSuppression(dict):
    def __init__(__self__, *,
                 alerts: Optional[Sequence['outputs.SettingIpsAlerts']] = None,
                 whitelist: Optional[Sequence['outputs.SettingIpsWhitelist']] = None):
        if alerts is not None:
            pulumi.set(__self__, "alerts", alerts)
        if whitelist is not None:
            pulumi.set(__self__, "whitelist", whitelist)

    @property
    @pulumi.getter
    def alerts(self) -> Optional[Sequence['outputs.SettingIpsAlerts']]:
        return pulumi.get(self, "alerts")

    @property
    @pulumi.getter
    def whitelist(self) -> Optional[Sequence['outputs.SettingIpsWhitelist']]:
        return pulumi.get(self, "whitelist")


@pulumi.output_type
class SettingIpsTracking(dict):
    def __init__(__self__, *,
                 direction: Optional[builtins.str] = None,
                 mode: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[builtins.str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SettingIpsWhitelist(dict):
    def __init__(__self__, *,
                 direction: Optional[builtins.str] = None,
                 mode: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[builtins.str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        return pulumi.get(self, "value")


