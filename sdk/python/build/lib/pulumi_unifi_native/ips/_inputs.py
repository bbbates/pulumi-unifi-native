# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'SettingIpsAdBlockingConfigurationsArgs',
    'SettingIpsAdBlockingConfigurationsArgsDict',
    'SettingIpsAlertsArgs',
    'SettingIpsAlertsArgsDict',
    'SettingIpsDNSFiltersArgs',
    'SettingIpsDNSFiltersArgsDict',
    'SettingIpsHoneypotArgs',
    'SettingIpsHoneypotArgsDict',
    'SettingIpsSuppressionArgs',
    'SettingIpsSuppressionArgsDict',
    'SettingIpsTrackingArgs',
    'SettingIpsTrackingArgsDict',
    'SettingIpsWhitelistArgs',
    'SettingIpsWhitelistArgsDict',
]

MYPY = False

if not MYPY:
    class SettingIpsAdBlockingConfigurationsArgsDict(TypedDict):
        network_id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    SettingIpsAdBlockingConfigurationsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingIpsAdBlockingConfigurationsArgs:
    def __init__(__self__, *,
                 network_id: Optional[pulumi.Input[builtins.str]] = None):
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "network_id", value)


if not MYPY:
    class SettingIpsAlertsArgsDict(TypedDict):
        category: NotRequired[pulumi.Input[builtins.str]]
        gid: NotRequired[pulumi.Input[builtins.int]]
        id: NotRequired[pulumi.Input[builtins.int]]
        signature: NotRequired[pulumi.Input[builtins.str]]
        tracking: NotRequired[pulumi.Input[Sequence[pulumi.Input['SettingIpsTrackingArgsDict']]]]
        type: NotRequired[pulumi.Input[builtins.str]]
elif False:
    SettingIpsAlertsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingIpsAlertsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[builtins.str]] = None,
                 gid: Optional[pulumi.Input[builtins.int]] = None,
                 id: Optional[pulumi.Input[builtins.int]] = None,
                 signature: Optional[pulumi.Input[builtins.str]] = None,
                 tracking: Optional[pulumi.Input[Sequence[pulumi.Input['SettingIpsTrackingArgs']]]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if gid is not None:
            pulumi.set(__self__, "gid", gid)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if signature is not None:
            pulumi.set(__self__, "signature", signature)
        if tracking is not None:
            pulumi.set(__self__, "tracking", tracking)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def gid(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "gid")

    @gid.setter
    def gid(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "gid", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def signature(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "signature", value)

    @property
    @pulumi.getter
    def tracking(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingIpsTrackingArgs']]]]:
        return pulumi.get(self, "tracking")

    @tracking.setter
    def tracking(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingIpsTrackingArgs']]]]):
        pulumi.set(self, "tracking", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class SettingIpsDNSFiltersArgsDict(TypedDict):
        allowed_sites: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        blocked_sites: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        blocked_tld: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        description: NotRequired[pulumi.Input[builtins.str]]
        filter: NotRequired[pulumi.Input[builtins.str]]
        name: NotRequired[pulumi.Input[builtins.str]]
        network_id: NotRequired[pulumi.Input[builtins.str]]
        version: NotRequired[pulumi.Input[builtins.str]]
elif False:
    SettingIpsDNSFiltersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingIpsDNSFiltersArgs:
    def __init__(__self__, *,
                 allowed_sites: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_sites: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_tld: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 filter: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 network_id: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None):
        if allowed_sites is not None:
            pulumi.set(__self__, "allowed_sites", allowed_sites)
        if blocked_sites is not None:
            pulumi.set(__self__, "blocked_sites", blocked_sites)
        if blocked_tld is not None:
            pulumi.set(__self__, "blocked_tld", blocked_tld)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="allowedSites")
    def allowed_sites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "allowed_sites")

    @allowed_sites.setter
    def allowed_sites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "allowed_sites", value)

    @property
    @pulumi.getter(name="blockedSites")
    def blocked_sites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "blocked_sites")

    @blocked_sites.setter
    def blocked_sites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "blocked_sites", value)

    @property
    @pulumi.getter(name="blockedTld")
    def blocked_tld(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "blocked_tld")

    @blocked_tld.setter
    def blocked_tld(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "blocked_tld", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class SettingIpsHoneypotArgsDict(TypedDict):
        ip_address: NotRequired[pulumi.Input[builtins.str]]
        network_id: NotRequired[pulumi.Input[builtins.str]]
        version: NotRequired[pulumi.Input[builtins.str]]
elif False:
    SettingIpsHoneypotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingIpsHoneypotArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[builtins.str]] = None,
                 network_id: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.str]] = None):
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class SettingIpsSuppressionArgsDict(TypedDict):
        alerts: NotRequired[pulumi.Input[Sequence[pulumi.Input['SettingIpsAlertsArgsDict']]]]
        whitelist: NotRequired[pulumi.Input[Sequence[pulumi.Input['SettingIpsWhitelistArgsDict']]]]
elif False:
    SettingIpsSuppressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingIpsSuppressionArgs:
    def __init__(__self__, *,
                 alerts: Optional[pulumi.Input[Sequence[pulumi.Input['SettingIpsAlertsArgs']]]] = None,
                 whitelist: Optional[pulumi.Input[Sequence[pulumi.Input['SettingIpsWhitelistArgs']]]] = None):
        if alerts is not None:
            pulumi.set(__self__, "alerts", alerts)
        if whitelist is not None:
            pulumi.set(__self__, "whitelist", whitelist)

    @property
    @pulumi.getter
    def alerts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingIpsAlertsArgs']]]]:
        return pulumi.get(self, "alerts")

    @alerts.setter
    def alerts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingIpsAlertsArgs']]]]):
        pulumi.set(self, "alerts", value)

    @property
    @pulumi.getter
    def whitelist(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingIpsWhitelistArgs']]]]:
        return pulumi.get(self, "whitelist")

    @whitelist.setter
    def whitelist(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingIpsWhitelistArgs']]]]):
        pulumi.set(self, "whitelist", value)


if not MYPY:
    class SettingIpsTrackingArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[builtins.str]]
        mode: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    SettingIpsTrackingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingIpsTrackingArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[builtins.str]] = None,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SettingIpsWhitelistArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[builtins.str]]
        mode: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    SettingIpsWhitelistArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingIpsWhitelistArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[builtins.str]] = None,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


