# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['TrafficRouteArgs', 'TrafficRoute']

@pulumi.input_type
class TrafficRouteArgs:
    def __init__(__self__, *,
                 matching_target: pulumi.Input['MatchingTarget'],
                 network_id: pulumi.Input[builtins.str],
                 target_devices: pulumi.Input[Sequence[pulumi.Input['TrafficTargetDeviceDtoArgs']]],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficDomainDtoArgs']]]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficIpDtoArgs']]]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficIpRangeDtoArgs']]]] = None,
                 kill_switch_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 next_hop: Optional[pulumi.Input[builtins.str]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a TrafficRoute resource.
        """
        pulumi.set(__self__, "matching_target", matching_target)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "target_devices", target_devices)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hidden_id is not None:
            pulumi.set(__self__, "hidden_id", hidden_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if kill_switch_enabled is not None:
            pulumi.set(__self__, "kill_switch_enabled", kill_switch_enabled)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)

    @property
    @pulumi.getter(name="matchingTarget")
    def matching_target(self) -> pulumi.Input['MatchingTarget']:
        return pulumi.get(self, "matching_target")

    @matching_target.setter
    def matching_target(self, value: pulumi.Input['MatchingTarget']):
        pulumi.set(self, "matching_target", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="targetDevices")
    def target_devices(self) -> pulumi.Input[Sequence[pulumi.Input['TrafficTargetDeviceDtoArgs']]]:
        return pulumi.get(self, "target_devices")

    @target_devices.setter
    def target_devices(self, value: pulumi.Input[Sequence[pulumi.Input['TrafficTargetDeviceDtoArgs']]]):
        pulumi.set(self, "target_devices", value)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TrafficDomainDtoArgs']]]]:
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficDomainDtoArgs']]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="hiddenId")
    def hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "hidden_id")

    @hidden_id.setter
    def hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "hidden_id", value)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TrafficIpDtoArgs']]]]:
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficIpDtoArgs']]]]):
        pulumi.set(self, "ip_addresses", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TrafficIpRangeDtoArgs']]]]:
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficIpRangeDtoArgs']]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter(name="killSwitchEnabled")
    def kill_switch_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "kill_switch_enabled")

    @kill_switch_enabled.setter
    def kill_switch_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "kill_switch_enabled", value)

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "next_hop", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)


@pulumi.type_token("unifi-native:trafficroutes:TrafficRoute")
class TrafficRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TrafficDomainDtoArgs', 'TrafficDomainDtoArgsDict']]]]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TrafficIpDtoArgs', 'TrafficIpDtoArgsDict']]]]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TrafficIpRangeDtoArgs', 'TrafficIpRangeDtoArgsDict']]]]] = None,
                 kill_switch_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 matching_target: Optional[pulumi.Input['MatchingTarget']] = None,
                 network_id: Optional[pulumi.Input[builtins.str]] = None,
                 next_hop: Optional[pulumi.Input[builtins.str]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 target_devices: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TrafficTargetDeviceDtoArgs', 'TrafficTargetDeviceDtoArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a TrafficRoute resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TrafficRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a TrafficRoute resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TrafficRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TrafficRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TrafficDomainDtoArgs', 'TrafficDomainDtoArgsDict']]]]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TrafficIpDtoArgs', 'TrafficIpDtoArgsDict']]]]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TrafficIpRangeDtoArgs', 'TrafficIpRangeDtoArgsDict']]]]] = None,
                 kill_switch_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 matching_target: Optional[pulumi.Input['MatchingTarget']] = None,
                 network_id: Optional[pulumi.Input[builtins.str]] = None,
                 next_hop: Optional[pulumi.Input[builtins.str]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 target_devices: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TrafficTargetDeviceDtoArgs', 'TrafficTargetDeviceDtoArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TrafficRouteArgs.__new__(TrafficRouteArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["description"] = description
            __props__.__dict__["domains"] = domains
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["hidden_id"] = hidden_id
            __props__.__dict__["ip_addresses"] = ip_addresses
            __props__.__dict__["ip_ranges"] = ip_ranges
            __props__.__dict__["kill_switch_enabled"] = kill_switch_enabled
            if matching_target is None and not opts.urn:
                raise TypeError("Missing required property 'matching_target'")
            __props__.__dict__["matching_target"] = matching_target
            if network_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_id'")
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["next_hop"] = next_hop
            __props__.__dict__["regions"] = regions
            __props__.__dict__["site_name"] = site_name
            if target_devices is None and not opts.urn:
                raise TypeError("Missing required property 'target_devices'")
            __props__.__dict__["target_devices"] = target_devices
        super(TrafficRoute, __self__).__init__(
            'unifi-native:trafficroutes:TrafficRoute',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'TrafficRoute':
        """
        Get an existing TrafficRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TrafficRouteArgs.__new__(TrafficRouteArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["domains"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["hidden_id"] = None
        __props__.__dict__["ip_addresses"] = None
        __props__.__dict__["ip_ranges"] = None
        __props__.__dict__["kill_switch_enabled"] = None
        __props__.__dict__["matching_target"] = None
        __props__.__dict__["network_id"] = None
        __props__.__dict__["next_hop"] = None
        __props__.__dict__["regions"] = None
        __props__.__dict__["target_devices"] = None
        return TrafficRoute(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Output[Optional[Sequence['outputs.TrafficDomainDto']]]:
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="hiddenId")
    def hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "hidden_id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.TrafficIpDto']]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> pulumi.Output[Optional[Sequence['outputs.TrafficIpRangeDto']]]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="killSwitchEnabled")
    def kill_switch_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "kill_switch_enabled")

    @property
    @pulumi.getter(name="matchingTarget")
    def matching_target(self) -> pulumi.Output['MatchingTarget']:
        return pulumi.get(self, "matching_target")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "next_hop")

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="targetDevices")
    def target_devices(self) -> pulumi.Output[Sequence['outputs.TrafficTargetDeviceDto']]:
        return pulumi.get(self, "target_devices")

