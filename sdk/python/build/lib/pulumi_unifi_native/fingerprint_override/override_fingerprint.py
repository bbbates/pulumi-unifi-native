# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['OverrideFingerprintArgs', 'OverrideFingerprint']

@pulumi.input_type
class OverrideFingerprintArgs:
    def __init__(__self__, *,
                 dev_id_override: Optional[pulumi.Input[builtins.int]] = None,
                 fp_ml_version: Optional[pulumi.Input[builtins.int]] = None,
                 mac: Optional[pulumi.Input[builtins.str]] = None,
                 search_query: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a OverrideFingerprint resource.
        """
        if dev_id_override is not None:
            pulumi.set(__self__, "dev_id_override", dev_id_override)
        if fp_ml_version is not None:
            pulumi.set(__self__, "fp_ml_version", fp_ml_version)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)

    @property
    @pulumi.getter(name="devIdOverride")
    def dev_id_override(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dev_id_override")

    @dev_id_override.setter
    def dev_id_override(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dev_id_override", value)

    @property
    @pulumi.getter(name="fpMlVersion")
    def fp_ml_version(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "fp_ml_version")

    @fp_ml_version.setter
    def fp_ml_version(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "fp_ml_version", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "search_query", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)


@pulumi.type_token("unifi-native:fingerprint_override:OverrideFingerprint")
class OverrideFingerprint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dev_id_override: Optional[pulumi.Input[builtins.int]] = None,
                 fp_ml_version: Optional[pulumi.Input[builtins.int]] = None,
                 mac: Optional[pulumi.Input[builtins.str]] = None,
                 search_query: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a OverrideFingerprint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[OverrideFingerprintArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OverrideFingerprint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OverrideFingerprintArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OverrideFingerprintArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dev_id_override: Optional[pulumi.Input[builtins.int]] = None,
                 fp_ml_version: Optional[pulumi.Input[builtins.int]] = None,
                 mac: Optional[pulumi.Input[builtins.str]] = None,
                 search_query: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OverrideFingerprintArgs.__new__(OverrideFingerprintArgs)

            __props__.__dict__["dev_id_override"] = dev_id_override
            __props__.__dict__["fp_ml_version"] = fp_ml_version
            __props__.__dict__["mac"] = mac
            __props__.__dict__["search_query"] = search_query
            __props__.__dict__["site_name"] = site_name
        super(OverrideFingerprint, __self__).__init__(
            'unifi-native:fingerprint_override:OverrideFingerprint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'OverrideFingerprint':
        """
        Get an existing OverrideFingerprint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = OverrideFingerprintArgs.__new__(OverrideFingerprintArgs)

        __props__.__dict__["dev_id_override"] = None
        __props__.__dict__["fp_ml_version"] = None
        __props__.__dict__["mac"] = None
        __props__.__dict__["search_query"] = None
        return OverrideFingerprint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="devIdOverride")
    def dev_id_override(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "dev_id_override")

    @property
    @pulumi.getter(name="fpMlVersion")
    def fp_ml_version(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "fp_ml_version")

    @property
    @pulumi.getter
    def mac(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "search_query")

