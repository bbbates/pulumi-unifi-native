# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworkArgs', 'Network']

@pulumi.input_type
class NetworkArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_scale_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcp_relay_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_boot_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_boot_filename: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_boot_server: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_conflict_checking: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_dns1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_dns2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_dns3: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_dns4: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_dns_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_gateway: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_gateway_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_ip1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_ip2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_ip3: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_leasetime: Optional[pulumi.Input[builtins.int]] = None,
                 dhcpd_mac1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_mac2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_mac3: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_ntp1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_ntp2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_ntp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_start: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_stop: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_tftp_server: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_time_offset: Optional[pulumi.Input[builtins.int]] = None,
                 dhcpd_time_offset_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_unifi_controller: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_wins1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_wins2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_wins_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_wpad_url: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_allow_slaac: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpdv6_dns1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_dns2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_dns3: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_dns4: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_dns_auto: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpdv6_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpdv6_leasetime: Optional[pulumi.Input[builtins.int]] = None,
                 dhcpdv6_start: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_stop: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpguard_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 domain_name: Optional[pulumi.Input[builtins.str]] = None,
                 dpi_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dpigroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 exposed_to_site_vpn: Optional[pulumi.Input[builtins.bool]] = None,
                 firewall_zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 gateway_device: Optional[pulumi.Input[builtins.str]] = None,
                 gateway_type: Optional[pulumi.Input[builtins.str]] = None,
                 igmp_fastleave: Optional[pulumi.Input[builtins.bool]] = None,
                 igmp_flood_unknown_multicast: Optional[pulumi.Input[builtins.bool]] = None,
                 igmp_groupmembership: Optional[pulumi.Input[builtins.int]] = None,
                 igmp_maxresponse: Optional[pulumi.Input[builtins.int]] = None,
                 igmp_mcrtrexpiretime: Optional[pulumi.Input[builtins.int]] = None,
                 igmp_proxy_downstream_networkconf_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 igmp_proxy_for: Optional[pulumi.Input[builtins.str]] = None,
                 igmp_proxy_upstream: Optional[pulumi.Input[builtins.bool]] = None,
                 igmp_querier_switches: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIGMPQuerierSwitchesArgs']]]] = None,
                 igmp_snooping: Optional[pulumi.Input[builtins.bool]] = None,
                 igmp_supression: Optional[pulumi.Input[builtins.bool]] = None,
                 interface_mtu: Optional[pulumi.Input[builtins.int]] = None,
                 interface_mtu_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 internet_access_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ip_subnet: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_dh_group: Optional[pulumi.Input[builtins.int]] = None,
                 ipsec_dynamic_routing: Optional[pulumi.Input[builtins.bool]] = None,
                 ipsec_encryption: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_esp_dh_group: Optional[pulumi.Input[builtins.int]] = None,
                 ipsec_esp_encryption: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_esp_hash: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_esp_lifetime: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_hash: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_ike_dh_group: Optional[pulumi.Input[builtins.int]] = None,
                 ipsec_ike_encryption: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_ike_hash: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_ike_lifetime: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_interface: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_key_exchange: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_local_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_local_identifier_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ipsec_local_ip: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_peer_ip: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_pfs: Optional[pulumi.Input[builtins.bool]] = None,
                 ipsec_profile: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_remote_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_remote_identifier_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ipsec_separate_ikev2_networks: Optional[pulumi.Input[builtins.bool]] = None,
                 ipsec_tunnel_ip: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_tunnel_ip_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ipv6_client_address_assignment: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_interface_type: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_pd_auto_prefixid_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ipv6_pd_interface: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_pd_prefixid: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_pd_start: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_pd_stop: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_ra_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ipv6_ra_preferred_lifetime: Optional[pulumi.Input[builtins.int]] = None,
                 ipv6_ra_priority: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_ra_valid_lifetime: Optional[pulumi.Input[builtins.int]] = None,
                 ipv6_setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_single_network_interface: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_subnet: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_wan_delegation_type: Optional[pulumi.Input[builtins.str]] = None,
                 is_nat: Optional[pulumi.Input[builtins.bool]] = None,
                 l2tp_allow_weak_ciphers: Optional[pulumi.Input[builtins.bool]] = None,
                 l2tp_interface: Optional[pulumi.Input[builtins.str]] = None,
                 l2tp_local_wan_ip: Optional[pulumi.Input[builtins.str]] = None,
                 local_port: Optional[pulumi.Input[builtins.int]] = None,
                 lte_lan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mac_override: Optional[pulumi.Input[builtins.str]] = None,
                 mac_override_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mdns_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nat_outbound_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkNATOutboundIPAddressesArgs']]]] = None,
                 network_isolation_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 networkgroup: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_configuration: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_configuration_filename: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_encryption_cipher: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_interface: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_local_address: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_local_port: Optional[pulumi.Input[builtins.int]] = None,
                 openvpn_local_wan_ip: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_mode: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_remote_address: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_remote_host: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_remote_port: Optional[pulumi.Input[builtins.int]] = None,
                 openvpn_username: Optional[pulumi.Input[builtins.str]] = None,
                 pptpc_require_mppe: Optional[pulumi.Input[builtins.bool]] = None,
                 pptpc_route_distance: Optional[pulumi.Input[builtins.int]] = None,
                 pptpc_server_ip: Optional[pulumi.Input[builtins.str]] = None,
                 pptpc_username: Optional[pulumi.Input[builtins.str]] = None,
                 priority: Optional[pulumi.Input[builtins.int]] = None,
                 purpose: Optional[pulumi.Input[builtins.str]] = None,
                 radiusprofile_id: Optional[pulumi.Input[builtins.str]] = None,
                 remote_site_id: Optional[pulumi.Input[builtins.str]] = None,
                 remote_site_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 remote_vpn_dynamic_subnets_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 remote_vpn_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 report_wan_event: Optional[pulumi.Input[builtins.bool]] = None,
                 require_mschapv2: Optional[pulumi.Input[builtins.bool]] = None,
                 route_distance: Optional[pulumi.Input[builtins.int]] = None,
                 sdwan_remote_site_id: Optional[pulumi.Input[builtins.str]] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 single_network_lan: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 uid_policy_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_policy_name: Optional[pulumi.Input[builtins.str]] = None,
                 uid_public_gateway_port: Optional[pulumi.Input[builtins.int]] = None,
                 uid_traffic_rules_allowed_ips_and_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 uid_traffic_rules_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_vpn_custom_routing: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 uid_vpn_default_dns_suffix: Optional[pulumi.Input[builtins.str]] = None,
                 uid_vpn_masquerade_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_vpn_max_connection_time_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 uid_vpn_sync_public_ip: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_vpn_type: Optional[pulumi.Input[builtins.str]] = None,
                 uid_workspace_url: Optional[pulumi.Input[builtins.str]] = None,
                 upnp_lan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 usergroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 vlan: Optional[pulumi.Input[builtins.int]] = None,
                 vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 vpn_client_configuration_remote_ip_override: Optional[pulumi.Input[builtins.str]] = None,
                 vpn_client_configuration_remote_ip_override_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 vpn_client_default_route: Optional[pulumi.Input[builtins.bool]] = None,
                 vpn_client_pull_dns: Optional[pulumi.Input[builtins.bool]] = None,
                 vpn_protocol: Optional[pulumi.Input[builtins.str]] = None,
                 vpn_type: Optional[pulumi.Input[builtins.str]] = None,
                 vrrp_ip_subnet_gw1: Optional[pulumi.Input[builtins.str]] = None,
                 vrrp_ip_subnet_gw2: Optional[pulumi.Input[builtins.str]] = None,
                 vrrp_vrid: Optional[pulumi.Input[builtins.int]] = None,
                 wan_dhcp_cos: Optional[pulumi.Input[builtins.int]] = None,
                 wan_dhcp_options: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkWANDHCPOptionsArgs']]]] = None,
                 wan_dhcpv6_pd_size: Optional[pulumi.Input[builtins.int]] = None,
                 wan_dns1: Optional[pulumi.Input[builtins.str]] = None,
                 wan_dns2: Optional[pulumi.Input[builtins.str]] = None,
                 wan_dns3: Optional[pulumi.Input[builtins.str]] = None,
                 wan_dns4: Optional[pulumi.Input[builtins.str]] = None,
                 wan_dns_preference: Optional[pulumi.Input[builtins.str]] = None,
                 wan_dslite_remote_host: Optional[pulumi.Input[builtins.str]] = None,
                 wan_egress_qos: Optional[pulumi.Input[builtins.int]] = None,
                 wan_failover_priority: Optional[pulumi.Input[builtins.int]] = None,
                 wan_gateway: Optional[pulumi.Input[builtins.str]] = None,
                 wan_gateway_v6: Optional[pulumi.Input[builtins.str]] = None,
                 wan_ip: Optional[pulumi.Input[builtins.str]] = None,
                 wan_ip_aliases: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 wan_ipv6: Optional[pulumi.Input[builtins.str]] = None,
                 wan_ipv6_dns1: Optional[pulumi.Input[builtins.str]] = None,
                 wan_ipv6_dns2: Optional[pulumi.Input[builtins.str]] = None,
                 wan_ipv6_dns_preference: Optional[pulumi.Input[builtins.str]] = None,
                 wan_load_balance_type: Optional[pulumi.Input[builtins.str]] = None,
                 wan_load_balance_weight: Optional[pulumi.Input[builtins.int]] = None,
                 wan_netmask: Optional[pulumi.Input[builtins.str]] = None,
                 wan_networkgroup: Optional[pulumi.Input[builtins.str]] = None,
                 wan_pppoe_password_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wan_pppoe_username_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wan_prefixlen: Optional[pulumi.Input[builtins.int]] = None,
                 wan_provider_capabilities: Optional[pulumi.Input['NetworkWANProviderCapabilitiesArgs']] = None,
                 wan_smartq_down_rate: Optional[pulumi.Input[builtins.int]] = None,
                 wan_smartq_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wan_smartq_up_rate: Optional[pulumi.Input[builtins.int]] = None,
                 wan_type: Optional[pulumi.Input[builtins.str]] = None,
                 wan_type_v6: Optional[pulumi.Input[builtins.str]] = None,
                 wan_username: Optional[pulumi.Input[builtins.str]] = None,
                 wan_vlan: Optional[pulumi.Input[builtins.int]] = None,
                 wan_vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wireguard_client_configuration_file: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_configuration_filename: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_mode: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_peer_ip: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_peer_port: Optional[pulumi.Input[builtins.int]] = None,
                 wireguard_client_peer_public_key: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_preshared_key: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_preshared_key_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wireguard_interface: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_local_wan_ip: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_public_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_auth_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_ca_crt: Optional[pulumi.Input[builtins.str]] = None,
                 x_ca_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_dh_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_ipsec_pre_shared_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_openvpn_password: Optional[pulumi.Input[builtins.str]] = None,
                 x_openvpn_shared_secret_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_pptpc_password: Optional[pulumi.Input[builtins.str]] = None,
                 x_server_crt: Optional[pulumi.Input[builtins.str]] = None,
                 x_server_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_shared_client_crt: Optional[pulumi.Input[builtins.str]] = None,
                 x_shared_client_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_wan_password: Optional[pulumi.Input[builtins.str]] = None,
                 x_wireguard_private_key: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Network resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if auto_scale_enabled is not None:
            pulumi.set(__self__, "auto_scale_enabled", auto_scale_enabled)
        if dhcp_relay_enabled is not None:
            pulumi.set(__self__, "dhcp_relay_enabled", dhcp_relay_enabled)
        if dhcpd_boot_enabled is not None:
            pulumi.set(__self__, "dhcpd_boot_enabled", dhcpd_boot_enabled)
        if dhcpd_boot_filename is not None:
            pulumi.set(__self__, "dhcpd_boot_filename", dhcpd_boot_filename)
        if dhcpd_boot_server is not None:
            pulumi.set(__self__, "dhcpd_boot_server", dhcpd_boot_server)
        if dhcpd_conflict_checking is not None:
            pulumi.set(__self__, "dhcpd_conflict_checking", dhcpd_conflict_checking)
        if dhcpd_dns1 is not None:
            pulumi.set(__self__, "dhcpd_dns1", dhcpd_dns1)
        if dhcpd_dns2 is not None:
            pulumi.set(__self__, "dhcpd_dns2", dhcpd_dns2)
        if dhcpd_dns3 is not None:
            pulumi.set(__self__, "dhcpd_dns3", dhcpd_dns3)
        if dhcpd_dns4 is not None:
            pulumi.set(__self__, "dhcpd_dns4", dhcpd_dns4)
        if dhcpd_dns_enabled is not None:
            pulumi.set(__self__, "dhcpd_dns_enabled", dhcpd_dns_enabled)
        if dhcpd_enabled is not None:
            pulumi.set(__self__, "dhcpd_enabled", dhcpd_enabled)
        if dhcpd_gateway is not None:
            pulumi.set(__self__, "dhcpd_gateway", dhcpd_gateway)
        if dhcpd_gateway_enabled is not None:
            pulumi.set(__self__, "dhcpd_gateway_enabled", dhcpd_gateway_enabled)
        if dhcpd_ip1 is not None:
            pulumi.set(__self__, "dhcpd_ip1", dhcpd_ip1)
        if dhcpd_ip2 is not None:
            pulumi.set(__self__, "dhcpd_ip2", dhcpd_ip2)
        if dhcpd_ip3 is not None:
            pulumi.set(__self__, "dhcpd_ip3", dhcpd_ip3)
        if dhcpd_leasetime is not None:
            pulumi.set(__self__, "dhcpd_leasetime", dhcpd_leasetime)
        if dhcpd_mac1 is not None:
            pulumi.set(__self__, "dhcpd_mac1", dhcpd_mac1)
        if dhcpd_mac2 is not None:
            pulumi.set(__self__, "dhcpd_mac2", dhcpd_mac2)
        if dhcpd_mac3 is not None:
            pulumi.set(__self__, "dhcpd_mac3", dhcpd_mac3)
        if dhcpd_ntp1 is not None:
            pulumi.set(__self__, "dhcpd_ntp1", dhcpd_ntp1)
        if dhcpd_ntp2 is not None:
            pulumi.set(__self__, "dhcpd_ntp2", dhcpd_ntp2)
        if dhcpd_ntp_enabled is not None:
            pulumi.set(__self__, "dhcpd_ntp_enabled", dhcpd_ntp_enabled)
        if dhcpd_start is not None:
            pulumi.set(__self__, "dhcpd_start", dhcpd_start)
        if dhcpd_stop is not None:
            pulumi.set(__self__, "dhcpd_stop", dhcpd_stop)
        if dhcpd_tftp_server is not None:
            pulumi.set(__self__, "dhcpd_tftp_server", dhcpd_tftp_server)
        if dhcpd_time_offset is not None:
            pulumi.set(__self__, "dhcpd_time_offset", dhcpd_time_offset)
        if dhcpd_time_offset_enabled is not None:
            pulumi.set(__self__, "dhcpd_time_offset_enabled", dhcpd_time_offset_enabled)
        if dhcpd_unifi_controller is not None:
            pulumi.set(__self__, "dhcpd_unifi_controller", dhcpd_unifi_controller)
        if dhcpd_wins1 is not None:
            pulumi.set(__self__, "dhcpd_wins1", dhcpd_wins1)
        if dhcpd_wins2 is not None:
            pulumi.set(__self__, "dhcpd_wins2", dhcpd_wins2)
        if dhcpd_wins_enabled is not None:
            pulumi.set(__self__, "dhcpd_wins_enabled", dhcpd_wins_enabled)
        if dhcpd_wpad_url is not None:
            pulumi.set(__self__, "dhcpd_wpad_url", dhcpd_wpad_url)
        if dhcpdv6_allow_slaac is not None:
            pulumi.set(__self__, "dhcpdv6_allow_slaac", dhcpdv6_allow_slaac)
        if dhcpdv6_dns1 is not None:
            pulumi.set(__self__, "dhcpdv6_dns1", dhcpdv6_dns1)
        if dhcpdv6_dns2 is not None:
            pulumi.set(__self__, "dhcpdv6_dns2", dhcpdv6_dns2)
        if dhcpdv6_dns3 is not None:
            pulumi.set(__self__, "dhcpdv6_dns3", dhcpdv6_dns3)
        if dhcpdv6_dns4 is not None:
            pulumi.set(__self__, "dhcpdv6_dns4", dhcpdv6_dns4)
        if dhcpdv6_dns_auto is not None:
            pulumi.set(__self__, "dhcpdv6_dns_auto", dhcpdv6_dns_auto)
        if dhcpdv6_enabled is not None:
            pulumi.set(__self__, "dhcpdv6_enabled", dhcpdv6_enabled)
        if dhcpdv6_leasetime is not None:
            pulumi.set(__self__, "dhcpdv6_leasetime", dhcpdv6_leasetime)
        if dhcpdv6_start is not None:
            pulumi.set(__self__, "dhcpdv6_start", dhcpdv6_start)
        if dhcpdv6_stop is not None:
            pulumi.set(__self__, "dhcpdv6_stop", dhcpdv6_stop)
        if dhcpguard_enabled is not None:
            pulumi.set(__self__, "dhcpguard_enabled", dhcpguard_enabled)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if dpi_enabled is not None:
            pulumi.set(__self__, "dpi_enabled", dpi_enabled)
        if dpigroup_id is not None:
            pulumi.set(__self__, "dpigroup_id", dpigroup_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exposed_to_site_vpn is not None:
            pulumi.set(__self__, "exposed_to_site_vpn", exposed_to_site_vpn)
        if firewall_zone_id is not None:
            pulumi.set(__self__, "firewall_zone_id", firewall_zone_id)
        if gateway_device is not None:
            pulumi.set(__self__, "gateway_device", gateway_device)
        if gateway_type is not None:
            pulumi.set(__self__, "gateway_type", gateway_type)
        if igmp_fastleave is not None:
            pulumi.set(__self__, "igmp_fastleave", igmp_fastleave)
        if igmp_flood_unknown_multicast is not None:
            pulumi.set(__self__, "igmp_flood_unknown_multicast", igmp_flood_unknown_multicast)
        if igmp_groupmembership is not None:
            pulumi.set(__self__, "igmp_groupmembership", igmp_groupmembership)
        if igmp_maxresponse is not None:
            pulumi.set(__self__, "igmp_maxresponse", igmp_maxresponse)
        if igmp_mcrtrexpiretime is not None:
            pulumi.set(__self__, "igmp_mcrtrexpiretime", igmp_mcrtrexpiretime)
        if igmp_proxy_downstream_networkconf_ids is not None:
            pulumi.set(__self__, "igmp_proxy_downstream_networkconf_ids", igmp_proxy_downstream_networkconf_ids)
        if igmp_proxy_for is not None:
            pulumi.set(__self__, "igmp_proxy_for", igmp_proxy_for)
        if igmp_proxy_upstream is not None:
            pulumi.set(__self__, "igmp_proxy_upstream", igmp_proxy_upstream)
        if igmp_querier_switches is not None:
            pulumi.set(__self__, "igmp_querier_switches", igmp_querier_switches)
        if igmp_snooping is not None:
            pulumi.set(__self__, "igmp_snooping", igmp_snooping)
        if igmp_supression is not None:
            pulumi.set(__self__, "igmp_supression", igmp_supression)
        if interface_mtu is not None:
            pulumi.set(__self__, "interface_mtu", interface_mtu)
        if interface_mtu_enabled is not None:
            pulumi.set(__self__, "interface_mtu_enabled", interface_mtu_enabled)
        if internet_access_enabled is not None:
            pulumi.set(__self__, "internet_access_enabled", internet_access_enabled)
        if ip_subnet is not None:
            pulumi.set(__self__, "ip_subnet", ip_subnet)
        if ipsec_dh_group is not None:
            pulumi.set(__self__, "ipsec_dh_group", ipsec_dh_group)
        if ipsec_dynamic_routing is not None:
            pulumi.set(__self__, "ipsec_dynamic_routing", ipsec_dynamic_routing)
        if ipsec_encryption is not None:
            pulumi.set(__self__, "ipsec_encryption", ipsec_encryption)
        if ipsec_esp_dh_group is not None:
            pulumi.set(__self__, "ipsec_esp_dh_group", ipsec_esp_dh_group)
        if ipsec_esp_encryption is not None:
            pulumi.set(__self__, "ipsec_esp_encryption", ipsec_esp_encryption)
        if ipsec_esp_hash is not None:
            pulumi.set(__self__, "ipsec_esp_hash", ipsec_esp_hash)
        if ipsec_esp_lifetime is not None:
            pulumi.set(__self__, "ipsec_esp_lifetime", ipsec_esp_lifetime)
        if ipsec_hash is not None:
            pulumi.set(__self__, "ipsec_hash", ipsec_hash)
        if ipsec_ike_dh_group is not None:
            pulumi.set(__self__, "ipsec_ike_dh_group", ipsec_ike_dh_group)
        if ipsec_ike_encryption is not None:
            pulumi.set(__self__, "ipsec_ike_encryption", ipsec_ike_encryption)
        if ipsec_ike_hash is not None:
            pulumi.set(__self__, "ipsec_ike_hash", ipsec_ike_hash)
        if ipsec_ike_lifetime is not None:
            pulumi.set(__self__, "ipsec_ike_lifetime", ipsec_ike_lifetime)
        if ipsec_interface is not None:
            pulumi.set(__self__, "ipsec_interface", ipsec_interface)
        if ipsec_key_exchange is not None:
            pulumi.set(__self__, "ipsec_key_exchange", ipsec_key_exchange)
        if ipsec_local_identifier is not None:
            pulumi.set(__self__, "ipsec_local_identifier", ipsec_local_identifier)
        if ipsec_local_identifier_enabled is not None:
            pulumi.set(__self__, "ipsec_local_identifier_enabled", ipsec_local_identifier_enabled)
        if ipsec_local_ip is not None:
            pulumi.set(__self__, "ipsec_local_ip", ipsec_local_ip)
        if ipsec_peer_ip is not None:
            pulumi.set(__self__, "ipsec_peer_ip", ipsec_peer_ip)
        if ipsec_pfs is not None:
            pulumi.set(__self__, "ipsec_pfs", ipsec_pfs)
        if ipsec_profile is not None:
            pulumi.set(__self__, "ipsec_profile", ipsec_profile)
        if ipsec_remote_identifier is not None:
            pulumi.set(__self__, "ipsec_remote_identifier", ipsec_remote_identifier)
        if ipsec_remote_identifier_enabled is not None:
            pulumi.set(__self__, "ipsec_remote_identifier_enabled", ipsec_remote_identifier_enabled)
        if ipsec_separate_ikev2_networks is not None:
            pulumi.set(__self__, "ipsec_separate_ikev2_networks", ipsec_separate_ikev2_networks)
        if ipsec_tunnel_ip is not None:
            pulumi.set(__self__, "ipsec_tunnel_ip", ipsec_tunnel_ip)
        if ipsec_tunnel_ip_enabled is not None:
            pulumi.set(__self__, "ipsec_tunnel_ip_enabled", ipsec_tunnel_ip_enabled)
        if ipv6_client_address_assignment is not None:
            pulumi.set(__self__, "ipv6_client_address_assignment", ipv6_client_address_assignment)
        if ipv6_interface_type is not None:
            pulumi.set(__self__, "ipv6_interface_type", ipv6_interface_type)
        if ipv6_pd_auto_prefixid_enabled is not None:
            pulumi.set(__self__, "ipv6_pd_auto_prefixid_enabled", ipv6_pd_auto_prefixid_enabled)
        if ipv6_pd_interface is not None:
            pulumi.set(__self__, "ipv6_pd_interface", ipv6_pd_interface)
        if ipv6_pd_prefixid is not None:
            pulumi.set(__self__, "ipv6_pd_prefixid", ipv6_pd_prefixid)
        if ipv6_pd_start is not None:
            pulumi.set(__self__, "ipv6_pd_start", ipv6_pd_start)
        if ipv6_pd_stop is not None:
            pulumi.set(__self__, "ipv6_pd_stop", ipv6_pd_stop)
        if ipv6_ra_enabled is not None:
            pulumi.set(__self__, "ipv6_ra_enabled", ipv6_ra_enabled)
        if ipv6_ra_preferred_lifetime is not None:
            pulumi.set(__self__, "ipv6_ra_preferred_lifetime", ipv6_ra_preferred_lifetime)
        if ipv6_ra_priority is not None:
            pulumi.set(__self__, "ipv6_ra_priority", ipv6_ra_priority)
        if ipv6_ra_valid_lifetime is not None:
            pulumi.set(__self__, "ipv6_ra_valid_lifetime", ipv6_ra_valid_lifetime)
        if ipv6_setting_preference is not None:
            pulumi.set(__self__, "ipv6_setting_preference", ipv6_setting_preference)
        if ipv6_single_network_interface is not None:
            pulumi.set(__self__, "ipv6_single_network_interface", ipv6_single_network_interface)
        if ipv6_subnet is not None:
            pulumi.set(__self__, "ipv6_subnet", ipv6_subnet)
        if ipv6_wan_delegation_type is not None:
            pulumi.set(__self__, "ipv6_wan_delegation_type", ipv6_wan_delegation_type)
        if is_nat is not None:
            pulumi.set(__self__, "is_nat", is_nat)
        if l2tp_allow_weak_ciphers is not None:
            pulumi.set(__self__, "l2tp_allow_weak_ciphers", l2tp_allow_weak_ciphers)
        if l2tp_interface is not None:
            pulumi.set(__self__, "l2tp_interface", l2tp_interface)
        if l2tp_local_wan_ip is not None:
            pulumi.set(__self__, "l2tp_local_wan_ip", l2tp_local_wan_ip)
        if local_port is not None:
            pulumi.set(__self__, "local_port", local_port)
        if lte_lan_enabled is not None:
            pulumi.set(__self__, "lte_lan_enabled", lte_lan_enabled)
        if mac_override is not None:
            pulumi.set(__self__, "mac_override", mac_override)
        if mac_override_enabled is not None:
            pulumi.set(__self__, "mac_override_enabled", mac_override_enabled)
        if mdns_enabled is not None:
            pulumi.set(__self__, "mdns_enabled", mdns_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat_outbound_ip_addresses is not None:
            pulumi.set(__self__, "nat_outbound_ip_addresses", nat_outbound_ip_addresses)
        if network_isolation_enabled is not None:
            pulumi.set(__self__, "network_isolation_enabled", network_isolation_enabled)
        if networkgroup is not None:
            pulumi.set(__self__, "networkgroup", networkgroup)
        if openvpn_configuration is not None:
            pulumi.set(__self__, "openvpn_configuration", openvpn_configuration)
        if openvpn_configuration_filename is not None:
            pulumi.set(__self__, "openvpn_configuration_filename", openvpn_configuration_filename)
        if openvpn_encryption_cipher is not None:
            pulumi.set(__self__, "openvpn_encryption_cipher", openvpn_encryption_cipher)
        if openvpn_interface is not None:
            pulumi.set(__self__, "openvpn_interface", openvpn_interface)
        if openvpn_local_address is not None:
            pulumi.set(__self__, "openvpn_local_address", openvpn_local_address)
        if openvpn_local_port is not None:
            pulumi.set(__self__, "openvpn_local_port", openvpn_local_port)
        if openvpn_local_wan_ip is not None:
            pulumi.set(__self__, "openvpn_local_wan_ip", openvpn_local_wan_ip)
        if openvpn_mode is not None:
            pulumi.set(__self__, "openvpn_mode", openvpn_mode)
        if openvpn_remote_address is not None:
            pulumi.set(__self__, "openvpn_remote_address", openvpn_remote_address)
        if openvpn_remote_host is not None:
            pulumi.set(__self__, "openvpn_remote_host", openvpn_remote_host)
        if openvpn_remote_port is not None:
            pulumi.set(__self__, "openvpn_remote_port", openvpn_remote_port)
        if openvpn_username is not None:
            pulumi.set(__self__, "openvpn_username", openvpn_username)
        if pptpc_require_mppe is not None:
            pulumi.set(__self__, "pptpc_require_mppe", pptpc_require_mppe)
        if pptpc_route_distance is not None:
            pulumi.set(__self__, "pptpc_route_distance", pptpc_route_distance)
        if pptpc_server_ip is not None:
            pulumi.set(__self__, "pptpc_server_ip", pptpc_server_ip)
        if pptpc_username is not None:
            pulumi.set(__self__, "pptpc_username", pptpc_username)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if purpose is not None:
            pulumi.set(__self__, "purpose", purpose)
        if radiusprofile_id is not None:
            pulumi.set(__self__, "radiusprofile_id", radiusprofile_id)
        if remote_site_id is not None:
            pulumi.set(__self__, "remote_site_id", remote_site_id)
        if remote_site_subnets is not None:
            pulumi.set(__self__, "remote_site_subnets", remote_site_subnets)
        if remote_vpn_dynamic_subnets_enabled is not None:
            pulumi.set(__self__, "remote_vpn_dynamic_subnets_enabled", remote_vpn_dynamic_subnets_enabled)
        if remote_vpn_subnets is not None:
            pulumi.set(__self__, "remote_vpn_subnets", remote_vpn_subnets)
        if report_wan_event is not None:
            pulumi.set(__self__, "report_wan_event", report_wan_event)
        if require_mschapv2 is not None:
            pulumi.set(__self__, "require_mschapv2", require_mschapv2)
        if route_distance is not None:
            pulumi.set(__self__, "route_distance", route_distance)
        if sdwan_remote_site_id is not None:
            pulumi.set(__self__, "sdwan_remote_site_id", sdwan_remote_site_id)
        if setting_preference is not None:
            pulumi.set(__self__, "setting_preference", setting_preference)
        if single_network_lan is not None:
            pulumi.set(__self__, "single_network_lan", single_network_lan)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if uid_policy_enabled is not None:
            pulumi.set(__self__, "uid_policy_enabled", uid_policy_enabled)
        if uid_policy_name is not None:
            pulumi.set(__self__, "uid_policy_name", uid_policy_name)
        if uid_public_gateway_port is not None:
            pulumi.set(__self__, "uid_public_gateway_port", uid_public_gateway_port)
        if uid_traffic_rules_allowed_ips_and_hostnames is not None:
            pulumi.set(__self__, "uid_traffic_rules_allowed_ips_and_hostnames", uid_traffic_rules_allowed_ips_and_hostnames)
        if uid_traffic_rules_enabled is not None:
            pulumi.set(__self__, "uid_traffic_rules_enabled", uid_traffic_rules_enabled)
        if uid_vpn_custom_routing is not None:
            pulumi.set(__self__, "uid_vpn_custom_routing", uid_vpn_custom_routing)
        if uid_vpn_default_dns_suffix is not None:
            pulumi.set(__self__, "uid_vpn_default_dns_suffix", uid_vpn_default_dns_suffix)
        if uid_vpn_masquerade_enabled is not None:
            pulumi.set(__self__, "uid_vpn_masquerade_enabled", uid_vpn_masquerade_enabled)
        if uid_vpn_max_connection_time_seconds is not None:
            pulumi.set(__self__, "uid_vpn_max_connection_time_seconds", uid_vpn_max_connection_time_seconds)
        if uid_vpn_sync_public_ip is not None:
            pulumi.set(__self__, "uid_vpn_sync_public_ip", uid_vpn_sync_public_ip)
        if uid_vpn_type is not None:
            pulumi.set(__self__, "uid_vpn_type", uid_vpn_type)
        if uid_workspace_url is not None:
            pulumi.set(__self__, "uid_workspace_url", uid_workspace_url)
        if upnp_lan_enabled is not None:
            pulumi.set(__self__, "upnp_lan_enabled", upnp_lan_enabled)
        if usergroup_id is not None:
            pulumi.set(__self__, "usergroup_id", usergroup_id)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vlan_enabled is not None:
            pulumi.set(__self__, "vlan_enabled", vlan_enabled)
        if vpn_client_configuration_remote_ip_override is not None:
            pulumi.set(__self__, "vpn_client_configuration_remote_ip_override", vpn_client_configuration_remote_ip_override)
        if vpn_client_configuration_remote_ip_override_enabled is not None:
            pulumi.set(__self__, "vpn_client_configuration_remote_ip_override_enabled", vpn_client_configuration_remote_ip_override_enabled)
        if vpn_client_default_route is not None:
            pulumi.set(__self__, "vpn_client_default_route", vpn_client_default_route)
        if vpn_client_pull_dns is not None:
            pulumi.set(__self__, "vpn_client_pull_dns", vpn_client_pull_dns)
        if vpn_protocol is not None:
            pulumi.set(__self__, "vpn_protocol", vpn_protocol)
        if vpn_type is not None:
            pulumi.set(__self__, "vpn_type", vpn_type)
        if vrrp_ip_subnet_gw1 is not None:
            pulumi.set(__self__, "vrrp_ip_subnet_gw1", vrrp_ip_subnet_gw1)
        if vrrp_ip_subnet_gw2 is not None:
            pulumi.set(__self__, "vrrp_ip_subnet_gw2", vrrp_ip_subnet_gw2)
        if vrrp_vrid is not None:
            pulumi.set(__self__, "vrrp_vrid", vrrp_vrid)
        if wan_dhcp_cos is not None:
            pulumi.set(__self__, "wan_dhcp_cos", wan_dhcp_cos)
        if wan_dhcp_options is not None:
            pulumi.set(__self__, "wan_dhcp_options", wan_dhcp_options)
        if wan_dhcpv6_pd_size is not None:
            pulumi.set(__self__, "wan_dhcpv6_pd_size", wan_dhcpv6_pd_size)
        if wan_dns1 is not None:
            pulumi.set(__self__, "wan_dns1", wan_dns1)
        if wan_dns2 is not None:
            pulumi.set(__self__, "wan_dns2", wan_dns2)
        if wan_dns3 is not None:
            pulumi.set(__self__, "wan_dns3", wan_dns3)
        if wan_dns4 is not None:
            pulumi.set(__self__, "wan_dns4", wan_dns4)
        if wan_dns_preference is not None:
            pulumi.set(__self__, "wan_dns_preference", wan_dns_preference)
        if wan_dslite_remote_host is not None:
            pulumi.set(__self__, "wan_dslite_remote_host", wan_dslite_remote_host)
        if wan_egress_qos is not None:
            pulumi.set(__self__, "wan_egress_qos", wan_egress_qos)
        if wan_failover_priority is not None:
            pulumi.set(__self__, "wan_failover_priority", wan_failover_priority)
        if wan_gateway is not None:
            pulumi.set(__self__, "wan_gateway", wan_gateway)
        if wan_gateway_v6 is not None:
            pulumi.set(__self__, "wan_gateway_v6", wan_gateway_v6)
        if wan_ip is not None:
            pulumi.set(__self__, "wan_ip", wan_ip)
        if wan_ip_aliases is not None:
            pulumi.set(__self__, "wan_ip_aliases", wan_ip_aliases)
        if wan_ipv6 is not None:
            pulumi.set(__self__, "wan_ipv6", wan_ipv6)
        if wan_ipv6_dns1 is not None:
            pulumi.set(__self__, "wan_ipv6_dns1", wan_ipv6_dns1)
        if wan_ipv6_dns2 is not None:
            pulumi.set(__self__, "wan_ipv6_dns2", wan_ipv6_dns2)
        if wan_ipv6_dns_preference is not None:
            pulumi.set(__self__, "wan_ipv6_dns_preference", wan_ipv6_dns_preference)
        if wan_load_balance_type is not None:
            pulumi.set(__self__, "wan_load_balance_type", wan_load_balance_type)
        if wan_load_balance_weight is not None:
            pulumi.set(__self__, "wan_load_balance_weight", wan_load_balance_weight)
        if wan_netmask is not None:
            pulumi.set(__self__, "wan_netmask", wan_netmask)
        if wan_networkgroup is not None:
            pulumi.set(__self__, "wan_networkgroup", wan_networkgroup)
        if wan_pppoe_password_enabled is not None:
            pulumi.set(__self__, "wan_pppoe_password_enabled", wan_pppoe_password_enabled)
        if wan_pppoe_username_enabled is not None:
            pulumi.set(__self__, "wan_pppoe_username_enabled", wan_pppoe_username_enabled)
        if wan_prefixlen is not None:
            pulumi.set(__self__, "wan_prefixlen", wan_prefixlen)
        if wan_provider_capabilities is not None:
            pulumi.set(__self__, "wan_provider_capabilities", wan_provider_capabilities)
        if wan_smartq_down_rate is not None:
            pulumi.set(__self__, "wan_smartq_down_rate", wan_smartq_down_rate)
        if wan_smartq_enabled is not None:
            pulumi.set(__self__, "wan_smartq_enabled", wan_smartq_enabled)
        if wan_smartq_up_rate is not None:
            pulumi.set(__self__, "wan_smartq_up_rate", wan_smartq_up_rate)
        if wan_type is not None:
            pulumi.set(__self__, "wan_type", wan_type)
        if wan_type_v6 is not None:
            pulumi.set(__self__, "wan_type_v6", wan_type_v6)
        if wan_username is not None:
            pulumi.set(__self__, "wan_username", wan_username)
        if wan_vlan is not None:
            pulumi.set(__self__, "wan_vlan", wan_vlan)
        if wan_vlan_enabled is not None:
            pulumi.set(__self__, "wan_vlan_enabled", wan_vlan_enabled)
        if wireguard_client_configuration_file is not None:
            pulumi.set(__self__, "wireguard_client_configuration_file", wireguard_client_configuration_file)
        if wireguard_client_configuration_filename is not None:
            pulumi.set(__self__, "wireguard_client_configuration_filename", wireguard_client_configuration_filename)
        if wireguard_client_mode is not None:
            pulumi.set(__self__, "wireguard_client_mode", wireguard_client_mode)
        if wireguard_client_peer_ip is not None:
            pulumi.set(__self__, "wireguard_client_peer_ip", wireguard_client_peer_ip)
        if wireguard_client_peer_port is not None:
            pulumi.set(__self__, "wireguard_client_peer_port", wireguard_client_peer_port)
        if wireguard_client_peer_public_key is not None:
            pulumi.set(__self__, "wireguard_client_peer_public_key", wireguard_client_peer_public_key)
        if wireguard_client_preshared_key is not None:
            pulumi.set(__self__, "wireguard_client_preshared_key", wireguard_client_preshared_key)
        if wireguard_client_preshared_key_enabled is not None:
            pulumi.set(__self__, "wireguard_client_preshared_key_enabled", wireguard_client_preshared_key_enabled)
        if wireguard_interface is not None:
            pulumi.set(__self__, "wireguard_interface", wireguard_interface)
        if wireguard_local_wan_ip is not None:
            pulumi.set(__self__, "wireguard_local_wan_ip", wireguard_local_wan_ip)
        if wireguard_public_key is not None:
            pulumi.set(__self__, "wireguard_public_key", wireguard_public_key)
        if x_auth_key is not None:
            pulumi.set(__self__, "x_auth_key", x_auth_key)
        if x_ca_crt is not None:
            pulumi.set(__self__, "x_ca_crt", x_ca_crt)
        if x_ca_key is not None:
            pulumi.set(__self__, "x_ca_key", x_ca_key)
        if x_dh_key is not None:
            pulumi.set(__self__, "x_dh_key", x_dh_key)
        if x_ipsec_pre_shared_key is not None:
            pulumi.set(__self__, "x_ipsec_pre_shared_key", x_ipsec_pre_shared_key)
        if x_openvpn_password is not None:
            pulumi.set(__self__, "x_openvpn_password", x_openvpn_password)
        if x_openvpn_shared_secret_key is not None:
            pulumi.set(__self__, "x_openvpn_shared_secret_key", x_openvpn_shared_secret_key)
        if x_pptpc_password is not None:
            pulumi.set(__self__, "x_pptpc_password", x_pptpc_password)
        if x_server_crt is not None:
            pulumi.set(__self__, "x_server_crt", x_server_crt)
        if x_server_key is not None:
            pulumi.set(__self__, "x_server_key", x_server_key)
        if x_shared_client_crt is not None:
            pulumi.set(__self__, "x_shared_client_crt", x_shared_client_crt)
        if x_shared_client_key is not None:
            pulumi.set(__self__, "x_shared_client_key", x_shared_client_key)
        if x_wan_password is not None:
            pulumi.set(__self__, "x_wan_password", x_wan_password)
        if x_wireguard_private_key is not None:
            pulumi.set(__self__, "x_wireguard_private_key", x_wireguard_private_key)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter(name="autoScaleEnabled")
    def auto_scale_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "auto_scale_enabled")

    @auto_scale_enabled.setter
    def auto_scale_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "auto_scale_enabled", value)

    @property
    @pulumi.getter(name="dhcpRelayEnabled")
    def dhcp_relay_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcp_relay_enabled")

    @dhcp_relay_enabled.setter
    def dhcp_relay_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcp_relay_enabled", value)

    @property
    @pulumi.getter(name="dhcpdBootEnabled")
    def dhcpd_boot_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcpd_boot_enabled")

    @dhcpd_boot_enabled.setter
    def dhcpd_boot_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcpd_boot_enabled", value)

    @property
    @pulumi.getter(name="dhcpdBootFilename")
    def dhcpd_boot_filename(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_boot_filename")

    @dhcpd_boot_filename.setter
    def dhcpd_boot_filename(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_boot_filename", value)

    @property
    @pulumi.getter(name="dhcpdBootServer")
    def dhcpd_boot_server(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_boot_server")

    @dhcpd_boot_server.setter
    def dhcpd_boot_server(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_boot_server", value)

    @property
    @pulumi.getter(name="dhcpdConflictChecking")
    def dhcpd_conflict_checking(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcpd_conflict_checking")

    @dhcpd_conflict_checking.setter
    def dhcpd_conflict_checking(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcpd_conflict_checking", value)

    @property
    @pulumi.getter(name="dhcpdDns1")
    def dhcpd_dns1(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_dns1")

    @dhcpd_dns1.setter
    def dhcpd_dns1(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_dns1", value)

    @property
    @pulumi.getter(name="dhcpdDns2")
    def dhcpd_dns2(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_dns2")

    @dhcpd_dns2.setter
    def dhcpd_dns2(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_dns2", value)

    @property
    @pulumi.getter(name="dhcpdDns3")
    def dhcpd_dns3(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_dns3")

    @dhcpd_dns3.setter
    def dhcpd_dns3(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_dns3", value)

    @property
    @pulumi.getter(name="dhcpdDns4")
    def dhcpd_dns4(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_dns4")

    @dhcpd_dns4.setter
    def dhcpd_dns4(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_dns4", value)

    @property
    @pulumi.getter(name="dhcpdDnsEnabled")
    def dhcpd_dns_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcpd_dns_enabled")

    @dhcpd_dns_enabled.setter
    def dhcpd_dns_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcpd_dns_enabled", value)

    @property
    @pulumi.getter(name="dhcpdEnabled")
    def dhcpd_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcpd_enabled")

    @dhcpd_enabled.setter
    def dhcpd_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcpd_enabled", value)

    @property
    @pulumi.getter(name="dhcpdGateway")
    def dhcpd_gateway(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_gateway")

    @dhcpd_gateway.setter
    def dhcpd_gateway(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_gateway", value)

    @property
    @pulumi.getter(name="dhcpdGatewayEnabled")
    def dhcpd_gateway_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcpd_gateway_enabled")

    @dhcpd_gateway_enabled.setter
    def dhcpd_gateway_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcpd_gateway_enabled", value)

    @property
    @pulumi.getter(name="dhcpdIp1")
    def dhcpd_ip1(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_ip1")

    @dhcpd_ip1.setter
    def dhcpd_ip1(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_ip1", value)

    @property
    @pulumi.getter(name="dhcpdIp2")
    def dhcpd_ip2(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_ip2")

    @dhcpd_ip2.setter
    def dhcpd_ip2(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_ip2", value)

    @property
    @pulumi.getter(name="dhcpdIp3")
    def dhcpd_ip3(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_ip3")

    @dhcpd_ip3.setter
    def dhcpd_ip3(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_ip3", value)

    @property
    @pulumi.getter(name="dhcpdLeasetime")
    def dhcpd_leasetime(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dhcpd_leasetime")

    @dhcpd_leasetime.setter
    def dhcpd_leasetime(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dhcpd_leasetime", value)

    @property
    @pulumi.getter(name="dhcpdMac1")
    def dhcpd_mac1(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_mac1")

    @dhcpd_mac1.setter
    def dhcpd_mac1(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_mac1", value)

    @property
    @pulumi.getter(name="dhcpdMac2")
    def dhcpd_mac2(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_mac2")

    @dhcpd_mac2.setter
    def dhcpd_mac2(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_mac2", value)

    @property
    @pulumi.getter(name="dhcpdMac3")
    def dhcpd_mac3(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_mac3")

    @dhcpd_mac3.setter
    def dhcpd_mac3(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_mac3", value)

    @property
    @pulumi.getter(name="dhcpdNtp1")
    def dhcpd_ntp1(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_ntp1")

    @dhcpd_ntp1.setter
    def dhcpd_ntp1(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_ntp1", value)

    @property
    @pulumi.getter(name="dhcpdNtp2")
    def dhcpd_ntp2(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_ntp2")

    @dhcpd_ntp2.setter
    def dhcpd_ntp2(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_ntp2", value)

    @property
    @pulumi.getter(name="dhcpdNtpEnabled")
    def dhcpd_ntp_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcpd_ntp_enabled")

    @dhcpd_ntp_enabled.setter
    def dhcpd_ntp_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcpd_ntp_enabled", value)

    @property
    @pulumi.getter(name="dhcpdStart")
    def dhcpd_start(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_start")

    @dhcpd_start.setter
    def dhcpd_start(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_start", value)

    @property
    @pulumi.getter(name="dhcpdStop")
    def dhcpd_stop(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_stop")

    @dhcpd_stop.setter
    def dhcpd_stop(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_stop", value)

    @property
    @pulumi.getter(name="dhcpdTftpServer")
    def dhcpd_tftp_server(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_tftp_server")

    @dhcpd_tftp_server.setter
    def dhcpd_tftp_server(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_tftp_server", value)

    @property
    @pulumi.getter(name="dhcpdTimeOffset")
    def dhcpd_time_offset(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dhcpd_time_offset")

    @dhcpd_time_offset.setter
    def dhcpd_time_offset(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dhcpd_time_offset", value)

    @property
    @pulumi.getter(name="dhcpdTimeOffsetEnabled")
    def dhcpd_time_offset_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcpd_time_offset_enabled")

    @dhcpd_time_offset_enabled.setter
    def dhcpd_time_offset_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcpd_time_offset_enabled", value)

    @property
    @pulumi.getter(name="dhcpdUnifiController")
    def dhcpd_unifi_controller(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_unifi_controller")

    @dhcpd_unifi_controller.setter
    def dhcpd_unifi_controller(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_unifi_controller", value)

    @property
    @pulumi.getter(name="dhcpdWins1")
    def dhcpd_wins1(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_wins1")

    @dhcpd_wins1.setter
    def dhcpd_wins1(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_wins1", value)

    @property
    @pulumi.getter(name="dhcpdWins2")
    def dhcpd_wins2(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_wins2")

    @dhcpd_wins2.setter
    def dhcpd_wins2(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_wins2", value)

    @property
    @pulumi.getter(name="dhcpdWinsEnabled")
    def dhcpd_wins_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcpd_wins_enabled")

    @dhcpd_wins_enabled.setter
    def dhcpd_wins_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcpd_wins_enabled", value)

    @property
    @pulumi.getter(name="dhcpdWpadUrl")
    def dhcpd_wpad_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpd_wpad_url")

    @dhcpd_wpad_url.setter
    def dhcpd_wpad_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpd_wpad_url", value)

    @property
    @pulumi.getter(name="dhcpdv6AllowSlaac")
    def dhcpdv6_allow_slaac(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcpdv6_allow_slaac")

    @dhcpdv6_allow_slaac.setter
    def dhcpdv6_allow_slaac(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcpdv6_allow_slaac", value)

    @property
    @pulumi.getter(name="dhcpdv6Dns1")
    def dhcpdv6_dns1(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpdv6_dns1")

    @dhcpdv6_dns1.setter
    def dhcpdv6_dns1(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpdv6_dns1", value)

    @property
    @pulumi.getter(name="dhcpdv6Dns2")
    def dhcpdv6_dns2(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpdv6_dns2")

    @dhcpdv6_dns2.setter
    def dhcpdv6_dns2(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpdv6_dns2", value)

    @property
    @pulumi.getter(name="dhcpdv6Dns3")
    def dhcpdv6_dns3(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpdv6_dns3")

    @dhcpdv6_dns3.setter
    def dhcpdv6_dns3(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpdv6_dns3", value)

    @property
    @pulumi.getter(name="dhcpdv6Dns4")
    def dhcpdv6_dns4(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpdv6_dns4")

    @dhcpdv6_dns4.setter
    def dhcpdv6_dns4(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpdv6_dns4", value)

    @property
    @pulumi.getter(name="dhcpdv6DnsAuto")
    def dhcpdv6_dns_auto(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcpdv6_dns_auto")

    @dhcpdv6_dns_auto.setter
    def dhcpdv6_dns_auto(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcpdv6_dns_auto", value)

    @property
    @pulumi.getter(name="dhcpdv6Enabled")
    def dhcpdv6_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcpdv6_enabled")

    @dhcpdv6_enabled.setter
    def dhcpdv6_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcpdv6_enabled", value)

    @property
    @pulumi.getter(name="dhcpdv6Leasetime")
    def dhcpdv6_leasetime(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dhcpdv6_leasetime")

    @dhcpdv6_leasetime.setter
    def dhcpdv6_leasetime(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dhcpdv6_leasetime", value)

    @property
    @pulumi.getter(name="dhcpdv6Start")
    def dhcpdv6_start(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpdv6_start")

    @dhcpdv6_start.setter
    def dhcpdv6_start(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpdv6_start", value)

    @property
    @pulumi.getter(name="dhcpdv6Stop")
    def dhcpdv6_stop(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcpdv6_stop")

    @dhcpdv6_stop.setter
    def dhcpdv6_stop(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcpdv6_stop", value)

    @property
    @pulumi.getter(name="dhcpguardEnabled")
    def dhcpguard_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcpguard_enabled")

    @dhcpguard_enabled.setter
    def dhcpguard_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcpguard_enabled", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="dpiEnabled")
    def dpi_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dpi_enabled")

    @dpi_enabled.setter
    def dpi_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dpi_enabled", value)

    @property
    @pulumi.getter(name="dpigroupId")
    def dpigroup_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dpigroup_id")

    @dpigroup_id.setter
    def dpigroup_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dpigroup_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exposedToSiteVpn")
    def exposed_to_site_vpn(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "exposed_to_site_vpn")

    @exposed_to_site_vpn.setter
    def exposed_to_site_vpn(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "exposed_to_site_vpn", value)

    @property
    @pulumi.getter(name="firewallZoneId")
    def firewall_zone_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "firewall_zone_id")

    @firewall_zone_id.setter
    def firewall_zone_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "firewall_zone_id", value)

    @property
    @pulumi.getter(name="gatewayDevice")
    def gateway_device(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "gateway_device")

    @gateway_device.setter
    def gateway_device(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "gateway_device", value)

    @property
    @pulumi.getter(name="gatewayType")
    def gateway_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "gateway_type")

    @gateway_type.setter
    def gateway_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "gateway_type", value)

    @property
    @pulumi.getter(name="igmpFastleave")
    def igmp_fastleave(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "igmp_fastleave")

    @igmp_fastleave.setter
    def igmp_fastleave(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "igmp_fastleave", value)

    @property
    @pulumi.getter(name="igmpFloodUnknownMulticast")
    def igmp_flood_unknown_multicast(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "igmp_flood_unknown_multicast")

    @igmp_flood_unknown_multicast.setter
    def igmp_flood_unknown_multicast(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "igmp_flood_unknown_multicast", value)

    @property
    @pulumi.getter(name="igmpGroupmembership")
    def igmp_groupmembership(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "igmp_groupmembership")

    @igmp_groupmembership.setter
    def igmp_groupmembership(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "igmp_groupmembership", value)

    @property
    @pulumi.getter(name="igmpMaxresponse")
    def igmp_maxresponse(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "igmp_maxresponse")

    @igmp_maxresponse.setter
    def igmp_maxresponse(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "igmp_maxresponse", value)

    @property
    @pulumi.getter(name="igmpMcrtrexpiretime")
    def igmp_mcrtrexpiretime(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "igmp_mcrtrexpiretime")

    @igmp_mcrtrexpiretime.setter
    def igmp_mcrtrexpiretime(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "igmp_mcrtrexpiretime", value)

    @property
    @pulumi.getter(name="igmpProxyDownstreamNetworkconfIds")
    def igmp_proxy_downstream_networkconf_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "igmp_proxy_downstream_networkconf_ids")

    @igmp_proxy_downstream_networkconf_ids.setter
    def igmp_proxy_downstream_networkconf_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "igmp_proxy_downstream_networkconf_ids", value)

    @property
    @pulumi.getter(name="igmpProxyFor")
    def igmp_proxy_for(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "igmp_proxy_for")

    @igmp_proxy_for.setter
    def igmp_proxy_for(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "igmp_proxy_for", value)

    @property
    @pulumi.getter(name="igmpProxyUpstream")
    def igmp_proxy_upstream(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "igmp_proxy_upstream")

    @igmp_proxy_upstream.setter
    def igmp_proxy_upstream(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "igmp_proxy_upstream", value)

    @property
    @pulumi.getter(name="igmpQuerierSwitches")
    def igmp_querier_switches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIGMPQuerierSwitchesArgs']]]]:
        return pulumi.get(self, "igmp_querier_switches")

    @igmp_querier_switches.setter
    def igmp_querier_switches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkIGMPQuerierSwitchesArgs']]]]):
        pulumi.set(self, "igmp_querier_switches", value)

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "igmp_snooping")

    @igmp_snooping.setter
    def igmp_snooping(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "igmp_snooping", value)

    @property
    @pulumi.getter(name="igmpSupression")
    def igmp_supression(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "igmp_supression")

    @igmp_supression.setter
    def igmp_supression(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "igmp_supression", value)

    @property
    @pulumi.getter(name="interfaceMtu")
    def interface_mtu(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "interface_mtu")

    @interface_mtu.setter
    def interface_mtu(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "interface_mtu", value)

    @property
    @pulumi.getter(name="interfaceMtuEnabled")
    def interface_mtu_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "interface_mtu_enabled")

    @interface_mtu_enabled.setter
    def interface_mtu_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "interface_mtu_enabled", value)

    @property
    @pulumi.getter(name="internetAccessEnabled")
    def internet_access_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "internet_access_enabled")

    @internet_access_enabled.setter
    def internet_access_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "internet_access_enabled", value)

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ip_subnet")

    @ip_subnet.setter
    def ip_subnet(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip_subnet", value)

    @property
    @pulumi.getter(name="ipsecDhGroup")
    def ipsec_dh_group(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "ipsec_dh_group")

    @ipsec_dh_group.setter
    def ipsec_dh_group(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ipsec_dh_group", value)

    @property
    @pulumi.getter(name="ipsecDynamicRouting")
    def ipsec_dynamic_routing(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "ipsec_dynamic_routing")

    @ipsec_dynamic_routing.setter
    def ipsec_dynamic_routing(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ipsec_dynamic_routing", value)

    @property
    @pulumi.getter(name="ipsecEncryption")
    def ipsec_encryption(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec_encryption")

    @ipsec_encryption.setter
    def ipsec_encryption(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec_encryption", value)

    @property
    @pulumi.getter(name="ipsecEspDhGroup")
    def ipsec_esp_dh_group(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "ipsec_esp_dh_group")

    @ipsec_esp_dh_group.setter
    def ipsec_esp_dh_group(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ipsec_esp_dh_group", value)

    @property
    @pulumi.getter(name="ipsecEspEncryption")
    def ipsec_esp_encryption(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec_esp_encryption")

    @ipsec_esp_encryption.setter
    def ipsec_esp_encryption(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec_esp_encryption", value)

    @property
    @pulumi.getter(name="ipsecEspHash")
    def ipsec_esp_hash(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec_esp_hash")

    @ipsec_esp_hash.setter
    def ipsec_esp_hash(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec_esp_hash", value)

    @property
    @pulumi.getter(name="ipsecEspLifetime")
    def ipsec_esp_lifetime(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec_esp_lifetime")

    @ipsec_esp_lifetime.setter
    def ipsec_esp_lifetime(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec_esp_lifetime", value)

    @property
    @pulumi.getter(name="ipsecHash")
    def ipsec_hash(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec_hash")

    @ipsec_hash.setter
    def ipsec_hash(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec_hash", value)

    @property
    @pulumi.getter(name="ipsecIkeDhGroup")
    def ipsec_ike_dh_group(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "ipsec_ike_dh_group")

    @ipsec_ike_dh_group.setter
    def ipsec_ike_dh_group(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ipsec_ike_dh_group", value)

    @property
    @pulumi.getter(name="ipsecIkeEncryption")
    def ipsec_ike_encryption(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec_ike_encryption")

    @ipsec_ike_encryption.setter
    def ipsec_ike_encryption(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec_ike_encryption", value)

    @property
    @pulumi.getter(name="ipsecIkeHash")
    def ipsec_ike_hash(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec_ike_hash")

    @ipsec_ike_hash.setter
    def ipsec_ike_hash(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec_ike_hash", value)

    @property
    @pulumi.getter(name="ipsecIkeLifetime")
    def ipsec_ike_lifetime(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec_ike_lifetime")

    @ipsec_ike_lifetime.setter
    def ipsec_ike_lifetime(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec_ike_lifetime", value)

    @property
    @pulumi.getter(name="ipsecInterface")
    def ipsec_interface(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec_interface")

    @ipsec_interface.setter
    def ipsec_interface(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec_interface", value)

    @property
    @pulumi.getter(name="ipsecKeyExchange")
    def ipsec_key_exchange(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec_key_exchange")

    @ipsec_key_exchange.setter
    def ipsec_key_exchange(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec_key_exchange", value)

    @property
    @pulumi.getter(name="ipsecLocalIdentifier")
    def ipsec_local_identifier(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec_local_identifier")

    @ipsec_local_identifier.setter
    def ipsec_local_identifier(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec_local_identifier", value)

    @property
    @pulumi.getter(name="ipsecLocalIdentifierEnabled")
    def ipsec_local_identifier_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "ipsec_local_identifier_enabled")

    @ipsec_local_identifier_enabled.setter
    def ipsec_local_identifier_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ipsec_local_identifier_enabled", value)

    @property
    @pulumi.getter(name="ipsecLocalIp")
    def ipsec_local_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec_local_ip")

    @ipsec_local_ip.setter
    def ipsec_local_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec_local_ip", value)

    @property
    @pulumi.getter(name="ipsecPeerIp")
    def ipsec_peer_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec_peer_ip")

    @ipsec_peer_ip.setter
    def ipsec_peer_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec_peer_ip", value)

    @property
    @pulumi.getter(name="ipsecPfs")
    def ipsec_pfs(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "ipsec_pfs")

    @ipsec_pfs.setter
    def ipsec_pfs(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ipsec_pfs", value)

    @property
    @pulumi.getter(name="ipsecProfile")
    def ipsec_profile(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec_profile")

    @ipsec_profile.setter
    def ipsec_profile(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec_profile", value)

    @property
    @pulumi.getter(name="ipsecRemoteIdentifier")
    def ipsec_remote_identifier(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec_remote_identifier")

    @ipsec_remote_identifier.setter
    def ipsec_remote_identifier(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec_remote_identifier", value)

    @property
    @pulumi.getter(name="ipsecRemoteIdentifierEnabled")
    def ipsec_remote_identifier_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "ipsec_remote_identifier_enabled")

    @ipsec_remote_identifier_enabled.setter
    def ipsec_remote_identifier_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ipsec_remote_identifier_enabled", value)

    @property
    @pulumi.getter(name="ipsecSeparateIkev2Networks")
    def ipsec_separate_ikev2_networks(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "ipsec_separate_ikev2_networks")

    @ipsec_separate_ikev2_networks.setter
    def ipsec_separate_ikev2_networks(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ipsec_separate_ikev2_networks", value)

    @property
    @pulumi.getter(name="ipsecTunnelIp")
    def ipsec_tunnel_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec_tunnel_ip")

    @ipsec_tunnel_ip.setter
    def ipsec_tunnel_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec_tunnel_ip", value)

    @property
    @pulumi.getter(name="ipsecTunnelIpEnabled")
    def ipsec_tunnel_ip_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "ipsec_tunnel_ip_enabled")

    @ipsec_tunnel_ip_enabled.setter
    def ipsec_tunnel_ip_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ipsec_tunnel_ip_enabled", value)

    @property
    @pulumi.getter(name="ipv6ClientAddressAssignment")
    def ipv6_client_address_assignment(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipv6_client_address_assignment")

    @ipv6_client_address_assignment.setter
    def ipv6_client_address_assignment(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_client_address_assignment", value)

    @property
    @pulumi.getter(name="ipv6InterfaceType")
    def ipv6_interface_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipv6_interface_type")

    @ipv6_interface_type.setter
    def ipv6_interface_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_interface_type", value)

    @property
    @pulumi.getter(name="ipv6PdAutoPrefixidEnabled")
    def ipv6_pd_auto_prefixid_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "ipv6_pd_auto_prefixid_enabled")

    @ipv6_pd_auto_prefixid_enabled.setter
    def ipv6_pd_auto_prefixid_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ipv6_pd_auto_prefixid_enabled", value)

    @property
    @pulumi.getter(name="ipv6PdInterface")
    def ipv6_pd_interface(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipv6_pd_interface")

    @ipv6_pd_interface.setter
    def ipv6_pd_interface(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_pd_interface", value)

    @property
    @pulumi.getter(name="ipv6PdPrefixid")
    def ipv6_pd_prefixid(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipv6_pd_prefixid")

    @ipv6_pd_prefixid.setter
    def ipv6_pd_prefixid(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_pd_prefixid", value)

    @property
    @pulumi.getter(name="ipv6PdStart")
    def ipv6_pd_start(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipv6_pd_start")

    @ipv6_pd_start.setter
    def ipv6_pd_start(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_pd_start", value)

    @property
    @pulumi.getter(name="ipv6PdStop")
    def ipv6_pd_stop(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipv6_pd_stop")

    @ipv6_pd_stop.setter
    def ipv6_pd_stop(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_pd_stop", value)

    @property
    @pulumi.getter(name="ipv6RaEnabled")
    def ipv6_ra_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "ipv6_ra_enabled")

    @ipv6_ra_enabled.setter
    def ipv6_ra_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ipv6_ra_enabled", value)

    @property
    @pulumi.getter(name="ipv6RaPreferredLifetime")
    def ipv6_ra_preferred_lifetime(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "ipv6_ra_preferred_lifetime")

    @ipv6_ra_preferred_lifetime.setter
    def ipv6_ra_preferred_lifetime(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ipv6_ra_preferred_lifetime", value)

    @property
    @pulumi.getter(name="ipv6RaPriority")
    def ipv6_ra_priority(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipv6_ra_priority")

    @ipv6_ra_priority.setter
    def ipv6_ra_priority(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_ra_priority", value)

    @property
    @pulumi.getter(name="ipv6RaValidLifetime")
    def ipv6_ra_valid_lifetime(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "ipv6_ra_valid_lifetime")

    @ipv6_ra_valid_lifetime.setter
    def ipv6_ra_valid_lifetime(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ipv6_ra_valid_lifetime", value)

    @property
    @pulumi.getter(name="ipv6SettingPreference")
    def ipv6_setting_preference(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipv6_setting_preference")

    @ipv6_setting_preference.setter
    def ipv6_setting_preference(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_setting_preference", value)

    @property
    @pulumi.getter(name="ipv6SingleNetworkInterface")
    def ipv6_single_network_interface(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipv6_single_network_interface")

    @ipv6_single_network_interface.setter
    def ipv6_single_network_interface(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_single_network_interface", value)

    @property
    @pulumi.getter(name="ipv6Subnet")
    def ipv6_subnet(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipv6_subnet")

    @ipv6_subnet.setter
    def ipv6_subnet(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_subnet", value)

    @property
    @pulumi.getter(name="ipv6WanDelegationType")
    def ipv6_wan_delegation_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipv6_wan_delegation_type")

    @ipv6_wan_delegation_type.setter
    def ipv6_wan_delegation_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_wan_delegation_type", value)

    @property
    @pulumi.getter(name="isNat")
    def is_nat(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_nat")

    @is_nat.setter
    def is_nat(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_nat", value)

    @property
    @pulumi.getter(name="l2tpAllowWeakCiphers")
    def l2tp_allow_weak_ciphers(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "l2tp_allow_weak_ciphers")

    @l2tp_allow_weak_ciphers.setter
    def l2tp_allow_weak_ciphers(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "l2tp_allow_weak_ciphers", value)

    @property
    @pulumi.getter(name="l2tpInterface")
    def l2tp_interface(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "l2tp_interface")

    @l2tp_interface.setter
    def l2tp_interface(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "l2tp_interface", value)

    @property
    @pulumi.getter(name="l2tpLocalWanIp")
    def l2tp_local_wan_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "l2tp_local_wan_ip")

    @l2tp_local_wan_ip.setter
    def l2tp_local_wan_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "l2tp_local_wan_ip", value)

    @property
    @pulumi.getter(name="localPort")
    def local_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "local_port")

    @local_port.setter
    def local_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "local_port", value)

    @property
    @pulumi.getter(name="lteLanEnabled")
    def lte_lan_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lte_lan_enabled")

    @lte_lan_enabled.setter
    def lte_lan_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lte_lan_enabled", value)

    @property
    @pulumi.getter(name="macOverride")
    def mac_override(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "mac_override")

    @mac_override.setter
    def mac_override(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mac_override", value)

    @property
    @pulumi.getter(name="macOverrideEnabled")
    def mac_override_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "mac_override_enabled")

    @mac_override_enabled.setter
    def mac_override_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "mac_override_enabled", value)

    @property
    @pulumi.getter(name="mdnsEnabled")
    def mdns_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "mdns_enabled")

    @mdns_enabled.setter
    def mdns_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "mdns_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="natOutboundIpAddresses")
    def nat_outbound_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkNATOutboundIPAddressesArgs']]]]:
        return pulumi.get(self, "nat_outbound_ip_addresses")

    @nat_outbound_ip_addresses.setter
    def nat_outbound_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkNATOutboundIPAddressesArgs']]]]):
        pulumi.set(self, "nat_outbound_ip_addresses", value)

    @property
    @pulumi.getter(name="networkIsolationEnabled")
    def network_isolation_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "network_isolation_enabled")

    @network_isolation_enabled.setter
    def network_isolation_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "network_isolation_enabled", value)

    @property
    @pulumi.getter
    def networkgroup(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "networkgroup")

    @networkgroup.setter
    def networkgroup(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "networkgroup", value)

    @property
    @pulumi.getter(name="openvpnConfiguration")
    def openvpn_configuration(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "openvpn_configuration")

    @openvpn_configuration.setter
    def openvpn_configuration(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "openvpn_configuration", value)

    @property
    @pulumi.getter(name="openvpnConfigurationFilename")
    def openvpn_configuration_filename(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "openvpn_configuration_filename")

    @openvpn_configuration_filename.setter
    def openvpn_configuration_filename(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "openvpn_configuration_filename", value)

    @property
    @pulumi.getter(name="openvpnEncryptionCipher")
    def openvpn_encryption_cipher(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "openvpn_encryption_cipher")

    @openvpn_encryption_cipher.setter
    def openvpn_encryption_cipher(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "openvpn_encryption_cipher", value)

    @property
    @pulumi.getter(name="openvpnInterface")
    def openvpn_interface(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "openvpn_interface")

    @openvpn_interface.setter
    def openvpn_interface(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "openvpn_interface", value)

    @property
    @pulumi.getter(name="openvpnLocalAddress")
    def openvpn_local_address(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "openvpn_local_address")

    @openvpn_local_address.setter
    def openvpn_local_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "openvpn_local_address", value)

    @property
    @pulumi.getter(name="openvpnLocalPort")
    def openvpn_local_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "openvpn_local_port")

    @openvpn_local_port.setter
    def openvpn_local_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "openvpn_local_port", value)

    @property
    @pulumi.getter(name="openvpnLocalWanIp")
    def openvpn_local_wan_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "openvpn_local_wan_ip")

    @openvpn_local_wan_ip.setter
    def openvpn_local_wan_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "openvpn_local_wan_ip", value)

    @property
    @pulumi.getter(name="openvpnMode")
    def openvpn_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "openvpn_mode")

    @openvpn_mode.setter
    def openvpn_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "openvpn_mode", value)

    @property
    @pulumi.getter(name="openvpnRemoteAddress")
    def openvpn_remote_address(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "openvpn_remote_address")

    @openvpn_remote_address.setter
    def openvpn_remote_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "openvpn_remote_address", value)

    @property
    @pulumi.getter(name="openvpnRemoteHost")
    def openvpn_remote_host(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "openvpn_remote_host")

    @openvpn_remote_host.setter
    def openvpn_remote_host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "openvpn_remote_host", value)

    @property
    @pulumi.getter(name="openvpnRemotePort")
    def openvpn_remote_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "openvpn_remote_port")

    @openvpn_remote_port.setter
    def openvpn_remote_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "openvpn_remote_port", value)

    @property
    @pulumi.getter(name="openvpnUsername")
    def openvpn_username(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "openvpn_username")

    @openvpn_username.setter
    def openvpn_username(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "openvpn_username", value)

    @property
    @pulumi.getter(name="pptpcRequireMppe")
    def pptpc_require_mppe(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "pptpc_require_mppe")

    @pptpc_require_mppe.setter
    def pptpc_require_mppe(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "pptpc_require_mppe", value)

    @property
    @pulumi.getter(name="pptpcRouteDistance")
    def pptpc_route_distance(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "pptpc_route_distance")

    @pptpc_route_distance.setter
    def pptpc_route_distance(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "pptpc_route_distance", value)

    @property
    @pulumi.getter(name="pptpcServerIp")
    def pptpc_server_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "pptpc_server_ip")

    @pptpc_server_ip.setter
    def pptpc_server_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pptpc_server_ip", value)

    @property
    @pulumi.getter(name="pptpcUsername")
    def pptpc_username(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "pptpc_username")

    @pptpc_username.setter
    def pptpc_username(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pptpc_username", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def purpose(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "purpose")

    @purpose.setter
    def purpose(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "purpose", value)

    @property
    @pulumi.getter(name="radiusprofileId")
    def radiusprofile_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "radiusprofile_id")

    @radiusprofile_id.setter
    def radiusprofile_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "radiusprofile_id", value)

    @property
    @pulumi.getter(name="remoteSiteId")
    def remote_site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "remote_site_id")

    @remote_site_id.setter
    def remote_site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_site_id", value)

    @property
    @pulumi.getter(name="remoteSiteSubnets")
    def remote_site_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "remote_site_subnets")

    @remote_site_subnets.setter
    def remote_site_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "remote_site_subnets", value)

    @property
    @pulumi.getter(name="remoteVpnDynamicSubnetsEnabled")
    def remote_vpn_dynamic_subnets_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "remote_vpn_dynamic_subnets_enabled")

    @remote_vpn_dynamic_subnets_enabled.setter
    def remote_vpn_dynamic_subnets_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "remote_vpn_dynamic_subnets_enabled", value)

    @property
    @pulumi.getter(name="remoteVpnSubnets")
    def remote_vpn_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "remote_vpn_subnets")

    @remote_vpn_subnets.setter
    def remote_vpn_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "remote_vpn_subnets", value)

    @property
    @pulumi.getter(name="reportWanEvent")
    def report_wan_event(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "report_wan_event")

    @report_wan_event.setter
    def report_wan_event(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "report_wan_event", value)

    @property
    @pulumi.getter(name="requireMschapv2")
    def require_mschapv2(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "require_mschapv2")

    @require_mschapv2.setter
    def require_mschapv2(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "require_mschapv2", value)

    @property
    @pulumi.getter(name="routeDistance")
    def route_distance(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "route_distance")

    @route_distance.setter
    def route_distance(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "route_distance", value)

    @property
    @pulumi.getter(name="sdwanRemoteSiteId")
    def sdwan_remote_site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "sdwan_remote_site_id")

    @sdwan_remote_site_id.setter
    def sdwan_remote_site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sdwan_remote_site_id", value)

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "setting_preference")

    @setting_preference.setter
    def setting_preference(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "setting_preference", value)

    @property
    @pulumi.getter(name="singleNetworkLan")
    def single_network_lan(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "single_network_lan")

    @single_network_lan.setter
    def single_network_lan(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "single_network_lan", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="uidPolicyEnabled")
    def uid_policy_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "uid_policy_enabled")

    @uid_policy_enabled.setter
    def uid_policy_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "uid_policy_enabled", value)

    @property
    @pulumi.getter(name="uidPolicyName")
    def uid_policy_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "uid_policy_name")

    @uid_policy_name.setter
    def uid_policy_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uid_policy_name", value)

    @property
    @pulumi.getter(name="uidPublicGatewayPort")
    def uid_public_gateway_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "uid_public_gateway_port")

    @uid_public_gateway_port.setter
    def uid_public_gateway_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "uid_public_gateway_port", value)

    @property
    @pulumi.getter(name="uidTrafficRulesAllowedIpsAndHostnames")
    def uid_traffic_rules_allowed_ips_and_hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "uid_traffic_rules_allowed_ips_and_hostnames")

    @uid_traffic_rules_allowed_ips_and_hostnames.setter
    def uid_traffic_rules_allowed_ips_and_hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "uid_traffic_rules_allowed_ips_and_hostnames", value)

    @property
    @pulumi.getter(name="uidTrafficRulesEnabled")
    def uid_traffic_rules_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "uid_traffic_rules_enabled")

    @uid_traffic_rules_enabled.setter
    def uid_traffic_rules_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "uid_traffic_rules_enabled", value)

    @property
    @pulumi.getter(name="uidVpnCustomRouting")
    def uid_vpn_custom_routing(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "uid_vpn_custom_routing")

    @uid_vpn_custom_routing.setter
    def uid_vpn_custom_routing(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "uid_vpn_custom_routing", value)

    @property
    @pulumi.getter(name="uidVpnDefaultDnsSuffix")
    def uid_vpn_default_dns_suffix(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "uid_vpn_default_dns_suffix")

    @uid_vpn_default_dns_suffix.setter
    def uid_vpn_default_dns_suffix(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uid_vpn_default_dns_suffix", value)

    @property
    @pulumi.getter(name="uidVpnMasqueradeEnabled")
    def uid_vpn_masquerade_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "uid_vpn_masquerade_enabled")

    @uid_vpn_masquerade_enabled.setter
    def uid_vpn_masquerade_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "uid_vpn_masquerade_enabled", value)

    @property
    @pulumi.getter(name="uidVpnMaxConnectionTimeSeconds")
    def uid_vpn_max_connection_time_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "uid_vpn_max_connection_time_seconds")

    @uid_vpn_max_connection_time_seconds.setter
    def uid_vpn_max_connection_time_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "uid_vpn_max_connection_time_seconds", value)

    @property
    @pulumi.getter(name="uidVpnSyncPublicIp")
    def uid_vpn_sync_public_ip(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "uid_vpn_sync_public_ip")

    @uid_vpn_sync_public_ip.setter
    def uid_vpn_sync_public_ip(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "uid_vpn_sync_public_ip", value)

    @property
    @pulumi.getter(name="uidVpnType")
    def uid_vpn_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "uid_vpn_type")

    @uid_vpn_type.setter
    def uid_vpn_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uid_vpn_type", value)

    @property
    @pulumi.getter(name="uidWorkspaceUrl")
    def uid_workspace_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "uid_workspace_url")

    @uid_workspace_url.setter
    def uid_workspace_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uid_workspace_url", value)

    @property
    @pulumi.getter(name="upnpLanEnabled")
    def upnp_lan_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "upnp_lan_enabled")

    @upnp_lan_enabled.setter
    def upnp_lan_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "upnp_lan_enabled", value)

    @property
    @pulumi.getter(name="usergroupId")
    def usergroup_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "usergroup_id")

    @usergroup_id.setter
    def usergroup_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "usergroup_id", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter(name="vlanEnabled")
    def vlan_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "vlan_enabled")

    @vlan_enabled.setter
    def vlan_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "vlan_enabled", value)

    @property
    @pulumi.getter(name="vpnClientConfigurationRemoteIpOverride")
    def vpn_client_configuration_remote_ip_override(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "vpn_client_configuration_remote_ip_override")

    @vpn_client_configuration_remote_ip_override.setter
    def vpn_client_configuration_remote_ip_override(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpn_client_configuration_remote_ip_override", value)

    @property
    @pulumi.getter(name="vpnClientConfigurationRemoteIpOverrideEnabled")
    def vpn_client_configuration_remote_ip_override_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "vpn_client_configuration_remote_ip_override_enabled")

    @vpn_client_configuration_remote_ip_override_enabled.setter
    def vpn_client_configuration_remote_ip_override_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "vpn_client_configuration_remote_ip_override_enabled", value)

    @property
    @pulumi.getter(name="vpnClientDefaultRoute")
    def vpn_client_default_route(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "vpn_client_default_route")

    @vpn_client_default_route.setter
    def vpn_client_default_route(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "vpn_client_default_route", value)

    @property
    @pulumi.getter(name="vpnClientPullDns")
    def vpn_client_pull_dns(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "vpn_client_pull_dns")

    @vpn_client_pull_dns.setter
    def vpn_client_pull_dns(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "vpn_client_pull_dns", value)

    @property
    @pulumi.getter(name="vpnProtocol")
    def vpn_protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "vpn_protocol")

    @vpn_protocol.setter
    def vpn_protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpn_protocol", value)

    @property
    @pulumi.getter(name="vpnType")
    def vpn_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "vpn_type")

    @vpn_type.setter
    def vpn_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpn_type", value)

    @property
    @pulumi.getter(name="vrrpIpSubnetGw1")
    def vrrp_ip_subnet_gw1(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "vrrp_ip_subnet_gw1")

    @vrrp_ip_subnet_gw1.setter
    def vrrp_ip_subnet_gw1(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vrrp_ip_subnet_gw1", value)

    @property
    @pulumi.getter(name="vrrpIpSubnetGw2")
    def vrrp_ip_subnet_gw2(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "vrrp_ip_subnet_gw2")

    @vrrp_ip_subnet_gw2.setter
    def vrrp_ip_subnet_gw2(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vrrp_ip_subnet_gw2", value)

    @property
    @pulumi.getter(name="vrrpVrid")
    def vrrp_vrid(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "vrrp_vrid")

    @vrrp_vrid.setter
    def vrrp_vrid(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "vrrp_vrid", value)

    @property
    @pulumi.getter(name="wanDhcpCos")
    def wan_dhcp_cos(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "wan_dhcp_cos")

    @wan_dhcp_cos.setter
    def wan_dhcp_cos(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "wan_dhcp_cos", value)

    @property
    @pulumi.getter(name="wanDhcpOptions")
    def wan_dhcp_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkWANDHCPOptionsArgs']]]]:
        return pulumi.get(self, "wan_dhcp_options")

    @wan_dhcp_options.setter
    def wan_dhcp_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkWANDHCPOptionsArgs']]]]):
        pulumi.set(self, "wan_dhcp_options", value)

    @property
    @pulumi.getter(name="wanDhcpv6PdSize")
    def wan_dhcpv6_pd_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "wan_dhcpv6_pd_size")

    @wan_dhcpv6_pd_size.setter
    def wan_dhcpv6_pd_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "wan_dhcpv6_pd_size", value)

    @property
    @pulumi.getter(name="wanDns1")
    def wan_dns1(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_dns1")

    @wan_dns1.setter
    def wan_dns1(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_dns1", value)

    @property
    @pulumi.getter(name="wanDns2")
    def wan_dns2(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_dns2")

    @wan_dns2.setter
    def wan_dns2(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_dns2", value)

    @property
    @pulumi.getter(name="wanDns3")
    def wan_dns3(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_dns3")

    @wan_dns3.setter
    def wan_dns3(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_dns3", value)

    @property
    @pulumi.getter(name="wanDns4")
    def wan_dns4(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_dns4")

    @wan_dns4.setter
    def wan_dns4(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_dns4", value)

    @property
    @pulumi.getter(name="wanDnsPreference")
    def wan_dns_preference(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_dns_preference")

    @wan_dns_preference.setter
    def wan_dns_preference(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_dns_preference", value)

    @property
    @pulumi.getter(name="wanDsliteRemoteHost")
    def wan_dslite_remote_host(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_dslite_remote_host")

    @wan_dslite_remote_host.setter
    def wan_dslite_remote_host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_dslite_remote_host", value)

    @property
    @pulumi.getter(name="wanEgressQos")
    def wan_egress_qos(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "wan_egress_qos")

    @wan_egress_qos.setter
    def wan_egress_qos(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "wan_egress_qos", value)

    @property
    @pulumi.getter(name="wanFailoverPriority")
    def wan_failover_priority(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "wan_failover_priority")

    @wan_failover_priority.setter
    def wan_failover_priority(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "wan_failover_priority", value)

    @property
    @pulumi.getter(name="wanGateway")
    def wan_gateway(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_gateway")

    @wan_gateway.setter
    def wan_gateway(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_gateway", value)

    @property
    @pulumi.getter(name="wanGatewayV6")
    def wan_gateway_v6(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_gateway_v6")

    @wan_gateway_v6.setter
    def wan_gateway_v6(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_gateway_v6", value)

    @property
    @pulumi.getter(name="wanIp")
    def wan_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_ip")

    @wan_ip.setter
    def wan_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_ip", value)

    @property
    @pulumi.getter(name="wanIpAliases")
    def wan_ip_aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "wan_ip_aliases")

    @wan_ip_aliases.setter
    def wan_ip_aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "wan_ip_aliases", value)

    @property
    @pulumi.getter(name="wanIpv6")
    def wan_ipv6(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_ipv6")

    @wan_ipv6.setter
    def wan_ipv6(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_ipv6", value)

    @property
    @pulumi.getter(name="wanIpv6Dns1")
    def wan_ipv6_dns1(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_ipv6_dns1")

    @wan_ipv6_dns1.setter
    def wan_ipv6_dns1(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_ipv6_dns1", value)

    @property
    @pulumi.getter(name="wanIpv6Dns2")
    def wan_ipv6_dns2(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_ipv6_dns2")

    @wan_ipv6_dns2.setter
    def wan_ipv6_dns2(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_ipv6_dns2", value)

    @property
    @pulumi.getter(name="wanIpv6DnsPreference")
    def wan_ipv6_dns_preference(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_ipv6_dns_preference")

    @wan_ipv6_dns_preference.setter
    def wan_ipv6_dns_preference(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_ipv6_dns_preference", value)

    @property
    @pulumi.getter(name="wanLoadBalanceType")
    def wan_load_balance_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_load_balance_type")

    @wan_load_balance_type.setter
    def wan_load_balance_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_load_balance_type", value)

    @property
    @pulumi.getter(name="wanLoadBalanceWeight")
    def wan_load_balance_weight(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "wan_load_balance_weight")

    @wan_load_balance_weight.setter
    def wan_load_balance_weight(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "wan_load_balance_weight", value)

    @property
    @pulumi.getter(name="wanNetmask")
    def wan_netmask(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_netmask")

    @wan_netmask.setter
    def wan_netmask(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_netmask", value)

    @property
    @pulumi.getter(name="wanNetworkgroup")
    def wan_networkgroup(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_networkgroup")

    @wan_networkgroup.setter
    def wan_networkgroup(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_networkgroup", value)

    @property
    @pulumi.getter(name="wanPppoePasswordEnabled")
    def wan_pppoe_password_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "wan_pppoe_password_enabled")

    @wan_pppoe_password_enabled.setter
    def wan_pppoe_password_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "wan_pppoe_password_enabled", value)

    @property
    @pulumi.getter(name="wanPppoeUsernameEnabled")
    def wan_pppoe_username_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "wan_pppoe_username_enabled")

    @wan_pppoe_username_enabled.setter
    def wan_pppoe_username_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "wan_pppoe_username_enabled", value)

    @property
    @pulumi.getter(name="wanPrefixlen")
    def wan_prefixlen(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "wan_prefixlen")

    @wan_prefixlen.setter
    def wan_prefixlen(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "wan_prefixlen", value)

    @property
    @pulumi.getter(name="wanProviderCapabilities")
    def wan_provider_capabilities(self) -> Optional[pulumi.Input['NetworkWANProviderCapabilitiesArgs']]:
        return pulumi.get(self, "wan_provider_capabilities")

    @wan_provider_capabilities.setter
    def wan_provider_capabilities(self, value: Optional[pulumi.Input['NetworkWANProviderCapabilitiesArgs']]):
        pulumi.set(self, "wan_provider_capabilities", value)

    @property
    @pulumi.getter(name="wanSmartqDownRate")
    def wan_smartq_down_rate(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "wan_smartq_down_rate")

    @wan_smartq_down_rate.setter
    def wan_smartq_down_rate(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "wan_smartq_down_rate", value)

    @property
    @pulumi.getter(name="wanSmartqEnabled")
    def wan_smartq_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "wan_smartq_enabled")

    @wan_smartq_enabled.setter
    def wan_smartq_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "wan_smartq_enabled", value)

    @property
    @pulumi.getter(name="wanSmartqUpRate")
    def wan_smartq_up_rate(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "wan_smartq_up_rate")

    @wan_smartq_up_rate.setter
    def wan_smartq_up_rate(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "wan_smartq_up_rate", value)

    @property
    @pulumi.getter(name="wanType")
    def wan_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_type")

    @wan_type.setter
    def wan_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_type", value)

    @property
    @pulumi.getter(name="wanTypeV6")
    def wan_type_v6(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_type_v6")

    @wan_type_v6.setter
    def wan_type_v6(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_type_v6", value)

    @property
    @pulumi.getter(name="wanUsername")
    def wan_username(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_username")

    @wan_username.setter
    def wan_username(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_username", value)

    @property
    @pulumi.getter(name="wanVlan")
    def wan_vlan(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "wan_vlan")

    @wan_vlan.setter
    def wan_vlan(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "wan_vlan", value)

    @property
    @pulumi.getter(name="wanVlanEnabled")
    def wan_vlan_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "wan_vlan_enabled")

    @wan_vlan_enabled.setter
    def wan_vlan_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "wan_vlan_enabled", value)

    @property
    @pulumi.getter(name="wireguardClientConfigurationFile")
    def wireguard_client_configuration_file(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wireguard_client_configuration_file")

    @wireguard_client_configuration_file.setter
    def wireguard_client_configuration_file(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wireguard_client_configuration_file", value)

    @property
    @pulumi.getter(name="wireguardClientConfigurationFilename")
    def wireguard_client_configuration_filename(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wireguard_client_configuration_filename")

    @wireguard_client_configuration_filename.setter
    def wireguard_client_configuration_filename(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wireguard_client_configuration_filename", value)

    @property
    @pulumi.getter(name="wireguardClientMode")
    def wireguard_client_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wireguard_client_mode")

    @wireguard_client_mode.setter
    def wireguard_client_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wireguard_client_mode", value)

    @property
    @pulumi.getter(name="wireguardClientPeerIp")
    def wireguard_client_peer_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wireguard_client_peer_ip")

    @wireguard_client_peer_ip.setter
    def wireguard_client_peer_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wireguard_client_peer_ip", value)

    @property
    @pulumi.getter(name="wireguardClientPeerPort")
    def wireguard_client_peer_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "wireguard_client_peer_port")

    @wireguard_client_peer_port.setter
    def wireguard_client_peer_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "wireguard_client_peer_port", value)

    @property
    @pulumi.getter(name="wireguardClientPeerPublicKey")
    def wireguard_client_peer_public_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wireguard_client_peer_public_key")

    @wireguard_client_peer_public_key.setter
    def wireguard_client_peer_public_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wireguard_client_peer_public_key", value)

    @property
    @pulumi.getter(name="wireguardClientPresharedKey")
    def wireguard_client_preshared_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wireguard_client_preshared_key")

    @wireguard_client_preshared_key.setter
    def wireguard_client_preshared_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wireguard_client_preshared_key", value)

    @property
    @pulumi.getter(name="wireguardClientPresharedKeyEnabled")
    def wireguard_client_preshared_key_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "wireguard_client_preshared_key_enabled")

    @wireguard_client_preshared_key_enabled.setter
    def wireguard_client_preshared_key_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "wireguard_client_preshared_key_enabled", value)

    @property
    @pulumi.getter(name="wireguardInterface")
    def wireguard_interface(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wireguard_interface")

    @wireguard_interface.setter
    def wireguard_interface(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wireguard_interface", value)

    @property
    @pulumi.getter(name="wireguardLocalWanIp")
    def wireguard_local_wan_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wireguard_local_wan_ip")

    @wireguard_local_wan_ip.setter
    def wireguard_local_wan_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wireguard_local_wan_ip", value)

    @property
    @pulumi.getter(name="wireguardPublicKey")
    def wireguard_public_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wireguard_public_key")

    @wireguard_public_key.setter
    def wireguard_public_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wireguard_public_key", value)

    @property
    @pulumi.getter(name="xAuthKey")
    def x_auth_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_auth_key")

    @x_auth_key.setter
    def x_auth_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_auth_key", value)

    @property
    @pulumi.getter(name="xCaCrt")
    def x_ca_crt(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_ca_crt")

    @x_ca_crt.setter
    def x_ca_crt(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_ca_crt", value)

    @property
    @pulumi.getter(name="xCaKey")
    def x_ca_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_ca_key")

    @x_ca_key.setter
    def x_ca_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_ca_key", value)

    @property
    @pulumi.getter(name="xDhKey")
    def x_dh_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_dh_key")

    @x_dh_key.setter
    def x_dh_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_dh_key", value)

    @property
    @pulumi.getter(name="xIpsecPreSharedKey")
    def x_ipsec_pre_shared_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_ipsec_pre_shared_key")

    @x_ipsec_pre_shared_key.setter
    def x_ipsec_pre_shared_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_ipsec_pre_shared_key", value)

    @property
    @pulumi.getter(name="xOpenvpnPassword")
    def x_openvpn_password(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_openvpn_password")

    @x_openvpn_password.setter
    def x_openvpn_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_openvpn_password", value)

    @property
    @pulumi.getter(name="xOpenvpnSharedSecretKey")
    def x_openvpn_shared_secret_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_openvpn_shared_secret_key")

    @x_openvpn_shared_secret_key.setter
    def x_openvpn_shared_secret_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_openvpn_shared_secret_key", value)

    @property
    @pulumi.getter(name="xPptpcPassword")
    def x_pptpc_password(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_pptpc_password")

    @x_pptpc_password.setter
    def x_pptpc_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_pptpc_password", value)

    @property
    @pulumi.getter(name="xServerCrt")
    def x_server_crt(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_server_crt")

    @x_server_crt.setter
    def x_server_crt(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_server_crt", value)

    @property
    @pulumi.getter(name="xServerKey")
    def x_server_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_server_key")

    @x_server_key.setter
    def x_server_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_server_key", value)

    @property
    @pulumi.getter(name="xSharedClientCrt")
    def x_shared_client_crt(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_shared_client_crt")

    @x_shared_client_crt.setter
    def x_shared_client_crt(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_shared_client_crt", value)

    @property
    @pulumi.getter(name="xSharedClientKey")
    def x_shared_client_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_shared_client_key")

    @x_shared_client_key.setter
    def x_shared_client_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_shared_client_key", value)

    @property
    @pulumi.getter(name="xWanPassword")
    def x_wan_password(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_wan_password")

    @x_wan_password.setter
    def x_wan_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_wan_password", value)

    @property
    @pulumi.getter(name="xWireguardPrivateKey")
    def x_wireguard_private_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_wireguard_private_key")

    @x_wireguard_private_key.setter
    def x_wireguard_private_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_wireguard_private_key", value)


@pulumi.type_token("unifi-native:networkconf:Network")
class Network(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_scale_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcp_relay_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_boot_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_boot_filename: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_boot_server: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_conflict_checking: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_dns1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_dns2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_dns3: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_dns4: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_dns_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_gateway: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_gateway_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_ip1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_ip2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_ip3: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_leasetime: Optional[pulumi.Input[builtins.int]] = None,
                 dhcpd_mac1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_mac2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_mac3: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_ntp1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_ntp2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_ntp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_start: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_stop: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_tftp_server: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_time_offset: Optional[pulumi.Input[builtins.int]] = None,
                 dhcpd_time_offset_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_unifi_controller: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_wins1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_wins2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_wins_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_wpad_url: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_allow_slaac: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpdv6_dns1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_dns2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_dns3: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_dns4: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_dns_auto: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpdv6_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpdv6_leasetime: Optional[pulumi.Input[builtins.int]] = None,
                 dhcpdv6_start: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_stop: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpguard_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 domain_name: Optional[pulumi.Input[builtins.str]] = None,
                 dpi_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dpigroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 exposed_to_site_vpn: Optional[pulumi.Input[builtins.bool]] = None,
                 firewall_zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 gateway_device: Optional[pulumi.Input[builtins.str]] = None,
                 gateway_type: Optional[pulumi.Input[builtins.str]] = None,
                 igmp_fastleave: Optional[pulumi.Input[builtins.bool]] = None,
                 igmp_flood_unknown_multicast: Optional[pulumi.Input[builtins.bool]] = None,
                 igmp_groupmembership: Optional[pulumi.Input[builtins.int]] = None,
                 igmp_maxresponse: Optional[pulumi.Input[builtins.int]] = None,
                 igmp_mcrtrexpiretime: Optional[pulumi.Input[builtins.int]] = None,
                 igmp_proxy_downstream_networkconf_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 igmp_proxy_for: Optional[pulumi.Input[builtins.str]] = None,
                 igmp_proxy_upstream: Optional[pulumi.Input[builtins.bool]] = None,
                 igmp_querier_switches: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkIGMPQuerierSwitchesArgs', 'NetworkIGMPQuerierSwitchesArgsDict']]]]] = None,
                 igmp_snooping: Optional[pulumi.Input[builtins.bool]] = None,
                 igmp_supression: Optional[pulumi.Input[builtins.bool]] = None,
                 interface_mtu: Optional[pulumi.Input[builtins.int]] = None,
                 interface_mtu_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 internet_access_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ip_subnet: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_dh_group: Optional[pulumi.Input[builtins.int]] = None,
                 ipsec_dynamic_routing: Optional[pulumi.Input[builtins.bool]] = None,
                 ipsec_encryption: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_esp_dh_group: Optional[pulumi.Input[builtins.int]] = None,
                 ipsec_esp_encryption: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_esp_hash: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_esp_lifetime: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_hash: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_ike_dh_group: Optional[pulumi.Input[builtins.int]] = None,
                 ipsec_ike_encryption: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_ike_hash: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_ike_lifetime: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_interface: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_key_exchange: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_local_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_local_identifier_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ipsec_local_ip: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_peer_ip: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_pfs: Optional[pulumi.Input[builtins.bool]] = None,
                 ipsec_profile: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_remote_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_remote_identifier_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ipsec_separate_ikev2_networks: Optional[pulumi.Input[builtins.bool]] = None,
                 ipsec_tunnel_ip: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_tunnel_ip_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ipv6_client_address_assignment: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_interface_type: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_pd_auto_prefixid_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ipv6_pd_interface: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_pd_prefixid: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_pd_start: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_pd_stop: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_ra_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ipv6_ra_preferred_lifetime: Optional[pulumi.Input[builtins.int]] = None,
                 ipv6_ra_priority: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_ra_valid_lifetime: Optional[pulumi.Input[builtins.int]] = None,
                 ipv6_setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_single_network_interface: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_subnet: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_wan_delegation_type: Optional[pulumi.Input[builtins.str]] = None,
                 is_nat: Optional[pulumi.Input[builtins.bool]] = None,
                 l2tp_allow_weak_ciphers: Optional[pulumi.Input[builtins.bool]] = None,
                 l2tp_interface: Optional[pulumi.Input[builtins.str]] = None,
                 l2tp_local_wan_ip: Optional[pulumi.Input[builtins.str]] = None,
                 local_port: Optional[pulumi.Input[builtins.int]] = None,
                 lte_lan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mac_override: Optional[pulumi.Input[builtins.str]] = None,
                 mac_override_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mdns_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nat_outbound_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkNATOutboundIPAddressesArgs', 'NetworkNATOutboundIPAddressesArgsDict']]]]] = None,
                 network_isolation_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 networkgroup: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_configuration: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_configuration_filename: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_encryption_cipher: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_interface: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_local_address: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_local_port: Optional[pulumi.Input[builtins.int]] = None,
                 openvpn_local_wan_ip: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_mode: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_remote_address: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_remote_host: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_remote_port: Optional[pulumi.Input[builtins.int]] = None,
                 openvpn_username: Optional[pulumi.Input[builtins.str]] = None,
                 pptpc_require_mppe: Optional[pulumi.Input[builtins.bool]] = None,
                 pptpc_route_distance: Optional[pulumi.Input[builtins.int]] = None,
                 pptpc_server_ip: Optional[pulumi.Input[builtins.str]] = None,
                 pptpc_username: Optional[pulumi.Input[builtins.str]] = None,
                 priority: Optional[pulumi.Input[builtins.int]] = None,
                 purpose: Optional[pulumi.Input[builtins.str]] = None,
                 radiusprofile_id: Optional[pulumi.Input[builtins.str]] = None,
                 remote_site_id: Optional[pulumi.Input[builtins.str]] = None,
                 remote_site_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 remote_vpn_dynamic_subnets_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 remote_vpn_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 report_wan_event: Optional[pulumi.Input[builtins.bool]] = None,
                 require_mschapv2: Optional[pulumi.Input[builtins.bool]] = None,
                 route_distance: Optional[pulumi.Input[builtins.int]] = None,
                 sdwan_remote_site_id: Optional[pulumi.Input[builtins.str]] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 single_network_lan: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 uid_policy_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_policy_name: Optional[pulumi.Input[builtins.str]] = None,
                 uid_public_gateway_port: Optional[pulumi.Input[builtins.int]] = None,
                 uid_traffic_rules_allowed_ips_and_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 uid_traffic_rules_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_vpn_custom_routing: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 uid_vpn_default_dns_suffix: Optional[pulumi.Input[builtins.str]] = None,
                 uid_vpn_masquerade_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_vpn_max_connection_time_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 uid_vpn_sync_public_ip: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_vpn_type: Optional[pulumi.Input[builtins.str]] = None,
                 uid_workspace_url: Optional[pulumi.Input[builtins.str]] = None,
                 upnp_lan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 usergroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 vlan: Optional[pulumi.Input[builtins.int]] = None,
                 vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 vpn_client_configuration_remote_ip_override: Optional[pulumi.Input[builtins.str]] = None,
                 vpn_client_configuration_remote_ip_override_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 vpn_client_default_route: Optional[pulumi.Input[builtins.bool]] = None,
                 vpn_client_pull_dns: Optional[pulumi.Input[builtins.bool]] = None,
                 vpn_protocol: Optional[pulumi.Input[builtins.str]] = None,
                 vpn_type: Optional[pulumi.Input[builtins.str]] = None,
                 vrrp_ip_subnet_gw1: Optional[pulumi.Input[builtins.str]] = None,
                 vrrp_ip_subnet_gw2: Optional[pulumi.Input[builtins.str]] = None,
                 vrrp_vrid: Optional[pulumi.Input[builtins.int]] = None,
                 wan_dhcp_cos: Optional[pulumi.Input[builtins.int]] = None,
                 wan_dhcp_options: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkWANDHCPOptionsArgs', 'NetworkWANDHCPOptionsArgsDict']]]]] = None,
                 wan_dhcpv6_pd_size: Optional[pulumi.Input[builtins.int]] = None,
                 wan_dns1: Optional[pulumi.Input[builtins.str]] = None,
                 wan_dns2: Optional[pulumi.Input[builtins.str]] = None,
                 wan_dns3: Optional[pulumi.Input[builtins.str]] = None,
                 wan_dns4: Optional[pulumi.Input[builtins.str]] = None,
                 wan_dns_preference: Optional[pulumi.Input[builtins.str]] = None,
                 wan_dslite_remote_host: Optional[pulumi.Input[builtins.str]] = None,
                 wan_egress_qos: Optional[pulumi.Input[builtins.int]] = None,
                 wan_failover_priority: Optional[pulumi.Input[builtins.int]] = None,
                 wan_gateway: Optional[pulumi.Input[builtins.str]] = None,
                 wan_gateway_v6: Optional[pulumi.Input[builtins.str]] = None,
                 wan_ip: Optional[pulumi.Input[builtins.str]] = None,
                 wan_ip_aliases: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 wan_ipv6: Optional[pulumi.Input[builtins.str]] = None,
                 wan_ipv6_dns1: Optional[pulumi.Input[builtins.str]] = None,
                 wan_ipv6_dns2: Optional[pulumi.Input[builtins.str]] = None,
                 wan_ipv6_dns_preference: Optional[pulumi.Input[builtins.str]] = None,
                 wan_load_balance_type: Optional[pulumi.Input[builtins.str]] = None,
                 wan_load_balance_weight: Optional[pulumi.Input[builtins.int]] = None,
                 wan_netmask: Optional[pulumi.Input[builtins.str]] = None,
                 wan_networkgroup: Optional[pulumi.Input[builtins.str]] = None,
                 wan_pppoe_password_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wan_pppoe_username_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wan_prefixlen: Optional[pulumi.Input[builtins.int]] = None,
                 wan_provider_capabilities: Optional[pulumi.Input[Union['NetworkWANProviderCapabilitiesArgs', 'NetworkWANProviderCapabilitiesArgsDict']]] = None,
                 wan_smartq_down_rate: Optional[pulumi.Input[builtins.int]] = None,
                 wan_smartq_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wan_smartq_up_rate: Optional[pulumi.Input[builtins.int]] = None,
                 wan_type: Optional[pulumi.Input[builtins.str]] = None,
                 wan_type_v6: Optional[pulumi.Input[builtins.str]] = None,
                 wan_username: Optional[pulumi.Input[builtins.str]] = None,
                 wan_vlan: Optional[pulumi.Input[builtins.int]] = None,
                 wan_vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wireguard_client_configuration_file: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_configuration_filename: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_mode: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_peer_ip: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_peer_port: Optional[pulumi.Input[builtins.int]] = None,
                 wireguard_client_peer_public_key: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_preshared_key: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_preshared_key_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wireguard_interface: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_local_wan_ip: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_public_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_auth_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_ca_crt: Optional[pulumi.Input[builtins.str]] = None,
                 x_ca_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_dh_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_ipsec_pre_shared_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_openvpn_password: Optional[pulumi.Input[builtins.str]] = None,
                 x_openvpn_shared_secret_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_pptpc_password: Optional[pulumi.Input[builtins.str]] = None,
                 x_server_crt: Optional[pulumi.Input[builtins.str]] = None,
                 x_server_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_shared_client_crt: Optional[pulumi.Input[builtins.str]] = None,
                 x_shared_client_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_wan_password: Optional[pulumi.Input[builtins.str]] = None,
                 x_wireguard_private_key: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a Network resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NetworkArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Network resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_scale_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcp_relay_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_boot_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_boot_filename: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_boot_server: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_conflict_checking: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_dns1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_dns2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_dns3: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_dns4: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_dns_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_gateway: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_gateway_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_ip1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_ip2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_ip3: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_leasetime: Optional[pulumi.Input[builtins.int]] = None,
                 dhcpd_mac1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_mac2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_mac3: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_ntp1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_ntp2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_ntp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_start: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_stop: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_tftp_server: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_time_offset: Optional[pulumi.Input[builtins.int]] = None,
                 dhcpd_time_offset_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_unifi_controller: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_wins1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_wins2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_wins_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_wpad_url: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_allow_slaac: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpdv6_dns1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_dns2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_dns3: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_dns4: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_dns_auto: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpdv6_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpdv6_leasetime: Optional[pulumi.Input[builtins.int]] = None,
                 dhcpdv6_start: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpdv6_stop: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpguard_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 domain_name: Optional[pulumi.Input[builtins.str]] = None,
                 dpi_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dpigroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 exposed_to_site_vpn: Optional[pulumi.Input[builtins.bool]] = None,
                 firewall_zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 gateway_device: Optional[pulumi.Input[builtins.str]] = None,
                 gateway_type: Optional[pulumi.Input[builtins.str]] = None,
                 igmp_fastleave: Optional[pulumi.Input[builtins.bool]] = None,
                 igmp_flood_unknown_multicast: Optional[pulumi.Input[builtins.bool]] = None,
                 igmp_groupmembership: Optional[pulumi.Input[builtins.int]] = None,
                 igmp_maxresponse: Optional[pulumi.Input[builtins.int]] = None,
                 igmp_mcrtrexpiretime: Optional[pulumi.Input[builtins.int]] = None,
                 igmp_proxy_downstream_networkconf_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 igmp_proxy_for: Optional[pulumi.Input[builtins.str]] = None,
                 igmp_proxy_upstream: Optional[pulumi.Input[builtins.bool]] = None,
                 igmp_querier_switches: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkIGMPQuerierSwitchesArgs', 'NetworkIGMPQuerierSwitchesArgsDict']]]]] = None,
                 igmp_snooping: Optional[pulumi.Input[builtins.bool]] = None,
                 igmp_supression: Optional[pulumi.Input[builtins.bool]] = None,
                 interface_mtu: Optional[pulumi.Input[builtins.int]] = None,
                 interface_mtu_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 internet_access_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ip_subnet: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_dh_group: Optional[pulumi.Input[builtins.int]] = None,
                 ipsec_dynamic_routing: Optional[pulumi.Input[builtins.bool]] = None,
                 ipsec_encryption: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_esp_dh_group: Optional[pulumi.Input[builtins.int]] = None,
                 ipsec_esp_encryption: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_esp_hash: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_esp_lifetime: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_hash: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_ike_dh_group: Optional[pulumi.Input[builtins.int]] = None,
                 ipsec_ike_encryption: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_ike_hash: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_ike_lifetime: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_interface: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_key_exchange: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_local_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_local_identifier_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ipsec_local_ip: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_peer_ip: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_pfs: Optional[pulumi.Input[builtins.bool]] = None,
                 ipsec_profile: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_remote_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_remote_identifier_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ipsec_separate_ikev2_networks: Optional[pulumi.Input[builtins.bool]] = None,
                 ipsec_tunnel_ip: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec_tunnel_ip_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ipv6_client_address_assignment: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_interface_type: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_pd_auto_prefixid_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ipv6_pd_interface: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_pd_prefixid: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_pd_start: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_pd_stop: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_ra_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ipv6_ra_preferred_lifetime: Optional[pulumi.Input[builtins.int]] = None,
                 ipv6_ra_priority: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_ra_valid_lifetime: Optional[pulumi.Input[builtins.int]] = None,
                 ipv6_setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_single_network_interface: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_subnet: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_wan_delegation_type: Optional[pulumi.Input[builtins.str]] = None,
                 is_nat: Optional[pulumi.Input[builtins.bool]] = None,
                 l2tp_allow_weak_ciphers: Optional[pulumi.Input[builtins.bool]] = None,
                 l2tp_interface: Optional[pulumi.Input[builtins.str]] = None,
                 l2tp_local_wan_ip: Optional[pulumi.Input[builtins.str]] = None,
                 local_port: Optional[pulumi.Input[builtins.int]] = None,
                 lte_lan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mac_override: Optional[pulumi.Input[builtins.str]] = None,
                 mac_override_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mdns_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nat_outbound_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkNATOutboundIPAddressesArgs', 'NetworkNATOutboundIPAddressesArgsDict']]]]] = None,
                 network_isolation_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 networkgroup: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_configuration: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_configuration_filename: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_encryption_cipher: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_interface: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_local_address: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_local_port: Optional[pulumi.Input[builtins.int]] = None,
                 openvpn_local_wan_ip: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_mode: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_remote_address: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_remote_host: Optional[pulumi.Input[builtins.str]] = None,
                 openvpn_remote_port: Optional[pulumi.Input[builtins.int]] = None,
                 openvpn_username: Optional[pulumi.Input[builtins.str]] = None,
                 pptpc_require_mppe: Optional[pulumi.Input[builtins.bool]] = None,
                 pptpc_route_distance: Optional[pulumi.Input[builtins.int]] = None,
                 pptpc_server_ip: Optional[pulumi.Input[builtins.str]] = None,
                 pptpc_username: Optional[pulumi.Input[builtins.str]] = None,
                 priority: Optional[pulumi.Input[builtins.int]] = None,
                 purpose: Optional[pulumi.Input[builtins.str]] = None,
                 radiusprofile_id: Optional[pulumi.Input[builtins.str]] = None,
                 remote_site_id: Optional[pulumi.Input[builtins.str]] = None,
                 remote_site_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 remote_vpn_dynamic_subnets_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 remote_vpn_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 report_wan_event: Optional[pulumi.Input[builtins.bool]] = None,
                 require_mschapv2: Optional[pulumi.Input[builtins.bool]] = None,
                 route_distance: Optional[pulumi.Input[builtins.int]] = None,
                 sdwan_remote_site_id: Optional[pulumi.Input[builtins.str]] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 single_network_lan: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 uid_policy_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_policy_name: Optional[pulumi.Input[builtins.str]] = None,
                 uid_public_gateway_port: Optional[pulumi.Input[builtins.int]] = None,
                 uid_traffic_rules_allowed_ips_and_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 uid_traffic_rules_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_vpn_custom_routing: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 uid_vpn_default_dns_suffix: Optional[pulumi.Input[builtins.str]] = None,
                 uid_vpn_masquerade_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_vpn_max_connection_time_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 uid_vpn_sync_public_ip: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_vpn_type: Optional[pulumi.Input[builtins.str]] = None,
                 uid_workspace_url: Optional[pulumi.Input[builtins.str]] = None,
                 upnp_lan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 usergroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 vlan: Optional[pulumi.Input[builtins.int]] = None,
                 vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 vpn_client_configuration_remote_ip_override: Optional[pulumi.Input[builtins.str]] = None,
                 vpn_client_configuration_remote_ip_override_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 vpn_client_default_route: Optional[pulumi.Input[builtins.bool]] = None,
                 vpn_client_pull_dns: Optional[pulumi.Input[builtins.bool]] = None,
                 vpn_protocol: Optional[pulumi.Input[builtins.str]] = None,
                 vpn_type: Optional[pulumi.Input[builtins.str]] = None,
                 vrrp_ip_subnet_gw1: Optional[pulumi.Input[builtins.str]] = None,
                 vrrp_ip_subnet_gw2: Optional[pulumi.Input[builtins.str]] = None,
                 vrrp_vrid: Optional[pulumi.Input[builtins.int]] = None,
                 wan_dhcp_cos: Optional[pulumi.Input[builtins.int]] = None,
                 wan_dhcp_options: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkWANDHCPOptionsArgs', 'NetworkWANDHCPOptionsArgsDict']]]]] = None,
                 wan_dhcpv6_pd_size: Optional[pulumi.Input[builtins.int]] = None,
                 wan_dns1: Optional[pulumi.Input[builtins.str]] = None,
                 wan_dns2: Optional[pulumi.Input[builtins.str]] = None,
                 wan_dns3: Optional[pulumi.Input[builtins.str]] = None,
                 wan_dns4: Optional[pulumi.Input[builtins.str]] = None,
                 wan_dns_preference: Optional[pulumi.Input[builtins.str]] = None,
                 wan_dslite_remote_host: Optional[pulumi.Input[builtins.str]] = None,
                 wan_egress_qos: Optional[pulumi.Input[builtins.int]] = None,
                 wan_failover_priority: Optional[pulumi.Input[builtins.int]] = None,
                 wan_gateway: Optional[pulumi.Input[builtins.str]] = None,
                 wan_gateway_v6: Optional[pulumi.Input[builtins.str]] = None,
                 wan_ip: Optional[pulumi.Input[builtins.str]] = None,
                 wan_ip_aliases: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 wan_ipv6: Optional[pulumi.Input[builtins.str]] = None,
                 wan_ipv6_dns1: Optional[pulumi.Input[builtins.str]] = None,
                 wan_ipv6_dns2: Optional[pulumi.Input[builtins.str]] = None,
                 wan_ipv6_dns_preference: Optional[pulumi.Input[builtins.str]] = None,
                 wan_load_balance_type: Optional[pulumi.Input[builtins.str]] = None,
                 wan_load_balance_weight: Optional[pulumi.Input[builtins.int]] = None,
                 wan_netmask: Optional[pulumi.Input[builtins.str]] = None,
                 wan_networkgroup: Optional[pulumi.Input[builtins.str]] = None,
                 wan_pppoe_password_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wan_pppoe_username_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wan_prefixlen: Optional[pulumi.Input[builtins.int]] = None,
                 wan_provider_capabilities: Optional[pulumi.Input[Union['NetworkWANProviderCapabilitiesArgs', 'NetworkWANProviderCapabilitiesArgsDict']]] = None,
                 wan_smartq_down_rate: Optional[pulumi.Input[builtins.int]] = None,
                 wan_smartq_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wan_smartq_up_rate: Optional[pulumi.Input[builtins.int]] = None,
                 wan_type: Optional[pulumi.Input[builtins.str]] = None,
                 wan_type_v6: Optional[pulumi.Input[builtins.str]] = None,
                 wan_username: Optional[pulumi.Input[builtins.str]] = None,
                 wan_vlan: Optional[pulumi.Input[builtins.int]] = None,
                 wan_vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wireguard_client_configuration_file: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_configuration_filename: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_mode: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_peer_ip: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_peer_port: Optional[pulumi.Input[builtins.int]] = None,
                 wireguard_client_peer_public_key: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_preshared_key: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_client_preshared_key_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wireguard_interface: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_local_wan_ip: Optional[pulumi.Input[builtins.str]] = None,
                 wireguard_public_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_auth_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_ca_crt: Optional[pulumi.Input[builtins.str]] = None,
                 x_ca_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_dh_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_ipsec_pre_shared_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_openvpn_password: Optional[pulumi.Input[builtins.str]] = None,
                 x_openvpn_shared_secret_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_pptpc_password: Optional[pulumi.Input[builtins.str]] = None,
                 x_server_crt: Optional[pulumi.Input[builtins.str]] = None,
                 x_server_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_shared_client_crt: Optional[pulumi.Input[builtins.str]] = None,
                 x_shared_client_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_wan_password: Optional[pulumi.Input[builtins.str]] = None,
                 x_wireguard_private_key: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkArgs.__new__(NetworkArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["auto_scale_enabled"] = auto_scale_enabled
            __props__.__dict__["dhcp_relay_enabled"] = dhcp_relay_enabled
            __props__.__dict__["dhcpd_boot_enabled"] = dhcpd_boot_enabled
            __props__.__dict__["dhcpd_boot_filename"] = dhcpd_boot_filename
            __props__.__dict__["dhcpd_boot_server"] = dhcpd_boot_server
            __props__.__dict__["dhcpd_conflict_checking"] = dhcpd_conflict_checking
            __props__.__dict__["dhcpd_dns1"] = dhcpd_dns1
            __props__.__dict__["dhcpd_dns2"] = dhcpd_dns2
            __props__.__dict__["dhcpd_dns3"] = dhcpd_dns3
            __props__.__dict__["dhcpd_dns4"] = dhcpd_dns4
            __props__.__dict__["dhcpd_dns_enabled"] = dhcpd_dns_enabled
            __props__.__dict__["dhcpd_enabled"] = dhcpd_enabled
            __props__.__dict__["dhcpd_gateway"] = dhcpd_gateway
            __props__.__dict__["dhcpd_gateway_enabled"] = dhcpd_gateway_enabled
            __props__.__dict__["dhcpd_ip1"] = dhcpd_ip1
            __props__.__dict__["dhcpd_ip2"] = dhcpd_ip2
            __props__.__dict__["dhcpd_ip3"] = dhcpd_ip3
            __props__.__dict__["dhcpd_leasetime"] = dhcpd_leasetime
            __props__.__dict__["dhcpd_mac1"] = dhcpd_mac1
            __props__.__dict__["dhcpd_mac2"] = dhcpd_mac2
            __props__.__dict__["dhcpd_mac3"] = dhcpd_mac3
            __props__.__dict__["dhcpd_ntp1"] = dhcpd_ntp1
            __props__.__dict__["dhcpd_ntp2"] = dhcpd_ntp2
            __props__.__dict__["dhcpd_ntp_enabled"] = dhcpd_ntp_enabled
            __props__.__dict__["dhcpd_start"] = dhcpd_start
            __props__.__dict__["dhcpd_stop"] = dhcpd_stop
            __props__.__dict__["dhcpd_tftp_server"] = dhcpd_tftp_server
            __props__.__dict__["dhcpd_time_offset"] = dhcpd_time_offset
            __props__.__dict__["dhcpd_time_offset_enabled"] = dhcpd_time_offset_enabled
            __props__.__dict__["dhcpd_unifi_controller"] = dhcpd_unifi_controller
            __props__.__dict__["dhcpd_wins1"] = dhcpd_wins1
            __props__.__dict__["dhcpd_wins2"] = dhcpd_wins2
            __props__.__dict__["dhcpd_wins_enabled"] = dhcpd_wins_enabled
            __props__.__dict__["dhcpd_wpad_url"] = dhcpd_wpad_url
            __props__.__dict__["dhcpdv6_allow_slaac"] = dhcpdv6_allow_slaac
            __props__.__dict__["dhcpdv6_dns1"] = dhcpdv6_dns1
            __props__.__dict__["dhcpdv6_dns2"] = dhcpdv6_dns2
            __props__.__dict__["dhcpdv6_dns3"] = dhcpdv6_dns3
            __props__.__dict__["dhcpdv6_dns4"] = dhcpdv6_dns4
            __props__.__dict__["dhcpdv6_dns_auto"] = dhcpdv6_dns_auto
            __props__.__dict__["dhcpdv6_enabled"] = dhcpdv6_enabled
            __props__.__dict__["dhcpdv6_leasetime"] = dhcpdv6_leasetime
            __props__.__dict__["dhcpdv6_start"] = dhcpdv6_start
            __props__.__dict__["dhcpdv6_stop"] = dhcpdv6_stop
            __props__.__dict__["dhcpguard_enabled"] = dhcpguard_enabled
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["dpi_enabled"] = dpi_enabled
            __props__.__dict__["dpigroup_id"] = dpigroup_id
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["exposed_to_site_vpn"] = exposed_to_site_vpn
            __props__.__dict__["firewall_zone_id"] = firewall_zone_id
            __props__.__dict__["gateway_device"] = gateway_device
            __props__.__dict__["gateway_type"] = gateway_type
            __props__.__dict__["igmp_fastleave"] = igmp_fastleave
            __props__.__dict__["igmp_flood_unknown_multicast"] = igmp_flood_unknown_multicast
            __props__.__dict__["igmp_groupmembership"] = igmp_groupmembership
            __props__.__dict__["igmp_maxresponse"] = igmp_maxresponse
            __props__.__dict__["igmp_mcrtrexpiretime"] = igmp_mcrtrexpiretime
            __props__.__dict__["igmp_proxy_downstream_networkconf_ids"] = igmp_proxy_downstream_networkconf_ids
            __props__.__dict__["igmp_proxy_for"] = igmp_proxy_for
            __props__.__dict__["igmp_proxy_upstream"] = igmp_proxy_upstream
            __props__.__dict__["igmp_querier_switches"] = igmp_querier_switches
            __props__.__dict__["igmp_snooping"] = igmp_snooping
            __props__.__dict__["igmp_supression"] = igmp_supression
            __props__.__dict__["interface_mtu"] = interface_mtu
            __props__.__dict__["interface_mtu_enabled"] = interface_mtu_enabled
            __props__.__dict__["internet_access_enabled"] = internet_access_enabled
            __props__.__dict__["ip_subnet"] = ip_subnet
            __props__.__dict__["ipsec_dh_group"] = ipsec_dh_group
            __props__.__dict__["ipsec_dynamic_routing"] = ipsec_dynamic_routing
            __props__.__dict__["ipsec_encryption"] = ipsec_encryption
            __props__.__dict__["ipsec_esp_dh_group"] = ipsec_esp_dh_group
            __props__.__dict__["ipsec_esp_encryption"] = ipsec_esp_encryption
            __props__.__dict__["ipsec_esp_hash"] = ipsec_esp_hash
            __props__.__dict__["ipsec_esp_lifetime"] = ipsec_esp_lifetime
            __props__.__dict__["ipsec_hash"] = ipsec_hash
            __props__.__dict__["ipsec_ike_dh_group"] = ipsec_ike_dh_group
            __props__.__dict__["ipsec_ike_encryption"] = ipsec_ike_encryption
            __props__.__dict__["ipsec_ike_hash"] = ipsec_ike_hash
            __props__.__dict__["ipsec_ike_lifetime"] = ipsec_ike_lifetime
            __props__.__dict__["ipsec_interface"] = ipsec_interface
            __props__.__dict__["ipsec_key_exchange"] = ipsec_key_exchange
            __props__.__dict__["ipsec_local_identifier"] = ipsec_local_identifier
            __props__.__dict__["ipsec_local_identifier_enabled"] = ipsec_local_identifier_enabled
            __props__.__dict__["ipsec_local_ip"] = ipsec_local_ip
            __props__.__dict__["ipsec_peer_ip"] = ipsec_peer_ip
            __props__.__dict__["ipsec_pfs"] = ipsec_pfs
            __props__.__dict__["ipsec_profile"] = ipsec_profile
            __props__.__dict__["ipsec_remote_identifier"] = ipsec_remote_identifier
            __props__.__dict__["ipsec_remote_identifier_enabled"] = ipsec_remote_identifier_enabled
            __props__.__dict__["ipsec_separate_ikev2_networks"] = ipsec_separate_ikev2_networks
            __props__.__dict__["ipsec_tunnel_ip"] = ipsec_tunnel_ip
            __props__.__dict__["ipsec_tunnel_ip_enabled"] = ipsec_tunnel_ip_enabled
            __props__.__dict__["ipv6_client_address_assignment"] = ipv6_client_address_assignment
            __props__.__dict__["ipv6_interface_type"] = ipv6_interface_type
            __props__.__dict__["ipv6_pd_auto_prefixid_enabled"] = ipv6_pd_auto_prefixid_enabled
            __props__.__dict__["ipv6_pd_interface"] = ipv6_pd_interface
            __props__.__dict__["ipv6_pd_prefixid"] = ipv6_pd_prefixid
            __props__.__dict__["ipv6_pd_start"] = ipv6_pd_start
            __props__.__dict__["ipv6_pd_stop"] = ipv6_pd_stop
            __props__.__dict__["ipv6_ra_enabled"] = ipv6_ra_enabled
            __props__.__dict__["ipv6_ra_preferred_lifetime"] = ipv6_ra_preferred_lifetime
            __props__.__dict__["ipv6_ra_priority"] = ipv6_ra_priority
            __props__.__dict__["ipv6_ra_valid_lifetime"] = ipv6_ra_valid_lifetime
            __props__.__dict__["ipv6_setting_preference"] = ipv6_setting_preference
            __props__.__dict__["ipv6_single_network_interface"] = ipv6_single_network_interface
            __props__.__dict__["ipv6_subnet"] = ipv6_subnet
            __props__.__dict__["ipv6_wan_delegation_type"] = ipv6_wan_delegation_type
            __props__.__dict__["is_nat"] = is_nat
            __props__.__dict__["l2tp_allow_weak_ciphers"] = l2tp_allow_weak_ciphers
            __props__.__dict__["l2tp_interface"] = l2tp_interface
            __props__.__dict__["l2tp_local_wan_ip"] = l2tp_local_wan_ip
            __props__.__dict__["local_port"] = local_port
            __props__.__dict__["lte_lan_enabled"] = lte_lan_enabled
            __props__.__dict__["mac_override"] = mac_override
            __props__.__dict__["mac_override_enabled"] = mac_override_enabled
            __props__.__dict__["mdns_enabled"] = mdns_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["nat_outbound_ip_addresses"] = nat_outbound_ip_addresses
            __props__.__dict__["network_isolation_enabled"] = network_isolation_enabled
            __props__.__dict__["networkgroup"] = networkgroup
            __props__.__dict__["openvpn_configuration"] = openvpn_configuration
            __props__.__dict__["openvpn_configuration_filename"] = openvpn_configuration_filename
            __props__.__dict__["openvpn_encryption_cipher"] = openvpn_encryption_cipher
            __props__.__dict__["openvpn_interface"] = openvpn_interface
            __props__.__dict__["openvpn_local_address"] = openvpn_local_address
            __props__.__dict__["openvpn_local_port"] = openvpn_local_port
            __props__.__dict__["openvpn_local_wan_ip"] = openvpn_local_wan_ip
            __props__.__dict__["openvpn_mode"] = openvpn_mode
            __props__.__dict__["openvpn_remote_address"] = openvpn_remote_address
            __props__.__dict__["openvpn_remote_host"] = openvpn_remote_host
            __props__.__dict__["openvpn_remote_port"] = openvpn_remote_port
            __props__.__dict__["openvpn_username"] = openvpn_username
            __props__.__dict__["pptpc_require_mppe"] = pptpc_require_mppe
            __props__.__dict__["pptpc_route_distance"] = pptpc_route_distance
            __props__.__dict__["pptpc_server_ip"] = pptpc_server_ip
            __props__.__dict__["pptpc_username"] = pptpc_username
            __props__.__dict__["priority"] = priority
            __props__.__dict__["purpose"] = purpose
            __props__.__dict__["radiusprofile_id"] = radiusprofile_id
            __props__.__dict__["remote_site_id"] = remote_site_id
            __props__.__dict__["remote_site_subnets"] = remote_site_subnets
            __props__.__dict__["remote_vpn_dynamic_subnets_enabled"] = remote_vpn_dynamic_subnets_enabled
            __props__.__dict__["remote_vpn_subnets"] = remote_vpn_subnets
            __props__.__dict__["report_wan_event"] = report_wan_event
            __props__.__dict__["require_mschapv2"] = require_mschapv2
            __props__.__dict__["route_distance"] = route_distance
            __props__.__dict__["sdwan_remote_site_id"] = sdwan_remote_site_id
            __props__.__dict__["setting_preference"] = setting_preference
            __props__.__dict__["single_network_lan"] = single_network_lan
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["uid_policy_enabled"] = uid_policy_enabled
            __props__.__dict__["uid_policy_name"] = uid_policy_name
            __props__.__dict__["uid_public_gateway_port"] = uid_public_gateway_port
            __props__.__dict__["uid_traffic_rules_allowed_ips_and_hostnames"] = uid_traffic_rules_allowed_ips_and_hostnames
            __props__.__dict__["uid_traffic_rules_enabled"] = uid_traffic_rules_enabled
            __props__.__dict__["uid_vpn_custom_routing"] = uid_vpn_custom_routing
            __props__.__dict__["uid_vpn_default_dns_suffix"] = uid_vpn_default_dns_suffix
            __props__.__dict__["uid_vpn_masquerade_enabled"] = uid_vpn_masquerade_enabled
            __props__.__dict__["uid_vpn_max_connection_time_seconds"] = uid_vpn_max_connection_time_seconds
            __props__.__dict__["uid_vpn_sync_public_ip"] = uid_vpn_sync_public_ip
            __props__.__dict__["uid_vpn_type"] = uid_vpn_type
            __props__.__dict__["uid_workspace_url"] = uid_workspace_url
            __props__.__dict__["upnp_lan_enabled"] = upnp_lan_enabled
            __props__.__dict__["usergroup_id"] = usergroup_id
            __props__.__dict__["vlan"] = vlan
            __props__.__dict__["vlan_enabled"] = vlan_enabled
            __props__.__dict__["vpn_client_configuration_remote_ip_override"] = vpn_client_configuration_remote_ip_override
            __props__.__dict__["vpn_client_configuration_remote_ip_override_enabled"] = vpn_client_configuration_remote_ip_override_enabled
            __props__.__dict__["vpn_client_default_route"] = vpn_client_default_route
            __props__.__dict__["vpn_client_pull_dns"] = vpn_client_pull_dns
            __props__.__dict__["vpn_protocol"] = vpn_protocol
            __props__.__dict__["vpn_type"] = vpn_type
            __props__.__dict__["vrrp_ip_subnet_gw1"] = vrrp_ip_subnet_gw1
            __props__.__dict__["vrrp_ip_subnet_gw2"] = vrrp_ip_subnet_gw2
            __props__.__dict__["vrrp_vrid"] = vrrp_vrid
            __props__.__dict__["wan_dhcp_cos"] = wan_dhcp_cos
            __props__.__dict__["wan_dhcp_options"] = wan_dhcp_options
            __props__.__dict__["wan_dhcpv6_pd_size"] = wan_dhcpv6_pd_size
            __props__.__dict__["wan_dns1"] = wan_dns1
            __props__.__dict__["wan_dns2"] = wan_dns2
            __props__.__dict__["wan_dns3"] = wan_dns3
            __props__.__dict__["wan_dns4"] = wan_dns4
            __props__.__dict__["wan_dns_preference"] = wan_dns_preference
            __props__.__dict__["wan_dslite_remote_host"] = wan_dslite_remote_host
            __props__.__dict__["wan_egress_qos"] = wan_egress_qos
            __props__.__dict__["wan_failover_priority"] = wan_failover_priority
            __props__.__dict__["wan_gateway"] = wan_gateway
            __props__.__dict__["wan_gateway_v6"] = wan_gateway_v6
            __props__.__dict__["wan_ip"] = wan_ip
            __props__.__dict__["wan_ip_aliases"] = wan_ip_aliases
            __props__.__dict__["wan_ipv6"] = wan_ipv6
            __props__.__dict__["wan_ipv6_dns1"] = wan_ipv6_dns1
            __props__.__dict__["wan_ipv6_dns2"] = wan_ipv6_dns2
            __props__.__dict__["wan_ipv6_dns_preference"] = wan_ipv6_dns_preference
            __props__.__dict__["wan_load_balance_type"] = wan_load_balance_type
            __props__.__dict__["wan_load_balance_weight"] = wan_load_balance_weight
            __props__.__dict__["wan_netmask"] = wan_netmask
            __props__.__dict__["wan_networkgroup"] = wan_networkgroup
            __props__.__dict__["wan_pppoe_password_enabled"] = wan_pppoe_password_enabled
            __props__.__dict__["wan_pppoe_username_enabled"] = wan_pppoe_username_enabled
            __props__.__dict__["wan_prefixlen"] = wan_prefixlen
            __props__.__dict__["wan_provider_capabilities"] = wan_provider_capabilities
            __props__.__dict__["wan_smartq_down_rate"] = wan_smartq_down_rate
            __props__.__dict__["wan_smartq_enabled"] = wan_smartq_enabled
            __props__.__dict__["wan_smartq_up_rate"] = wan_smartq_up_rate
            __props__.__dict__["wan_type"] = wan_type
            __props__.__dict__["wan_type_v6"] = wan_type_v6
            __props__.__dict__["wan_username"] = wan_username
            __props__.__dict__["wan_vlan"] = wan_vlan
            __props__.__dict__["wan_vlan_enabled"] = wan_vlan_enabled
            __props__.__dict__["wireguard_client_configuration_file"] = wireguard_client_configuration_file
            __props__.__dict__["wireguard_client_configuration_filename"] = wireguard_client_configuration_filename
            __props__.__dict__["wireguard_client_mode"] = wireguard_client_mode
            __props__.__dict__["wireguard_client_peer_ip"] = wireguard_client_peer_ip
            __props__.__dict__["wireguard_client_peer_port"] = wireguard_client_peer_port
            __props__.__dict__["wireguard_client_peer_public_key"] = wireguard_client_peer_public_key
            __props__.__dict__["wireguard_client_preshared_key"] = wireguard_client_preshared_key
            __props__.__dict__["wireguard_client_preshared_key_enabled"] = wireguard_client_preshared_key_enabled
            __props__.__dict__["wireguard_interface"] = wireguard_interface
            __props__.__dict__["wireguard_local_wan_ip"] = wireguard_local_wan_ip
            __props__.__dict__["wireguard_public_key"] = wireguard_public_key
            __props__.__dict__["x_auth_key"] = x_auth_key
            __props__.__dict__["x_ca_crt"] = x_ca_crt
            __props__.__dict__["x_ca_key"] = x_ca_key
            __props__.__dict__["x_dh_key"] = x_dh_key
            __props__.__dict__["x_ipsec_pre_shared_key"] = x_ipsec_pre_shared_key
            __props__.__dict__["x_openvpn_password"] = x_openvpn_password
            __props__.__dict__["x_openvpn_shared_secret_key"] = x_openvpn_shared_secret_key
            __props__.__dict__["x_pptpc_password"] = x_pptpc_password
            __props__.__dict__["x_server_crt"] = x_server_crt
            __props__.__dict__["x_server_key"] = x_server_key
            __props__.__dict__["x_shared_client_crt"] = x_shared_client_crt
            __props__.__dict__["x_shared_client_key"] = x_shared_client_key
            __props__.__dict__["x_wan_password"] = x_wan_password
            __props__.__dict__["x_wireguard_private_key"] = x_wireguard_private_key
        super(Network, __self__).__init__(
            'unifi-native:networkconf:Network',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Network':
        """
        Get an existing Network resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = NetworkArgs.__new__(NetworkArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["auto_scale_enabled"] = None
        __props__.__dict__["dhcp_relay_enabled"] = None
        __props__.__dict__["dhcpd_boot_enabled"] = None
        __props__.__dict__["dhcpd_boot_filename"] = None
        __props__.__dict__["dhcpd_boot_server"] = None
        __props__.__dict__["dhcpd_conflict_checking"] = None
        __props__.__dict__["dhcpd_dns1"] = None
        __props__.__dict__["dhcpd_dns2"] = None
        __props__.__dict__["dhcpd_dns3"] = None
        __props__.__dict__["dhcpd_dns4"] = None
        __props__.__dict__["dhcpd_dns_enabled"] = None
        __props__.__dict__["dhcpd_enabled"] = None
        __props__.__dict__["dhcpd_gateway"] = None
        __props__.__dict__["dhcpd_gateway_enabled"] = None
        __props__.__dict__["dhcpd_ip1"] = None
        __props__.__dict__["dhcpd_ip2"] = None
        __props__.__dict__["dhcpd_ip3"] = None
        __props__.__dict__["dhcpd_leasetime"] = None
        __props__.__dict__["dhcpd_mac1"] = None
        __props__.__dict__["dhcpd_mac2"] = None
        __props__.__dict__["dhcpd_mac3"] = None
        __props__.__dict__["dhcpd_ntp1"] = None
        __props__.__dict__["dhcpd_ntp2"] = None
        __props__.__dict__["dhcpd_ntp_enabled"] = None
        __props__.__dict__["dhcpd_start"] = None
        __props__.__dict__["dhcpd_stop"] = None
        __props__.__dict__["dhcpd_tftp_server"] = None
        __props__.__dict__["dhcpd_time_offset"] = None
        __props__.__dict__["dhcpd_time_offset_enabled"] = None
        __props__.__dict__["dhcpd_unifi_controller"] = None
        __props__.__dict__["dhcpd_wins1"] = None
        __props__.__dict__["dhcpd_wins2"] = None
        __props__.__dict__["dhcpd_wins_enabled"] = None
        __props__.__dict__["dhcpd_wpad_url"] = None
        __props__.__dict__["dhcpdv6_allow_slaac"] = None
        __props__.__dict__["dhcpdv6_dns1"] = None
        __props__.__dict__["dhcpdv6_dns2"] = None
        __props__.__dict__["dhcpdv6_dns3"] = None
        __props__.__dict__["dhcpdv6_dns4"] = None
        __props__.__dict__["dhcpdv6_dns_auto"] = None
        __props__.__dict__["dhcpdv6_enabled"] = None
        __props__.__dict__["dhcpdv6_leasetime"] = None
        __props__.__dict__["dhcpdv6_start"] = None
        __props__.__dict__["dhcpdv6_stop"] = None
        __props__.__dict__["dhcpguard_enabled"] = None
        __props__.__dict__["domain_name"] = None
        __props__.__dict__["dpi_enabled"] = None
        __props__.__dict__["dpigroup_id"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["exposed_to_site_vpn"] = None
        __props__.__dict__["firewall_zone_id"] = None
        __props__.__dict__["gateway_device"] = None
        __props__.__dict__["gateway_type"] = None
        __props__.__dict__["igmp_fastleave"] = None
        __props__.__dict__["igmp_flood_unknown_multicast"] = None
        __props__.__dict__["igmp_groupmembership"] = None
        __props__.__dict__["igmp_maxresponse"] = None
        __props__.__dict__["igmp_mcrtrexpiretime"] = None
        __props__.__dict__["igmp_proxy_downstream_networkconf_ids"] = None
        __props__.__dict__["igmp_proxy_for"] = None
        __props__.__dict__["igmp_proxy_upstream"] = None
        __props__.__dict__["igmp_querier_switches"] = None
        __props__.__dict__["igmp_snooping"] = None
        __props__.__dict__["igmp_supression"] = None
        __props__.__dict__["interface_mtu"] = None
        __props__.__dict__["interface_mtu_enabled"] = None
        __props__.__dict__["internet_access_enabled"] = None
        __props__.__dict__["ip_subnet"] = None
        __props__.__dict__["ipsec_dh_group"] = None
        __props__.__dict__["ipsec_dynamic_routing"] = None
        __props__.__dict__["ipsec_encryption"] = None
        __props__.__dict__["ipsec_esp_dh_group"] = None
        __props__.__dict__["ipsec_esp_encryption"] = None
        __props__.__dict__["ipsec_esp_hash"] = None
        __props__.__dict__["ipsec_esp_lifetime"] = None
        __props__.__dict__["ipsec_hash"] = None
        __props__.__dict__["ipsec_ike_dh_group"] = None
        __props__.__dict__["ipsec_ike_encryption"] = None
        __props__.__dict__["ipsec_ike_hash"] = None
        __props__.__dict__["ipsec_ike_lifetime"] = None
        __props__.__dict__["ipsec_interface"] = None
        __props__.__dict__["ipsec_key_exchange"] = None
        __props__.__dict__["ipsec_local_identifier"] = None
        __props__.__dict__["ipsec_local_identifier_enabled"] = None
        __props__.__dict__["ipsec_local_ip"] = None
        __props__.__dict__["ipsec_peer_ip"] = None
        __props__.__dict__["ipsec_pfs"] = None
        __props__.__dict__["ipsec_profile"] = None
        __props__.__dict__["ipsec_remote_identifier"] = None
        __props__.__dict__["ipsec_remote_identifier_enabled"] = None
        __props__.__dict__["ipsec_separate_ikev2_networks"] = None
        __props__.__dict__["ipsec_tunnel_ip"] = None
        __props__.__dict__["ipsec_tunnel_ip_enabled"] = None
        __props__.__dict__["ipv6_client_address_assignment"] = None
        __props__.__dict__["ipv6_interface_type"] = None
        __props__.__dict__["ipv6_pd_auto_prefixid_enabled"] = None
        __props__.__dict__["ipv6_pd_interface"] = None
        __props__.__dict__["ipv6_pd_prefixid"] = None
        __props__.__dict__["ipv6_pd_start"] = None
        __props__.__dict__["ipv6_pd_stop"] = None
        __props__.__dict__["ipv6_ra_enabled"] = None
        __props__.__dict__["ipv6_ra_preferred_lifetime"] = None
        __props__.__dict__["ipv6_ra_priority"] = None
        __props__.__dict__["ipv6_ra_valid_lifetime"] = None
        __props__.__dict__["ipv6_setting_preference"] = None
        __props__.__dict__["ipv6_single_network_interface"] = None
        __props__.__dict__["ipv6_subnet"] = None
        __props__.__dict__["ipv6_wan_delegation_type"] = None
        __props__.__dict__["is_nat"] = None
        __props__.__dict__["l2tp_allow_weak_ciphers"] = None
        __props__.__dict__["l2tp_interface"] = None
        __props__.__dict__["l2tp_local_wan_ip"] = None
        __props__.__dict__["local_port"] = None
        __props__.__dict__["lte_lan_enabled"] = None
        __props__.__dict__["mac_override"] = None
        __props__.__dict__["mac_override_enabled"] = None
        __props__.__dict__["mdns_enabled"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["nat_outbound_ip_addresses"] = None
        __props__.__dict__["network_isolation_enabled"] = None
        __props__.__dict__["networkgroup"] = None
        __props__.__dict__["openvpn_configuration"] = None
        __props__.__dict__["openvpn_configuration_filename"] = None
        __props__.__dict__["openvpn_encryption_cipher"] = None
        __props__.__dict__["openvpn_interface"] = None
        __props__.__dict__["openvpn_local_address"] = None
        __props__.__dict__["openvpn_local_port"] = None
        __props__.__dict__["openvpn_local_wan_ip"] = None
        __props__.__dict__["openvpn_mode"] = None
        __props__.__dict__["openvpn_remote_address"] = None
        __props__.__dict__["openvpn_remote_host"] = None
        __props__.__dict__["openvpn_remote_port"] = None
        __props__.__dict__["openvpn_username"] = None
        __props__.__dict__["pptpc_require_mppe"] = None
        __props__.__dict__["pptpc_route_distance"] = None
        __props__.__dict__["pptpc_server_ip"] = None
        __props__.__dict__["pptpc_username"] = None
        __props__.__dict__["priority"] = None
        __props__.__dict__["purpose"] = None
        __props__.__dict__["radiusprofile_id"] = None
        __props__.__dict__["remote_site_id"] = None
        __props__.__dict__["remote_site_subnets"] = None
        __props__.__dict__["remote_vpn_dynamic_subnets_enabled"] = None
        __props__.__dict__["remote_vpn_subnets"] = None
        __props__.__dict__["report_wan_event"] = None
        __props__.__dict__["require_mschapv2"] = None
        __props__.__dict__["route_distance"] = None
        __props__.__dict__["sdwan_remote_site_id"] = None
        __props__.__dict__["setting_preference"] = None
        __props__.__dict__["single_network_lan"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["uid_policy_enabled"] = None
        __props__.__dict__["uid_policy_name"] = None
        __props__.__dict__["uid_public_gateway_port"] = None
        __props__.__dict__["uid_traffic_rules_allowed_ips_and_hostnames"] = None
        __props__.__dict__["uid_traffic_rules_enabled"] = None
        __props__.__dict__["uid_vpn_custom_routing"] = None
        __props__.__dict__["uid_vpn_default_dns_suffix"] = None
        __props__.__dict__["uid_vpn_masquerade_enabled"] = None
        __props__.__dict__["uid_vpn_max_connection_time_seconds"] = None
        __props__.__dict__["uid_vpn_sync_public_ip"] = None
        __props__.__dict__["uid_vpn_type"] = None
        __props__.__dict__["uid_workspace_url"] = None
        __props__.__dict__["upnp_lan_enabled"] = None
        __props__.__dict__["usergroup_id"] = None
        __props__.__dict__["vlan"] = None
        __props__.__dict__["vlan_enabled"] = None
        __props__.__dict__["vpn_client_configuration_remote_ip_override"] = None
        __props__.__dict__["vpn_client_configuration_remote_ip_override_enabled"] = None
        __props__.__dict__["vpn_client_default_route"] = None
        __props__.__dict__["vpn_client_pull_dns"] = None
        __props__.__dict__["vpn_protocol"] = None
        __props__.__dict__["vpn_type"] = None
        __props__.__dict__["vrrp_ip_subnet_gw1"] = None
        __props__.__dict__["vrrp_ip_subnet_gw2"] = None
        __props__.__dict__["vrrp_vrid"] = None
        __props__.__dict__["wan_dhcp_cos"] = None
        __props__.__dict__["wan_dhcp_options"] = None
        __props__.__dict__["wan_dhcpv6_pd_size"] = None
        __props__.__dict__["wan_dns1"] = None
        __props__.__dict__["wan_dns2"] = None
        __props__.__dict__["wan_dns3"] = None
        __props__.__dict__["wan_dns4"] = None
        __props__.__dict__["wan_dns_preference"] = None
        __props__.__dict__["wan_dslite_remote_host"] = None
        __props__.__dict__["wan_egress_qos"] = None
        __props__.__dict__["wan_failover_priority"] = None
        __props__.__dict__["wan_gateway"] = None
        __props__.__dict__["wan_gateway_v6"] = None
        __props__.__dict__["wan_ip"] = None
        __props__.__dict__["wan_ip_aliases"] = None
        __props__.__dict__["wan_ipv6"] = None
        __props__.__dict__["wan_ipv6_dns1"] = None
        __props__.__dict__["wan_ipv6_dns2"] = None
        __props__.__dict__["wan_ipv6_dns_preference"] = None
        __props__.__dict__["wan_load_balance_type"] = None
        __props__.__dict__["wan_load_balance_weight"] = None
        __props__.__dict__["wan_netmask"] = None
        __props__.__dict__["wan_networkgroup"] = None
        __props__.__dict__["wan_pppoe_password_enabled"] = None
        __props__.__dict__["wan_pppoe_username_enabled"] = None
        __props__.__dict__["wan_prefixlen"] = None
        __props__.__dict__["wan_provider_capabilities"] = None
        __props__.__dict__["wan_smartq_down_rate"] = None
        __props__.__dict__["wan_smartq_enabled"] = None
        __props__.__dict__["wan_smartq_up_rate"] = None
        __props__.__dict__["wan_type"] = None
        __props__.__dict__["wan_type_v6"] = None
        __props__.__dict__["wan_username"] = None
        __props__.__dict__["wan_vlan"] = None
        __props__.__dict__["wan_vlan_enabled"] = None
        __props__.__dict__["wireguard_client_configuration_file"] = None
        __props__.__dict__["wireguard_client_configuration_filename"] = None
        __props__.__dict__["wireguard_client_mode"] = None
        __props__.__dict__["wireguard_client_peer_ip"] = None
        __props__.__dict__["wireguard_client_peer_port"] = None
        __props__.__dict__["wireguard_client_peer_public_key"] = None
        __props__.__dict__["wireguard_client_preshared_key"] = None
        __props__.__dict__["wireguard_client_preshared_key_enabled"] = None
        __props__.__dict__["wireguard_interface"] = None
        __props__.__dict__["wireguard_local_wan_ip"] = None
        __props__.__dict__["wireguard_public_key"] = None
        __props__.__dict__["x_auth_key"] = None
        __props__.__dict__["x_ca_crt"] = None
        __props__.__dict__["x_ca_key"] = None
        __props__.__dict__["x_dh_key"] = None
        __props__.__dict__["x_ipsec_pre_shared_key"] = None
        __props__.__dict__["x_openvpn_password"] = None
        __props__.__dict__["x_openvpn_shared_secret_key"] = None
        __props__.__dict__["x_pptpc_password"] = None
        __props__.__dict__["x_server_crt"] = None
        __props__.__dict__["x_server_key"] = None
        __props__.__dict__["x_shared_client_crt"] = None
        __props__.__dict__["x_shared_client_key"] = None
        __props__.__dict__["x_wan_password"] = None
        __props__.__dict__["x_wireguard_private_key"] = None
        return Network(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="autoScaleEnabled")
    def auto_scale_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "auto_scale_enabled")

    @property
    @pulumi.getter(name="dhcpRelayEnabled")
    def dhcp_relay_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcp_relay_enabled")

    @property
    @pulumi.getter(name="dhcpdBootEnabled")
    def dhcpd_boot_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcpd_boot_enabled")

    @property
    @pulumi.getter(name="dhcpdBootFilename")
    def dhcpd_boot_filename(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_boot_filename")

    @property
    @pulumi.getter(name="dhcpdBootServer")
    def dhcpd_boot_server(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_boot_server")

    @property
    @pulumi.getter(name="dhcpdConflictChecking")
    def dhcpd_conflict_checking(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcpd_conflict_checking")

    @property
    @pulumi.getter(name="dhcpdDns1")
    def dhcpd_dns1(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_dns1")

    @property
    @pulumi.getter(name="dhcpdDns2")
    def dhcpd_dns2(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_dns2")

    @property
    @pulumi.getter(name="dhcpdDns3")
    def dhcpd_dns3(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_dns3")

    @property
    @pulumi.getter(name="dhcpdDns4")
    def dhcpd_dns4(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_dns4")

    @property
    @pulumi.getter(name="dhcpdDnsEnabled")
    def dhcpd_dns_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcpd_dns_enabled")

    @property
    @pulumi.getter(name="dhcpdEnabled")
    def dhcpd_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcpd_enabled")

    @property
    @pulumi.getter(name="dhcpdGateway")
    def dhcpd_gateway(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_gateway")

    @property
    @pulumi.getter(name="dhcpdGatewayEnabled")
    def dhcpd_gateway_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcpd_gateway_enabled")

    @property
    @pulumi.getter(name="dhcpdIp1")
    def dhcpd_ip1(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_ip1")

    @property
    @pulumi.getter(name="dhcpdIp2")
    def dhcpd_ip2(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_ip2")

    @property
    @pulumi.getter(name="dhcpdIp3")
    def dhcpd_ip3(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_ip3")

    @property
    @pulumi.getter(name="dhcpdLeasetime")
    def dhcpd_leasetime(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "dhcpd_leasetime")

    @property
    @pulumi.getter(name="dhcpdMac1")
    def dhcpd_mac1(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_mac1")

    @property
    @pulumi.getter(name="dhcpdMac2")
    def dhcpd_mac2(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_mac2")

    @property
    @pulumi.getter(name="dhcpdMac3")
    def dhcpd_mac3(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_mac3")

    @property
    @pulumi.getter(name="dhcpdNtp1")
    def dhcpd_ntp1(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_ntp1")

    @property
    @pulumi.getter(name="dhcpdNtp2")
    def dhcpd_ntp2(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_ntp2")

    @property
    @pulumi.getter(name="dhcpdNtpEnabled")
    def dhcpd_ntp_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcpd_ntp_enabled")

    @property
    @pulumi.getter(name="dhcpdStart")
    def dhcpd_start(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_start")

    @property
    @pulumi.getter(name="dhcpdStop")
    def dhcpd_stop(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_stop")

    @property
    @pulumi.getter(name="dhcpdTftpServer")
    def dhcpd_tftp_server(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_tftp_server")

    @property
    @pulumi.getter(name="dhcpdTimeOffset")
    def dhcpd_time_offset(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "dhcpd_time_offset")

    @property
    @pulumi.getter(name="dhcpdTimeOffsetEnabled")
    def dhcpd_time_offset_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcpd_time_offset_enabled")

    @property
    @pulumi.getter(name="dhcpdUnifiController")
    def dhcpd_unifi_controller(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_unifi_controller")

    @property
    @pulumi.getter(name="dhcpdWins1")
    def dhcpd_wins1(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_wins1")

    @property
    @pulumi.getter(name="dhcpdWins2")
    def dhcpd_wins2(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_wins2")

    @property
    @pulumi.getter(name="dhcpdWinsEnabled")
    def dhcpd_wins_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcpd_wins_enabled")

    @property
    @pulumi.getter(name="dhcpdWpadUrl")
    def dhcpd_wpad_url(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpd_wpad_url")

    @property
    @pulumi.getter(name="dhcpdv6AllowSlaac")
    def dhcpdv6_allow_slaac(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcpdv6_allow_slaac")

    @property
    @pulumi.getter(name="dhcpdv6Dns1")
    def dhcpdv6_dns1(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpdv6_dns1")

    @property
    @pulumi.getter(name="dhcpdv6Dns2")
    def dhcpdv6_dns2(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpdv6_dns2")

    @property
    @pulumi.getter(name="dhcpdv6Dns3")
    def dhcpdv6_dns3(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpdv6_dns3")

    @property
    @pulumi.getter(name="dhcpdv6Dns4")
    def dhcpdv6_dns4(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpdv6_dns4")

    @property
    @pulumi.getter(name="dhcpdv6DnsAuto")
    def dhcpdv6_dns_auto(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcpdv6_dns_auto")

    @property
    @pulumi.getter(name="dhcpdv6Enabled")
    def dhcpdv6_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcpdv6_enabled")

    @property
    @pulumi.getter(name="dhcpdv6Leasetime")
    def dhcpdv6_leasetime(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "dhcpdv6_leasetime")

    @property
    @pulumi.getter(name="dhcpdv6Start")
    def dhcpdv6_start(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpdv6_start")

    @property
    @pulumi.getter(name="dhcpdv6Stop")
    def dhcpdv6_stop(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcpdv6_stop")

    @property
    @pulumi.getter(name="dhcpguardEnabled")
    def dhcpguard_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcpguard_enabled")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="dpiEnabled")
    def dpi_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dpi_enabled")

    @property
    @pulumi.getter(name="dpigroupId")
    def dpigroup_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dpigroup_id")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exposedToSiteVpn")
    def exposed_to_site_vpn(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "exposed_to_site_vpn")

    @property
    @pulumi.getter(name="firewallZoneId")
    def firewall_zone_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "firewall_zone_id")

    @property
    @pulumi.getter(name="gatewayDevice")
    def gateway_device(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "gateway_device")

    @property
    @pulumi.getter(name="gatewayType")
    def gateway_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "gateway_type")

    @property
    @pulumi.getter(name="igmpFastleave")
    def igmp_fastleave(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "igmp_fastleave")

    @property
    @pulumi.getter(name="igmpFloodUnknownMulticast")
    def igmp_flood_unknown_multicast(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "igmp_flood_unknown_multicast")

    @property
    @pulumi.getter(name="igmpGroupmembership")
    def igmp_groupmembership(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "igmp_groupmembership")

    @property
    @pulumi.getter(name="igmpMaxresponse")
    def igmp_maxresponse(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "igmp_maxresponse")

    @property
    @pulumi.getter(name="igmpMcrtrexpiretime")
    def igmp_mcrtrexpiretime(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "igmp_mcrtrexpiretime")

    @property
    @pulumi.getter(name="igmpProxyDownstreamNetworkconfIds")
    def igmp_proxy_downstream_networkconf_ids(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "igmp_proxy_downstream_networkconf_ids")

    @property
    @pulumi.getter(name="igmpProxyFor")
    def igmp_proxy_for(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "igmp_proxy_for")

    @property
    @pulumi.getter(name="igmpProxyUpstream")
    def igmp_proxy_upstream(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "igmp_proxy_upstream")

    @property
    @pulumi.getter(name="igmpQuerierSwitches")
    def igmp_querier_switches(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkIGMPQuerierSwitches']]]:
        return pulumi.get(self, "igmp_querier_switches")

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "igmp_snooping")

    @property
    @pulumi.getter(name="igmpSupression")
    def igmp_supression(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "igmp_supression")

    @property
    @pulumi.getter(name="interfaceMtu")
    def interface_mtu(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "interface_mtu")

    @property
    @pulumi.getter(name="interfaceMtuEnabled")
    def interface_mtu_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "interface_mtu_enabled")

    @property
    @pulumi.getter(name="internetAccessEnabled")
    def internet_access_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "internet_access_enabled")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipsecDhGroup")
    def ipsec_dh_group(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "ipsec_dh_group")

    @property
    @pulumi.getter(name="ipsecDynamicRouting")
    def ipsec_dynamic_routing(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "ipsec_dynamic_routing")

    @property
    @pulumi.getter(name="ipsecEncryption")
    def ipsec_encryption(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec_encryption")

    @property
    @pulumi.getter(name="ipsecEspDhGroup")
    def ipsec_esp_dh_group(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "ipsec_esp_dh_group")

    @property
    @pulumi.getter(name="ipsecEspEncryption")
    def ipsec_esp_encryption(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec_esp_encryption")

    @property
    @pulumi.getter(name="ipsecEspHash")
    def ipsec_esp_hash(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec_esp_hash")

    @property
    @pulumi.getter(name="ipsecEspLifetime")
    def ipsec_esp_lifetime(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec_esp_lifetime")

    @property
    @pulumi.getter(name="ipsecHash")
    def ipsec_hash(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec_hash")

    @property
    @pulumi.getter(name="ipsecIkeDhGroup")
    def ipsec_ike_dh_group(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "ipsec_ike_dh_group")

    @property
    @pulumi.getter(name="ipsecIkeEncryption")
    def ipsec_ike_encryption(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec_ike_encryption")

    @property
    @pulumi.getter(name="ipsecIkeHash")
    def ipsec_ike_hash(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec_ike_hash")

    @property
    @pulumi.getter(name="ipsecIkeLifetime")
    def ipsec_ike_lifetime(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec_ike_lifetime")

    @property
    @pulumi.getter(name="ipsecInterface")
    def ipsec_interface(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec_interface")

    @property
    @pulumi.getter(name="ipsecKeyExchange")
    def ipsec_key_exchange(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec_key_exchange")

    @property
    @pulumi.getter(name="ipsecLocalIdentifier")
    def ipsec_local_identifier(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec_local_identifier")

    @property
    @pulumi.getter(name="ipsecLocalIdentifierEnabled")
    def ipsec_local_identifier_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "ipsec_local_identifier_enabled")

    @property
    @pulumi.getter(name="ipsecLocalIp")
    def ipsec_local_ip(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec_local_ip")

    @property
    @pulumi.getter(name="ipsecPeerIp")
    def ipsec_peer_ip(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec_peer_ip")

    @property
    @pulumi.getter(name="ipsecPfs")
    def ipsec_pfs(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "ipsec_pfs")

    @property
    @pulumi.getter(name="ipsecProfile")
    def ipsec_profile(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec_profile")

    @property
    @pulumi.getter(name="ipsecRemoteIdentifier")
    def ipsec_remote_identifier(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec_remote_identifier")

    @property
    @pulumi.getter(name="ipsecRemoteIdentifierEnabled")
    def ipsec_remote_identifier_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "ipsec_remote_identifier_enabled")

    @property
    @pulumi.getter(name="ipsecSeparateIkev2Networks")
    def ipsec_separate_ikev2_networks(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "ipsec_separate_ikev2_networks")

    @property
    @pulumi.getter(name="ipsecTunnelIp")
    def ipsec_tunnel_ip(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec_tunnel_ip")

    @property
    @pulumi.getter(name="ipsecTunnelIpEnabled")
    def ipsec_tunnel_ip_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "ipsec_tunnel_ip_enabled")

    @property
    @pulumi.getter(name="ipv6ClientAddressAssignment")
    def ipv6_client_address_assignment(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipv6_client_address_assignment")

    @property
    @pulumi.getter(name="ipv6InterfaceType")
    def ipv6_interface_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipv6_interface_type")

    @property
    @pulumi.getter(name="ipv6PdAutoPrefixidEnabled")
    def ipv6_pd_auto_prefixid_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "ipv6_pd_auto_prefixid_enabled")

    @property
    @pulumi.getter(name="ipv6PdInterface")
    def ipv6_pd_interface(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipv6_pd_interface")

    @property
    @pulumi.getter(name="ipv6PdPrefixid")
    def ipv6_pd_prefixid(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipv6_pd_prefixid")

    @property
    @pulumi.getter(name="ipv6PdStart")
    def ipv6_pd_start(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipv6_pd_start")

    @property
    @pulumi.getter(name="ipv6PdStop")
    def ipv6_pd_stop(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipv6_pd_stop")

    @property
    @pulumi.getter(name="ipv6RaEnabled")
    def ipv6_ra_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "ipv6_ra_enabled")

    @property
    @pulumi.getter(name="ipv6RaPreferredLifetime")
    def ipv6_ra_preferred_lifetime(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "ipv6_ra_preferred_lifetime")

    @property
    @pulumi.getter(name="ipv6RaPriority")
    def ipv6_ra_priority(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipv6_ra_priority")

    @property
    @pulumi.getter(name="ipv6RaValidLifetime")
    def ipv6_ra_valid_lifetime(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "ipv6_ra_valid_lifetime")

    @property
    @pulumi.getter(name="ipv6SettingPreference")
    def ipv6_setting_preference(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipv6_setting_preference")

    @property
    @pulumi.getter(name="ipv6SingleNetworkInterface")
    def ipv6_single_network_interface(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipv6_single_network_interface")

    @property
    @pulumi.getter(name="ipv6Subnet")
    def ipv6_subnet(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipv6_subnet")

    @property
    @pulumi.getter(name="ipv6WanDelegationType")
    def ipv6_wan_delegation_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipv6_wan_delegation_type")

    @property
    @pulumi.getter(name="isNat")
    def is_nat(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "is_nat")

    @property
    @pulumi.getter(name="l2tpAllowWeakCiphers")
    def l2tp_allow_weak_ciphers(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "l2tp_allow_weak_ciphers")

    @property
    @pulumi.getter(name="l2tpInterface")
    def l2tp_interface(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "l2tp_interface")

    @property
    @pulumi.getter(name="l2tpLocalWanIp")
    def l2tp_local_wan_ip(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "l2tp_local_wan_ip")

    @property
    @pulumi.getter(name="localPort")
    def local_port(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "local_port")

    @property
    @pulumi.getter(name="lteLanEnabled")
    def lte_lan_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "lte_lan_enabled")

    @property
    @pulumi.getter(name="macOverride")
    def mac_override(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "mac_override")

    @property
    @pulumi.getter(name="macOverrideEnabled")
    def mac_override_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "mac_override_enabled")

    @property
    @pulumi.getter(name="mdnsEnabled")
    def mdns_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "mdns_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="natOutboundIpAddresses")
    def nat_outbound_ip_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkNATOutboundIPAddresses']]]:
        return pulumi.get(self, "nat_outbound_ip_addresses")

    @property
    @pulumi.getter(name="networkIsolationEnabled")
    def network_isolation_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "network_isolation_enabled")

    @property
    @pulumi.getter
    def networkgroup(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "networkgroup")

    @property
    @pulumi.getter(name="openvpnConfiguration")
    def openvpn_configuration(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "openvpn_configuration")

    @property
    @pulumi.getter(name="openvpnConfigurationFilename")
    def openvpn_configuration_filename(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "openvpn_configuration_filename")

    @property
    @pulumi.getter(name="openvpnEncryptionCipher")
    def openvpn_encryption_cipher(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "openvpn_encryption_cipher")

    @property
    @pulumi.getter(name="openvpnInterface")
    def openvpn_interface(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "openvpn_interface")

    @property
    @pulumi.getter(name="openvpnLocalAddress")
    def openvpn_local_address(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "openvpn_local_address")

    @property
    @pulumi.getter(name="openvpnLocalPort")
    def openvpn_local_port(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "openvpn_local_port")

    @property
    @pulumi.getter(name="openvpnLocalWanIp")
    def openvpn_local_wan_ip(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "openvpn_local_wan_ip")

    @property
    @pulumi.getter(name="openvpnMode")
    def openvpn_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "openvpn_mode")

    @property
    @pulumi.getter(name="openvpnRemoteAddress")
    def openvpn_remote_address(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "openvpn_remote_address")

    @property
    @pulumi.getter(name="openvpnRemoteHost")
    def openvpn_remote_host(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "openvpn_remote_host")

    @property
    @pulumi.getter(name="openvpnRemotePort")
    def openvpn_remote_port(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "openvpn_remote_port")

    @property
    @pulumi.getter(name="openvpnUsername")
    def openvpn_username(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "openvpn_username")

    @property
    @pulumi.getter(name="pptpcRequireMppe")
    def pptpc_require_mppe(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "pptpc_require_mppe")

    @property
    @pulumi.getter(name="pptpcRouteDistance")
    def pptpc_route_distance(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "pptpc_route_distance")

    @property
    @pulumi.getter(name="pptpcServerIp")
    def pptpc_server_ip(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "pptpc_server_ip")

    @property
    @pulumi.getter(name="pptpcUsername")
    def pptpc_username(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "pptpc_username")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def purpose(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "purpose")

    @property
    @pulumi.getter(name="radiusprofileId")
    def radiusprofile_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "radiusprofile_id")

    @property
    @pulumi.getter(name="remoteSiteId")
    def remote_site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "remote_site_id")

    @property
    @pulumi.getter(name="remoteSiteSubnets")
    def remote_site_subnets(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "remote_site_subnets")

    @property
    @pulumi.getter(name="remoteVpnDynamicSubnetsEnabled")
    def remote_vpn_dynamic_subnets_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "remote_vpn_dynamic_subnets_enabled")

    @property
    @pulumi.getter(name="remoteVpnSubnets")
    def remote_vpn_subnets(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "remote_vpn_subnets")

    @property
    @pulumi.getter(name="reportWanEvent")
    def report_wan_event(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "report_wan_event")

    @property
    @pulumi.getter(name="requireMschapv2")
    def require_mschapv2(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "require_mschapv2")

    @property
    @pulumi.getter(name="routeDistance")
    def route_distance(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "route_distance")

    @property
    @pulumi.getter(name="sdwanRemoteSiteId")
    def sdwan_remote_site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "sdwan_remote_site_id")

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "setting_preference")

    @property
    @pulumi.getter(name="singleNetworkLan")
    def single_network_lan(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "single_network_lan")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="uidPolicyEnabled")
    def uid_policy_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "uid_policy_enabled")

    @property
    @pulumi.getter(name="uidPolicyName")
    def uid_policy_name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "uid_policy_name")

    @property
    @pulumi.getter(name="uidPublicGatewayPort")
    def uid_public_gateway_port(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "uid_public_gateway_port")

    @property
    @pulumi.getter(name="uidTrafficRulesAllowedIpsAndHostnames")
    def uid_traffic_rules_allowed_ips_and_hostnames(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "uid_traffic_rules_allowed_ips_and_hostnames")

    @property
    @pulumi.getter(name="uidTrafficRulesEnabled")
    def uid_traffic_rules_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "uid_traffic_rules_enabled")

    @property
    @pulumi.getter(name="uidVpnCustomRouting")
    def uid_vpn_custom_routing(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "uid_vpn_custom_routing")

    @property
    @pulumi.getter(name="uidVpnDefaultDnsSuffix")
    def uid_vpn_default_dns_suffix(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "uid_vpn_default_dns_suffix")

    @property
    @pulumi.getter(name="uidVpnMasqueradeEnabled")
    def uid_vpn_masquerade_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "uid_vpn_masquerade_enabled")

    @property
    @pulumi.getter(name="uidVpnMaxConnectionTimeSeconds")
    def uid_vpn_max_connection_time_seconds(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "uid_vpn_max_connection_time_seconds")

    @property
    @pulumi.getter(name="uidVpnSyncPublicIp")
    def uid_vpn_sync_public_ip(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "uid_vpn_sync_public_ip")

    @property
    @pulumi.getter(name="uidVpnType")
    def uid_vpn_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "uid_vpn_type")

    @property
    @pulumi.getter(name="uidWorkspaceUrl")
    def uid_workspace_url(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "uid_workspace_url")

    @property
    @pulumi.getter(name="upnpLanEnabled")
    def upnp_lan_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "upnp_lan_enabled")

    @property
    @pulumi.getter(name="usergroupId")
    def usergroup_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "usergroup_id")

    @property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="vlanEnabled")
    def vlan_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "vlan_enabled")

    @property
    @pulumi.getter(name="vpnClientConfigurationRemoteIpOverride")
    def vpn_client_configuration_remote_ip_override(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "vpn_client_configuration_remote_ip_override")

    @property
    @pulumi.getter(name="vpnClientConfigurationRemoteIpOverrideEnabled")
    def vpn_client_configuration_remote_ip_override_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "vpn_client_configuration_remote_ip_override_enabled")

    @property
    @pulumi.getter(name="vpnClientDefaultRoute")
    def vpn_client_default_route(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "vpn_client_default_route")

    @property
    @pulumi.getter(name="vpnClientPullDns")
    def vpn_client_pull_dns(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "vpn_client_pull_dns")

    @property
    @pulumi.getter(name="vpnProtocol")
    def vpn_protocol(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "vpn_protocol")

    @property
    @pulumi.getter(name="vpnType")
    def vpn_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "vpn_type")

    @property
    @pulumi.getter(name="vrrpIpSubnetGw1")
    def vrrp_ip_subnet_gw1(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "vrrp_ip_subnet_gw1")

    @property
    @pulumi.getter(name="vrrpIpSubnetGw2")
    def vrrp_ip_subnet_gw2(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "vrrp_ip_subnet_gw2")

    @property
    @pulumi.getter(name="vrrpVrid")
    def vrrp_vrid(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "vrrp_vrid")

    @property
    @pulumi.getter(name="wanDhcpCos")
    def wan_dhcp_cos(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "wan_dhcp_cos")

    @property
    @pulumi.getter(name="wanDhcpOptions")
    def wan_dhcp_options(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkWANDHCPOptions']]]:
        return pulumi.get(self, "wan_dhcp_options")

    @property
    @pulumi.getter(name="wanDhcpv6PdSize")
    def wan_dhcpv6_pd_size(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "wan_dhcpv6_pd_size")

    @property
    @pulumi.getter(name="wanDns1")
    def wan_dns1(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_dns1")

    @property
    @pulumi.getter(name="wanDns2")
    def wan_dns2(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_dns2")

    @property
    @pulumi.getter(name="wanDns3")
    def wan_dns3(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_dns3")

    @property
    @pulumi.getter(name="wanDns4")
    def wan_dns4(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_dns4")

    @property
    @pulumi.getter(name="wanDnsPreference")
    def wan_dns_preference(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_dns_preference")

    @property
    @pulumi.getter(name="wanDsliteRemoteHost")
    def wan_dslite_remote_host(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_dslite_remote_host")

    @property
    @pulumi.getter(name="wanEgressQos")
    def wan_egress_qos(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "wan_egress_qos")

    @property
    @pulumi.getter(name="wanFailoverPriority")
    def wan_failover_priority(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "wan_failover_priority")

    @property
    @pulumi.getter(name="wanGateway")
    def wan_gateway(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_gateway")

    @property
    @pulumi.getter(name="wanGatewayV6")
    def wan_gateway_v6(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_gateway_v6")

    @property
    @pulumi.getter(name="wanIp")
    def wan_ip(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_ip")

    @property
    @pulumi.getter(name="wanIpAliases")
    def wan_ip_aliases(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "wan_ip_aliases")

    @property
    @pulumi.getter(name="wanIpv6")
    def wan_ipv6(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_ipv6")

    @property
    @pulumi.getter(name="wanIpv6Dns1")
    def wan_ipv6_dns1(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_ipv6_dns1")

    @property
    @pulumi.getter(name="wanIpv6Dns2")
    def wan_ipv6_dns2(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_ipv6_dns2")

    @property
    @pulumi.getter(name="wanIpv6DnsPreference")
    def wan_ipv6_dns_preference(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_ipv6_dns_preference")

    @property
    @pulumi.getter(name="wanLoadBalanceType")
    def wan_load_balance_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_load_balance_type")

    @property
    @pulumi.getter(name="wanLoadBalanceWeight")
    def wan_load_balance_weight(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "wan_load_balance_weight")

    @property
    @pulumi.getter(name="wanNetmask")
    def wan_netmask(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_netmask")

    @property
    @pulumi.getter(name="wanNetworkgroup")
    def wan_networkgroup(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_networkgroup")

    @property
    @pulumi.getter(name="wanPppoePasswordEnabled")
    def wan_pppoe_password_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "wan_pppoe_password_enabled")

    @property
    @pulumi.getter(name="wanPppoeUsernameEnabled")
    def wan_pppoe_username_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "wan_pppoe_username_enabled")

    @property
    @pulumi.getter(name="wanPrefixlen")
    def wan_prefixlen(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "wan_prefixlen")

    @property
    @pulumi.getter(name="wanProviderCapabilities")
    def wan_provider_capabilities(self) -> pulumi.Output[Optional['outputs.NetworkWANProviderCapabilities']]:
        return pulumi.get(self, "wan_provider_capabilities")

    @property
    @pulumi.getter(name="wanSmartqDownRate")
    def wan_smartq_down_rate(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "wan_smartq_down_rate")

    @property
    @pulumi.getter(name="wanSmartqEnabled")
    def wan_smartq_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "wan_smartq_enabled")

    @property
    @pulumi.getter(name="wanSmartqUpRate")
    def wan_smartq_up_rate(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "wan_smartq_up_rate")

    @property
    @pulumi.getter(name="wanType")
    def wan_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_type")

    @property
    @pulumi.getter(name="wanTypeV6")
    def wan_type_v6(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_type_v6")

    @property
    @pulumi.getter(name="wanUsername")
    def wan_username(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_username")

    @property
    @pulumi.getter(name="wanVlan")
    def wan_vlan(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "wan_vlan")

    @property
    @pulumi.getter(name="wanVlanEnabled")
    def wan_vlan_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "wan_vlan_enabled")

    @property
    @pulumi.getter(name="wireguardClientConfigurationFile")
    def wireguard_client_configuration_file(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wireguard_client_configuration_file")

    @property
    @pulumi.getter(name="wireguardClientConfigurationFilename")
    def wireguard_client_configuration_filename(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wireguard_client_configuration_filename")

    @property
    @pulumi.getter(name="wireguardClientMode")
    def wireguard_client_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wireguard_client_mode")

    @property
    @pulumi.getter(name="wireguardClientPeerIp")
    def wireguard_client_peer_ip(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wireguard_client_peer_ip")

    @property
    @pulumi.getter(name="wireguardClientPeerPort")
    def wireguard_client_peer_port(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "wireguard_client_peer_port")

    @property
    @pulumi.getter(name="wireguardClientPeerPublicKey")
    def wireguard_client_peer_public_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wireguard_client_peer_public_key")

    @property
    @pulumi.getter(name="wireguardClientPresharedKey")
    def wireguard_client_preshared_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wireguard_client_preshared_key")

    @property
    @pulumi.getter(name="wireguardClientPresharedKeyEnabled")
    def wireguard_client_preshared_key_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "wireguard_client_preshared_key_enabled")

    @property
    @pulumi.getter(name="wireguardInterface")
    def wireguard_interface(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wireguard_interface")

    @property
    @pulumi.getter(name="wireguardLocalWanIp")
    def wireguard_local_wan_ip(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wireguard_local_wan_ip")

    @property
    @pulumi.getter(name="wireguardPublicKey")
    def wireguard_public_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wireguard_public_key")

    @property
    @pulumi.getter(name="xAuthKey")
    def x_auth_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_auth_key")

    @property
    @pulumi.getter(name="xCaCrt")
    def x_ca_crt(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_ca_crt")

    @property
    @pulumi.getter(name="xCaKey")
    def x_ca_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_ca_key")

    @property
    @pulumi.getter(name="xDhKey")
    def x_dh_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_dh_key")

    @property
    @pulumi.getter(name="xIpsecPreSharedKey")
    def x_ipsec_pre_shared_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_ipsec_pre_shared_key")

    @property
    @pulumi.getter(name="xOpenvpnPassword")
    def x_openvpn_password(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_openvpn_password")

    @property
    @pulumi.getter(name="xOpenvpnSharedSecretKey")
    def x_openvpn_shared_secret_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_openvpn_shared_secret_key")

    @property
    @pulumi.getter(name="xPptpcPassword")
    def x_pptpc_password(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_pptpc_password")

    @property
    @pulumi.getter(name="xServerCrt")
    def x_server_crt(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_server_crt")

    @property
    @pulumi.getter(name="xServerKey")
    def x_server_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_server_key")

    @property
    @pulumi.getter(name="xSharedClientCrt")
    def x_shared_client_crt(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_shared_client_crt")

    @property
    @pulumi.getter(name="xSharedClientKey")
    def x_shared_client_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_shared_client_key")

    @property
    @pulumi.getter(name="xWanPassword")
    def x_wan_password(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_wan_password")

    @property
    @pulumi.getter(name="xWireguardPrivateKey")
    def x_wireguard_private_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_wireguard_private_key")

