# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'GetSystemLogSettingResult',
    'AwaitableGetSystemLogSettingResult',
    'get_system_log_setting',
    'get_system_log_setting_output',
]

@pulumi.output_type
class GetSystemLogSettingResult:
    def __init__(__self__, system_log_event_settings=None, system_log_setting_preference=None):
        if system_log_event_settings and not isinstance(system_log_event_settings, dict):
            raise TypeError("Expected argument 'system_log_event_settings' to be a dict")
        pulumi.set(__self__, "system_log_event_settings", system_log_event_settings)
        if system_log_setting_preference and not isinstance(system_log_setting_preference, str):
            raise TypeError("Expected argument 'system_log_setting_preference' to be a str")
        pulumi.set(__self__, "system_log_setting_preference", system_log_setting_preference)

    @property
    @pulumi.getter(name="SystemLogEventSettings")
    def system_log_event_settings(self) -> Optional[Any]:
        return pulumi.get(self, "system_log_event_settings")

    @property
    @pulumi.getter(name="SystemLogSettingPreference")
    def system_log_setting_preference(self) -> 'SystemLogSettingsSystemLogSettingPreference':
        return pulumi.get(self, "system_log_setting_preference")


class AwaitableGetSystemLogSettingResult(GetSystemLogSettingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemLogSettingResult(
            system_log_event_settings=self.system_log_event_settings,
            system_log_setting_preference=self.system_log_setting_preference)


def get_system_log_setting(site_name: Optional[builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemLogSettingResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:setting:getSystemLogSetting', __args__, opts=opts, typ=GetSystemLogSettingResult).value

    return AwaitableGetSystemLogSettingResult(
        system_log_event_settings=pulumi.get(__ret__, 'system_log_event_settings'),
        system_log_setting_preference=pulumi.get(__ret__, 'system_log_setting_preference'))
def get_system_log_setting_output(site_name: Optional[pulumi.Input[builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSystemLogSettingResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:setting:getSystemLogSetting', __args__, opts=opts, typ=GetSystemLogSettingResult)
    return __ret__.apply(lambda __response__: GetSystemLogSettingResult(
        system_log_event_settings=pulumi.get(__response__, 'system_log_event_settings'),
        system_log_setting_preference=pulumi.get(__response__, 'system_log_setting_preference')))
