# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAllFingerprintOverridesForAiResult',
    'AwaitableGetAllFingerprintOverridesForAiResult',
    'get_all_fingerprint_overrides_for_ai',
    'get_all_fingerprint_overrides_for_ai_output',
]

@pulumi.output_type
class GetAllFingerprintOverridesForAiResult:
    def __init__(__self__, fingerprint_overrides=None, fp_ml_version=None):
        if fingerprint_overrides and not isinstance(fingerprint_overrides, list):
            raise TypeError("Expected argument 'fingerprint_overrides' to be a list")
        pulumi.set(__self__, "fingerprint_overrides", fingerprint_overrides)
        if fp_ml_version and not isinstance(fp_ml_version, int):
            raise TypeError("Expected argument 'fp_ml_version' to be a int")
        pulumi.set(__self__, "fp_ml_version", fp_ml_version)

    @property
    @pulumi.getter(name="fingerprintOverrides")
    def fingerprint_overrides(self) -> Optional[Sequence['outputs.FingerprintOverrideDto']]:
        return pulumi.get(self, "fingerprint_overrides")

    @property
    @pulumi.getter(name="fpMlVersion")
    def fp_ml_version(self) -> Optional[builtins.int]:
        return pulumi.get(self, "fp_ml_version")


class AwaitableGetAllFingerprintOverridesForAiResult(GetAllFingerprintOverridesForAiResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAllFingerprintOverridesForAiResult(
            fingerprint_overrides=self.fingerprint_overrides,
            fp_ml_version=self.fp_ml_version)


def get_all_fingerprint_overrides_for_ai(site_name: Optional[builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAllFingerprintOverridesForAiResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:fingerprint_overrides:getAllFingerprintOverridesForAi', __args__, opts=opts, typ=GetAllFingerprintOverridesForAiResult).value

    return AwaitableGetAllFingerprintOverridesForAiResult(
        fingerprint_overrides=pulumi.get(__ret__, 'fingerprint_overrides'),
        fp_ml_version=pulumi.get(__ret__, 'fp_ml_version'))
def get_all_fingerprint_overrides_for_ai_output(site_name: Optional[pulumi.Input[builtins.str]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAllFingerprintOverridesForAiResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:fingerprint_overrides:getAllFingerprintOverridesForAi', __args__, opts=opts, typ=GetAllFingerprintOverridesForAiResult)
    return __ret__.apply(lambda __response__: GetAllFingerprintOverridesForAiResult(
        fingerprint_overrides=pulumi.get(__response__, 'fingerprint_overrides'),
        fp_ml_version=pulumi.get(__response__, 'fp_ml_version')))
