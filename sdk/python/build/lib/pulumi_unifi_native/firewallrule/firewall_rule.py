# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['FirewallRuleArgs', 'FirewallRule']

@pulumi.input_type
class FirewallRuleArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 dst_address: Optional[pulumi.Input[builtins.str]] = None,
                 dst_address_ipv6: Optional[pulumi.Input[builtins.str]] = None,
                 dst_firewallgroup_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dst_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 dst_networkconf_type: Optional[pulumi.Input[builtins.str]] = None,
                 dst_port: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 icmp_typename: Optional[pulumi.Input[builtins.str]] = None,
                 icmpv6_typename: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec: Optional[pulumi.Input[builtins.str]] = None,
                 logging: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 protocol_match_excepted: Optional[pulumi.Input[builtins.bool]] = None,
                 protocol_v6: Optional[pulumi.Input[builtins.str]] = None,
                 rule_index: Optional[pulumi.Input[builtins.int]] = None,
                 ruleset: Optional[pulumi.Input[builtins.str]] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 src_address: Optional[pulumi.Input[builtins.str]] = None,
                 src_address_ipv6: Optional[pulumi.Input[builtins.str]] = None,
                 src_firewallgroup_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_mac_address: Optional[pulumi.Input[builtins.str]] = None,
                 src_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 src_networkconf_type: Optional[pulumi.Input[builtins.str]] = None,
                 src_port: Optional[pulumi.Input[builtins.str]] = None,
                 state_established: Optional[pulumi.Input[builtins.bool]] = None,
                 state_invalid: Optional[pulumi.Input[builtins.bool]] = None,
                 state_new: Optional[pulumi.Input[builtins.bool]] = None,
                 state_related: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a FirewallRule resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if dst_address is not None:
            pulumi.set(__self__, "dst_address", dst_address)
        if dst_address_ipv6 is not None:
            pulumi.set(__self__, "dst_address_ipv6", dst_address_ipv6)
        if dst_firewallgroup_ids is not None:
            pulumi.set(__self__, "dst_firewallgroup_ids", dst_firewallgroup_ids)
        if dst_networkconf_id is not None:
            pulumi.set(__self__, "dst_networkconf_id", dst_networkconf_id)
        if dst_networkconf_type is not None:
            pulumi.set(__self__, "dst_networkconf_type", dst_networkconf_type)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if icmp_typename is not None:
            pulumi.set(__self__, "icmp_typename", icmp_typename)
        if icmpv6_typename is not None:
            pulumi.set(__self__, "icmpv6_typename", icmpv6_typename)
        if ipsec is not None:
            pulumi.set(__self__, "ipsec", ipsec)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_match_excepted is not None:
            pulumi.set(__self__, "protocol_match_excepted", protocol_match_excepted)
        if protocol_v6 is not None:
            pulumi.set(__self__, "protocol_v6", protocol_v6)
        if rule_index is not None:
            pulumi.set(__self__, "rule_index", rule_index)
        if ruleset is not None:
            pulumi.set(__self__, "ruleset", ruleset)
        if setting_preference is not None:
            pulumi.set(__self__, "setting_preference", setting_preference)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if src_address is not None:
            pulumi.set(__self__, "src_address", src_address)
        if src_address_ipv6 is not None:
            pulumi.set(__self__, "src_address_ipv6", src_address_ipv6)
        if src_firewallgroup_ids is not None:
            pulumi.set(__self__, "src_firewallgroup_ids", src_firewallgroup_ids)
        if src_mac_address is not None:
            pulumi.set(__self__, "src_mac_address", src_mac_address)
        if src_networkconf_id is not None:
            pulumi.set(__self__, "src_networkconf_id", src_networkconf_id)
        if src_networkconf_type is not None:
            pulumi.set(__self__, "src_networkconf_type", src_networkconf_type)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)
        if state_established is not None:
            pulumi.set(__self__, "state_established", state_established)
        if state_invalid is not None:
            pulumi.set(__self__, "state_invalid", state_invalid)
        if state_new is not None:
            pulumi.set(__self__, "state_new", state_new)
        if state_related is not None:
            pulumi.set(__self__, "state_related", state_related)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter(name="dstAddress")
    def dst_address(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dst_address")

    @dst_address.setter
    def dst_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dst_address", value)

    @property
    @pulumi.getter(name="dstAddressIpv6")
    def dst_address_ipv6(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dst_address_ipv6")

    @dst_address_ipv6.setter
    def dst_address_ipv6(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dst_address_ipv6", value)

    @property
    @pulumi.getter(name="dstFirewallgroupIds")
    def dst_firewallgroup_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "dst_firewallgroup_ids")

    @dst_firewallgroup_ids.setter
    def dst_firewallgroup_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dst_firewallgroup_ids", value)

    @property
    @pulumi.getter(name="dstNetworkconfId")
    def dst_networkconf_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dst_networkconf_id")

    @dst_networkconf_id.setter
    def dst_networkconf_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dst_networkconf_id", value)

    @property
    @pulumi.getter(name="dstNetworkconfType")
    def dst_networkconf_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dst_networkconf_type")

    @dst_networkconf_type.setter
    def dst_networkconf_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dst_networkconf_type", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="icmpTypename")
    def icmp_typename(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "icmp_typename")

    @icmp_typename.setter
    def icmp_typename(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "icmp_typename", value)

    @property
    @pulumi.getter(name="icmpv6Typename")
    def icmpv6_typename(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "icmpv6_typename")

    @icmpv6_typename.setter
    def icmpv6_typename(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "icmpv6_typename", value)

    @property
    @pulumi.getter
    def ipsec(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ipsec")

    @ipsec.setter
    def ipsec(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipsec", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolMatchExcepted")
    def protocol_match_excepted(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "protocol_match_excepted")

    @protocol_match_excepted.setter
    def protocol_match_excepted(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "protocol_match_excepted", value)

    @property
    @pulumi.getter(name="protocolV6")
    def protocol_v6(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "protocol_v6")

    @protocol_v6.setter
    def protocol_v6(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol_v6", value)

    @property
    @pulumi.getter(name="ruleIndex")
    def rule_index(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "rule_index")

    @rule_index.setter
    def rule_index(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rule_index", value)

    @property
    @pulumi.getter
    def ruleset(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ruleset")

    @ruleset.setter
    def ruleset(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ruleset", value)

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "setting_preference")

    @setting_preference.setter
    def setting_preference(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "setting_preference", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="srcAddress")
    def src_address(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "src_address")

    @src_address.setter
    def src_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "src_address", value)

    @property
    @pulumi.getter(name="srcAddressIpv6")
    def src_address_ipv6(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "src_address_ipv6")

    @src_address_ipv6.setter
    def src_address_ipv6(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "src_address_ipv6", value)

    @property
    @pulumi.getter(name="srcFirewallgroupIds")
    def src_firewallgroup_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "src_firewallgroup_ids")

    @src_firewallgroup_ids.setter
    def src_firewallgroup_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "src_firewallgroup_ids", value)

    @property
    @pulumi.getter(name="srcMacAddress")
    def src_mac_address(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "src_mac_address")

    @src_mac_address.setter
    def src_mac_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "src_mac_address", value)

    @property
    @pulumi.getter(name="srcNetworkconfId")
    def src_networkconf_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "src_networkconf_id")

    @src_networkconf_id.setter
    def src_networkconf_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "src_networkconf_id", value)

    @property
    @pulumi.getter(name="srcNetworkconfType")
    def src_networkconf_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "src_networkconf_type")

    @src_networkconf_type.setter
    def src_networkconf_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "src_networkconf_type", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "src_port", value)

    @property
    @pulumi.getter(name="stateEstablished")
    def state_established(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "state_established")

    @state_established.setter
    def state_established(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "state_established", value)

    @property
    @pulumi.getter(name="stateInvalid")
    def state_invalid(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "state_invalid")

    @state_invalid.setter
    def state_invalid(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "state_invalid", value)

    @property
    @pulumi.getter(name="stateNew")
    def state_new(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "state_new")

    @state_new.setter
    def state_new(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "state_new", value)

    @property
    @pulumi.getter(name="stateRelated")
    def state_related(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "state_related")

    @state_related.setter
    def state_related(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "state_related", value)


@pulumi.type_token("unifi-native:firewallrule:FirewallRule")
class FirewallRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 dst_address: Optional[pulumi.Input[builtins.str]] = None,
                 dst_address_ipv6: Optional[pulumi.Input[builtins.str]] = None,
                 dst_firewallgroup_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dst_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 dst_networkconf_type: Optional[pulumi.Input[builtins.str]] = None,
                 dst_port: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 icmp_typename: Optional[pulumi.Input[builtins.str]] = None,
                 icmpv6_typename: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec: Optional[pulumi.Input[builtins.str]] = None,
                 logging: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 protocol_match_excepted: Optional[pulumi.Input[builtins.bool]] = None,
                 protocol_v6: Optional[pulumi.Input[builtins.str]] = None,
                 rule_index: Optional[pulumi.Input[builtins.int]] = None,
                 ruleset: Optional[pulumi.Input[builtins.str]] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 src_address: Optional[pulumi.Input[builtins.str]] = None,
                 src_address_ipv6: Optional[pulumi.Input[builtins.str]] = None,
                 src_firewallgroup_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_mac_address: Optional[pulumi.Input[builtins.str]] = None,
                 src_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 src_networkconf_type: Optional[pulumi.Input[builtins.str]] = None,
                 src_port: Optional[pulumi.Input[builtins.str]] = None,
                 state_established: Optional[pulumi.Input[builtins.bool]] = None,
                 state_invalid: Optional[pulumi.Input[builtins.bool]] = None,
                 state_new: Optional[pulumi.Input[builtins.bool]] = None,
                 state_related: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        Create a FirewallRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FirewallRuleArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirewallRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 dst_address: Optional[pulumi.Input[builtins.str]] = None,
                 dst_address_ipv6: Optional[pulumi.Input[builtins.str]] = None,
                 dst_firewallgroup_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dst_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 dst_networkconf_type: Optional[pulumi.Input[builtins.str]] = None,
                 dst_port: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 icmp_typename: Optional[pulumi.Input[builtins.str]] = None,
                 icmpv6_typename: Optional[pulumi.Input[builtins.str]] = None,
                 ipsec: Optional[pulumi.Input[builtins.str]] = None,
                 logging: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 protocol_match_excepted: Optional[pulumi.Input[builtins.bool]] = None,
                 protocol_v6: Optional[pulumi.Input[builtins.str]] = None,
                 rule_index: Optional[pulumi.Input[builtins.int]] = None,
                 ruleset: Optional[pulumi.Input[builtins.str]] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 src_address: Optional[pulumi.Input[builtins.str]] = None,
                 src_address_ipv6: Optional[pulumi.Input[builtins.str]] = None,
                 src_firewallgroup_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_mac_address: Optional[pulumi.Input[builtins.str]] = None,
                 src_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 src_networkconf_type: Optional[pulumi.Input[builtins.str]] = None,
                 src_port: Optional[pulumi.Input[builtins.str]] = None,
                 state_established: Optional[pulumi.Input[builtins.bool]] = None,
                 state_invalid: Optional[pulumi.Input[builtins.bool]] = None,
                 state_new: Optional[pulumi.Input[builtins.bool]] = None,
                 state_related: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallRuleArgs.__new__(FirewallRuleArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["action"] = action
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["dst_address"] = dst_address
            __props__.__dict__["dst_address_ipv6"] = dst_address_ipv6
            __props__.__dict__["dst_firewallgroup_ids"] = dst_firewallgroup_ids
            __props__.__dict__["dst_networkconf_id"] = dst_networkconf_id
            __props__.__dict__["dst_networkconf_type"] = dst_networkconf_type
            __props__.__dict__["dst_port"] = dst_port
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["icmp_typename"] = icmp_typename
            __props__.__dict__["icmpv6_typename"] = icmpv6_typename
            __props__.__dict__["ipsec"] = ipsec
            __props__.__dict__["logging"] = logging
            __props__.__dict__["name"] = name
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["protocol_match_excepted"] = protocol_match_excepted
            __props__.__dict__["protocol_v6"] = protocol_v6
            __props__.__dict__["rule_index"] = rule_index
            __props__.__dict__["ruleset"] = ruleset
            __props__.__dict__["setting_preference"] = setting_preference
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["src_address"] = src_address
            __props__.__dict__["src_address_ipv6"] = src_address_ipv6
            __props__.__dict__["src_firewallgroup_ids"] = src_firewallgroup_ids
            __props__.__dict__["src_mac_address"] = src_mac_address
            __props__.__dict__["src_networkconf_id"] = src_networkconf_id
            __props__.__dict__["src_networkconf_type"] = src_networkconf_type
            __props__.__dict__["src_port"] = src_port
            __props__.__dict__["state_established"] = state_established
            __props__.__dict__["state_invalid"] = state_invalid
            __props__.__dict__["state_new"] = state_new
            __props__.__dict__["state_related"] = state_related
        super(FirewallRule, __self__).__init__(
            'unifi-native:firewallrule:FirewallRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'FirewallRule':
        """
        Get an existing FirewallRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = FirewallRuleArgs.__new__(FirewallRuleArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["action"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["dst_address"] = None
        __props__.__dict__["dst_address_ipv6"] = None
        __props__.__dict__["dst_firewallgroup_ids"] = None
        __props__.__dict__["dst_networkconf_id"] = None
        __props__.__dict__["dst_networkconf_type"] = None
        __props__.__dict__["dst_port"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["icmp_typename"] = None
        __props__.__dict__["icmpv6_typename"] = None
        __props__.__dict__["ipsec"] = None
        __props__.__dict__["logging"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["protocol"] = None
        __props__.__dict__["protocol_match_excepted"] = None
        __props__.__dict__["protocol_v6"] = None
        __props__.__dict__["rule_index"] = None
        __props__.__dict__["ruleset"] = None
        __props__.__dict__["setting_preference"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["src_address"] = None
        __props__.__dict__["src_address_ipv6"] = None
        __props__.__dict__["src_firewallgroup_ids"] = None
        __props__.__dict__["src_mac_address"] = None
        __props__.__dict__["src_networkconf_id"] = None
        __props__.__dict__["src_networkconf_type"] = None
        __props__.__dict__["src_port"] = None
        __props__.__dict__["state_established"] = None
        __props__.__dict__["state_invalid"] = None
        __props__.__dict__["state_new"] = None
        __props__.__dict__["state_related"] = None
        return FirewallRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="dstAddress")
    def dst_address(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dst_address")

    @property
    @pulumi.getter(name="dstAddressIpv6")
    def dst_address_ipv6(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dst_address_ipv6")

    @property
    @pulumi.getter(name="dstFirewallgroupIds")
    def dst_firewallgroup_ids(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "dst_firewallgroup_ids")

    @property
    @pulumi.getter(name="dstNetworkconfId")
    def dst_networkconf_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dst_networkconf_id")

    @property
    @pulumi.getter(name="dstNetworkconfType")
    def dst_networkconf_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dst_networkconf_type")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="icmpTypename")
    def icmp_typename(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "icmp_typename")

    @property
    @pulumi.getter(name="icmpv6Typename")
    def icmpv6_typename(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "icmpv6_typename")

    @property
    @pulumi.getter
    def ipsec(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ipsec")

    @property
    @pulumi.getter
    def logging(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="protocolMatchExcepted")
    def protocol_match_excepted(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "protocol_match_excepted")

    @property
    @pulumi.getter(name="protocolV6")
    def protocol_v6(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "protocol_v6")

    @property
    @pulumi.getter(name="ruleIndex")
    def rule_index(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "rule_index")

    @property
    @pulumi.getter
    def ruleset(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ruleset")

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "setting_preference")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="srcAddress")
    def src_address(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "src_address")

    @property
    @pulumi.getter(name="srcAddressIpv6")
    def src_address_ipv6(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "src_address_ipv6")

    @property
    @pulumi.getter(name="srcFirewallgroupIds")
    def src_firewallgroup_ids(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "src_firewallgroup_ids")

    @property
    @pulumi.getter(name="srcMacAddress")
    def src_mac_address(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "src_mac_address")

    @property
    @pulumi.getter(name="srcNetworkconfId")
    def src_networkconf_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "src_networkconf_id")

    @property
    @pulumi.getter(name="srcNetworkconfType")
    def src_networkconf_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "src_networkconf_type")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "src_port")

    @property
    @pulumi.getter(name="stateEstablished")
    def state_established(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "state_established")

    @property
    @pulumi.getter(name="stateInvalid")
    def state_invalid(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "state_invalid")

    @property
    @pulumi.getter(name="stateNew")
    def state_new(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "state_new")

    @property
    @pulumi.getter(name="stateRelated")
    def state_related(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "state_related")

