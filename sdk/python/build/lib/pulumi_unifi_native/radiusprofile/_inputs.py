# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'RADIUSProfileAcctServersArgs',
    'RADIUSProfileAcctServersArgsDict',
    'RADIUSProfileAuthServersArgs',
    'RADIUSProfileAuthServersArgsDict',
    'RADIUSProfileXCaCrtsArgs',
    'RADIUSProfileXCaCrtsArgsDict',
]

MYPY = False

if not MYPY:
    class RADIUSProfileAcctServersArgsDict(TypedDict):
        ip: NotRequired[pulumi.Input[builtins.str]]
        port: NotRequired[pulumi.Input[builtins.int]]
        x_secret: NotRequired[pulumi.Input[builtins.str]]
elif False:
    RADIUSProfileAcctServersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RADIUSProfileAcctServersArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 x_secret: Optional[pulumi.Input[builtins.str]] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if x_secret is not None:
            pulumi.set(__self__, "x_secret", x_secret)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="xSecret")
    def x_secret(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_secret")

    @x_secret.setter
    def x_secret(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_secret", value)


if not MYPY:
    class RADIUSProfileAuthServersArgsDict(TypedDict):
        ip: NotRequired[pulumi.Input[builtins.str]]
        port: NotRequired[pulumi.Input[builtins.int]]
        x_secret: NotRequired[pulumi.Input[builtins.str]]
elif False:
    RADIUSProfileAuthServersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RADIUSProfileAuthServersArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 x_secret: Optional[pulumi.Input[builtins.str]] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if x_secret is not None:
            pulumi.set(__self__, "x_secret", x_secret)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="xSecret")
    def x_secret(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_secret")

    @x_secret.setter
    def x_secret(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_secret", value)


if not MYPY:
    class RADIUSProfileXCaCrtsArgsDict(TypedDict):
        filename: NotRequired[pulumi.Input[builtins.str]]
        x_ca_crt: NotRequired[pulumi.Input[builtins.str]]
elif False:
    RADIUSProfileXCaCrtsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RADIUSProfileXCaCrtsArgs:
    def __init__(__self__, *,
                 filename: Optional[pulumi.Input[builtins.str]] = None,
                 x_ca_crt: Optional[pulumi.Input[builtins.str]] = None):
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if x_ca_crt is not None:
            pulumi.set(__self__, "x_ca_crt", x_ca_crt)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter(name="xCaCrt")
    def x_ca_crt(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_ca_crt")

    @x_ca_crt.setter
    def x_ca_crt(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_ca_crt", value)


