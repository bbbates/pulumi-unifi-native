# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'Meta',
    'RADIUSProfile',
    'RADIUSProfileAcctServers',
    'RADIUSProfileAuthServers',
    'RADIUSProfileXCaCrts',
]

@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


@pulumi.output_type
class RADIUSProfile(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 accounting_enabled: Optional[builtins.bool] = None,
                 acct_servers: Optional[Sequence['outputs.RADIUSProfileAcctServers']] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 auth_servers: Optional[Sequence['outputs.RADIUSProfileAuthServers']] = None,
                 interim_update_enabled: Optional[builtins.bool] = None,
                 interim_update_interval: Optional[builtins.int] = None,
                 name: Optional[builtins.str] = None,
                 site_id: Optional[builtins.str] = None,
                 tls_enabled: Optional[builtins.bool] = None,
                 use_usg_acct_server: Optional[builtins.bool] = None,
                 use_usg_auth_server: Optional[builtins.bool] = None,
                 vlan_enabled: Optional[builtins.bool] = None,
                 vlan_wlan_mode: Optional[builtins.str] = None,
                 x_ca_crts: Optional[Sequence['outputs.RADIUSProfileXCaCrts']] = None,
                 x_client_crt: Optional[builtins.str] = None,
                 x_client_crt_filename: Optional[builtins.str] = None,
                 x_client_private_key: Optional[builtins.str] = None,
                 x_client_private_key_filename: Optional[builtins.str] = None,
                 x_client_private_key_password: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if accounting_enabled is not None:
            pulumi.set(__self__, "accounting_enabled", accounting_enabled)
        if acct_servers is not None:
            pulumi.set(__self__, "acct_servers", acct_servers)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if auth_servers is not None:
            pulumi.set(__self__, "auth_servers", auth_servers)
        if interim_update_enabled is not None:
            pulumi.set(__self__, "interim_update_enabled", interim_update_enabled)
        if interim_update_interval is not None:
            pulumi.set(__self__, "interim_update_interval", interim_update_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if tls_enabled is not None:
            pulumi.set(__self__, "tls_enabled", tls_enabled)
        if use_usg_acct_server is not None:
            pulumi.set(__self__, "use_usg_acct_server", use_usg_acct_server)
        if use_usg_auth_server is not None:
            pulumi.set(__self__, "use_usg_auth_server", use_usg_auth_server)
        if vlan_enabled is not None:
            pulumi.set(__self__, "vlan_enabled", vlan_enabled)
        if vlan_wlan_mode is not None:
            pulumi.set(__self__, "vlan_wlan_mode", vlan_wlan_mode)
        if x_ca_crts is not None:
            pulumi.set(__self__, "x_ca_crts", x_ca_crts)
        if x_client_crt is not None:
            pulumi.set(__self__, "x_client_crt", x_client_crt)
        if x_client_crt_filename is not None:
            pulumi.set(__self__, "x_client_crt_filename", x_client_crt_filename)
        if x_client_private_key is not None:
            pulumi.set(__self__, "x_client_private_key", x_client_private_key)
        if x_client_private_key_filename is not None:
            pulumi.set(__self__, "x_client_private_key_filename", x_client_private_key_filename)
        if x_client_private_key_password is not None:
            pulumi.set(__self__, "x_client_private_key_password", x_client_private_key_password)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="accountingEnabled")
    def accounting_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "accounting_enabled")

    @property
    @pulumi.getter(name="acctServers")
    def acct_servers(self) -> Optional[Sequence['outputs.RADIUSProfileAcctServers']]:
        return pulumi.get(self, "acct_servers")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="authServers")
    def auth_servers(self) -> Optional[Sequence['outputs.RADIUSProfileAuthServers']]:
        return pulumi.get(self, "auth_servers")

    @property
    @pulumi.getter(name="interimUpdateEnabled")
    def interim_update_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "interim_update_enabled")

    @property
    @pulumi.getter(name="interimUpdateInterval")
    def interim_update_interval(self) -> Optional[builtins.int]:
        return pulumi.get(self, "interim_update_interval")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="tlsEnabled")
    def tls_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "tls_enabled")

    @property
    @pulumi.getter(name="useUsgAcctServer")
    def use_usg_acct_server(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "use_usg_acct_server")

    @property
    @pulumi.getter(name="useUsgAuthServer")
    def use_usg_auth_server(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "use_usg_auth_server")

    @property
    @pulumi.getter(name="vlanEnabled")
    def vlan_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "vlan_enabled")

    @property
    @pulumi.getter(name="vlanWlanMode")
    def vlan_wlan_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "vlan_wlan_mode")

    @property
    @pulumi.getter(name="xCaCrts")
    def x_ca_crts(self) -> Optional[Sequence['outputs.RADIUSProfileXCaCrts']]:
        return pulumi.get(self, "x_ca_crts")

    @property
    @pulumi.getter(name="xClientCrt")
    def x_client_crt(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_client_crt")

    @property
    @pulumi.getter(name="xClientCrtFilename")
    def x_client_crt_filename(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_client_crt_filename")

    @property
    @pulumi.getter(name="xClientPrivateKey")
    def x_client_private_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_client_private_key")

    @property
    @pulumi.getter(name="xClientPrivateKeyFilename")
    def x_client_private_key_filename(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_client_private_key_filename")

    @property
    @pulumi.getter(name="xClientPrivateKeyPassword")
    def x_client_private_key_password(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_client_private_key_password")


@pulumi.output_type
class RADIUSProfileAcctServers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "xSecret":
            suggest = "x_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RADIUSProfileAcctServers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RADIUSProfileAcctServers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RADIUSProfileAcctServers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: Optional[builtins.str] = None,
                 port: Optional[builtins.int] = None,
                 x_secret: Optional[builtins.str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if x_secret is not None:
            pulumi.set(__self__, "x_secret", x_secret)

    @property
    @pulumi.getter
    def ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="xSecret")
    def x_secret(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_secret")


@pulumi.output_type
class RADIUSProfileAuthServers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "xSecret":
            suggest = "x_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RADIUSProfileAuthServers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RADIUSProfileAuthServers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RADIUSProfileAuthServers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: Optional[builtins.str] = None,
                 port: Optional[builtins.int] = None,
                 x_secret: Optional[builtins.str] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if x_secret is not None:
            pulumi.set(__self__, "x_secret", x_secret)

    @property
    @pulumi.getter
    def ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="xSecret")
    def x_secret(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_secret")


@pulumi.output_type
class RADIUSProfileXCaCrts(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "xCaCrt":
            suggest = "x_ca_crt"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RADIUSProfileXCaCrts. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RADIUSProfileXCaCrts.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RADIUSProfileXCaCrts.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filename: Optional[builtins.str] = None,
                 x_ca_crt: Optional[builtins.str] = None):
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if x_ca_crt is not None:
            pulumi.set(__self__, "x_ca_crt", x_ca_crt)

    @property
    @pulumi.getter
    def filename(self) -> Optional[builtins.str]:
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter(name="xCaCrt")
    def x_ca_crt(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_ca_crt")


