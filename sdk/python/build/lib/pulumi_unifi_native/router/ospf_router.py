# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['OspfRouterArgs', 'OspfRouter']

@pulumi.input_type
class OspfRouterArgs:
    def __init__(__self__, *,
                 router_id: pulumi.Input[builtins.str],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 announce_default_route: Optional[pulumi.Input[builtins.bool]] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input['OSPFAreaArgs']]]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['OSPFInterfaceArgs']]]] = None,
                 redistribute_connected_routes: Optional[pulumi.Input[builtins.bool]] = None,
                 redistribute_connected_routes_metric_type: Optional[pulumi.Input['RedistributeConnectedRoutesMetricType']] = None,
                 redistribute_static_routes: Optional[pulumi.Input[builtins.bool]] = None,
                 redistribute_static_routes_metric_type: Optional[pulumi.Input['RedistributeStaticRoutesMetricType']] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a OspfRouter resource.
        """
        pulumi.set(__self__, "router_id", router_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if announce_default_route is not None:
            pulumi.set(__self__, "announce_default_route", announce_default_route)
        if areas is not None:
            pulumi.set(__self__, "areas", areas)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if redistribute_connected_routes is not None:
            pulumi.set(__self__, "redistribute_connected_routes", redistribute_connected_routes)
        if redistribute_connected_routes_metric_type is not None:
            pulumi.set(__self__, "redistribute_connected_routes_metric_type", redistribute_connected_routes_metric_type)
        if redistribute_static_routes is not None:
            pulumi.set(__self__, "redistribute_static_routes", redistribute_static_routes)
        if redistribute_static_routes_metric_type is not None:
            pulumi.set(__self__, "redistribute_static_routes_metric_type", redistribute_static_routes_metric_type)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="announceDefaultRoute")
    def announce_default_route(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "announce_default_route")

    @announce_default_route.setter
    def announce_default_route(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "announce_default_route", value)

    @property
    @pulumi.getter
    def areas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OSPFAreaArgs']]]]:
        return pulumi.get(self, "areas")

    @areas.setter
    def areas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OSPFAreaArgs']]]]):
        pulumi.set(self, "areas", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OSPFInterfaceArgs']]]]:
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OSPFInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @property
    @pulumi.getter(name="redistributeConnectedRoutes")
    def redistribute_connected_routes(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "redistribute_connected_routes")

    @redistribute_connected_routes.setter
    def redistribute_connected_routes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "redistribute_connected_routes", value)

    @property
    @pulumi.getter(name="redistributeConnectedRoutesMetricType")
    def redistribute_connected_routes_metric_type(self) -> Optional[pulumi.Input['RedistributeConnectedRoutesMetricType']]:
        return pulumi.get(self, "redistribute_connected_routes_metric_type")

    @redistribute_connected_routes_metric_type.setter
    def redistribute_connected_routes_metric_type(self, value: Optional[pulumi.Input['RedistributeConnectedRoutesMetricType']]):
        pulumi.set(self, "redistribute_connected_routes_metric_type", value)

    @property
    @pulumi.getter(name="redistributeStaticRoutes")
    def redistribute_static_routes(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "redistribute_static_routes")

    @redistribute_static_routes.setter
    def redistribute_static_routes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "redistribute_static_routes", value)

    @property
    @pulumi.getter(name="redistributeStaticRoutesMetricType")
    def redistribute_static_routes_metric_type(self) -> Optional[pulumi.Input['RedistributeStaticRoutesMetricType']]:
        return pulumi.get(self, "redistribute_static_routes_metric_type")

    @redistribute_static_routes_metric_type.setter
    def redistribute_static_routes_metric_type(self, value: Optional[pulumi.Input['RedistributeStaticRoutesMetricType']]):
        pulumi.set(self, "redistribute_static_routes_metric_type", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)


@pulumi.type_token("unifi-native:router:OspfRouter")
class OspfRouter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 announce_default_route: Optional[pulumi.Input[builtins.bool]] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OSPFAreaArgs', 'OSPFAreaArgsDict']]]]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OSPFInterfaceArgs', 'OSPFInterfaceArgsDict']]]]] = None,
                 redistribute_connected_routes: Optional[pulumi.Input[builtins.bool]] = None,
                 redistribute_connected_routes_metric_type: Optional[pulumi.Input['RedistributeConnectedRoutesMetricType']] = None,
                 redistribute_static_routes: Optional[pulumi.Input[builtins.bool]] = None,
                 redistribute_static_routes_metric_type: Optional[pulumi.Input['RedistributeStaticRoutesMetricType']] = None,
                 router_id: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a OspfRouter resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OspfRouterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OspfRouter resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OspfRouterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OspfRouterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 announce_default_route: Optional[pulumi.Input[builtins.bool]] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OSPFAreaArgs', 'OSPFAreaArgsDict']]]]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OSPFInterfaceArgs', 'OSPFInterfaceArgsDict']]]]] = None,
                 redistribute_connected_routes: Optional[pulumi.Input[builtins.bool]] = None,
                 redistribute_connected_routes_metric_type: Optional[pulumi.Input['RedistributeConnectedRoutesMetricType']] = None,
                 redistribute_static_routes: Optional[pulumi.Input[builtins.bool]] = None,
                 redistribute_static_routes_metric_type: Optional[pulumi.Input['RedistributeStaticRoutesMetricType']] = None,
                 router_id: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OspfRouterArgs.__new__(OspfRouterArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["announce_default_route"] = announce_default_route
            __props__.__dict__["areas"] = areas
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["interfaces"] = interfaces
            __props__.__dict__["redistribute_connected_routes"] = redistribute_connected_routes
            __props__.__dict__["redistribute_connected_routes_metric_type"] = redistribute_connected_routes_metric_type
            __props__.__dict__["redistribute_static_routes"] = redistribute_static_routes
            __props__.__dict__["redistribute_static_routes_metric_type"] = redistribute_static_routes_metric_type
            if router_id is None and not opts.urn:
                raise TypeError("Missing required property 'router_id'")
            __props__.__dict__["router_id"] = router_id
            __props__.__dict__["site_name"] = site_name
        super(OspfRouter, __self__).__init__(
            'unifi-native:router:OspfRouter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'OspfRouter':
        """
        Get an existing OspfRouter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = OspfRouterArgs.__new__(OspfRouterArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["announce_default_route"] = None
        __props__.__dict__["areas"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["interfaces"] = None
        __props__.__dict__["redistribute_connected_routes"] = None
        __props__.__dict__["redistribute_connected_routes_metric_type"] = None
        __props__.__dict__["redistribute_static_routes"] = None
        __props__.__dict__["redistribute_static_routes_metric_type"] = None
        __props__.__dict__["router_id"] = None
        return OspfRouter(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="announceDefaultRoute")
    def announce_default_route(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "announce_default_route")

    @property
    @pulumi.getter
    def areas(self) -> pulumi.Output[Optional[Sequence['outputs.OSPFArea']]]:
        return pulumi.get(self, "areas")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.OSPFInterface']]]:
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter(name="redistributeConnectedRoutes")
    def redistribute_connected_routes(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "redistribute_connected_routes")

    @property
    @pulumi.getter(name="redistributeConnectedRoutesMetricType")
    def redistribute_connected_routes_metric_type(self) -> pulumi.Output[Optional['RedistributeConnectedRoutesMetricType']]:
        return pulumi.get(self, "redistribute_connected_routes_metric_type")

    @property
    @pulumi.getter(name="redistributeStaticRoutes")
    def redistribute_static_routes(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "redistribute_static_routes")

    @property
    @pulumi.getter(name="redistributeStaticRoutesMetricType")
    def redistribute_static_routes_metric_type(self) -> pulumi.Output[Optional['RedistributeStaticRoutesMetricType']]:
        return pulumi.get(self, "redistribute_static_routes_metric_type")

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "router_id")

