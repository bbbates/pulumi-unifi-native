# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'OSPFArea',
    'OSPFInterface',
    'OSPFMD5AuthenticationKey',
    'OSPFRouter',
]

@pulumi.output_type
class OSPFArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areaId":
            suggest = "area_id"
        elif key == "areaType":
            suggest = "area_type"
        elif key == "networkIds":
            suggest = "network_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OSPFArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OSPFArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OSPFArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area_id: builtins.str,
                 area_type: 'OSPFAreaAreaType',
                 name: builtins.str,
                 network_ids: Optional[Sequence[builtins.str]] = None):
        pulumi.set(__self__, "area_id", area_id)
        pulumi.set(__self__, "area_type", area_type)
        pulumi.set(__self__, "name", name)
        if network_ids is not None:
            pulumi.set(__self__, "network_ids", network_ids)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> builtins.str:
        return pulumi.get(self, "area_id")

    @property
    @pulumi.getter(name="areaType")
    def area_type(self) -> 'OSPFAreaAreaType':
        return pulumi.get(self, "area_type")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkIds")
    def network_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "network_ids")


@pulumi.output_type
class OSPFInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationType":
            suggest = "authentication_type"
        elif key == "networkId":
            suggest = "network_id"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "md5AuthenticationKeys":
            suggest = "md5_authentication_keys"
        elif key == "passiveInterface":
            suggest = "passive_interface"
        elif key == "plainTextAuthenticationKey":
            suggest = "plain_text_authentication_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OSPFInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OSPFInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OSPFInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_type: 'OSPFInterfaceAuthenticationType',
                 network_id: builtins.str,
                 cost: Optional[builtins.int] = None,
                 dead_interval: Optional[builtins.int] = None,
                 hello_interval: Optional[builtins.int] = None,
                 md5_authentication_keys: Optional[Sequence['outputs.OSPFMD5AuthenticationKey']] = None,
                 passive_interface: Optional[builtins.bool] = None,
                 plain_text_authentication_key: Optional[builtins.str] = None,
                 priority: Optional[builtins.int] = None):
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "network_id", network_id)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if md5_authentication_keys is not None:
            pulumi.set(__self__, "md5_authentication_keys", md5_authentication_keys)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if plain_text_authentication_key is not None:
            pulumi.set(__self__, "plain_text_authentication_key", plain_text_authentication_key)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> 'OSPFInterfaceAuthenticationType':
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> builtins.str:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def cost(self) -> Optional[builtins.int]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[builtins.int]:
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter(name="md5AuthenticationKeys")
    def md5_authentication_keys(self) -> Optional[Sequence['outputs.OSPFMD5AuthenticationKey']]:
        return pulumi.get(self, "md5_authentication_keys")

    @property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "passive_interface")

    @property
    @pulumi.getter(name="plainTextAuthenticationKey")
    def plain_text_authentication_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "plain_text_authentication_key")

    @property
    @pulumi.getter
    def priority(self) -> Optional[builtins.int]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class OSPFMD5AuthenticationKey(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 id: Optional[builtins.int] = None):
        pulumi.set(__self__, "key", key)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class OSPFRouter(dict):
    def __init__(__self__, *,
                 router_id: builtins.str,
                 id: Optional[builtins.str] = None,
                 announce_default_route: Optional[builtins.bool] = None,
                 areas: Optional[Sequence['outputs.OSPFArea']] = None,
                 enabled: Optional[builtins.bool] = None,
                 interfaces: Optional[Sequence['outputs.OSPFInterface']] = None,
                 redistribute_connected_routes: Optional[builtins.bool] = None,
                 redistribute_connected_routes_metric_type: Optional['OSPFRouterRedistributeConnectedRoutesMetricType'] = None,
                 redistribute_static_routes: Optional[builtins.bool] = None,
                 redistribute_static_routes_metric_type: Optional['OSPFRouterRedistributeStaticRoutesMetricType'] = None):
        pulumi.set(__self__, "router_id", router_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if announce_default_route is not None:
            pulumi.set(__self__, "announce_default_route", announce_default_route)
        if areas is not None:
            pulumi.set(__self__, "areas", areas)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if redistribute_connected_routes is not None:
            pulumi.set(__self__, "redistribute_connected_routes", redistribute_connected_routes)
        if redistribute_connected_routes_metric_type is not None:
            pulumi.set(__self__, "redistribute_connected_routes_metric_type", redistribute_connected_routes_metric_type)
        if redistribute_static_routes is not None:
            pulumi.set(__self__, "redistribute_static_routes", redistribute_static_routes)
        if redistribute_static_routes_metric_type is not None:
            pulumi.set(__self__, "redistribute_static_routes_metric_type", redistribute_static_routes_metric_type)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> builtins.str:
        return pulumi.get(self, "router_id")

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="announceDefaultRoute")
    def announce_default_route(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "announce_default_route")

    @property
    @pulumi.getter
    def areas(self) -> Optional[Sequence['outputs.OSPFArea']]:
        return pulumi.get(self, "areas")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.OSPFInterface']]:
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter(name="redistributeConnectedRoutes")
    def redistribute_connected_routes(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "redistribute_connected_routes")

    @property
    @pulumi.getter(name="redistributeConnectedRoutesMetricType")
    def redistribute_connected_routes_metric_type(self) -> Optional['OSPFRouterRedistributeConnectedRoutesMetricType']:
        return pulumi.get(self, "redistribute_connected_routes_metric_type")

    @property
    @pulumi.getter(name="redistributeStaticRoutes")
    def redistribute_static_routes(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "redistribute_static_routes")

    @property
    @pulumi.getter(name="redistributeStaticRoutesMetricType")
    def redistribute_static_routes_metric_type(self) -> Optional['OSPFRouterRedistributeStaticRoutesMetricType']:
        return pulumi.get(self, "redistribute_static_routes_metric_type")


