# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'WifiManFeedback',
    'WifiManFeedbackUplink',
    'WifiManSpeedTest',
]

@pulumi.output_type
class WifiManFeedback(dict):
    def __init__(__self__, *,
                 client_model_reported_by_the_mobile_app: Optional[builtins.str] = None,
                 client_icon_device_id: Optional[builtins.int] = None,
                 client_icon_engine_id: Optional[builtins.int] = None,
                 client_link_download_rate_kbps: Optional[builtins.int] = None,
                 client_link_upload_rate_kbps: Optional[builtins.int] = None,
                 client_mac: Optional[builtins.str] = None,
                 client_model: Optional[builtins.str] = None,
                 client_name: Optional[builtins.str] = None,
                 client_signal: Optional[builtins.int] = None,
                 client_wifi_experience: Optional[builtins.int] = None,
                 device_mac: Optional[builtins.str] = None,
                 device_model: Optional[builtins.str] = None,
                 device_name: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 incorrect_wifi_experience_comment: Optional[builtins.str] = None,
                 incorrect_wifi_experience_reason: Optional['WifiManFeedbackIncorrectWifiExperienceReason'] = None,
                 isp_name: Optional[builtins.str] = None,
                 public_ip: Optional[builtins.str] = None,
                 report_timestamp: Optional[builtins.int] = None,
                 speed_tests: Optional[Sequence['outputs.WifiManSpeedTest']] = None,
                 uplink_devices: Optional[Sequence['outputs.WifiManFeedbackUplink']] = None,
                 wlan_band: Optional['WifiManFeedbackWlanBand'] = None,
                 wlan_channel: Optional[builtins.int] = None,
                 wlan_channel_width: Optional[builtins.int] = None,
                 wlan_essid: Optional[builtins.str] = None):
        if client_model_reported_by_the_mobile_app is not None:
            pulumi.set(__self__, "client_model_reported_by_the_mobile_app", client_model_reported_by_the_mobile_app)
        if client_icon_device_id is not None:
            pulumi.set(__self__, "client_icon_device_id", client_icon_device_id)
        if client_icon_engine_id is not None:
            pulumi.set(__self__, "client_icon_engine_id", client_icon_engine_id)
        if client_link_download_rate_kbps is not None:
            pulumi.set(__self__, "client_link_download_rate_kbps", client_link_download_rate_kbps)
        if client_link_upload_rate_kbps is not None:
            pulumi.set(__self__, "client_link_upload_rate_kbps", client_link_upload_rate_kbps)
        if client_mac is not None:
            pulumi.set(__self__, "client_mac", client_mac)
        if client_model is not None:
            pulumi.set(__self__, "client_model", client_model)
        if client_name is not None:
            pulumi.set(__self__, "client_name", client_name)
        if client_signal is not None:
            pulumi.set(__self__, "client_signal", client_signal)
        if client_wifi_experience is not None:
            pulumi.set(__self__, "client_wifi_experience", client_wifi_experience)
        if device_mac is not None:
            pulumi.set(__self__, "device_mac", device_mac)
        if device_model is not None:
            pulumi.set(__self__, "device_model", device_model)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if incorrect_wifi_experience_comment is not None:
            pulumi.set(__self__, "incorrect_wifi_experience_comment", incorrect_wifi_experience_comment)
        if incorrect_wifi_experience_reason is not None:
            pulumi.set(__self__, "incorrect_wifi_experience_reason", incorrect_wifi_experience_reason)
        if isp_name is not None:
            pulumi.set(__self__, "isp_name", isp_name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if report_timestamp is not None:
            pulumi.set(__self__, "report_timestamp", report_timestamp)
        if speed_tests is not None:
            pulumi.set(__self__, "speed_tests", speed_tests)
        if uplink_devices is not None:
            pulumi.set(__self__, "uplink_devices", uplink_devices)
        if wlan_band is not None:
            pulumi.set(__self__, "wlan_band", wlan_band)
        if wlan_channel is not None:
            pulumi.set(__self__, "wlan_channel", wlan_channel)
        if wlan_channel_width is not None:
            pulumi.set(__self__, "wlan_channel_width", wlan_channel_width)
        if wlan_essid is not None:
            pulumi.set(__self__, "wlan_essid", wlan_essid)

    @property
    @pulumi.getter(name="ClientModelReportedByTheMobileApp")
    def client_model_reported_by_the_mobile_app(self) -> Optional[builtins.str]:
        return pulumi.get(self, "client_model_reported_by_the_mobile_app")

    @property
    @pulumi.getter(name="clientIconDeviceId")
    def client_icon_device_id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "client_icon_device_id")

    @property
    @pulumi.getter(name="clientIconEngineId")
    def client_icon_engine_id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "client_icon_engine_id")

    @property
    @pulumi.getter(name="clientLinkDownloadRateKbps")
    def client_link_download_rate_kbps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "client_link_download_rate_kbps")

    @property
    @pulumi.getter(name="clientLinkUploadRateKbps")
    def client_link_upload_rate_kbps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "client_link_upload_rate_kbps")

    @property
    @pulumi.getter(name="clientMac")
    def client_mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "client_mac")

    @property
    @pulumi.getter(name="clientModel")
    def client_model(self) -> Optional[builtins.str]:
        return pulumi.get(self, "client_model")

    @property
    @pulumi.getter(name="clientName")
    def client_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "client_name")

    @property
    @pulumi.getter(name="clientSignal")
    def client_signal(self) -> Optional[builtins.int]:
        return pulumi.get(self, "client_signal")

    @property
    @pulumi.getter(name="clientWifiExperience")
    def client_wifi_experience(self) -> Optional[builtins.int]:
        return pulumi.get(self, "client_wifi_experience")

    @property
    @pulumi.getter(name="deviceMac")
    def device_mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "device_mac")

    @property
    @pulumi.getter(name="deviceModel")
    def device_model(self) -> Optional[builtins.str]:
        return pulumi.get(self, "device_model")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="incorrectWifiExperienceComment")
    def incorrect_wifi_experience_comment(self) -> Optional[builtins.str]:
        return pulumi.get(self, "incorrect_wifi_experience_comment")

    @property
    @pulumi.getter(name="incorrectWifiExperienceReason")
    def incorrect_wifi_experience_reason(self) -> Optional['WifiManFeedbackIncorrectWifiExperienceReason']:
        return pulumi.get(self, "incorrect_wifi_experience_reason")

    @property
    @pulumi.getter(name="ispName")
    def isp_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "isp_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="reportTimestamp")
    def report_timestamp(self) -> Optional[builtins.int]:
        return pulumi.get(self, "report_timestamp")

    @property
    @pulumi.getter(name="speedTests")
    def speed_tests(self) -> Optional[Sequence['outputs.WifiManSpeedTest']]:
        return pulumi.get(self, "speed_tests")

    @property
    @pulumi.getter(name="uplinkDevices")
    def uplink_devices(self) -> Optional[Sequence['outputs.WifiManFeedbackUplink']]:
        return pulumi.get(self, "uplink_devices")

    @property
    @pulumi.getter(name="wlanBand")
    def wlan_band(self) -> Optional['WifiManFeedbackWlanBand']:
        return pulumi.get(self, "wlan_band")

    @property
    @pulumi.getter(name="wlanChannel")
    def wlan_channel(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wlan_channel")

    @property
    @pulumi.getter(name="wlanChannelWidth")
    def wlan_channel_width(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wlan_channel_width")

    @property
    @pulumi.getter(name="wlanEssid")
    def wlan_essid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wlan_essid")


@pulumi.output_type
class WifiManFeedbackUplink(dict):
    def __init__(__self__, *,
                 experience: Optional[builtins.int] = None,
                 mac: Optional[builtins.str] = None,
                 model: Optional[builtins.str] = None,
                 number_of_clients: Optional[builtins.int] = None,
                 wireless_uplink: Optional[builtins.bool] = None):
        if experience is not None:
            pulumi.set(__self__, "experience", experience)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if number_of_clients is not None:
            pulumi.set(__self__, "number_of_clients", number_of_clients)
        if wireless_uplink is not None:
            pulumi.set(__self__, "wireless_uplink", wireless_uplink)

    @property
    @pulumi.getter
    def experience(self) -> Optional[builtins.int]:
        return pulumi.get(self, "experience")

    @property
    @pulumi.getter
    def mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def model(self) -> Optional[builtins.str]:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="numberOfClients")
    def number_of_clients(self) -> Optional[builtins.int]:
        return pulumi.get(self, "number_of_clients")

    @property
    @pulumi.getter(name="wirelessUplink")
    def wireless_uplink(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "wireless_uplink")


@pulumi.output_type
class WifiManSpeedTest(dict):
    def __init__(__self__, *,
                 client_icon_device_id: Optional[builtins.int] = None,
                 client_icon_engine_id: Optional[builtins.int] = None,
                 client_model: Optional[builtins.str] = None,
                 client_name: Optional[builtins.str] = None,
                 client_wifi_experience: Optional[builtins.int] = None,
                 download_speed_bytes: Optional[builtins.int] = None,
                 endpoint: Optional[builtins.str] = None,
                 mac: Optional[builtins.str] = None,
                 reported_client_model: Optional[builtins.str] = None,
                 test_server_name: Optional[builtins.str] = None,
                 type: Optional['WifiManSpeedTestType'] = None,
                 upload_speed_bytes: Optional[builtins.int] = None):
        if client_icon_device_id is not None:
            pulumi.set(__self__, "client_icon_device_id", client_icon_device_id)
        if client_icon_engine_id is not None:
            pulumi.set(__self__, "client_icon_engine_id", client_icon_engine_id)
        if client_model is not None:
            pulumi.set(__self__, "client_model", client_model)
        if client_name is not None:
            pulumi.set(__self__, "client_name", client_name)
        if client_wifi_experience is not None:
            pulumi.set(__self__, "client_wifi_experience", client_wifi_experience)
        if download_speed_bytes is not None:
            pulumi.set(__self__, "download_speed_bytes", download_speed_bytes)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if reported_client_model is not None:
            pulumi.set(__self__, "reported_client_model", reported_client_model)
        if test_server_name is not None:
            pulumi.set(__self__, "test_server_name", test_server_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if upload_speed_bytes is not None:
            pulumi.set(__self__, "upload_speed_bytes", upload_speed_bytes)

    @property
    @pulumi.getter(name="clientIconDeviceId")
    def client_icon_device_id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "client_icon_device_id")

    @property
    @pulumi.getter(name="clientIconEngineId")
    def client_icon_engine_id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "client_icon_engine_id")

    @property
    @pulumi.getter(name="clientModel")
    def client_model(self) -> Optional[builtins.str]:
        return pulumi.get(self, "client_model")

    @property
    @pulumi.getter(name="clientName")
    def client_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "client_name")

    @property
    @pulumi.getter(name="clientWifiExperience")
    def client_wifi_experience(self) -> Optional[builtins.int]:
        return pulumi.get(self, "client_wifi_experience")

    @property
    @pulumi.getter(name="downloadSpeedBytes")
    def download_speed_bytes(self) -> Optional[builtins.int]:
        return pulumi.get(self, "download_speed_bytes")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[builtins.str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="reportedClientModel")
    def reported_client_model(self) -> Optional[builtins.str]:
        return pulumi.get(self, "reported_client_model")

    @property
    @pulumi.getter(name="testServerName")
    def test_server_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "test_server_name")

    @property
    @pulumi.getter
    def type(self) -> Optional['WifiManSpeedTestType']:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="uploadSpeedBytes")
    def upload_speed_bytes(self) -> Optional[builtins.int]:
        return pulumi.get(self, "upload_speed_bytes")


