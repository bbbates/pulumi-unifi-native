# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'Map',
    'Meta',
]

@pulumi.output_type
class Map(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 lat: Optional[builtins.str] = None,
                 lng: Optional[builtins.str] = None,
                 map_type_id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 offset_left: Optional[builtins.float] = None,
                 offset_top: Optional[builtins.float] = None,
                 opacity: Optional[builtins.float] = None,
                 selected: Optional[builtins.bool] = None,
                 site_id: Optional[builtins.str] = None,
                 tilt: Optional[builtins.int] = None,
                 type: Optional[builtins.str] = None,
                 unit: Optional[builtins.str] = None,
                 upp: Optional[builtins.float] = None,
                 zoom: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if lat is not None:
            pulumi.set(__self__, "lat", lat)
        if lng is not None:
            pulumi.set(__self__, "lng", lng)
        if map_type_id is not None:
            pulumi.set(__self__, "map_type_id", map_type_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if offset_left is not None:
            pulumi.set(__self__, "offset_left", offset_left)
        if offset_top is not None:
            pulumi.set(__self__, "offset_top", offset_top)
        if opacity is not None:
            pulumi.set(__self__, "opacity", opacity)
        if selected is not None:
            pulumi.set(__self__, "selected", selected)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if tilt is not None:
            pulumi.set(__self__, "tilt", tilt)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if upp is not None:
            pulumi.set(__self__, "upp", upp)
        if zoom is not None:
            pulumi.set(__self__, "zoom", zoom)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter
    def lat(self) -> Optional[builtins.str]:
        return pulumi.get(self, "lat")

    @property
    @pulumi.getter
    def lng(self) -> Optional[builtins.str]:
        return pulumi.get(self, "lng")

    @property
    @pulumi.getter(name="mapTypeId")
    def map_type_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "map_type_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="offsetLeft")
    def offset_left(self) -> Optional[builtins.float]:
        return pulumi.get(self, "offset_left")

    @property
    @pulumi.getter(name="offsetTop")
    def offset_top(self) -> Optional[builtins.float]:
        return pulumi.get(self, "offset_top")

    @property
    @pulumi.getter
    def opacity(self) -> Optional[builtins.float]:
        return pulumi.get(self, "opacity")

    @property
    @pulumi.getter
    def selected(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "selected")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def tilt(self) -> Optional[builtins.int]:
        return pulumi.get(self, "tilt")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[builtins.str]:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def upp(self) -> Optional[builtins.float]:
        return pulumi.get(self, "upp")

    @property
    @pulumi.getter
    def zoom(self) -> Optional[builtins.int]:
        return pulumi.get(self, "zoom")


@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


