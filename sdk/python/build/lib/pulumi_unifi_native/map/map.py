# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['MapArgs', 'Map']

@pulumi.input_type
class MapArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 lat: Optional[pulumi.Input[builtins.str]] = None,
                 lng: Optional[pulumi.Input[builtins.str]] = None,
                 map_type_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 offset_left: Optional[pulumi.Input[builtins.float]] = None,
                 offset_top: Optional[pulumi.Input[builtins.float]] = None,
                 opacity: Optional[pulumi.Input[builtins.float]] = None,
                 selected: Optional[pulumi.Input[builtins.bool]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 tilt: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 unit: Optional[pulumi.Input[builtins.str]] = None,
                 upp: Optional[pulumi.Input[builtins.float]] = None,
                 zoom: Optional[pulumi.Input[builtins.int]] = None):
        """
        The set of arguments for constructing a Map resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if lat is not None:
            pulumi.set(__self__, "lat", lat)
        if lng is not None:
            pulumi.set(__self__, "lng", lng)
        if map_type_id is not None:
            pulumi.set(__self__, "map_type_id", map_type_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if offset_left is not None:
            pulumi.set(__self__, "offset_left", offset_left)
        if offset_top is not None:
            pulumi.set(__self__, "offset_top", offset_top)
        if opacity is not None:
            pulumi.set(__self__, "opacity", opacity)
        if selected is not None:
            pulumi.set(__self__, "selected", selected)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if tilt is not None:
            pulumi.set(__self__, "tilt", tilt)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if upp is not None:
            pulumi.set(__self__, "upp", upp)
        if zoom is not None:
            pulumi.set(__self__, "zoom", zoom)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter
    def lat(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lat")

    @lat.setter
    def lat(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lat", value)

    @property
    @pulumi.getter
    def lng(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lng")

    @lng.setter
    def lng(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lng", value)

    @property
    @pulumi.getter(name="mapTypeId")
    def map_type_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "map_type_id")

    @map_type_id.setter
    def map_type_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "map_type_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="offsetLeft")
    def offset_left(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "offset_left")

    @offset_left.setter
    def offset_left(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "offset_left", value)

    @property
    @pulumi.getter(name="offsetTop")
    def offset_top(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "offset_top")

    @offset_top.setter
    def offset_top(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "offset_top", value)

    @property
    @pulumi.getter
    def opacity(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "opacity")

    @opacity.setter
    def opacity(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "opacity", value)

    @property
    @pulumi.getter
    def selected(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "selected")

    @selected.setter
    def selected(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "selected", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def tilt(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "tilt")

    @tilt.setter
    def tilt(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "tilt", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def upp(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "upp")

    @upp.setter
    def upp(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "upp", value)

    @property
    @pulumi.getter
    def zoom(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "zoom")

    @zoom.setter
    def zoom(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "zoom", value)


@pulumi.type_token("unifi-native:map:Map")
class Map(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 lat: Optional[pulumi.Input[builtins.str]] = None,
                 lng: Optional[pulumi.Input[builtins.str]] = None,
                 map_type_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 offset_left: Optional[pulumi.Input[builtins.float]] = None,
                 offset_top: Optional[pulumi.Input[builtins.float]] = None,
                 opacity: Optional[pulumi.Input[builtins.float]] = None,
                 selected: Optional[pulumi.Input[builtins.bool]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 tilt: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 unit: Optional[pulumi.Input[builtins.str]] = None,
                 upp: Optional[pulumi.Input[builtins.float]] = None,
                 zoom: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        """
        Create a Map resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[MapArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Map resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 lat: Optional[pulumi.Input[builtins.str]] = None,
                 lng: Optional[pulumi.Input[builtins.str]] = None,
                 map_type_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 offset_left: Optional[pulumi.Input[builtins.float]] = None,
                 offset_top: Optional[pulumi.Input[builtins.float]] = None,
                 opacity: Optional[pulumi.Input[builtins.float]] = None,
                 selected: Optional[pulumi.Input[builtins.bool]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 tilt: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 unit: Optional[pulumi.Input[builtins.str]] = None,
                 upp: Optional[pulumi.Input[builtins.float]] = None,
                 zoom: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MapArgs.__new__(MapArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["lat"] = lat
            __props__.__dict__["lng"] = lng
            __props__.__dict__["map_type_id"] = map_type_id
            __props__.__dict__["name"] = name
            __props__.__dict__["offset_left"] = offset_left
            __props__.__dict__["offset_top"] = offset_top
            __props__.__dict__["opacity"] = opacity
            __props__.__dict__["selected"] = selected
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["tilt"] = tilt
            __props__.__dict__["type"] = type
            __props__.__dict__["unit"] = unit
            __props__.__dict__["upp"] = upp
            __props__.__dict__["zoom"] = zoom
        super(Map, __self__).__init__(
            'unifi-native:map:Map',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Map':
        """
        Get an existing Map resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = MapArgs.__new__(MapArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["lat"] = None
        __props__.__dict__["lng"] = None
        __props__.__dict__["map_type_id"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["offset_left"] = None
        __props__.__dict__["offset_top"] = None
        __props__.__dict__["opacity"] = None
        __props__.__dict__["selected"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["tilt"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["unit"] = None
        __props__.__dict__["upp"] = None
        __props__.__dict__["zoom"] = None
        return Map(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter
    def lat(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "lat")

    @property
    @pulumi.getter
    def lng(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "lng")

    @property
    @pulumi.getter(name="mapTypeId")
    def map_type_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "map_type_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="offsetLeft")
    def offset_left(self) -> pulumi.Output[Optional[builtins.float]]:
        return pulumi.get(self, "offset_left")

    @property
    @pulumi.getter(name="offsetTop")
    def offset_top(self) -> pulumi.Output[Optional[builtins.float]]:
        return pulumi.get(self, "offset_top")

    @property
    @pulumi.getter
    def opacity(self) -> pulumi.Output[Optional[builtins.float]]:
        return pulumi.get(self, "opacity")

    @property
    @pulumi.getter
    def selected(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "selected")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def tilt(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "tilt")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def upp(self) -> pulumi.Output[Optional[builtins.float]]:
        return pulumi.get(self, "upp")

    @property
    @pulumi.getter
    def zoom(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "zoom")

