# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'WanInterfaceConfigurationDtoArgs',
    'WanInterfaceConfigurationDtoArgsDict',
]

MYPY = False

if not MYPY:
    class WanInterfaceConfigurationDtoArgsDict(TypedDict):
        mode: NotRequired[pulumi.Input['WanInterfaceConfigurationDtoMode']]
        name: NotRequired[pulumi.Input[builtins.str]]
        priority: NotRequired[pulumi.Input[builtins.int]]
        wan_networkgroup: NotRequired[pulumi.Input['WanInterfaceConfigurationDtoWanNetworkgroup']]
        wan_sla: NotRequired[pulumi.Input[builtins.str]]
        weight: NotRequired[pulumi.Input[builtins.int]]
elif False:
    WanInterfaceConfigurationDtoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WanInterfaceConfigurationDtoArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input['WanInterfaceConfigurationDtoMode']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 priority: Optional[pulumi.Input[builtins.int]] = None,
                 wan_networkgroup: Optional[pulumi.Input['WanInterfaceConfigurationDtoWanNetworkgroup']] = None,
                 wan_sla: Optional[pulumi.Input[builtins.str]] = None,
                 weight: Optional[pulumi.Input[builtins.int]] = None):
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if wan_networkgroup is not None:
            pulumi.set(__self__, "wan_networkgroup", wan_networkgroup)
        if wan_sla is not None:
            pulumi.set(__self__, "wan_sla", wan_sla)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input['WanInterfaceConfigurationDtoMode']]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input['WanInterfaceConfigurationDtoMode']]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="wanNetworkgroup")
    def wan_networkgroup(self) -> Optional[pulumi.Input['WanInterfaceConfigurationDtoWanNetworkgroup']]:
        return pulumi.get(self, "wan_networkgroup")

    @wan_networkgroup.setter
    def wan_networkgroup(self, value: Optional[pulumi.Input['WanInterfaceConfigurationDtoWanNetworkgroup']]):
        pulumi.set(self, "wan_networkgroup", value)

    @property
    @pulumi.getter(name="wanSla")
    def wan_sla(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_sla")

    @wan_sla.setter
    def wan_sla(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_sla", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "weight", value)


