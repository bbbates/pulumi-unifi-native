# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['WanLoadBalancingConfigurationArgs', 'WanLoadBalancingConfiguration']

@pulumi.input_type
class WanLoadBalancingConfigurationArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input['Mode']] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 wan_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['WanInterfaceConfigurationDtoArgs']]]] = None):
        """
        The set of arguments for constructing a WanLoadBalancingConfiguration resource.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)
        if wan_interfaces is not None:
            pulumi.set(__self__, "wan_interfaces", wan_interfaces)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input['Mode']]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input['Mode']]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)

    @property
    @pulumi.getter(name="wanInterfaces")
    def wan_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WanInterfaceConfigurationDtoArgs']]]]:
        return pulumi.get(self, "wan_interfaces")

    @wan_interfaces.setter
    def wan_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WanInterfaceConfigurationDtoArgs']]]]):
        pulumi.set(self, "wan_interfaces", value)


@pulumi.type_token("unifi-native:configuration:WanLoadBalancingConfiguration")
class WanLoadBalancingConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 mode: Optional[pulumi.Input['Mode']] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 wan_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WanInterfaceConfigurationDtoArgs', 'WanInterfaceConfigurationDtoArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a WanLoadBalancingConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WanLoadBalancingConfigurationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WanLoadBalancingConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WanLoadBalancingConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WanLoadBalancingConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 mode: Optional[pulumi.Input['Mode']] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 wan_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WanInterfaceConfigurationDtoArgs', 'WanInterfaceConfigurationDtoArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WanLoadBalancingConfigurationArgs.__new__(WanLoadBalancingConfigurationArgs)

            __props__.__dict__["mode"] = mode
            __props__.__dict__["site_name"] = site_name
            __props__.__dict__["wan_interfaces"] = wan_interfaces
        super(WanLoadBalancingConfiguration, __self__).__init__(
            'unifi-native:configuration:WanLoadBalancingConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'WanLoadBalancingConfiguration':
        """
        Get an existing WanLoadBalancingConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = WanLoadBalancingConfigurationArgs.__new__(WanLoadBalancingConfigurationArgs)

        __props__.__dict__["mode"] = None
        __props__.__dict__["wan_interfaces"] = None
        return WanLoadBalancingConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[Optional['Mode']]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="wanInterfaces")
    def wan_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.WanInterfaceConfigurationDto']]]:
        return pulumi.get(self, "wan_interfaces")

