# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetDefaultRadiusConfigurationResult',
    'AwaitableGetDefaultRadiusConfigurationResult',
    'get_default_radius_configuration',
    'get_default_radius_configuration_output',
]

@pulumi.output_type
class GetDefaultRadiusConfigurationResult:
    def __init__(__self__, acct_port=None, auth_port=None, ca_certificate=None, dh_key=None, enabled=None, radius_profile_id=None, server_certificate=None, server_certificate_key=None, shared_secret=None):
        if acct_port and not isinstance(acct_port, int):
            raise TypeError("Expected argument 'acct_port' to be a int")
        pulumi.set(__self__, "acct_port", acct_port)
        if auth_port and not isinstance(auth_port, int):
            raise TypeError("Expected argument 'auth_port' to be a int")
        pulumi.set(__self__, "auth_port", auth_port)
        if ca_certificate and not isinstance(ca_certificate, str):
            raise TypeError("Expected argument 'ca_certificate' to be a str")
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        if dh_key and not isinstance(dh_key, str):
            raise TypeError("Expected argument 'dh_key' to be a str")
        pulumi.set(__self__, "dh_key", dh_key)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if radius_profile_id and not isinstance(radius_profile_id, str):
            raise TypeError("Expected argument 'radius_profile_id' to be a str")
        pulumi.set(__self__, "radius_profile_id", radius_profile_id)
        if server_certificate and not isinstance(server_certificate, str):
            raise TypeError("Expected argument 'server_certificate' to be a str")
        pulumi.set(__self__, "server_certificate", server_certificate)
        if server_certificate_key and not isinstance(server_certificate_key, str):
            raise TypeError("Expected argument 'server_certificate_key' to be a str")
        pulumi.set(__self__, "server_certificate_key", server_certificate_key)
        if shared_secret and not isinstance(shared_secret, str):
            raise TypeError("Expected argument 'shared_secret' to be a str")
        pulumi.set(__self__, "shared_secret", shared_secret)

    @property
    @pulumi.getter(name="acctPort")
    def acct_port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "acct_port")

    @property
    @pulumi.getter(name="authPort")
    def auth_port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "auth_port")

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="dhKey")
    def dh_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dh_key")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="radiusProfileId")
    def radius_profile_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "radius_profile_id")

    @property
    @pulumi.getter(name="serverCertificate")
    def server_certificate(self) -> Optional[builtins.str]:
        return pulumi.get(self, "server_certificate")

    @property
    @pulumi.getter(name="serverCertificateKey")
    def server_certificate_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "server_certificate_key")

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> builtins.str:
        return pulumi.get(self, "shared_secret")


class AwaitableGetDefaultRadiusConfigurationResult(GetDefaultRadiusConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDefaultRadiusConfigurationResult(
            acct_port=self.acct_port,
            auth_port=self.auth_port,
            ca_certificate=self.ca_certificate,
            dh_key=self.dh_key,
            enabled=self.enabled,
            radius_profile_id=self.radius_profile_id,
            server_certificate=self.server_certificate,
            server_certificate_key=self.server_certificate_key,
            shared_secret=self.shared_secret)


def get_default_radius_configuration(site_name: Optional[builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDefaultRadiusConfigurationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:radius-server:getDefaultRadiusConfiguration', __args__, opts=opts, typ=GetDefaultRadiusConfigurationResult).value

    return AwaitableGetDefaultRadiusConfigurationResult(
        acct_port=pulumi.get(__ret__, 'acct_port'),
        auth_port=pulumi.get(__ret__, 'auth_port'),
        ca_certificate=pulumi.get(__ret__, 'ca_certificate'),
        dh_key=pulumi.get(__ret__, 'dh_key'),
        enabled=pulumi.get(__ret__, 'enabled'),
        radius_profile_id=pulumi.get(__ret__, 'radius_profile_id'),
        server_certificate=pulumi.get(__ret__, 'server_certificate'),
        server_certificate_key=pulumi.get(__ret__, 'server_certificate_key'),
        shared_secret=pulumi.get(__ret__, 'shared_secret'))
def get_default_radius_configuration_output(site_name: Optional[pulumi.Input[builtins.str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDefaultRadiusConfigurationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:radius-server:getDefaultRadiusConfiguration', __args__, opts=opts, typ=GetDefaultRadiusConfigurationResult)
    return __ret__.apply(lambda __response__: GetDefaultRadiusConfigurationResult(
        acct_port=pulumi.get(__response__, 'acct_port'),
        auth_port=pulumi.get(__response__, 'auth_port'),
        ca_certificate=pulumi.get(__response__, 'ca_certificate'),
        dh_key=pulumi.get(__response__, 'dh_key'),
        enabled=pulumi.get(__response__, 'enabled'),
        radius_profile_id=pulumi.get(__response__, 'radius_profile_id'),
        server_certificate=pulumi.get(__response__, 'server_certificate'),
        server_certificate_key=pulumi.get(__response__, 'server_certificate_key'),
        shared_secret=pulumi.get(__response__, 'shared_secret')))
