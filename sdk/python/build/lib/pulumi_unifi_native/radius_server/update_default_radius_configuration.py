# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['UpdateDefaultRadiusConfigurationArgs', 'UpdateDefaultRadiusConfiguration']

@pulumi.input_type
class UpdateDefaultRadiusConfigurationArgs:
    def __init__(__self__, *,
                 shared_secret: pulumi.Input[builtins.str],
                 acct_port: Optional[pulumi.Input[builtins.int]] = None,
                 auth_port: Optional[pulumi.Input[builtins.int]] = None,
                 ca_certificate: Optional[pulumi.Input[builtins.str]] = None,
                 dh_key: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 radius_profile_id: Optional[pulumi.Input[builtins.str]] = None,
                 server_certificate: Optional[pulumi.Input[builtins.str]] = None,
                 server_certificate_key: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a UpdateDefaultRadiusConfiguration resource.
        """
        pulumi.set(__self__, "shared_secret", shared_secret)
        if acct_port is not None:
            pulumi.set(__self__, "acct_port", acct_port)
        if auth_port is not None:
            pulumi.set(__self__, "auth_port", auth_port)
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)
        if dh_key is not None:
            pulumi.set(__self__, "dh_key", dh_key)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if radius_profile_id is not None:
            pulumi.set(__self__, "radius_profile_id", radius_profile_id)
        if server_certificate is not None:
            pulumi.set(__self__, "server_certificate", server_certificate)
        if server_certificate_key is not None:
            pulumi.set(__self__, "server_certificate_key", server_certificate_key)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "shared_secret")

    @shared_secret.setter
    def shared_secret(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "shared_secret", value)

    @property
    @pulumi.getter(name="acctPort")
    def acct_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "acct_port")

    @acct_port.setter
    def acct_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "acct_port", value)

    @property
    @pulumi.getter(name="authPort")
    def auth_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "auth_port")

    @auth_port.setter
    def auth_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "auth_port", value)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter(name="dhKey")
    def dh_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dh_key")

    @dh_key.setter
    def dh_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dh_key", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="radiusProfileId")
    def radius_profile_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "radius_profile_id")

    @radius_profile_id.setter
    def radius_profile_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "radius_profile_id", value)

    @property
    @pulumi.getter(name="serverCertificate")
    def server_certificate(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "server_certificate")

    @server_certificate.setter
    def server_certificate(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server_certificate", value)

    @property
    @pulumi.getter(name="serverCertificateKey")
    def server_certificate_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "server_certificate_key")

    @server_certificate_key.setter
    def server_certificate_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server_certificate_key", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)


@pulumi.type_token("unifi-native:radius-server:UpdateDefaultRadiusConfiguration")
class UpdateDefaultRadiusConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acct_port: Optional[pulumi.Input[builtins.int]] = None,
                 auth_port: Optional[pulumi.Input[builtins.int]] = None,
                 ca_certificate: Optional[pulumi.Input[builtins.str]] = None,
                 dh_key: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 radius_profile_id: Optional[pulumi.Input[builtins.str]] = None,
                 server_certificate: Optional[pulumi.Input[builtins.str]] = None,
                 server_certificate_key: Optional[pulumi.Input[builtins.str]] = None,
                 shared_secret: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a UpdateDefaultRadiusConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UpdateDefaultRadiusConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a UpdateDefaultRadiusConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UpdateDefaultRadiusConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UpdateDefaultRadiusConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acct_port: Optional[pulumi.Input[builtins.int]] = None,
                 auth_port: Optional[pulumi.Input[builtins.int]] = None,
                 ca_certificate: Optional[pulumi.Input[builtins.str]] = None,
                 dh_key: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 radius_profile_id: Optional[pulumi.Input[builtins.str]] = None,
                 server_certificate: Optional[pulumi.Input[builtins.str]] = None,
                 server_certificate_key: Optional[pulumi.Input[builtins.str]] = None,
                 shared_secret: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UpdateDefaultRadiusConfigurationArgs.__new__(UpdateDefaultRadiusConfigurationArgs)

            __props__.__dict__["acct_port"] = acct_port
            __props__.__dict__["auth_port"] = auth_port
            __props__.__dict__["ca_certificate"] = ca_certificate
            __props__.__dict__["dh_key"] = dh_key
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["radius_profile_id"] = radius_profile_id
            __props__.__dict__["server_certificate"] = server_certificate
            __props__.__dict__["server_certificate_key"] = server_certificate_key
            if shared_secret is None and not opts.urn:
                raise TypeError("Missing required property 'shared_secret'")
            __props__.__dict__["shared_secret"] = shared_secret
            __props__.__dict__["site_name"] = site_name
        super(UpdateDefaultRadiusConfiguration, __self__).__init__(
            'unifi-native:radius-server:UpdateDefaultRadiusConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'UpdateDefaultRadiusConfiguration':
        """
        Get an existing UpdateDefaultRadiusConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = UpdateDefaultRadiusConfigurationArgs.__new__(UpdateDefaultRadiusConfigurationArgs)

        __props__.__dict__["acct_port"] = None
        __props__.__dict__["auth_port"] = None
        __props__.__dict__["ca_certificate"] = None
        __props__.__dict__["dh_key"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["radius_profile_id"] = None
        __props__.__dict__["server_certificate"] = None
        __props__.__dict__["server_certificate_key"] = None
        __props__.__dict__["shared_secret"] = None
        return UpdateDefaultRadiusConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acctPort")
    def acct_port(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "acct_port")

    @property
    @pulumi.getter(name="authPort")
    def auth_port(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "auth_port")

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="dhKey")
    def dh_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dh_key")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="radiusProfileId")
    def radius_profile_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "radius_profile_id")

    @property
    @pulumi.getter(name="serverCertificate")
    def server_certificate(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "server_certificate")

    @property
    @pulumi.getter(name="serverCertificateKey")
    def server_certificate_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "server_certificate_key")

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "shared_secret")

