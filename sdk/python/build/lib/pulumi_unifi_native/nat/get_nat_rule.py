# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetNatRuleResult',
    'AwaitableGetNatRuleResult',
    'get_nat_rule',
    'get_nat_rule_output',
]

@pulumi.output_type
class GetNatRuleResult:
    def __init__(__self__, id=None, description=None, destination_filter=None, enabled=None, exclude=None, in_interface=None, ip_address=None, is_predefined=None, logging=None, out_interface=None, port=None, pppoe_use_base_interface=None, protocol=None, rule_index=None, setting_preference=None, source_filter=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if destination_filter and not isinstance(destination_filter, dict):
            raise TypeError("Expected argument 'destination_filter' to be a dict")
        pulumi.set(__self__, "destination_filter", destination_filter)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if exclude and not isinstance(exclude, bool):
            raise TypeError("Expected argument 'exclude' to be a bool")
        pulumi.set(__self__, "exclude", exclude)
        if in_interface and not isinstance(in_interface, str):
            raise TypeError("Expected argument 'in_interface' to be a str")
        pulumi.set(__self__, "in_interface", in_interface)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if is_predefined and not isinstance(is_predefined, bool):
            raise TypeError("Expected argument 'is_predefined' to be a bool")
        pulumi.set(__self__, "is_predefined", is_predefined)
        if logging and not isinstance(logging, bool):
            raise TypeError("Expected argument 'logging' to be a bool")
        pulumi.set(__self__, "logging", logging)
        if out_interface and not isinstance(out_interface, str):
            raise TypeError("Expected argument 'out_interface' to be a str")
        pulumi.set(__self__, "out_interface", out_interface)
        if port and not isinstance(port, str):
            raise TypeError("Expected argument 'port' to be a str")
        pulumi.set(__self__, "port", port)
        if pppoe_use_base_interface and not isinstance(pppoe_use_base_interface, bool):
            raise TypeError("Expected argument 'pppoe_use_base_interface' to be a bool")
        pulumi.set(__self__, "pppoe_use_base_interface", pppoe_use_base_interface)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if rule_index and not isinstance(rule_index, int):
            raise TypeError("Expected argument 'rule_index' to be a int")
        pulumi.set(__self__, "rule_index", rule_index)
        if setting_preference and not isinstance(setting_preference, str):
            raise TypeError("Expected argument 'setting_preference' to be a str")
        pulumi.set(__self__, "setting_preference", setting_preference)
        if source_filter and not isinstance(source_filter, dict):
            raise TypeError("Expected argument 'source_filter' to be a dict")
        pulumi.set(__self__, "source_filter", source_filter)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationFilter")
    def destination_filter(self) -> Optional['outputs.NATRuleFilter']:
        return pulumi.get(self, "destination_filter")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def exclude(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter(name="inInterface")
    def in_interface(self) -> Optional[builtins.str]:
        return pulumi.get(self, "in_interface")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isPredefined")
    def is_predefined(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "is_predefined")

    @property
    @pulumi.getter
    def logging(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter(name="outInterface")
    def out_interface(self) -> Optional[builtins.str]:
        return pulumi.get(self, "out_interface")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="pppoeUseBaseInterface")
    def pppoe_use_base_interface(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "pppoe_use_base_interface")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="ruleIndex")
    def rule_index(self) -> Optional[builtins.int]:
        return pulumi.get(self, "rule_index")

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> Optional['NATRulesSettingPreference']:
        return pulumi.get(self, "setting_preference")

    @property
    @pulumi.getter(name="sourceFilter")
    def source_filter(self) -> Optional['outputs.NATRuleFilter']:
        return pulumi.get(self, "source_filter")

    @property
    @pulumi.getter
    def type(self) -> Optional['NATRulesType']:
        return pulumi.get(self, "type")


class AwaitableGetNatRuleResult(GetNatRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNatRuleResult(
            id=self.id,
            description=self.description,
            destination_filter=self.destination_filter,
            enabled=self.enabled,
            exclude=self.exclude,
            in_interface=self.in_interface,
            ip_address=self.ip_address,
            is_predefined=self.is_predefined,
            logging=self.logging,
            out_interface=self.out_interface,
            port=self.port,
            pppoe_use_base_interface=self.pppoe_use_base_interface,
            protocol=self.protocol,
            rule_index=self.rule_index,
            setting_preference=self.setting_preference,
            source_filter=self.source_filter,
            type=self.type)


def get_nat_rule(id: Optional[builtins.str] = None,
                 site_name: Optional[builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNatRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:nat:getNatRule', __args__, opts=opts, typ=GetNatRuleResult).value

    return AwaitableGetNatRuleResult(
        id=pulumi.get(__ret__, 'id'),
        description=pulumi.get(__ret__, 'description'),
        destination_filter=pulumi.get(__ret__, 'destination_filter'),
        enabled=pulumi.get(__ret__, 'enabled'),
        exclude=pulumi.get(__ret__, 'exclude'),
        in_interface=pulumi.get(__ret__, 'in_interface'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        is_predefined=pulumi.get(__ret__, 'is_predefined'),
        logging=pulumi.get(__ret__, 'logging'),
        out_interface=pulumi.get(__ret__, 'out_interface'),
        port=pulumi.get(__ret__, 'port'),
        pppoe_use_base_interface=pulumi.get(__ret__, 'pppoe_use_base_interface'),
        protocol=pulumi.get(__ret__, 'protocol'),
        rule_index=pulumi.get(__ret__, 'rule_index'),
        setting_preference=pulumi.get(__ret__, 'setting_preference'),
        source_filter=pulumi.get(__ret__, 'source_filter'),
        type=pulumi.get(__ret__, 'type'))
def get_nat_rule_output(id: Optional[pulumi.Input[builtins.str]] = None,
                        site_name: Optional[pulumi.Input[builtins.str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNatRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:nat:getNatRule', __args__, opts=opts, typ=GetNatRuleResult)
    return __ret__.apply(lambda __response__: GetNatRuleResult(
        id=pulumi.get(__response__, 'id'),
        description=pulumi.get(__response__, 'description'),
        destination_filter=pulumi.get(__response__, 'destination_filter'),
        enabled=pulumi.get(__response__, 'enabled'),
        exclude=pulumi.get(__response__, 'exclude'),
        in_interface=pulumi.get(__response__, 'in_interface'),
        ip_address=pulumi.get(__response__, 'ip_address'),
        is_predefined=pulumi.get(__response__, 'is_predefined'),
        logging=pulumi.get(__response__, 'logging'),
        out_interface=pulumi.get(__response__, 'out_interface'),
        port=pulumi.get(__response__, 'port'),
        pppoe_use_base_interface=pulumi.get(__response__, 'pppoe_use_base_interface'),
        protocol=pulumi.get(__response__, 'protocol'),
        rule_index=pulumi.get(__response__, 'rule_index'),
        setting_preference=pulumi.get(__response__, 'setting_preference'),
        source_filter=pulumi.get(__response__, 'source_filter'),
        type=pulumi.get(__response__, 'type')))
