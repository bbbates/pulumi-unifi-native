# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'NATRuleFilter',
    'NATRules',
]

@pulumi.output_type
class NATRuleFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"
        elif key == "firewallGroupIds":
            suggest = "firewall_group_ids"
        elif key == "invertAddress":
            suggest = "invert_address"
        elif key == "invertPort":
            suggest = "invert_port"
        elif key == "networkConfId":
            suggest = "network_conf_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NATRuleFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NATRuleFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NATRuleFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: 'NATRuleFilterFilterType',
                 address: Optional[builtins.str] = None,
                 firewall_group_ids: Optional[Sequence[builtins.str]] = None,
                 invert_address: Optional[builtins.bool] = None,
                 invert_port: Optional[builtins.bool] = None,
                 network_conf_id: Optional[builtins.str] = None,
                 port: Optional[builtins.str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if firewall_group_ids is not None:
            pulumi.set(__self__, "firewall_group_ids", firewall_group_ids)
        if invert_address is not None:
            pulumi.set(__self__, "invert_address", invert_address)
        if invert_port is not None:
            pulumi.set(__self__, "invert_port", invert_port)
        if network_conf_id is not None:
            pulumi.set(__self__, "network_conf_id", network_conf_id)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> 'NATRuleFilterFilterType':
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="firewallGroupIds")
    def firewall_group_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "firewall_group_ids")

    @property
    @pulumi.getter(name="invertAddress")
    def invert_address(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "invert_address")

    @property
    @pulumi.getter(name="invertPort")
    def invert_port(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "invert_port")

    @property
    @pulumi.getter(name="networkConfId")
    def network_conf_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "network_conf_id")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.str]:
        return pulumi.get(self, "port")


@pulumi.output_type
class NATRules(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 description: Optional[builtins.str] = None,
                 destination_filter: Optional['outputs.NATRuleFilter'] = None,
                 enabled: Optional[builtins.bool] = None,
                 exclude: Optional[builtins.bool] = None,
                 in_interface: Optional[builtins.str] = None,
                 ip_address: Optional[builtins.str] = None,
                 is_predefined: Optional[builtins.bool] = None,
                 logging: Optional[builtins.bool] = None,
                 out_interface: Optional[builtins.str] = None,
                 port: Optional[builtins.str] = None,
                 pppoe_use_base_interface: Optional[builtins.bool] = None,
                 protocol: Optional[builtins.str] = None,
                 rule_index: Optional[builtins.int] = None,
                 setting_preference: Optional['NATRulesSettingPreference'] = None,
                 source_filter: Optional['outputs.NATRuleFilter'] = None,
                 type: Optional['NATRulesType'] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_filter is not None:
            pulumi.set(__self__, "destination_filter", destination_filter)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if in_interface is not None:
            pulumi.set(__self__, "in_interface", in_interface)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_predefined is not None:
            pulumi.set(__self__, "is_predefined", is_predefined)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if out_interface is not None:
            pulumi.set(__self__, "out_interface", out_interface)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if pppoe_use_base_interface is not None:
            pulumi.set(__self__, "pppoe_use_base_interface", pppoe_use_base_interface)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_index is not None:
            pulumi.set(__self__, "rule_index", rule_index)
        if setting_preference is not None:
            pulumi.set(__self__, "setting_preference", setting_preference)
        if source_filter is not None:
            pulumi.set(__self__, "source_filter", source_filter)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationFilter")
    def destination_filter(self) -> Optional['outputs.NATRuleFilter']:
        return pulumi.get(self, "destination_filter")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def exclude(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter(name="inInterface")
    def in_interface(self) -> Optional[builtins.str]:
        return pulumi.get(self, "in_interface")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isPredefined")
    def is_predefined(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "is_predefined")

    @property
    @pulumi.getter
    def logging(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter(name="outInterface")
    def out_interface(self) -> Optional[builtins.str]:
        return pulumi.get(self, "out_interface")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="pppoeUseBaseInterface")
    def pppoe_use_base_interface(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "pppoe_use_base_interface")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="ruleIndex")
    def rule_index(self) -> Optional[builtins.int]:
        return pulumi.get(self, "rule_index")

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> Optional['NATRulesSettingPreference']:
        return pulumi.get(self, "setting_preference")

    @property
    @pulumi.getter(name="sourceFilter")
    def source_filter(self) -> Optional['outputs.NATRuleFilter']:
        return pulumi.get(self, "source_filter")

    @property
    @pulumi.getter
    def type(self) -> Optional['NATRulesType']:
        return pulumi.get(self, "type")


