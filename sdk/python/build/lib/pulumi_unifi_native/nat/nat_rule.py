# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['NatRuleArgs', 'NatRule']

@pulumi.input_type
class NatRuleArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 destination_filter: Optional[pulumi.Input['NATRuleFilterArgs']] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 exclude: Optional[pulumi.Input[builtins.bool]] = None,
                 in_interface: Optional[pulumi.Input[builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[builtins.str]] = None,
                 is_predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 logging: Optional[pulumi.Input[builtins.bool]] = None,
                 out_interface: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.str]] = None,
                 pppoe_use_base_interface: Optional[pulumi.Input[builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 rule_index: Optional[pulumi.Input[builtins.int]] = None,
                 setting_preference: Optional[pulumi.Input['SettingPreference']] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 source_filter: Optional[pulumi.Input['NATRuleFilterArgs']] = None,
                 type: Optional[pulumi.Input['Type']] = None):
        """
        The set of arguments for constructing a NatRule resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_filter is not None:
            pulumi.set(__self__, "destination_filter", destination_filter)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if in_interface is not None:
            pulumi.set(__self__, "in_interface", in_interface)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_predefined is not None:
            pulumi.set(__self__, "is_predefined", is_predefined)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if out_interface is not None:
            pulumi.set(__self__, "out_interface", out_interface)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if pppoe_use_base_interface is not None:
            pulumi.set(__self__, "pppoe_use_base_interface", pppoe_use_base_interface)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_index is not None:
            pulumi.set(__self__, "rule_index", rule_index)
        if setting_preference is not None:
            pulumi.set(__self__, "setting_preference", setting_preference)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)
        if source_filter is not None:
            pulumi.set(__self__, "source_filter", source_filter)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destinationFilter")
    def destination_filter(self) -> Optional[pulumi.Input['NATRuleFilterArgs']]:
        return pulumi.get(self, "destination_filter")

    @destination_filter.setter
    def destination_filter(self, value: Optional[pulumi.Input['NATRuleFilterArgs']]):
        pulumi.set(self, "destination_filter", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "exclude")

    @exclude.setter
    def exclude(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "exclude", value)

    @property
    @pulumi.getter(name="inInterface")
    def in_interface(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "in_interface")

    @in_interface.setter
    def in_interface(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "in_interface", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="isPredefined")
    def is_predefined(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_predefined")

    @is_predefined.setter
    def is_predefined(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_predefined", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter(name="outInterface")
    def out_interface(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "out_interface")

    @out_interface.setter
    def out_interface(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "out_interface", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="pppoeUseBaseInterface")
    def pppoe_use_base_interface(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "pppoe_use_base_interface")

    @pppoe_use_base_interface.setter
    def pppoe_use_base_interface(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "pppoe_use_base_interface", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="ruleIndex")
    def rule_index(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "rule_index")

    @rule_index.setter
    def rule_index(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rule_index", value)

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> Optional[pulumi.Input['SettingPreference']]:
        return pulumi.get(self, "setting_preference")

    @setting_preference.setter
    def setting_preference(self, value: Optional[pulumi.Input['SettingPreference']]):
        pulumi.set(self, "setting_preference", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)

    @property
    @pulumi.getter(name="sourceFilter")
    def source_filter(self) -> Optional[pulumi.Input['NATRuleFilterArgs']]:
        return pulumi.get(self, "source_filter")

    @source_filter.setter
    def source_filter(self, value: Optional[pulumi.Input['NATRuleFilterArgs']]):
        pulumi.set(self, "source_filter", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['Type']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['Type']]):
        pulumi.set(self, "type", value)


@pulumi.type_token("unifi-native:nat:NatRule")
class NatRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 destination_filter: Optional[pulumi.Input[Union['NATRuleFilterArgs', 'NATRuleFilterArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 exclude: Optional[pulumi.Input[builtins.bool]] = None,
                 in_interface: Optional[pulumi.Input[builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[builtins.str]] = None,
                 is_predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 logging: Optional[pulumi.Input[builtins.bool]] = None,
                 out_interface: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.str]] = None,
                 pppoe_use_base_interface: Optional[pulumi.Input[builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 rule_index: Optional[pulumi.Input[builtins.int]] = None,
                 setting_preference: Optional[pulumi.Input['SettingPreference']] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 source_filter: Optional[pulumi.Input[Union['NATRuleFilterArgs', 'NATRuleFilterArgsDict']]] = None,
                 type: Optional[pulumi.Input['Type']] = None,
                 __props__=None):
        """
        Create a NatRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NatRuleArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NatRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NatRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NatRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 destination_filter: Optional[pulumi.Input[Union['NATRuleFilterArgs', 'NATRuleFilterArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 exclude: Optional[pulumi.Input[builtins.bool]] = None,
                 in_interface: Optional[pulumi.Input[builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[builtins.str]] = None,
                 is_predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 logging: Optional[pulumi.Input[builtins.bool]] = None,
                 out_interface: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.str]] = None,
                 pppoe_use_base_interface: Optional[pulumi.Input[builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 rule_index: Optional[pulumi.Input[builtins.int]] = None,
                 setting_preference: Optional[pulumi.Input['SettingPreference']] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 source_filter: Optional[pulumi.Input[Union['NATRuleFilterArgs', 'NATRuleFilterArgsDict']]] = None,
                 type: Optional[pulumi.Input['Type']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NatRuleArgs.__new__(NatRuleArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["description"] = description
            __props__.__dict__["destination_filter"] = destination_filter
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["exclude"] = exclude
            __props__.__dict__["in_interface"] = in_interface
            __props__.__dict__["ip_address"] = ip_address
            __props__.__dict__["is_predefined"] = is_predefined
            __props__.__dict__["logging"] = logging
            __props__.__dict__["out_interface"] = out_interface
            __props__.__dict__["port"] = port
            __props__.__dict__["pppoe_use_base_interface"] = pppoe_use_base_interface
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["rule_index"] = rule_index
            __props__.__dict__["setting_preference"] = setting_preference
            __props__.__dict__["site_name"] = site_name
            __props__.__dict__["source_filter"] = source_filter
            __props__.__dict__["type"] = type
        super(NatRule, __self__).__init__(
            'unifi-native:nat:NatRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'NatRule':
        """
        Get an existing NatRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = NatRuleArgs.__new__(NatRuleArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["destination_filter"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["exclude"] = None
        __props__.__dict__["in_interface"] = None
        __props__.__dict__["ip_address"] = None
        __props__.__dict__["is_predefined"] = None
        __props__.__dict__["logging"] = None
        __props__.__dict__["out_interface"] = None
        __props__.__dict__["port"] = None
        __props__.__dict__["pppoe_use_base_interface"] = None
        __props__.__dict__["protocol"] = None
        __props__.__dict__["rule_index"] = None
        __props__.__dict__["setting_preference"] = None
        __props__.__dict__["source_filter"] = None
        __props__.__dict__["type"] = None
        return NatRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationFilter")
    def destination_filter(self) -> pulumi.Output[Optional['outputs.NATRuleFilter']]:
        return pulumi.get(self, "destination_filter")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def exclude(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter(name="inInterface")
    def in_interface(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "in_interface")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isPredefined")
    def is_predefined(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "is_predefined")

    @property
    @pulumi.getter
    def logging(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter(name="outInterface")
    def out_interface(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "out_interface")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="pppoeUseBaseInterface")
    def pppoe_use_base_interface(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "pppoe_use_base_interface")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="ruleIndex")
    def rule_index(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "rule_index")

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> pulumi.Output[Optional['SettingPreference']]:
        return pulumi.get(self, "setting_preference")

    @property
    @pulumi.getter(name="sourceFilter")
    def source_filter(self) -> pulumi.Output[Optional['outputs.NATRuleFilter']]:
        return pulumi.get(self, "source_filter")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional['Type']]:
        return pulumi.get(self, "type")

