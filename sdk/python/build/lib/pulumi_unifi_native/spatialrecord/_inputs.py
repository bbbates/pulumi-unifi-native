# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'SpatialRecordDevicesArgs',
    'SpatialRecordDevicesArgsDict',
    'SpatialRecordPositionArgs',
    'SpatialRecordPositionArgsDict',
]

MYPY = False

if not MYPY:
    class SpatialRecordDevicesArgsDict(TypedDict):
        mac: NotRequired[pulumi.Input[builtins.str]]
        position: NotRequired[pulumi.Input['SpatialRecordPositionArgsDict']]
elif False:
    SpatialRecordDevicesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SpatialRecordDevicesArgs:
    def __init__(__self__, *,
                 mac: Optional[pulumi.Input[builtins.str]] = None,
                 position: Optional[pulumi.Input['SpatialRecordPositionArgs']] = None):
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['SpatialRecordPositionArgs']]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['SpatialRecordPositionArgs']]):
        pulumi.set(self, "position", value)


if not MYPY:
    class SpatialRecordPositionArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[builtins.float]]
        y: NotRequired[pulumi.Input[builtins.float]]
        z: NotRequired[pulumi.Input[builtins.float]]
elif False:
    SpatialRecordPositionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SpatialRecordPositionArgs:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[builtins.float]] = None,
                 y: Optional[pulumi.Input[builtins.float]] = None,
                 z: Optional[pulumi.Input[builtins.float]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if z is not None:
            pulumi.set(__self__, "z", z)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter
    def z(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "z")

    @z.setter
    def z(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "z", value)


