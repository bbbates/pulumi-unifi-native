# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'Meta',
    'SettingGlobalSwitch',
    'SettingGlobalSwitchAclL3Isolation',
]

@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


@pulumi.output_type
class SettingGlobalSwitch(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 acl_device_isolation: Optional[Sequence[builtins.str]] = None,
                 acl_l3_isolation: Optional[Sequence['outputs.SettingGlobalSwitchAclL3Isolation']] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 dhcp_snoop: Optional[builtins.bool] = None,
                 dot1x_fallback_networkconf_id: Optional[builtins.str] = None,
                 dot1x_portctrl_enabled: Optional[builtins.bool] = None,
                 flood_known_protocols: Optional[builtins.bool] = None,
                 flowctrl_enabled: Optional[builtins.bool] = None,
                 forward_unknown_mcast_router_ports: Optional[builtins.bool] = None,
                 jumboframe_enabled: Optional[builtins.bool] = None,
                 key: Optional[builtins.str] = None,
                 radiusprofile_id: Optional[builtins.str] = None,
                 site_id: Optional[builtins.str] = None,
                 stp_version: Optional[builtins.str] = None,
                 switch_exclusions: Optional[Sequence[builtins.str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if acl_device_isolation is not None:
            pulumi.set(__self__, "acl_device_isolation", acl_device_isolation)
        if acl_l3_isolation is not None:
            pulumi.set(__self__, "acl_l3_isolation", acl_l3_isolation)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if dhcp_snoop is not None:
            pulumi.set(__self__, "dhcp_snoop", dhcp_snoop)
        if dot1x_fallback_networkconf_id is not None:
            pulumi.set(__self__, "dot1x_fallback_networkconf_id", dot1x_fallback_networkconf_id)
        if dot1x_portctrl_enabled is not None:
            pulumi.set(__self__, "dot1x_portctrl_enabled", dot1x_portctrl_enabled)
        if flood_known_protocols is not None:
            pulumi.set(__self__, "flood_known_protocols", flood_known_protocols)
        if flowctrl_enabled is not None:
            pulumi.set(__self__, "flowctrl_enabled", flowctrl_enabled)
        if forward_unknown_mcast_router_ports is not None:
            pulumi.set(__self__, "forward_unknown_mcast_router_ports", forward_unknown_mcast_router_ports)
        if jumboframe_enabled is not None:
            pulumi.set(__self__, "jumboframe_enabled", jumboframe_enabled)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if radiusprofile_id is not None:
            pulumi.set(__self__, "radiusprofile_id", radiusprofile_id)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if stp_version is not None:
            pulumi.set(__self__, "stp_version", stp_version)
        if switch_exclusions is not None:
            pulumi.set(__self__, "switch_exclusions", switch_exclusions)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="aclDeviceIsolation")
    def acl_device_isolation(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "acl_device_isolation")

    @property
    @pulumi.getter(name="aclL3Isolation")
    def acl_l3_isolation(self) -> Optional[Sequence['outputs.SettingGlobalSwitchAclL3Isolation']]:
        return pulumi.get(self, "acl_l3_isolation")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="dhcpSnoop")
    def dhcp_snoop(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dhcp_snoop")

    @property
    @pulumi.getter(name="dot1xFallbackNetworkconfId")
    def dot1x_fallback_networkconf_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dot1x_fallback_networkconf_id")

    @property
    @pulumi.getter(name="dot1xPortctrlEnabled")
    def dot1x_portctrl_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dot1x_portctrl_enabled")

    @property
    @pulumi.getter(name="floodKnownProtocols")
    def flood_known_protocols(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "flood_known_protocols")

    @property
    @pulumi.getter(name="flowctrlEnabled")
    def flowctrl_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "flowctrl_enabled")

    @property
    @pulumi.getter(name="forwardUnknownMcastRouterPorts")
    def forward_unknown_mcast_router_ports(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "forward_unknown_mcast_router_ports")

    @property
    @pulumi.getter(name="jumboframeEnabled")
    def jumboframe_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "jumboframe_enabled")

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="radiusprofileId")
    def radiusprofile_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "radiusprofile_id")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="stpVersion")
    def stp_version(self) -> Optional[builtins.str]:
        return pulumi.get(self, "stp_version")

    @property
    @pulumi.getter(name="switchExclusions")
    def switch_exclusions(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "switch_exclusions")


@pulumi.output_type
class SettingGlobalSwitchAclL3Isolation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationNetworks":
            suggest = "destination_networks"
        elif key == "sourceNetwork":
            suggest = "source_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingGlobalSwitchAclL3Isolation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingGlobalSwitchAclL3Isolation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingGlobalSwitchAclL3Isolation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_networks: Optional[Sequence[builtins.str]] = None,
                 source_network: Optional[builtins.str] = None):
        if destination_networks is not None:
            pulumi.set(__self__, "destination_networks", destination_networks)
        if source_network is not None:
            pulumi.set(__self__, "source_network", source_network)

    @property
    @pulumi.getter(name="destinationNetworks")
    def destination_networks(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "destination_networks")

    @property
    @pulumi.getter(name="sourceNetwork")
    def source_network(self) -> Optional[builtins.str]:
        return pulumi.get(self, "source_network")


