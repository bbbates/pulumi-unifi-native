# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'Meta',
    'WLANCapab',
    'WLANCellularNetworkList',
    'WLANFriendlyName',
    'WLANHotspot2',
    'WLANNaiRealmList',
    'WLANPrivatePresharedKeys',
    'WLANRoamingConsortiumList',
    'WLANSaePsk',
    'WLANScheduleWithDuration',
    'WLANVenueName',
    'Wlan',
]

@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


@pulumi.output_type
class WLANCapab(dict):
    def __init__(__self__, *,
                 port: Optional[builtins.int] = None,
                 protocol: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WLANCellularNetworkList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "countryCode":
            suggest = "country_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WLANCellularNetworkList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WLANCellularNetworkList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WLANCellularNetworkList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 country_code: Optional[builtins.int] = None,
                 mcc: Optional[builtins.int] = None,
                 mnc: Optional[builtins.int] = None,
                 name: Optional[builtins.str] = None):
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if mcc is not None:
            pulumi.set(__self__, "mcc", mcc)
        if mnc is not None:
            pulumi.set(__self__, "mnc", mnc)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[builtins.int]:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def mcc(self) -> Optional[builtins.int]:
        return pulumi.get(self, "mcc")

    @property
    @pulumi.getter
    def mnc(self) -> Optional[builtins.int]:
        return pulumi.get(self, "mnc")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WLANFriendlyName(dict):
    def __init__(__self__, *,
                 language: Optional[builtins.str] = None,
                 text: Optional[builtins.str] = None):
        if language is not None:
            pulumi.set(__self__, "language", language)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def language(self) -> Optional[builtins.str]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def text(self) -> Optional[builtins.str]:
        return pulumi.get(self, "text")


@pulumi.output_type
class WLANHotspot2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cellularNetworkList":
            suggest = "cellular_network_list"
        elif key == "domainNameList":
            suggest = "domain_name_list"
        elif key == "friendlyName":
            suggest = "friendly_name"
        elif key == "ipaddrTypeAvailV4":
            suggest = "ipaddr_type_avail_v4"
        elif key == "ipaddrTypeAvailV6":
            suggest = "ipaddr_type_avail_v6"
        elif key == "metricsDownlinkLoad":
            suggest = "metrics_downlink_load"
        elif key == "metricsDownlinkLoadSet":
            suggest = "metrics_downlink_load_set"
        elif key == "metricsDownlinkSpeed":
            suggest = "metrics_downlink_speed"
        elif key == "metricsDownlinkSpeedSet":
            suggest = "metrics_downlink_speed_set"
        elif key == "metricsInfoAtCapacity":
            suggest = "metrics_info_at_capacity"
        elif key == "metricsInfoLinkStatus":
            suggest = "metrics_info_link_status"
        elif key == "metricsInfoSymmetric":
            suggest = "metrics_info_symmetric"
        elif key == "metricsMeasurement":
            suggest = "metrics_measurement"
        elif key == "metricsMeasurementSet":
            suggest = "metrics_measurement_set"
        elif key == "metricsStatus":
            suggest = "metrics_status"
        elif key == "metricsUplinkLoad":
            suggest = "metrics_uplink_load"
        elif key == "metricsUplinkLoadSet":
            suggest = "metrics_uplink_load_set"
        elif key == "metricsUplinkSpeed":
            suggest = "metrics_uplink_speed"
        elif key == "metricsUplinkSpeedSet":
            suggest = "metrics_uplink_speed_set"
        elif key == "naiRealmList":
            suggest = "nai_realm_list"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "roamingConsortiumList":
            suggest = "roaming_consortium_list"
        elif key == "venueGroup":
            suggest = "venue_group"
        elif key == "venueName":
            suggest = "venue_name"
        elif key == "venueType":
            suggest = "venue_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WLANHotspot2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WLANHotspot2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WLANHotspot2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capab: Optional[Sequence['outputs.WLANCapab']] = None,
                 cellular_network_list: Optional[Sequence['outputs.WLANCellularNetworkList']] = None,
                 domain_name_list: Optional[Sequence[builtins.str]] = None,
                 friendly_name: Optional[Sequence['outputs.WLANFriendlyName']] = None,
                 ipaddr_type_avail_v4: Optional[builtins.int] = None,
                 ipaddr_type_avail_v6: Optional[builtins.int] = None,
                 metrics_downlink_load: Optional[builtins.int] = None,
                 metrics_downlink_load_set: Optional[builtins.bool] = None,
                 metrics_downlink_speed: Optional[builtins.int] = None,
                 metrics_downlink_speed_set: Optional[builtins.bool] = None,
                 metrics_info_at_capacity: Optional[builtins.bool] = None,
                 metrics_info_link_status: Optional[builtins.str] = None,
                 metrics_info_symmetric: Optional[builtins.bool] = None,
                 metrics_measurement: Optional[builtins.int] = None,
                 metrics_measurement_set: Optional[builtins.bool] = None,
                 metrics_status: Optional[builtins.bool] = None,
                 metrics_uplink_load: Optional[builtins.int] = None,
                 metrics_uplink_load_set: Optional[builtins.bool] = None,
                 metrics_uplink_speed: Optional[builtins.int] = None,
                 metrics_uplink_speed_set: Optional[builtins.bool] = None,
                 nai_realm_list: Optional[Sequence['outputs.WLANNaiRealmList']] = None,
                 network_type: Optional[builtins.int] = None,
                 roaming_consortium_list: Optional[Sequence['outputs.WLANRoamingConsortiumList']] = None,
                 venue_group: Optional[builtins.int] = None,
                 venue_name: Optional[Sequence['outputs.WLANVenueName']] = None,
                 venue_type: Optional[builtins.int] = None):
        if capab is not None:
            pulumi.set(__self__, "capab", capab)
        if cellular_network_list is not None:
            pulumi.set(__self__, "cellular_network_list", cellular_network_list)
        if domain_name_list is not None:
            pulumi.set(__self__, "domain_name_list", domain_name_list)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if ipaddr_type_avail_v4 is not None:
            pulumi.set(__self__, "ipaddr_type_avail_v4", ipaddr_type_avail_v4)
        if ipaddr_type_avail_v6 is not None:
            pulumi.set(__self__, "ipaddr_type_avail_v6", ipaddr_type_avail_v6)
        if metrics_downlink_load is not None:
            pulumi.set(__self__, "metrics_downlink_load", metrics_downlink_load)
        if metrics_downlink_load_set is not None:
            pulumi.set(__self__, "metrics_downlink_load_set", metrics_downlink_load_set)
        if metrics_downlink_speed is not None:
            pulumi.set(__self__, "metrics_downlink_speed", metrics_downlink_speed)
        if metrics_downlink_speed_set is not None:
            pulumi.set(__self__, "metrics_downlink_speed_set", metrics_downlink_speed_set)
        if metrics_info_at_capacity is not None:
            pulumi.set(__self__, "metrics_info_at_capacity", metrics_info_at_capacity)
        if metrics_info_link_status is not None:
            pulumi.set(__self__, "metrics_info_link_status", metrics_info_link_status)
        if metrics_info_symmetric is not None:
            pulumi.set(__self__, "metrics_info_symmetric", metrics_info_symmetric)
        if metrics_measurement is not None:
            pulumi.set(__self__, "metrics_measurement", metrics_measurement)
        if metrics_measurement_set is not None:
            pulumi.set(__self__, "metrics_measurement_set", metrics_measurement_set)
        if metrics_status is not None:
            pulumi.set(__self__, "metrics_status", metrics_status)
        if metrics_uplink_load is not None:
            pulumi.set(__self__, "metrics_uplink_load", metrics_uplink_load)
        if metrics_uplink_load_set is not None:
            pulumi.set(__self__, "metrics_uplink_load_set", metrics_uplink_load_set)
        if metrics_uplink_speed is not None:
            pulumi.set(__self__, "metrics_uplink_speed", metrics_uplink_speed)
        if metrics_uplink_speed_set is not None:
            pulumi.set(__self__, "metrics_uplink_speed_set", metrics_uplink_speed_set)
        if nai_realm_list is not None:
            pulumi.set(__self__, "nai_realm_list", nai_realm_list)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if roaming_consortium_list is not None:
            pulumi.set(__self__, "roaming_consortium_list", roaming_consortium_list)
        if venue_group is not None:
            pulumi.set(__self__, "venue_group", venue_group)
        if venue_name is not None:
            pulumi.set(__self__, "venue_name", venue_name)
        if venue_type is not None:
            pulumi.set(__self__, "venue_type", venue_type)

    @property
    @pulumi.getter
    def capab(self) -> Optional[Sequence['outputs.WLANCapab']]:
        return pulumi.get(self, "capab")

    @property
    @pulumi.getter(name="cellularNetworkList")
    def cellular_network_list(self) -> Optional[Sequence['outputs.WLANCellularNetworkList']]:
        return pulumi.get(self, "cellular_network_list")

    @property
    @pulumi.getter(name="domainNameList")
    def domain_name_list(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "domain_name_list")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[Sequence['outputs.WLANFriendlyName']]:
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter(name="ipaddrTypeAvailV4")
    def ipaddr_type_avail_v4(self) -> Optional[builtins.int]:
        return pulumi.get(self, "ipaddr_type_avail_v4")

    @property
    @pulumi.getter(name="ipaddrTypeAvailV6")
    def ipaddr_type_avail_v6(self) -> Optional[builtins.int]:
        return pulumi.get(self, "ipaddr_type_avail_v6")

    @property
    @pulumi.getter(name="metricsDownlinkLoad")
    def metrics_downlink_load(self) -> Optional[builtins.int]:
        return pulumi.get(self, "metrics_downlink_load")

    @property
    @pulumi.getter(name="metricsDownlinkLoadSet")
    def metrics_downlink_load_set(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "metrics_downlink_load_set")

    @property
    @pulumi.getter(name="metricsDownlinkSpeed")
    def metrics_downlink_speed(self) -> Optional[builtins.int]:
        return pulumi.get(self, "metrics_downlink_speed")

    @property
    @pulumi.getter(name="metricsDownlinkSpeedSet")
    def metrics_downlink_speed_set(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "metrics_downlink_speed_set")

    @property
    @pulumi.getter(name="metricsInfoAtCapacity")
    def metrics_info_at_capacity(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "metrics_info_at_capacity")

    @property
    @pulumi.getter(name="metricsInfoLinkStatus")
    def metrics_info_link_status(self) -> Optional[builtins.str]:
        return pulumi.get(self, "metrics_info_link_status")

    @property
    @pulumi.getter(name="metricsInfoSymmetric")
    def metrics_info_symmetric(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "metrics_info_symmetric")

    @property
    @pulumi.getter(name="metricsMeasurement")
    def metrics_measurement(self) -> Optional[builtins.int]:
        return pulumi.get(self, "metrics_measurement")

    @property
    @pulumi.getter(name="metricsMeasurementSet")
    def metrics_measurement_set(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "metrics_measurement_set")

    @property
    @pulumi.getter(name="metricsStatus")
    def metrics_status(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "metrics_status")

    @property
    @pulumi.getter(name="metricsUplinkLoad")
    def metrics_uplink_load(self) -> Optional[builtins.int]:
        return pulumi.get(self, "metrics_uplink_load")

    @property
    @pulumi.getter(name="metricsUplinkLoadSet")
    def metrics_uplink_load_set(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "metrics_uplink_load_set")

    @property
    @pulumi.getter(name="metricsUplinkSpeed")
    def metrics_uplink_speed(self) -> Optional[builtins.int]:
        return pulumi.get(self, "metrics_uplink_speed")

    @property
    @pulumi.getter(name="metricsUplinkSpeedSet")
    def metrics_uplink_speed_set(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "metrics_uplink_speed_set")

    @property
    @pulumi.getter(name="naiRealmList")
    def nai_realm_list(self) -> Optional[Sequence['outputs.WLANNaiRealmList']]:
        return pulumi.get(self, "nai_realm_list")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[builtins.int]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="roamingConsortiumList")
    def roaming_consortium_list(self) -> Optional[Sequence['outputs.WLANRoamingConsortiumList']]:
        return pulumi.get(self, "roaming_consortium_list")

    @property
    @pulumi.getter(name="venueGroup")
    def venue_group(self) -> Optional[builtins.int]:
        return pulumi.get(self, "venue_group")

    @property
    @pulumi.getter(name="venueName")
    def venue_name(self) -> Optional[Sequence['outputs.WLANVenueName']]:
        return pulumi.get(self, "venue_name")

    @property
    @pulumi.getter(name="venueType")
    def venue_type(self) -> Optional[builtins.int]:
        return pulumi.get(self, "venue_type")


@pulumi.output_type
class WLANNaiRealmList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authIds":
            suggest = "auth_ids"
        elif key == "authVals":
            suggest = "auth_vals"
        elif key == "eapMethod":
            suggest = "eap_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WLANNaiRealmList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WLANNaiRealmList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WLANNaiRealmList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_ids: Optional[Sequence[builtins.int]] = None,
                 auth_vals: Optional[Sequence[builtins.int]] = None,
                 eap_method: Optional[builtins.int] = None,
                 encoding: Optional[builtins.int] = None,
                 name: Optional[builtins.str] = None,
                 status: Optional[builtins.bool] = None):
        if auth_ids is not None:
            pulumi.set(__self__, "auth_ids", auth_ids)
        if auth_vals is not None:
            pulumi.set(__self__, "auth_vals", auth_vals)
        if eap_method is not None:
            pulumi.set(__self__, "eap_method", eap_method)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="authIds")
    def auth_ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "auth_ids")

    @property
    @pulumi.getter(name="authVals")
    def auth_vals(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "auth_vals")

    @property
    @pulumi.getter(name="eapMethod")
    def eap_method(self) -> Optional[builtins.int]:
        return pulumi.get(self, "eap_method")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[builtins.int]:
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "status")


@pulumi.output_type
class WLANPrivatePresharedKeys(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkconfId":
            suggest = "networkconf_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WLANPrivatePresharedKeys. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WLANPrivatePresharedKeys.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WLANPrivatePresharedKeys.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 networkconf_id: Optional[builtins.str] = None,
                 password: Optional[builtins.str] = None):
        if networkconf_id is not None:
            pulumi.set(__self__, "networkconf_id", networkconf_id)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="networkconfId")
    def networkconf_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "networkconf_id")

    @property
    @pulumi.getter
    def password(self) -> Optional[builtins.str]:
        return pulumi.get(self, "password")


@pulumi.output_type
class WLANRoamingConsortiumList(dict):
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 oid: Optional[builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oid is not None:
            pulumi.set(__self__, "oid", oid)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def oid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "oid")


@pulumi.output_type
class WLANSaePsk(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 mac: Optional[builtins.str] = None,
                 psk: Optional[builtins.str] = None,
                 vlan: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if psk is not None:
            pulumi.set(__self__, "psk", psk)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def psk(self) -> Optional[builtins.str]:
        return pulumi.get(self, "psk")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[builtins.int]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class WLANScheduleWithDuration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationMinutes":
            suggest = "duration_minutes"
        elif key == "startDaysOfWeek":
            suggest = "start_days_of_week"
        elif key == "startHour":
            suggest = "start_hour"
        elif key == "startMinute":
            suggest = "start_minute"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WLANScheduleWithDuration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WLANScheduleWithDuration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WLANScheduleWithDuration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_minutes: Optional[builtins.int] = None,
                 name: Optional[builtins.str] = None,
                 start_days_of_week: Optional[Sequence[builtins.str]] = None,
                 start_hour: Optional[builtins.int] = None,
                 start_minute: Optional[builtins.int] = None):
        if duration_minutes is not None:
            pulumi.set(__self__, "duration_minutes", duration_minutes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start_days_of_week is not None:
            pulumi.set(__self__, "start_days_of_week", start_days_of_week)
        if start_hour is not None:
            pulumi.set(__self__, "start_hour", start_hour)
        if start_minute is not None:
            pulumi.set(__self__, "start_minute", start_minute)

    @property
    @pulumi.getter(name="durationMinutes")
    def duration_minutes(self) -> Optional[builtins.int]:
        return pulumi.get(self, "duration_minutes")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startDaysOfWeek")
    def start_days_of_week(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "start_days_of_week")

    @property
    @pulumi.getter(name="startHour")
    def start_hour(self) -> Optional[builtins.int]:
        return pulumi.get(self, "start_hour")

    @property
    @pulumi.getter(name="startMinute")
    def start_minute(self) -> Optional[builtins.int]:
        return pulumi.get(self, "start_minute")


@pulumi.output_type
class WLANVenueName(dict):
    def __init__(__self__, *,
                 language: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 url: Optional[builtins.str] = None):
        if language is not None:
            pulumi.set(__self__, "language", language)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def language(self) -> Optional[builtins.str]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class Wlan(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 ap_group_ids: Optional[Sequence[builtins.str]] = None,
                 ap_group_mode: Optional[builtins.str] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 auth_cache: Optional[builtins.bool] = None,
                 b_supported: Optional[builtins.bool] = None,
                 bc_filter_enabled: Optional[builtins.bool] = None,
                 bc_filter_list: Optional[Sequence[builtins.str]] = None,
                 bss_transition: Optional[builtins.bool] = None,
                 country_beacon: Optional[builtins.bool] = None,
                 dpi_enabled: Optional[builtins.bool] = None,
                 dpigroup_id: Optional[builtins.str] = None,
                 dtim6e: Optional[builtins.int] = None,
                 dtim_mode: Optional[builtins.str] = None,
                 dtim_na: Optional[builtins.int] = None,
                 dtim_ng: Optional[builtins.int] = None,
                 element_adopt: Optional[builtins.bool] = None,
                 enabled: Optional[builtins.bool] = None,
                 enhanced_iot: Optional[builtins.bool] = None,
                 fast_roaming_enabled: Optional[builtins.bool] = None,
                 group_rekey: Optional[builtins.int] = None,
                 hide_ssid: Optional[builtins.bool] = None,
                 hotspot2: Optional['outputs.WLANHotspot2'] = None,
                 hotspot2conf_enabled: Optional[builtins.bool] = None,
                 iapp_enabled: Optional[builtins.bool] = None,
                 is_guest: Optional[builtins.bool] = None,
                 l2_isolation: Optional[builtins.bool] = None,
                 log_level: Optional[builtins.str] = None,
                 mac_filter_enabled: Optional[builtins.bool] = None,
                 mac_filter_list: Optional[Sequence[builtins.str]] = None,
                 mac_filter_policy: Optional[builtins.str] = None,
                 mcastenhance_enabled: Optional[builtins.bool] = None,
                 minrate_na_advertising_rates: Optional[builtins.bool] = None,
                 minrate_na_data_rate_kbps: Optional[builtins.int] = None,
                 minrate_na_enabled: Optional[builtins.bool] = None,
                 minrate_ng_advertising_rates: Optional[builtins.bool] = None,
                 minrate_ng_data_rate_kbps: Optional[builtins.int] = None,
                 minrate_ng_enabled: Optional[builtins.bool] = None,
                 minrate_setting_preference: Optional[builtins.str] = None,
                 mlo_enabled: Optional[builtins.bool] = None,
                 name: Optional[builtins.str] = None,
                 name_combine_enabled: Optional[builtins.bool] = None,
                 name_combine_suffix: Optional[builtins.str] = None,
                 nas_identifier: Optional[builtins.str] = None,
                 nas_identifier_type: Optional[builtins.str] = None,
                 networkconf_id: Optional[builtins.str] = None,
                 no2ghz_oui: Optional[builtins.bool] = None,
                 optimize_iot_wifi_connectivity: Optional[builtins.bool] = None,
                 p2p: Optional[builtins.bool] = None,
                 p2p_cross_connect: Optional[builtins.bool] = None,
                 pmf_cipher: Optional[builtins.str] = None,
                 pmf_mode: Optional[builtins.str] = None,
                 priority: Optional[builtins.str] = None,
                 private_preshared_keys: Optional[Sequence['outputs.WLANPrivatePresharedKeys']] = None,
                 private_preshared_keys_enabled: Optional[builtins.bool] = None,
                 proxy_arp: Optional[builtins.bool] = None,
                 radius_das_enabled: Optional[builtins.bool] = None,
                 radius_mac_auth_enabled: Optional[builtins.bool] = None,
                 radius_macacl_empty_password: Optional[builtins.bool] = None,
                 radius_macacl_format: Optional[builtins.str] = None,
                 radiusprofile_id: Optional[builtins.str] = None,
                 roam_cluster_id: Optional[builtins.int] = None,
                 rrm_enabled: Optional[builtins.bool] = None,
                 sae_anti_clogging: Optional[builtins.int] = None,
                 sae_groups: Optional[Sequence[builtins.int]] = None,
                 sae_psk: Optional[Sequence['outputs.WLANSaePsk']] = None,
                 sae_psk_vlan_required: Optional[builtins.bool] = None,
                 sae_sync: Optional[builtins.int] = None,
                 schedule: Optional[Sequence[builtins.str]] = None,
                 schedule_enabled: Optional[builtins.bool] = None,
                 schedule_reversed: Optional[builtins.bool] = None,
                 schedule_with_duration: Optional[Sequence['outputs.WLANScheduleWithDuration']] = None,
                 security: Optional[builtins.str] = None,
                 setting_preference: Optional[builtins.str] = None,
                 site_id: Optional[builtins.str] = None,
                 tdls_prohibit: Optional[builtins.bool] = None,
                 uapsd_enabled: Optional[builtins.bool] = None,
                 uid_workspace_url: Optional[builtins.str] = None,
                 usergroup_id: Optional[builtins.str] = None,
                 vlan: Optional[builtins.int] = None,
                 vlan_enabled: Optional[builtins.bool] = None,
                 wep_idx: Optional[builtins.int] = None,
                 wlan_band: Optional[builtins.str] = None,
                 wlan_bands: Optional[Sequence[builtins.str]] = None,
                 wlangroup_id: Optional[builtins.str] = None,
                 wpa3_enhanced192: Optional[builtins.bool] = None,
                 wpa3_fast_roaming: Optional[builtins.bool] = None,
                 wpa3_support: Optional[builtins.bool] = None,
                 wpa3_transition: Optional[builtins.bool] = None,
                 wpa_enc: Optional[builtins.str] = None,
                 wpa_mode: Optional[builtins.str] = None,
                 wpa_psk_radius: Optional[builtins.str] = None,
                 x_iapp_key: Optional[builtins.str] = None,
                 x_passphrase: Optional[builtins.str] = None,
                 x_wep: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ap_group_ids is not None:
            pulumi.set(__self__, "ap_group_ids", ap_group_ids)
        if ap_group_mode is not None:
            pulumi.set(__self__, "ap_group_mode", ap_group_mode)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if auth_cache is not None:
            pulumi.set(__self__, "auth_cache", auth_cache)
        if b_supported is not None:
            pulumi.set(__self__, "b_supported", b_supported)
        if bc_filter_enabled is not None:
            pulumi.set(__self__, "bc_filter_enabled", bc_filter_enabled)
        if bc_filter_list is not None:
            pulumi.set(__self__, "bc_filter_list", bc_filter_list)
        if bss_transition is not None:
            pulumi.set(__self__, "bss_transition", bss_transition)
        if country_beacon is not None:
            pulumi.set(__self__, "country_beacon", country_beacon)
        if dpi_enabled is not None:
            pulumi.set(__self__, "dpi_enabled", dpi_enabled)
        if dpigroup_id is not None:
            pulumi.set(__self__, "dpigroup_id", dpigroup_id)
        if dtim6e is not None:
            pulumi.set(__self__, "dtim6e", dtim6e)
        if dtim_mode is not None:
            pulumi.set(__self__, "dtim_mode", dtim_mode)
        if dtim_na is not None:
            pulumi.set(__self__, "dtim_na", dtim_na)
        if dtim_ng is not None:
            pulumi.set(__self__, "dtim_ng", dtim_ng)
        if element_adopt is not None:
            pulumi.set(__self__, "element_adopt", element_adopt)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enhanced_iot is not None:
            pulumi.set(__self__, "enhanced_iot", enhanced_iot)
        if fast_roaming_enabled is not None:
            pulumi.set(__self__, "fast_roaming_enabled", fast_roaming_enabled)
        if group_rekey is not None:
            pulumi.set(__self__, "group_rekey", group_rekey)
        if hide_ssid is not None:
            pulumi.set(__self__, "hide_ssid", hide_ssid)
        if hotspot2 is not None:
            pulumi.set(__self__, "hotspot2", hotspot2)
        if hotspot2conf_enabled is not None:
            pulumi.set(__self__, "hotspot2conf_enabled", hotspot2conf_enabled)
        if iapp_enabled is not None:
            pulumi.set(__self__, "iapp_enabled", iapp_enabled)
        if is_guest is not None:
            pulumi.set(__self__, "is_guest", is_guest)
        if l2_isolation is not None:
            pulumi.set(__self__, "l2_isolation", l2_isolation)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if mac_filter_enabled is not None:
            pulumi.set(__self__, "mac_filter_enabled", mac_filter_enabled)
        if mac_filter_list is not None:
            pulumi.set(__self__, "mac_filter_list", mac_filter_list)
        if mac_filter_policy is not None:
            pulumi.set(__self__, "mac_filter_policy", mac_filter_policy)
        if mcastenhance_enabled is not None:
            pulumi.set(__self__, "mcastenhance_enabled", mcastenhance_enabled)
        if minrate_na_advertising_rates is not None:
            pulumi.set(__self__, "minrate_na_advertising_rates", minrate_na_advertising_rates)
        if minrate_na_data_rate_kbps is not None:
            pulumi.set(__self__, "minrate_na_data_rate_kbps", minrate_na_data_rate_kbps)
        if minrate_na_enabled is not None:
            pulumi.set(__self__, "minrate_na_enabled", minrate_na_enabled)
        if minrate_ng_advertising_rates is not None:
            pulumi.set(__self__, "minrate_ng_advertising_rates", minrate_ng_advertising_rates)
        if minrate_ng_data_rate_kbps is not None:
            pulumi.set(__self__, "minrate_ng_data_rate_kbps", minrate_ng_data_rate_kbps)
        if minrate_ng_enabled is not None:
            pulumi.set(__self__, "minrate_ng_enabled", minrate_ng_enabled)
        if minrate_setting_preference is not None:
            pulumi.set(__self__, "minrate_setting_preference", minrate_setting_preference)
        if mlo_enabled is not None:
            pulumi.set(__self__, "mlo_enabled", mlo_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_combine_enabled is not None:
            pulumi.set(__self__, "name_combine_enabled", name_combine_enabled)
        if name_combine_suffix is not None:
            pulumi.set(__self__, "name_combine_suffix", name_combine_suffix)
        if nas_identifier is not None:
            pulumi.set(__self__, "nas_identifier", nas_identifier)
        if nas_identifier_type is not None:
            pulumi.set(__self__, "nas_identifier_type", nas_identifier_type)
        if networkconf_id is not None:
            pulumi.set(__self__, "networkconf_id", networkconf_id)
        if no2ghz_oui is not None:
            pulumi.set(__self__, "no2ghz_oui", no2ghz_oui)
        if optimize_iot_wifi_connectivity is not None:
            pulumi.set(__self__, "optimize_iot_wifi_connectivity", optimize_iot_wifi_connectivity)
        if p2p is not None:
            pulumi.set(__self__, "p2p", p2p)
        if p2p_cross_connect is not None:
            pulumi.set(__self__, "p2p_cross_connect", p2p_cross_connect)
        if pmf_cipher is not None:
            pulumi.set(__self__, "pmf_cipher", pmf_cipher)
        if pmf_mode is not None:
            pulumi.set(__self__, "pmf_mode", pmf_mode)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if private_preshared_keys is not None:
            pulumi.set(__self__, "private_preshared_keys", private_preshared_keys)
        if private_preshared_keys_enabled is not None:
            pulumi.set(__self__, "private_preshared_keys_enabled", private_preshared_keys_enabled)
        if proxy_arp is not None:
            pulumi.set(__self__, "proxy_arp", proxy_arp)
        if radius_das_enabled is not None:
            pulumi.set(__self__, "radius_das_enabled", radius_das_enabled)
        if radius_mac_auth_enabled is not None:
            pulumi.set(__self__, "radius_mac_auth_enabled", radius_mac_auth_enabled)
        if radius_macacl_empty_password is not None:
            pulumi.set(__self__, "radius_macacl_empty_password", radius_macacl_empty_password)
        if radius_macacl_format is not None:
            pulumi.set(__self__, "radius_macacl_format", radius_macacl_format)
        if radiusprofile_id is not None:
            pulumi.set(__self__, "radiusprofile_id", radiusprofile_id)
        if roam_cluster_id is not None:
            pulumi.set(__self__, "roam_cluster_id", roam_cluster_id)
        if rrm_enabled is not None:
            pulumi.set(__self__, "rrm_enabled", rrm_enabled)
        if sae_anti_clogging is not None:
            pulumi.set(__self__, "sae_anti_clogging", sae_anti_clogging)
        if sae_groups is not None:
            pulumi.set(__self__, "sae_groups", sae_groups)
        if sae_psk is not None:
            pulumi.set(__self__, "sae_psk", sae_psk)
        if sae_psk_vlan_required is not None:
            pulumi.set(__self__, "sae_psk_vlan_required", sae_psk_vlan_required)
        if sae_sync is not None:
            pulumi.set(__self__, "sae_sync", sae_sync)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if schedule_enabled is not None:
            pulumi.set(__self__, "schedule_enabled", schedule_enabled)
        if schedule_reversed is not None:
            pulumi.set(__self__, "schedule_reversed", schedule_reversed)
        if schedule_with_duration is not None:
            pulumi.set(__self__, "schedule_with_duration", schedule_with_duration)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if setting_preference is not None:
            pulumi.set(__self__, "setting_preference", setting_preference)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if tdls_prohibit is not None:
            pulumi.set(__self__, "tdls_prohibit", tdls_prohibit)
        if uapsd_enabled is not None:
            pulumi.set(__self__, "uapsd_enabled", uapsd_enabled)
        if uid_workspace_url is not None:
            pulumi.set(__self__, "uid_workspace_url", uid_workspace_url)
        if usergroup_id is not None:
            pulumi.set(__self__, "usergroup_id", usergroup_id)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vlan_enabled is not None:
            pulumi.set(__self__, "vlan_enabled", vlan_enabled)
        if wep_idx is not None:
            pulumi.set(__self__, "wep_idx", wep_idx)
        if wlan_band is not None:
            pulumi.set(__self__, "wlan_band", wlan_band)
        if wlan_bands is not None:
            pulumi.set(__self__, "wlan_bands", wlan_bands)
        if wlangroup_id is not None:
            pulumi.set(__self__, "wlangroup_id", wlangroup_id)
        if wpa3_enhanced192 is not None:
            pulumi.set(__self__, "wpa3_enhanced192", wpa3_enhanced192)
        if wpa3_fast_roaming is not None:
            pulumi.set(__self__, "wpa3_fast_roaming", wpa3_fast_roaming)
        if wpa3_support is not None:
            pulumi.set(__self__, "wpa3_support", wpa3_support)
        if wpa3_transition is not None:
            pulumi.set(__self__, "wpa3_transition", wpa3_transition)
        if wpa_enc is not None:
            pulumi.set(__self__, "wpa_enc", wpa_enc)
        if wpa_mode is not None:
            pulumi.set(__self__, "wpa_mode", wpa_mode)
        if wpa_psk_radius is not None:
            pulumi.set(__self__, "wpa_psk_radius", wpa_psk_radius)
        if x_iapp_key is not None:
            pulumi.set(__self__, "x_iapp_key", x_iapp_key)
        if x_passphrase is not None:
            pulumi.set(__self__, "x_passphrase", x_passphrase)
        if x_wep is not None:
            pulumi.set(__self__, "x_wep", x_wep)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="apGroupIds")
    def ap_group_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "ap_group_ids")

    @property
    @pulumi.getter(name="apGroupMode")
    def ap_group_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ap_group_mode")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="authCache")
    def auth_cache(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "auth_cache")

    @property
    @pulumi.getter(name="bSupported")
    def b_supported(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "b_supported")

    @property
    @pulumi.getter(name="bcFilterEnabled")
    def bc_filter_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "bc_filter_enabled")

    @property
    @pulumi.getter(name="bcFilterList")
    def bc_filter_list(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "bc_filter_list")

    @property
    @pulumi.getter(name="bssTransition")
    def bss_transition(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "bss_transition")

    @property
    @pulumi.getter(name="countryBeacon")
    def country_beacon(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "country_beacon")

    @property
    @pulumi.getter(name="dpiEnabled")
    def dpi_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dpi_enabled")

    @property
    @pulumi.getter(name="dpigroupId")
    def dpigroup_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dpigroup_id")

    @property
    @pulumi.getter
    def dtim6e(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dtim6e")

    @property
    @pulumi.getter(name="dtimMode")
    def dtim_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dtim_mode")

    @property
    @pulumi.getter(name="dtimNa")
    def dtim_na(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dtim_na")

    @property
    @pulumi.getter(name="dtimNg")
    def dtim_ng(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dtim_ng")

    @property
    @pulumi.getter(name="elementAdopt")
    def element_adopt(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "element_adopt")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="enhancedIot")
    def enhanced_iot(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enhanced_iot")

    @property
    @pulumi.getter(name="fastRoamingEnabled")
    def fast_roaming_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "fast_roaming_enabled")

    @property
    @pulumi.getter(name="groupRekey")
    def group_rekey(self) -> Optional[builtins.int]:
        return pulumi.get(self, "group_rekey")

    @property
    @pulumi.getter(name="hideSsid")
    def hide_ssid(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "hide_ssid")

    @property
    @pulumi.getter
    def hotspot2(self) -> Optional['outputs.WLANHotspot2']:
        return pulumi.get(self, "hotspot2")

    @property
    @pulumi.getter(name="hotspot2confEnabled")
    def hotspot2conf_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "hotspot2conf_enabled")

    @property
    @pulumi.getter(name="iappEnabled")
    def iapp_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "iapp_enabled")

    @property
    @pulumi.getter(name="isGuest")
    def is_guest(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "is_guest")

    @property
    @pulumi.getter(name="l2Isolation")
    def l2_isolation(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "l2_isolation")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[builtins.str]:
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter(name="macFilterEnabled")
    def mac_filter_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "mac_filter_enabled")

    @property
    @pulumi.getter(name="macFilterList")
    def mac_filter_list(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "mac_filter_list")

    @property
    @pulumi.getter(name="macFilterPolicy")
    def mac_filter_policy(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac_filter_policy")

    @property
    @pulumi.getter(name="mcastenhanceEnabled")
    def mcastenhance_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "mcastenhance_enabled")

    @property
    @pulumi.getter(name="minrateNaAdvertisingRates")
    def minrate_na_advertising_rates(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "minrate_na_advertising_rates")

    @property
    @pulumi.getter(name="minrateNaDataRateKbps")
    def minrate_na_data_rate_kbps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "minrate_na_data_rate_kbps")

    @property
    @pulumi.getter(name="minrateNaEnabled")
    def minrate_na_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "minrate_na_enabled")

    @property
    @pulumi.getter(name="minrateNgAdvertisingRates")
    def minrate_ng_advertising_rates(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "minrate_ng_advertising_rates")

    @property
    @pulumi.getter(name="minrateNgDataRateKbps")
    def minrate_ng_data_rate_kbps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "minrate_ng_data_rate_kbps")

    @property
    @pulumi.getter(name="minrateNgEnabled")
    def minrate_ng_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "minrate_ng_enabled")

    @property
    @pulumi.getter(name="minrateSettingPreference")
    def minrate_setting_preference(self) -> Optional[builtins.str]:
        return pulumi.get(self, "minrate_setting_preference")

    @property
    @pulumi.getter(name="mloEnabled")
    def mlo_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "mlo_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCombineEnabled")
    def name_combine_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "name_combine_enabled")

    @property
    @pulumi.getter(name="nameCombineSuffix")
    def name_combine_suffix(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name_combine_suffix")

    @property
    @pulumi.getter(name="nasIdentifier")
    def nas_identifier(self) -> Optional[builtins.str]:
        return pulumi.get(self, "nas_identifier")

    @property
    @pulumi.getter(name="nasIdentifierType")
    def nas_identifier_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "nas_identifier_type")

    @property
    @pulumi.getter(name="networkconfId")
    def networkconf_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "networkconf_id")

    @property
    @pulumi.getter(name="no2ghzOui")
    def no2ghz_oui(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "no2ghz_oui")

    @property
    @pulumi.getter(name="optimizeIotWifiConnectivity")
    def optimize_iot_wifi_connectivity(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "optimize_iot_wifi_connectivity")

    @property
    @pulumi.getter
    def p2p(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "p2p")

    @property
    @pulumi.getter(name="p2pCrossConnect")
    def p2p_cross_connect(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "p2p_cross_connect")

    @property
    @pulumi.getter(name="pmfCipher")
    def pmf_cipher(self) -> Optional[builtins.str]:
        return pulumi.get(self, "pmf_cipher")

    @property
    @pulumi.getter(name="pmfMode")
    def pmf_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "pmf_mode")

    @property
    @pulumi.getter
    def priority(self) -> Optional[builtins.str]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="privatePresharedKeys")
    def private_preshared_keys(self) -> Optional[Sequence['outputs.WLANPrivatePresharedKeys']]:
        return pulumi.get(self, "private_preshared_keys")

    @property
    @pulumi.getter(name="privatePresharedKeysEnabled")
    def private_preshared_keys_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "private_preshared_keys_enabled")

    @property
    @pulumi.getter(name="proxyArp")
    def proxy_arp(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "proxy_arp")

    @property
    @pulumi.getter(name="radiusDasEnabled")
    def radius_das_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "radius_das_enabled")

    @property
    @pulumi.getter(name="radiusMacAuthEnabled")
    def radius_mac_auth_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "radius_mac_auth_enabled")

    @property
    @pulumi.getter(name="radiusMacaclEmptyPassword")
    def radius_macacl_empty_password(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "radius_macacl_empty_password")

    @property
    @pulumi.getter(name="radiusMacaclFormat")
    def radius_macacl_format(self) -> Optional[builtins.str]:
        return pulumi.get(self, "radius_macacl_format")

    @property
    @pulumi.getter(name="radiusprofileId")
    def radiusprofile_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "radiusprofile_id")

    @property
    @pulumi.getter(name="roamClusterId")
    def roam_cluster_id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "roam_cluster_id")

    @property
    @pulumi.getter(name="rrmEnabled")
    def rrm_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "rrm_enabled")

    @property
    @pulumi.getter(name="saeAntiClogging")
    def sae_anti_clogging(self) -> Optional[builtins.int]:
        return pulumi.get(self, "sae_anti_clogging")

    @property
    @pulumi.getter(name="saeGroups")
    def sae_groups(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "sae_groups")

    @property
    @pulumi.getter(name="saePsk")
    def sae_psk(self) -> Optional[Sequence['outputs.WLANSaePsk']]:
        return pulumi.get(self, "sae_psk")

    @property
    @pulumi.getter(name="saePskVlanRequired")
    def sae_psk_vlan_required(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "sae_psk_vlan_required")

    @property
    @pulumi.getter(name="saeSync")
    def sae_sync(self) -> Optional[builtins.int]:
        return pulumi.get(self, "sae_sync")

    @property
    @pulumi.getter
    def schedule(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="scheduleEnabled")
    def schedule_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "schedule_enabled")

    @property
    @pulumi.getter(name="scheduleReversed")
    def schedule_reversed(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "schedule_reversed")

    @property
    @pulumi.getter(name="scheduleWithDuration")
    def schedule_with_duration(self) -> Optional[Sequence['outputs.WLANScheduleWithDuration']]:
        return pulumi.get(self, "schedule_with_duration")

    @property
    @pulumi.getter
    def security(self) -> Optional[builtins.str]:
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> Optional[builtins.str]:
        return pulumi.get(self, "setting_preference")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="tdlsProhibit")
    def tdls_prohibit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "tdls_prohibit")

    @property
    @pulumi.getter(name="uapsdEnabled")
    def uapsd_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "uapsd_enabled")

    @property
    @pulumi.getter(name="uidWorkspaceUrl")
    def uid_workspace_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "uid_workspace_url")

    @property
    @pulumi.getter(name="usergroupId")
    def usergroup_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "usergroup_id")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[builtins.int]:
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="vlanEnabled")
    def vlan_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "vlan_enabled")

    @property
    @pulumi.getter(name="wepIdx")
    def wep_idx(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wep_idx")

    @property
    @pulumi.getter(name="wlanBand")
    def wlan_band(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wlan_band")

    @property
    @pulumi.getter(name="wlanBands")
    def wlan_bands(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "wlan_bands")

    @property
    @pulumi.getter(name="wlangroupId")
    def wlangroup_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wlangroup_id")

    @property
    @pulumi.getter(name="wpa3Enhanced192")
    def wpa3_enhanced192(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "wpa3_enhanced192")

    @property
    @pulumi.getter(name="wpa3FastRoaming")
    def wpa3_fast_roaming(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "wpa3_fast_roaming")

    @property
    @pulumi.getter(name="wpa3Support")
    def wpa3_support(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "wpa3_support")

    @property
    @pulumi.getter(name="wpa3Transition")
    def wpa3_transition(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "wpa3_transition")

    @property
    @pulumi.getter(name="wpaEnc")
    def wpa_enc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wpa_enc")

    @property
    @pulumi.getter(name="wpaMode")
    def wpa_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wpa_mode")

    @property
    @pulumi.getter(name="wpaPskRadius")
    def wpa_psk_radius(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wpa_psk_radius")

    @property
    @pulumi.getter(name="xIappKey")
    def x_iapp_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_iapp_key")

    @property
    @pulumi.getter(name="xPassphrase")
    def x_passphrase(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_passphrase")

    @property
    @pulumi.getter(name="xWep")
    def x_wep(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_wep")


