# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ActiveWanProviderCapabilitieArgs', 'ActiveWanProviderCapabilitie']

@pulumi.input_type
class ActiveWanProviderCapabilitieArgs:
    def __init__(__self__, *,
                 download_kilobits_per_second: pulumi.Input[builtins.int],
                 upload_kilobits_per_second: pulumi.Input[builtins.int],
                 site_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a ActiveWanProviderCapabilitie resource.
        """
        pulumi.set(__self__, "download_kilobits_per_second", download_kilobits_per_second)
        pulumi.set(__self__, "upload_kilobits_per_second", upload_kilobits_per_second)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)

    @property
    @pulumi.getter(name="downloadKilobitsPerSecond")
    def download_kilobits_per_second(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "download_kilobits_per_second")

    @download_kilobits_per_second.setter
    def download_kilobits_per_second(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "download_kilobits_per_second", value)

    @property
    @pulumi.getter(name="uploadKilobitsPerSecond")
    def upload_kilobits_per_second(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "upload_kilobits_per_second")

    @upload_kilobits_per_second.setter
    def upload_kilobits_per_second(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "upload_kilobits_per_second", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)


@pulumi.type_token("unifi-native:provider-capabilities:ActiveWanProviderCapabilitie")
class ActiveWanProviderCapabilitie(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 download_kilobits_per_second: Optional[pulumi.Input[builtins.int]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 upload_kilobits_per_second: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        """
        Create a ActiveWanProviderCapabilitie resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ActiveWanProviderCapabilitieArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ActiveWanProviderCapabilitie resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ActiveWanProviderCapabilitieArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ActiveWanProviderCapabilitieArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 download_kilobits_per_second: Optional[pulumi.Input[builtins.int]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 upload_kilobits_per_second: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ActiveWanProviderCapabilitieArgs.__new__(ActiveWanProviderCapabilitieArgs)

            if download_kilobits_per_second is None and not opts.urn:
                raise TypeError("Missing required property 'download_kilobits_per_second'")
            __props__.__dict__["download_kilobits_per_second"] = download_kilobits_per_second
            __props__.__dict__["site_name"] = site_name
            if upload_kilobits_per_second is None and not opts.urn:
                raise TypeError("Missing required property 'upload_kilobits_per_second'")
            __props__.__dict__["upload_kilobits_per_second"] = upload_kilobits_per_second
        super(ActiveWanProviderCapabilitie, __self__).__init__(
            'unifi-native:provider-capabilities:ActiveWanProviderCapabilitie',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ActiveWanProviderCapabilitie':
        """
        Get an existing ActiveWanProviderCapabilitie resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ActiveWanProviderCapabilitieArgs.__new__(ActiveWanProviderCapabilitieArgs)

        __props__.__dict__["download_kilobits_per_second"] = None
        __props__.__dict__["upload_kilobits_per_second"] = None
        return ActiveWanProviderCapabilitie(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="downloadKilobitsPerSecond")
    def download_kilobits_per_second(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "download_kilobits_per_second")

    @property
    @pulumi.getter(name="uploadKilobitsPerSecond")
    def upload_kilobits_per_second(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "upload_kilobits_per_second")

