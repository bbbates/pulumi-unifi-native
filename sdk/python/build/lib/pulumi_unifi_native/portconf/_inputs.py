# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'PortProfileQOSMarkingArgs',
    'PortProfileQOSMarkingArgsDict',
    'PortProfileQOSMatchingArgs',
    'PortProfileQOSMatchingArgsDict',
    'PortProfileQOSPoliciesArgs',
    'PortProfileQOSPoliciesArgsDict',
    'PortProfileQOSProfileArgs',
    'PortProfileQOSProfileArgsDict',
]

MYPY = False

if not MYPY:
    class PortProfileQOSMarkingArgsDict(TypedDict):
        cos_code: NotRequired[pulumi.Input[builtins.int]]
        dscp_code: NotRequired[pulumi.Input[builtins.int]]
        ip_precedence_code: NotRequired[pulumi.Input[builtins.int]]
        queue: NotRequired[pulumi.Input[builtins.int]]
elif False:
    PortProfileQOSMarkingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PortProfileQOSMarkingArgs:
    def __init__(__self__, *,
                 cos_code: Optional[pulumi.Input[builtins.int]] = None,
                 dscp_code: Optional[pulumi.Input[builtins.int]] = None,
                 ip_precedence_code: Optional[pulumi.Input[builtins.int]] = None,
                 queue: Optional[pulumi.Input[builtins.int]] = None):
        if cos_code is not None:
            pulumi.set(__self__, "cos_code", cos_code)
        if dscp_code is not None:
            pulumi.set(__self__, "dscp_code", dscp_code)
        if ip_precedence_code is not None:
            pulumi.set(__self__, "ip_precedence_code", ip_precedence_code)
        if queue is not None:
            pulumi.set(__self__, "queue", queue)

    @property
    @pulumi.getter(name="cosCode")
    def cos_code(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "cos_code")

    @cos_code.setter
    def cos_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cos_code", value)

    @property
    @pulumi.getter(name="dscpCode")
    def dscp_code(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dscp_code")

    @dscp_code.setter
    def dscp_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dscp_code", value)

    @property
    @pulumi.getter(name="ipPrecedenceCode")
    def ip_precedence_code(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "ip_precedence_code")

    @ip_precedence_code.setter
    def ip_precedence_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ip_precedence_code", value)

    @property
    @pulumi.getter
    def queue(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "queue")

    @queue.setter
    def queue(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "queue", value)


if not MYPY:
    class PortProfileQOSMatchingArgsDict(TypedDict):
        cos_code: NotRequired[pulumi.Input[builtins.int]]
        dscp_code: NotRequired[pulumi.Input[builtins.int]]
        dst_port: NotRequired[pulumi.Input[builtins.int]]
        ip_precedence_code: NotRequired[pulumi.Input[builtins.int]]
        protocol: NotRequired[pulumi.Input[builtins.str]]
        src_port: NotRequired[pulumi.Input[builtins.int]]
elif False:
    PortProfileQOSMatchingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PortProfileQOSMatchingArgs:
    def __init__(__self__, *,
                 cos_code: Optional[pulumi.Input[builtins.int]] = None,
                 dscp_code: Optional[pulumi.Input[builtins.int]] = None,
                 dst_port: Optional[pulumi.Input[builtins.int]] = None,
                 ip_precedence_code: Optional[pulumi.Input[builtins.int]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 src_port: Optional[pulumi.Input[builtins.int]] = None):
        if cos_code is not None:
            pulumi.set(__self__, "cos_code", cos_code)
        if dscp_code is not None:
            pulumi.set(__self__, "dscp_code", dscp_code)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if ip_precedence_code is not None:
            pulumi.set(__self__, "ip_precedence_code", ip_precedence_code)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="cosCode")
    def cos_code(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "cos_code")

    @cos_code.setter
    def cos_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cos_code", value)

    @property
    @pulumi.getter(name="dscpCode")
    def dscp_code(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dscp_code")

    @dscp_code.setter
    def dscp_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dscp_code", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter(name="ipPrecedenceCode")
    def ip_precedence_code(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "ip_precedence_code")

    @ip_precedence_code.setter
    def ip_precedence_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ip_precedence_code", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "src_port", value)


if not MYPY:
    class PortProfileQOSPoliciesArgsDict(TypedDict):
        qos_marking: NotRequired[pulumi.Input['PortProfileQOSMarkingArgsDict']]
        qos_matching: NotRequired[pulumi.Input['PortProfileQOSMatchingArgsDict']]
elif False:
    PortProfileQOSPoliciesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PortProfileQOSPoliciesArgs:
    def __init__(__self__, *,
                 qos_marking: Optional[pulumi.Input['PortProfileQOSMarkingArgs']] = None,
                 qos_matching: Optional[pulumi.Input['PortProfileQOSMatchingArgs']] = None):
        if qos_marking is not None:
            pulumi.set(__self__, "qos_marking", qos_marking)
        if qos_matching is not None:
            pulumi.set(__self__, "qos_matching", qos_matching)

    @property
    @pulumi.getter(name="qosMarking")
    def qos_marking(self) -> Optional[pulumi.Input['PortProfileQOSMarkingArgs']]:
        return pulumi.get(self, "qos_marking")

    @qos_marking.setter
    def qos_marking(self, value: Optional[pulumi.Input['PortProfileQOSMarkingArgs']]):
        pulumi.set(self, "qos_marking", value)

    @property
    @pulumi.getter(name="qosMatching")
    def qos_matching(self) -> Optional[pulumi.Input['PortProfileQOSMatchingArgs']]:
        return pulumi.get(self, "qos_matching")

    @qos_matching.setter
    def qos_matching(self, value: Optional[pulumi.Input['PortProfileQOSMatchingArgs']]):
        pulumi.set(self, "qos_matching", value)


if not MYPY:
    class PortProfileQOSProfileArgsDict(TypedDict):
        qos_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['PortProfileQOSPoliciesArgsDict']]]]
        qos_profile_mode: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PortProfileQOSProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PortProfileQOSProfileArgs:
    def __init__(__self__, *,
                 qos_policies: Optional[pulumi.Input[Sequence[pulumi.Input['PortProfileQOSPoliciesArgs']]]] = None,
                 qos_profile_mode: Optional[pulumi.Input[builtins.str]] = None):
        if qos_policies is not None:
            pulumi.set(__self__, "qos_policies", qos_policies)
        if qos_profile_mode is not None:
            pulumi.set(__self__, "qos_profile_mode", qos_profile_mode)

    @property
    @pulumi.getter(name="qosPolicies")
    def qos_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortProfileQOSPoliciesArgs']]]]:
        return pulumi.get(self, "qos_policies")

    @qos_policies.setter
    def qos_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortProfileQOSPoliciesArgs']]]]):
        pulumi.set(self, "qos_policies", value)

    @property
    @pulumi.getter(name="qosProfileMode")
    def qos_profile_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "qos_profile_mode")

    @qos_profile_mode.setter
    def qos_profile_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "qos_profile_mode", value)


