# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PortProfileArgs', 'PortProfile']

@pulumi.input_type
class PortProfileArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 autoneg: Optional[pulumi.Input[builtins.bool]] = None,
                 dot1x_ctrl: Optional[pulumi.Input[builtins.str]] = None,
                 dot1x_idle_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 egress_rate_limit_kbps: Optional[pulumi.Input[builtins.int]] = None,
                 egress_rate_limit_kbps_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 excluded_networkconf_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 fec_mode: Optional[pulumi.Input[builtins.str]] = None,
                 forward: Optional[pulumi.Input[builtins.str]] = None,
                 full_duplex: Optional[pulumi.Input[builtins.bool]] = None,
                 isolation: Optional[pulumi.Input[builtins.bool]] = None,
                 lldpmed_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lldpmed_notify_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 multicast_router_networkconf_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 native_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 op_mode: Optional[pulumi.Input[builtins.str]] = None,
                 poe_mode: Optional[pulumi.Input[builtins.str]] = None,
                 port_keepalive_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 port_security_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 port_security_mac_address: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 priority_queue1_level: Optional[pulumi.Input[builtins.int]] = None,
                 priority_queue2_level: Optional[pulumi.Input[builtins.int]] = None,
                 priority_queue3_level: Optional[pulumi.Input[builtins.int]] = None,
                 priority_queue4_level: Optional[pulumi.Input[builtins.int]] = None,
                 qos_profile: Optional[pulumi.Input['PortProfileQOSProfileArgs']] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 speed: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_bcast_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 stormctrl_bcast_level: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_bcast_rate: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_mcast_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 stormctrl_mcast_level: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_mcast_rate: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_type: Optional[pulumi.Input[builtins.str]] = None,
                 stormctrl_ucast_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 stormctrl_ucast_level: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_ucast_rate: Optional[pulumi.Input[builtins.int]] = None,
                 stp_port_mode: Optional[pulumi.Input[builtins.bool]] = None,
                 tagged_vlan_mgmt: Optional[pulumi.Input[builtins.str]] = None,
                 voice_networkconf_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a PortProfile resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if autoneg is not None:
            pulumi.set(__self__, "autoneg", autoneg)
        if dot1x_ctrl is not None:
            pulumi.set(__self__, "dot1x_ctrl", dot1x_ctrl)
        if dot1x_idle_timeout is not None:
            pulumi.set(__self__, "dot1x_idle_timeout", dot1x_idle_timeout)
        if egress_rate_limit_kbps is not None:
            pulumi.set(__self__, "egress_rate_limit_kbps", egress_rate_limit_kbps)
        if egress_rate_limit_kbps_enabled is not None:
            pulumi.set(__self__, "egress_rate_limit_kbps_enabled", egress_rate_limit_kbps_enabled)
        if excluded_networkconf_ids is not None:
            pulumi.set(__self__, "excluded_networkconf_ids", excluded_networkconf_ids)
        if fec_mode is not None:
            pulumi.set(__self__, "fec_mode", fec_mode)
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if full_duplex is not None:
            pulumi.set(__self__, "full_duplex", full_duplex)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if lldpmed_enabled is not None:
            pulumi.set(__self__, "lldpmed_enabled", lldpmed_enabled)
        if lldpmed_notify_enabled is not None:
            pulumi.set(__self__, "lldpmed_notify_enabled", lldpmed_notify_enabled)
        if multicast_router_networkconf_ids is not None:
            pulumi.set(__self__, "multicast_router_networkconf_ids", multicast_router_networkconf_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if native_networkconf_id is not None:
            pulumi.set(__self__, "native_networkconf_id", native_networkconf_id)
        if op_mode is not None:
            pulumi.set(__self__, "op_mode", op_mode)
        if poe_mode is not None:
            pulumi.set(__self__, "poe_mode", poe_mode)
        if port_keepalive_enabled is not None:
            pulumi.set(__self__, "port_keepalive_enabled", port_keepalive_enabled)
        if port_security_enabled is not None:
            pulumi.set(__self__, "port_security_enabled", port_security_enabled)
        if port_security_mac_address is not None:
            pulumi.set(__self__, "port_security_mac_address", port_security_mac_address)
        if priority_queue1_level is not None:
            pulumi.set(__self__, "priority_queue1_level", priority_queue1_level)
        if priority_queue2_level is not None:
            pulumi.set(__self__, "priority_queue2_level", priority_queue2_level)
        if priority_queue3_level is not None:
            pulumi.set(__self__, "priority_queue3_level", priority_queue3_level)
        if priority_queue4_level is not None:
            pulumi.set(__self__, "priority_queue4_level", priority_queue4_level)
        if qos_profile is not None:
            pulumi.set(__self__, "qos_profile", qos_profile)
        if setting_preference is not None:
            pulumi.set(__self__, "setting_preference", setting_preference)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if stormctrl_bcast_enabled is not None:
            pulumi.set(__self__, "stormctrl_bcast_enabled", stormctrl_bcast_enabled)
        if stormctrl_bcast_level is not None:
            pulumi.set(__self__, "stormctrl_bcast_level", stormctrl_bcast_level)
        if stormctrl_bcast_rate is not None:
            pulumi.set(__self__, "stormctrl_bcast_rate", stormctrl_bcast_rate)
        if stormctrl_mcast_enabled is not None:
            pulumi.set(__self__, "stormctrl_mcast_enabled", stormctrl_mcast_enabled)
        if stormctrl_mcast_level is not None:
            pulumi.set(__self__, "stormctrl_mcast_level", stormctrl_mcast_level)
        if stormctrl_mcast_rate is not None:
            pulumi.set(__self__, "stormctrl_mcast_rate", stormctrl_mcast_rate)
        if stormctrl_type is not None:
            pulumi.set(__self__, "stormctrl_type", stormctrl_type)
        if stormctrl_ucast_enabled is not None:
            pulumi.set(__self__, "stormctrl_ucast_enabled", stormctrl_ucast_enabled)
        if stormctrl_ucast_level is not None:
            pulumi.set(__self__, "stormctrl_ucast_level", stormctrl_ucast_level)
        if stormctrl_ucast_rate is not None:
            pulumi.set(__self__, "stormctrl_ucast_rate", stormctrl_ucast_rate)
        if stp_port_mode is not None:
            pulumi.set(__self__, "stp_port_mode", stp_port_mode)
        if tagged_vlan_mgmt is not None:
            pulumi.set(__self__, "tagged_vlan_mgmt", tagged_vlan_mgmt)
        if voice_networkconf_id is not None:
            pulumi.set(__self__, "voice_networkconf_id", voice_networkconf_id)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter
    def autoneg(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "autoneg")

    @autoneg.setter
    def autoneg(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "autoneg", value)

    @property
    @pulumi.getter(name="dot1xCtrl")
    def dot1x_ctrl(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dot1x_ctrl")

    @dot1x_ctrl.setter
    def dot1x_ctrl(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dot1x_ctrl", value)

    @property
    @pulumi.getter(name="dot1xIdleTimeout")
    def dot1x_idle_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dot1x_idle_timeout")

    @dot1x_idle_timeout.setter
    def dot1x_idle_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dot1x_idle_timeout", value)

    @property
    @pulumi.getter(name="egressRateLimitKbps")
    def egress_rate_limit_kbps(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "egress_rate_limit_kbps")

    @egress_rate_limit_kbps.setter
    def egress_rate_limit_kbps(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "egress_rate_limit_kbps", value)

    @property
    @pulumi.getter(name="egressRateLimitKbpsEnabled")
    def egress_rate_limit_kbps_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "egress_rate_limit_kbps_enabled")

    @egress_rate_limit_kbps_enabled.setter
    def egress_rate_limit_kbps_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "egress_rate_limit_kbps_enabled", value)

    @property
    @pulumi.getter(name="excludedNetworkconfIds")
    def excluded_networkconf_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "excluded_networkconf_ids")

    @excluded_networkconf_ids.setter
    def excluded_networkconf_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "excluded_networkconf_ids", value)

    @property
    @pulumi.getter(name="fecMode")
    def fec_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "fec_mode")

    @fec_mode.setter
    def fec_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fec_mode", value)

    @property
    @pulumi.getter
    def forward(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "forward")

    @forward.setter
    def forward(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "forward", value)

    @property
    @pulumi.getter(name="fullDuplex")
    def full_duplex(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "full_duplex")

    @full_duplex.setter
    def full_duplex(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "full_duplex", value)

    @property
    @pulumi.getter
    def isolation(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "isolation")

    @isolation.setter
    def isolation(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "isolation", value)

    @property
    @pulumi.getter(name="lldpmedEnabled")
    def lldpmed_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lldpmed_enabled")

    @lldpmed_enabled.setter
    def lldpmed_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lldpmed_enabled", value)

    @property
    @pulumi.getter(name="lldpmedNotifyEnabled")
    def lldpmed_notify_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lldpmed_notify_enabled")

    @lldpmed_notify_enabled.setter
    def lldpmed_notify_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lldpmed_notify_enabled", value)

    @property
    @pulumi.getter(name="multicastRouterNetworkconfIds")
    def multicast_router_networkconf_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "multicast_router_networkconf_ids")

    @multicast_router_networkconf_ids.setter
    def multicast_router_networkconf_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "multicast_router_networkconf_ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nativeNetworkconfId")
    def native_networkconf_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "native_networkconf_id")

    @native_networkconf_id.setter
    def native_networkconf_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "native_networkconf_id", value)

    @property
    @pulumi.getter(name="opMode")
    def op_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "op_mode")

    @op_mode.setter
    def op_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "op_mode", value)

    @property
    @pulumi.getter(name="poeMode")
    def poe_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "poe_mode")

    @poe_mode.setter
    def poe_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "poe_mode", value)

    @property
    @pulumi.getter(name="portKeepaliveEnabled")
    def port_keepalive_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "port_keepalive_enabled")

    @port_keepalive_enabled.setter
    def port_keepalive_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "port_keepalive_enabled", value)

    @property
    @pulumi.getter(name="portSecurityEnabled")
    def port_security_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "port_security_enabled")

    @port_security_enabled.setter
    def port_security_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "port_security_enabled", value)

    @property
    @pulumi.getter(name="portSecurityMacAddress")
    def port_security_mac_address(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "port_security_mac_address")

    @port_security_mac_address.setter
    def port_security_mac_address(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "port_security_mac_address", value)

    @property
    @pulumi.getter(name="priorityQueue1Level")
    def priority_queue1_level(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "priority_queue1_level")

    @priority_queue1_level.setter
    def priority_queue1_level(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "priority_queue1_level", value)

    @property
    @pulumi.getter(name="priorityQueue2Level")
    def priority_queue2_level(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "priority_queue2_level")

    @priority_queue2_level.setter
    def priority_queue2_level(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "priority_queue2_level", value)

    @property
    @pulumi.getter(name="priorityQueue3Level")
    def priority_queue3_level(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "priority_queue3_level")

    @priority_queue3_level.setter
    def priority_queue3_level(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "priority_queue3_level", value)

    @property
    @pulumi.getter(name="priorityQueue4Level")
    def priority_queue4_level(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "priority_queue4_level")

    @priority_queue4_level.setter
    def priority_queue4_level(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "priority_queue4_level", value)

    @property
    @pulumi.getter(name="qosProfile")
    def qos_profile(self) -> Optional[pulumi.Input['PortProfileQOSProfileArgs']]:
        return pulumi.get(self, "qos_profile")

    @qos_profile.setter
    def qos_profile(self, value: Optional[pulumi.Input['PortProfileQOSProfileArgs']]):
        pulumi.set(self, "qos_profile", value)

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "setting_preference")

    @setting_preference.setter
    def setting_preference(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "setting_preference", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter(name="stormctrlBcastEnabled")
    def stormctrl_bcast_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "stormctrl_bcast_enabled")

    @stormctrl_bcast_enabled.setter
    def stormctrl_bcast_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "stormctrl_bcast_enabled", value)

    @property
    @pulumi.getter(name="stormctrlBcastLevel")
    def stormctrl_bcast_level(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "stormctrl_bcast_level")

    @stormctrl_bcast_level.setter
    def stormctrl_bcast_level(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "stormctrl_bcast_level", value)

    @property
    @pulumi.getter(name="stormctrlBcastRate")
    def stormctrl_bcast_rate(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "stormctrl_bcast_rate")

    @stormctrl_bcast_rate.setter
    def stormctrl_bcast_rate(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "stormctrl_bcast_rate", value)

    @property
    @pulumi.getter(name="stormctrlMcastEnabled")
    def stormctrl_mcast_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "stormctrl_mcast_enabled")

    @stormctrl_mcast_enabled.setter
    def stormctrl_mcast_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "stormctrl_mcast_enabled", value)

    @property
    @pulumi.getter(name="stormctrlMcastLevel")
    def stormctrl_mcast_level(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "stormctrl_mcast_level")

    @stormctrl_mcast_level.setter
    def stormctrl_mcast_level(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "stormctrl_mcast_level", value)

    @property
    @pulumi.getter(name="stormctrlMcastRate")
    def stormctrl_mcast_rate(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "stormctrl_mcast_rate")

    @stormctrl_mcast_rate.setter
    def stormctrl_mcast_rate(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "stormctrl_mcast_rate", value)

    @property
    @pulumi.getter(name="stormctrlType")
    def stormctrl_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "stormctrl_type")

    @stormctrl_type.setter
    def stormctrl_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "stormctrl_type", value)

    @property
    @pulumi.getter(name="stormctrlUcastEnabled")
    def stormctrl_ucast_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "stormctrl_ucast_enabled")

    @stormctrl_ucast_enabled.setter
    def stormctrl_ucast_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "stormctrl_ucast_enabled", value)

    @property
    @pulumi.getter(name="stormctrlUcastLevel")
    def stormctrl_ucast_level(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "stormctrl_ucast_level")

    @stormctrl_ucast_level.setter
    def stormctrl_ucast_level(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "stormctrl_ucast_level", value)

    @property
    @pulumi.getter(name="stormctrlUcastRate")
    def stormctrl_ucast_rate(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "stormctrl_ucast_rate")

    @stormctrl_ucast_rate.setter
    def stormctrl_ucast_rate(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "stormctrl_ucast_rate", value)

    @property
    @pulumi.getter(name="stpPortMode")
    def stp_port_mode(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "stp_port_mode")

    @stp_port_mode.setter
    def stp_port_mode(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "stp_port_mode", value)

    @property
    @pulumi.getter(name="taggedVlanMgmt")
    def tagged_vlan_mgmt(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "tagged_vlan_mgmt")

    @tagged_vlan_mgmt.setter
    def tagged_vlan_mgmt(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tagged_vlan_mgmt", value)

    @property
    @pulumi.getter(name="voiceNetworkconfId")
    def voice_networkconf_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "voice_networkconf_id")

    @voice_networkconf_id.setter
    def voice_networkconf_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "voice_networkconf_id", value)


@pulumi.type_token("unifi-native:portconf:PortProfile")
class PortProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 autoneg: Optional[pulumi.Input[builtins.bool]] = None,
                 dot1x_ctrl: Optional[pulumi.Input[builtins.str]] = None,
                 dot1x_idle_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 egress_rate_limit_kbps: Optional[pulumi.Input[builtins.int]] = None,
                 egress_rate_limit_kbps_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 excluded_networkconf_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 fec_mode: Optional[pulumi.Input[builtins.str]] = None,
                 forward: Optional[pulumi.Input[builtins.str]] = None,
                 full_duplex: Optional[pulumi.Input[builtins.bool]] = None,
                 isolation: Optional[pulumi.Input[builtins.bool]] = None,
                 lldpmed_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lldpmed_notify_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 multicast_router_networkconf_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 native_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 op_mode: Optional[pulumi.Input[builtins.str]] = None,
                 poe_mode: Optional[pulumi.Input[builtins.str]] = None,
                 port_keepalive_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 port_security_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 port_security_mac_address: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 priority_queue1_level: Optional[pulumi.Input[builtins.int]] = None,
                 priority_queue2_level: Optional[pulumi.Input[builtins.int]] = None,
                 priority_queue3_level: Optional[pulumi.Input[builtins.int]] = None,
                 priority_queue4_level: Optional[pulumi.Input[builtins.int]] = None,
                 qos_profile: Optional[pulumi.Input[Union['PortProfileQOSProfileArgs', 'PortProfileQOSProfileArgsDict']]] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 speed: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_bcast_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 stormctrl_bcast_level: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_bcast_rate: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_mcast_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 stormctrl_mcast_level: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_mcast_rate: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_type: Optional[pulumi.Input[builtins.str]] = None,
                 stormctrl_ucast_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 stormctrl_ucast_level: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_ucast_rate: Optional[pulumi.Input[builtins.int]] = None,
                 stp_port_mode: Optional[pulumi.Input[builtins.bool]] = None,
                 tagged_vlan_mgmt: Optional[pulumi.Input[builtins.str]] = None,
                 voice_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a PortProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PortProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PortProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PortProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PortProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 autoneg: Optional[pulumi.Input[builtins.bool]] = None,
                 dot1x_ctrl: Optional[pulumi.Input[builtins.str]] = None,
                 dot1x_idle_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 egress_rate_limit_kbps: Optional[pulumi.Input[builtins.int]] = None,
                 egress_rate_limit_kbps_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 excluded_networkconf_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 fec_mode: Optional[pulumi.Input[builtins.str]] = None,
                 forward: Optional[pulumi.Input[builtins.str]] = None,
                 full_duplex: Optional[pulumi.Input[builtins.bool]] = None,
                 isolation: Optional[pulumi.Input[builtins.bool]] = None,
                 lldpmed_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lldpmed_notify_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 multicast_router_networkconf_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 native_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 op_mode: Optional[pulumi.Input[builtins.str]] = None,
                 poe_mode: Optional[pulumi.Input[builtins.str]] = None,
                 port_keepalive_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 port_security_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 port_security_mac_address: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 priority_queue1_level: Optional[pulumi.Input[builtins.int]] = None,
                 priority_queue2_level: Optional[pulumi.Input[builtins.int]] = None,
                 priority_queue3_level: Optional[pulumi.Input[builtins.int]] = None,
                 priority_queue4_level: Optional[pulumi.Input[builtins.int]] = None,
                 qos_profile: Optional[pulumi.Input[Union['PortProfileQOSProfileArgs', 'PortProfileQOSProfileArgsDict']]] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 speed: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_bcast_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 stormctrl_bcast_level: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_bcast_rate: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_mcast_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 stormctrl_mcast_level: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_mcast_rate: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_type: Optional[pulumi.Input[builtins.str]] = None,
                 stormctrl_ucast_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 stormctrl_ucast_level: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_ucast_rate: Optional[pulumi.Input[builtins.int]] = None,
                 stp_port_mode: Optional[pulumi.Input[builtins.bool]] = None,
                 tagged_vlan_mgmt: Optional[pulumi.Input[builtins.str]] = None,
                 voice_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PortProfileArgs.__new__(PortProfileArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["autoneg"] = autoneg
            __props__.__dict__["dot1x_ctrl"] = dot1x_ctrl
            __props__.__dict__["dot1x_idle_timeout"] = dot1x_idle_timeout
            __props__.__dict__["egress_rate_limit_kbps"] = egress_rate_limit_kbps
            __props__.__dict__["egress_rate_limit_kbps_enabled"] = egress_rate_limit_kbps_enabled
            __props__.__dict__["excluded_networkconf_ids"] = excluded_networkconf_ids
            __props__.__dict__["fec_mode"] = fec_mode
            __props__.__dict__["forward"] = forward
            __props__.__dict__["full_duplex"] = full_duplex
            __props__.__dict__["isolation"] = isolation
            __props__.__dict__["lldpmed_enabled"] = lldpmed_enabled
            __props__.__dict__["lldpmed_notify_enabled"] = lldpmed_notify_enabled
            __props__.__dict__["multicast_router_networkconf_ids"] = multicast_router_networkconf_ids
            __props__.__dict__["name"] = name
            __props__.__dict__["native_networkconf_id"] = native_networkconf_id
            __props__.__dict__["op_mode"] = op_mode
            __props__.__dict__["poe_mode"] = poe_mode
            __props__.__dict__["port_keepalive_enabled"] = port_keepalive_enabled
            __props__.__dict__["port_security_enabled"] = port_security_enabled
            __props__.__dict__["port_security_mac_address"] = port_security_mac_address
            __props__.__dict__["priority_queue1_level"] = priority_queue1_level
            __props__.__dict__["priority_queue2_level"] = priority_queue2_level
            __props__.__dict__["priority_queue3_level"] = priority_queue3_level
            __props__.__dict__["priority_queue4_level"] = priority_queue4_level
            __props__.__dict__["qos_profile"] = qos_profile
            __props__.__dict__["setting_preference"] = setting_preference
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["speed"] = speed
            __props__.__dict__["stormctrl_bcast_enabled"] = stormctrl_bcast_enabled
            __props__.__dict__["stormctrl_bcast_level"] = stormctrl_bcast_level
            __props__.__dict__["stormctrl_bcast_rate"] = stormctrl_bcast_rate
            __props__.__dict__["stormctrl_mcast_enabled"] = stormctrl_mcast_enabled
            __props__.__dict__["stormctrl_mcast_level"] = stormctrl_mcast_level
            __props__.__dict__["stormctrl_mcast_rate"] = stormctrl_mcast_rate
            __props__.__dict__["stormctrl_type"] = stormctrl_type
            __props__.__dict__["stormctrl_ucast_enabled"] = stormctrl_ucast_enabled
            __props__.__dict__["stormctrl_ucast_level"] = stormctrl_ucast_level
            __props__.__dict__["stormctrl_ucast_rate"] = stormctrl_ucast_rate
            __props__.__dict__["stp_port_mode"] = stp_port_mode
            __props__.__dict__["tagged_vlan_mgmt"] = tagged_vlan_mgmt
            __props__.__dict__["voice_networkconf_id"] = voice_networkconf_id
        super(PortProfile, __self__).__init__(
            'unifi-native:portconf:PortProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'PortProfile':
        """
        Get an existing PortProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PortProfileArgs.__new__(PortProfileArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["autoneg"] = None
        __props__.__dict__["dot1x_ctrl"] = None
        __props__.__dict__["dot1x_idle_timeout"] = None
        __props__.__dict__["egress_rate_limit_kbps"] = None
        __props__.__dict__["egress_rate_limit_kbps_enabled"] = None
        __props__.__dict__["excluded_networkconf_ids"] = None
        __props__.__dict__["fec_mode"] = None
        __props__.__dict__["forward"] = None
        __props__.__dict__["full_duplex"] = None
        __props__.__dict__["isolation"] = None
        __props__.__dict__["lldpmed_enabled"] = None
        __props__.__dict__["lldpmed_notify_enabled"] = None
        __props__.__dict__["multicast_router_networkconf_ids"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["native_networkconf_id"] = None
        __props__.__dict__["op_mode"] = None
        __props__.__dict__["poe_mode"] = None
        __props__.__dict__["port_keepalive_enabled"] = None
        __props__.__dict__["port_security_enabled"] = None
        __props__.__dict__["port_security_mac_address"] = None
        __props__.__dict__["priority_queue1_level"] = None
        __props__.__dict__["priority_queue2_level"] = None
        __props__.__dict__["priority_queue3_level"] = None
        __props__.__dict__["priority_queue4_level"] = None
        __props__.__dict__["qos_profile"] = None
        __props__.__dict__["setting_preference"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["speed"] = None
        __props__.__dict__["stormctrl_bcast_enabled"] = None
        __props__.__dict__["stormctrl_bcast_level"] = None
        __props__.__dict__["stormctrl_bcast_rate"] = None
        __props__.__dict__["stormctrl_mcast_enabled"] = None
        __props__.__dict__["stormctrl_mcast_level"] = None
        __props__.__dict__["stormctrl_mcast_rate"] = None
        __props__.__dict__["stormctrl_type"] = None
        __props__.__dict__["stormctrl_ucast_enabled"] = None
        __props__.__dict__["stormctrl_ucast_level"] = None
        __props__.__dict__["stormctrl_ucast_rate"] = None
        __props__.__dict__["stp_port_mode"] = None
        __props__.__dict__["tagged_vlan_mgmt"] = None
        __props__.__dict__["voice_networkconf_id"] = None
        return PortProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter
    def autoneg(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "autoneg")

    @property
    @pulumi.getter(name="dot1xCtrl")
    def dot1x_ctrl(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dot1x_ctrl")

    @property
    @pulumi.getter(name="dot1xIdleTimeout")
    def dot1x_idle_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "dot1x_idle_timeout")

    @property
    @pulumi.getter(name="egressRateLimitKbps")
    def egress_rate_limit_kbps(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "egress_rate_limit_kbps")

    @property
    @pulumi.getter(name="egressRateLimitKbpsEnabled")
    def egress_rate_limit_kbps_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "egress_rate_limit_kbps_enabled")

    @property
    @pulumi.getter(name="excludedNetworkconfIds")
    def excluded_networkconf_ids(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "excluded_networkconf_ids")

    @property
    @pulumi.getter(name="fecMode")
    def fec_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "fec_mode")

    @property
    @pulumi.getter
    def forward(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "forward")

    @property
    @pulumi.getter(name="fullDuplex")
    def full_duplex(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "full_duplex")

    @property
    @pulumi.getter
    def isolation(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "isolation")

    @property
    @pulumi.getter(name="lldpmedEnabled")
    def lldpmed_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "lldpmed_enabled")

    @property
    @pulumi.getter(name="lldpmedNotifyEnabled")
    def lldpmed_notify_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "lldpmed_notify_enabled")

    @property
    @pulumi.getter(name="multicastRouterNetworkconfIds")
    def multicast_router_networkconf_ids(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "multicast_router_networkconf_ids")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nativeNetworkconfId")
    def native_networkconf_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "native_networkconf_id")

    @property
    @pulumi.getter(name="opMode")
    def op_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "op_mode")

    @property
    @pulumi.getter(name="poeMode")
    def poe_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "poe_mode")

    @property
    @pulumi.getter(name="portKeepaliveEnabled")
    def port_keepalive_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "port_keepalive_enabled")

    @property
    @pulumi.getter(name="portSecurityEnabled")
    def port_security_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "port_security_enabled")

    @property
    @pulumi.getter(name="portSecurityMacAddress")
    def port_security_mac_address(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "port_security_mac_address")

    @property
    @pulumi.getter(name="priorityQueue1Level")
    def priority_queue1_level(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "priority_queue1_level")

    @property
    @pulumi.getter(name="priorityQueue2Level")
    def priority_queue2_level(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "priority_queue2_level")

    @property
    @pulumi.getter(name="priorityQueue3Level")
    def priority_queue3_level(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "priority_queue3_level")

    @property
    @pulumi.getter(name="priorityQueue4Level")
    def priority_queue4_level(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "priority_queue4_level")

    @property
    @pulumi.getter(name="qosProfile")
    def qos_profile(self) -> pulumi.Output[Optional['outputs.PortProfileQOSProfile']]:
        return pulumi.get(self, "qos_profile")

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "setting_preference")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def speed(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter(name="stormctrlBcastEnabled")
    def stormctrl_bcast_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "stormctrl_bcast_enabled")

    @property
    @pulumi.getter(name="stormctrlBcastLevel")
    def stormctrl_bcast_level(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "stormctrl_bcast_level")

    @property
    @pulumi.getter(name="stormctrlBcastRate")
    def stormctrl_bcast_rate(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "stormctrl_bcast_rate")

    @property
    @pulumi.getter(name="stormctrlMcastEnabled")
    def stormctrl_mcast_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "stormctrl_mcast_enabled")

    @property
    @pulumi.getter(name="stormctrlMcastLevel")
    def stormctrl_mcast_level(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "stormctrl_mcast_level")

    @property
    @pulumi.getter(name="stormctrlMcastRate")
    def stormctrl_mcast_rate(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "stormctrl_mcast_rate")

    @property
    @pulumi.getter(name="stormctrlType")
    def stormctrl_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "stormctrl_type")

    @property
    @pulumi.getter(name="stormctrlUcastEnabled")
    def stormctrl_ucast_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "stormctrl_ucast_enabled")

    @property
    @pulumi.getter(name="stormctrlUcastLevel")
    def stormctrl_ucast_level(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "stormctrl_ucast_level")

    @property
    @pulumi.getter(name="stormctrlUcastRate")
    def stormctrl_ucast_rate(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "stormctrl_ucast_rate")

    @property
    @pulumi.getter(name="stpPortMode")
    def stp_port_mode(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "stp_port_mode")

    @property
    @pulumi.getter(name="taggedVlanMgmt")
    def tagged_vlan_mgmt(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "tagged_vlan_mgmt")

    @property
    @pulumi.getter(name="voiceNetworkconfId")
    def voice_networkconf_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "voice_networkconf_id")

