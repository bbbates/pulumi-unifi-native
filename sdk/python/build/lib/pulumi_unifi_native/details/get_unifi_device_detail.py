# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetUnifiDeviceDetailResult',
    'AwaitableGetUnifiDeviceDetailResult',
    'get_unifi_device_detail',
    'get_unifi_device_detail_output',
]

@pulumi.output_type
class GetUnifiDeviceDetailResult:
    def __init__(__self__, is_wired=None, uplink_device=None):
        if is_wired and not isinstance(is_wired, bool):
            raise TypeError("Expected argument 'is_wired' to be a bool")
        pulumi.set(__self__, "is_wired", is_wired)
        if uplink_device and not isinstance(uplink_device, dict):
            raise TypeError("Expected argument 'uplink_device' to be a dict")
        pulumi.set(__self__, "uplink_device", uplink_device)

    @property
    @pulumi.getter(name="isWired")
    def is_wired(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "is_wired")

    @property
    @pulumi.getter(name="uplinkDevice")
    def uplink_device(self) -> Optional['outputs.UplinkDeviceDto']:
        return pulumi.get(self, "uplink_device")


class AwaitableGetUnifiDeviceDetailResult(GetUnifiDeviceDetailResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUnifiDeviceDetailResult(
            is_wired=self.is_wired,
            uplink_device=self.uplink_device)


def get_unifi_device_detail(device_mac: Optional[builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUnifiDeviceDetailResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['deviceMac'] = device_mac
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:details:getUnifiDeviceDetail', __args__, opts=opts, typ=GetUnifiDeviceDetailResult).value

    return AwaitableGetUnifiDeviceDetailResult(
        is_wired=pulumi.get(__ret__, 'is_wired'),
        uplink_device=pulumi.get(__ret__, 'uplink_device'))
def get_unifi_device_detail_output(device_mac: Optional[pulumi.Input[builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUnifiDeviceDetailResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['deviceMac'] = device_mac
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:details:getUnifiDeviceDetail', __args__, opts=opts, typ=GetUnifiDeviceDetailResult)
    return __ret__.apply(lambda __response__: GetUnifiDeviceDetailResult(
        is_wired=pulumi.get(__response__, 'is_wired'),
        uplink_device=pulumi.get(__response__, 'uplink_device')))
