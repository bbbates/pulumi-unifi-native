# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'WanNetworkGroupInfo',
    'WanPortInfo',
]

@pulumi.output_type
class WanNetworkGroupInfo(dict):
    def __init__(__self__, *,
                 id: Optional['WanNetworkGroupInfoId'] = None,
                 is_mobile_broadband: Optional[builtins.bool] = None,
                 load_balancing_mode: Optional['WanNetworkGroupInfoLoadBalancingMode'] = None,
                 name: Optional[builtins.str] = None,
                 network_id: Optional[builtins.str] = None,
                 port_info: Optional['outputs.WanPortInfo'] = None,
                 priority: Optional[builtins.int] = None,
                 uptime: Optional[builtins.float] = None,
                 wan_magic_enabled: Optional[builtins.bool] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_mobile_broadband is not None:
            pulumi.set(__self__, "is_mobile_broadband", is_mobile_broadband)
        if load_balancing_mode is not None:
            pulumi.set(__self__, "load_balancing_mode", load_balancing_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if port_info is not None:
            pulumi.set(__self__, "port_info", port_info)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if uptime is not None:
            pulumi.set(__self__, "uptime", uptime)
        if wan_magic_enabled is not None:
            pulumi.set(__self__, "wan_magic_enabled", wan_magic_enabled)

    @property
    @pulumi.getter
    def id(self) -> Optional['WanNetworkGroupInfoId']:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isMobileBroadband")
    def is_mobile_broadband(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "is_mobile_broadband")

    @property
    @pulumi.getter(name="loadBalancingMode")
    def load_balancing_mode(self) -> Optional['WanNetworkGroupInfoLoadBalancingMode']:
        return pulumi.get(self, "load_balancing_mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="portInfo")
    def port_info(self) -> Optional['outputs.WanPortInfo']:
        return pulumi.get(self, "port_info")

    @property
    @pulumi.getter
    def priority(self) -> Optional[builtins.int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def uptime(self) -> Optional[builtins.float]:
        return pulumi.get(self, "uptime")

    @property
    @pulumi.getter(name="wanMagicEnabled")
    def wan_magic_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "wan_magic_enabled")


@pulumi.output_type
class WanPortInfo(dict):
    def __init__(__self__, *,
                 disabled: Optional[builtins.bool] = None,
                 port_idx: Optional[builtins.int] = None,
                 port_ifname: Optional[builtins.str] = None):
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if port_idx is not None:
            pulumi.set(__self__, "port_idx", port_idx)
        if port_ifname is not None:
            pulumi.set(__self__, "port_ifname", port_ifname)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="portIdx")
    def port_idx(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port_idx")

    @property
    @pulumi.getter(name="portIfname")
    def port_ifname(self) -> Optional[builtins.str]:
        return pulumi.get(self, "port_ifname")


