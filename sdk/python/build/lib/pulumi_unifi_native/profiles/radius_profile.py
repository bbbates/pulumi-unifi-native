# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['RadiusProfileArgs', 'RadiusProfile']

@pulumi.input_type
class RadiusProfileArgs:
    def __init__(__self__, *,
                 auth_servers: pulumi.Input[Sequence[pulumi.Input['RadiusServerDtoArgs']]],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 accounting_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 acct_servers: Optional[pulumi.Input[Sequence[pulumi.Input['RadiusServerDtoArgs']]]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 interim_update_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 interim_update_interval: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 vlan_wlan_mode: Optional[pulumi.Input['VlanWlanMode']] = None):
        """
        The set of arguments for constructing a RadiusProfile resource.
        """
        pulumi.set(__self__, "auth_servers", auth_servers)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if accounting_enabled is not None:
            pulumi.set(__self__, "accounting_enabled", accounting_enabled)
        if acct_servers is not None:
            pulumi.set(__self__, "acct_servers", acct_servers)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if interim_update_enabled is not None:
            pulumi.set(__self__, "interim_update_enabled", interim_update_enabled)
        if interim_update_interval is not None:
            pulumi.set(__self__, "interim_update_interval", interim_update_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)
        if vlan_enabled is not None:
            pulumi.set(__self__, "vlan_enabled", vlan_enabled)
        if vlan_wlan_mode is not None:
            pulumi.set(__self__, "vlan_wlan_mode", vlan_wlan_mode)

    @property
    @pulumi.getter(name="authServers")
    def auth_servers(self) -> pulumi.Input[Sequence[pulumi.Input['RadiusServerDtoArgs']]]:
        return pulumi.get(self, "auth_servers")

    @auth_servers.setter
    def auth_servers(self, value: pulumi.Input[Sequence[pulumi.Input['RadiusServerDtoArgs']]]):
        pulumi.set(self, "auth_servers", value)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="accountingEnabled")
    def accounting_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "accounting_enabled")

    @accounting_enabled.setter
    def accounting_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "accounting_enabled", value)

    @property
    @pulumi.getter(name="acctServers")
    def acct_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RadiusServerDtoArgs']]]]:
        return pulumi.get(self, "acct_servers")

    @acct_servers.setter
    def acct_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RadiusServerDtoArgs']]]]):
        pulumi.set(self, "acct_servers", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter(name="interimUpdateEnabled")
    def interim_update_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "interim_update_enabled")

    @interim_update_enabled.setter
    def interim_update_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "interim_update_enabled", value)

    @property
    @pulumi.getter(name="interimUpdateInterval")
    def interim_update_interval(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "interim_update_interval")

    @interim_update_interval.setter
    def interim_update_interval(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "interim_update_interval", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)

    @property
    @pulumi.getter(name="vlanEnabled")
    def vlan_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "vlan_enabled")

    @vlan_enabled.setter
    def vlan_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "vlan_enabled", value)

    @property
    @pulumi.getter(name="vlanWlanMode")
    def vlan_wlan_mode(self) -> Optional[pulumi.Input['VlanWlanMode']]:
        return pulumi.get(self, "vlan_wlan_mode")

    @vlan_wlan_mode.setter
    def vlan_wlan_mode(self, value: Optional[pulumi.Input['VlanWlanMode']]):
        pulumi.set(self, "vlan_wlan_mode", value)


@pulumi.type_token("unifi-native:profiles:RadiusProfile")
class RadiusProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 accounting_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 acct_servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RadiusServerDtoArgs', 'RadiusServerDtoArgsDict']]]]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RadiusServerDtoArgs', 'RadiusServerDtoArgsDict']]]]] = None,
                 interim_update_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 interim_update_interval: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 vlan_wlan_mode: Optional[pulumi.Input['VlanWlanMode']] = None,
                 __props__=None):
        """
        Create a RadiusProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RadiusProfileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RadiusProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RadiusProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RadiusProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 accounting_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 acct_servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RadiusServerDtoArgs', 'RadiusServerDtoArgsDict']]]]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RadiusServerDtoArgs', 'RadiusServerDtoArgsDict']]]]] = None,
                 interim_update_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 interim_update_interval: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 vlan_wlan_mode: Optional[pulumi.Input['VlanWlanMode']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RadiusProfileArgs.__new__(RadiusProfileArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["accounting_enabled"] = accounting_enabled
            __props__.__dict__["acct_servers"] = acct_servers
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            if auth_servers is None and not opts.urn:
                raise TypeError("Missing required property 'auth_servers'")
            __props__.__dict__["auth_servers"] = auth_servers
            __props__.__dict__["interim_update_enabled"] = interim_update_enabled
            __props__.__dict__["interim_update_interval"] = interim_update_interval
            __props__.__dict__["name"] = name
            __props__.__dict__["site_name"] = site_name
            __props__.__dict__["vlan_enabled"] = vlan_enabled
            __props__.__dict__["vlan_wlan_mode"] = vlan_wlan_mode
        super(RadiusProfile, __self__).__init__(
            'unifi-native:profiles:RadiusProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'RadiusProfile':
        """
        Get an existing RadiusProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = RadiusProfileArgs.__new__(RadiusProfileArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["accounting_enabled"] = None
        __props__.__dict__["acct_servers"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["auth_servers"] = None
        __props__.__dict__["interim_update_enabled"] = None
        __props__.__dict__["interim_update_interval"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["vlan_enabled"] = None
        __props__.__dict__["vlan_wlan_mode"] = None
        return RadiusProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="accountingEnabled")
    def accounting_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "accounting_enabled")

    @property
    @pulumi.getter(name="acctServers")
    def acct_servers(self) -> pulumi.Output[Optional[Sequence['outputs.RadiusServerDto']]]:
        return pulumi.get(self, "acct_servers")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="authServers")
    def auth_servers(self) -> pulumi.Output[Sequence['outputs.RadiusServerDto']]:
        return pulumi.get(self, "auth_servers")

    @property
    @pulumi.getter(name="interimUpdateEnabled")
    def interim_update_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "interim_update_enabled")

    @property
    @pulumi.getter(name="interimUpdateInterval")
    def interim_update_interval(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "interim_update_interval")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="vlanEnabled")
    def vlan_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "vlan_enabled")

    @property
    @pulumi.getter(name="vlanWlanMode")
    def vlan_wlan_mode(self) -> pulumi.Output[Optional['VlanWlanMode']]:
        return pulumi.get(self, "vlan_wlan_mode")

