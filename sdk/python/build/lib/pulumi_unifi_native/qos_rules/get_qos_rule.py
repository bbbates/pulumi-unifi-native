# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetQosRuleResult',
    'AwaitableGetQosRuleResult',
    'get_qos_rule',
    'get_qos_rule_output',
]

@pulumi.output_type
class GetQosRuleResult:
    def __init__(__self__, id=None, destination=None, download_burst=None, download_limit_kbps=None, enabled=None, index=None, name=None, objective=None, schedule=None, source=None, upload_burst=None, upload_limit_kbps=None, wan_or_vpn_network=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if destination and not isinstance(destination, dict):
            raise TypeError("Expected argument 'destination' to be a dict")
        pulumi.set(__self__, "destination", destination)
        if download_burst and not isinstance(download_burst, str):
            raise TypeError("Expected argument 'download_burst' to be a str")
        pulumi.set(__self__, "download_burst", download_burst)
        if download_limit_kbps and not isinstance(download_limit_kbps, int):
            raise TypeError("Expected argument 'download_limit_kbps' to be a int")
        pulumi.set(__self__, "download_limit_kbps", download_limit_kbps)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if index and not isinstance(index, int):
            raise TypeError("Expected argument 'index' to be a int")
        pulumi.set(__self__, "index", index)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if objective and not isinstance(objective, str):
            raise TypeError("Expected argument 'objective' to be a str")
        pulumi.set(__self__, "objective", objective)
        if schedule and not isinstance(schedule, dict):
            raise TypeError("Expected argument 'schedule' to be a dict")
        pulumi.set(__self__, "schedule", schedule)
        if source and not isinstance(source, dict):
            raise TypeError("Expected argument 'source' to be a dict")
        pulumi.set(__self__, "source", source)
        if upload_burst and not isinstance(upload_burst, str):
            raise TypeError("Expected argument 'upload_burst' to be a str")
        pulumi.set(__self__, "upload_burst", upload_burst)
        if upload_limit_kbps and not isinstance(upload_limit_kbps, int):
            raise TypeError("Expected argument 'upload_limit_kbps' to be a int")
        pulumi.set(__self__, "upload_limit_kbps", upload_limit_kbps)
        if wan_or_vpn_network and not isinstance(wan_or_vpn_network, str):
            raise TypeError("Expected argument 'wan_or_vpn_network' to be a str")
        pulumi.set(__self__, "wan_or_vpn_network", wan_or_vpn_network)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.FirewallQosDestinationDto':
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="downloadBurst")
    def download_burst(self) -> Optional['QosRuleDtoDownloadBurst']:
        return pulumi.get(self, "download_burst")

    @property
    @pulumi.getter(name="downloadLimitKbps")
    def download_limit_kbps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "download_limit_kbps")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def index(self) -> Optional[builtins.int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def objective(self) -> 'QosRuleDtoObjective':
        return pulumi.get(self, "objective")

    @property
    @pulumi.getter
    def schedule(self) -> 'outputs.FirewallPolicyScheduleDto':
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def source(self) -> 'outputs.FirewallQosSourceDto':
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="uploadBurst")
    def upload_burst(self) -> Optional['QosRuleDtoUploadBurst']:
        return pulumi.get(self, "upload_burst")

    @property
    @pulumi.getter(name="uploadLimitKbps")
    def upload_limit_kbps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "upload_limit_kbps")

    @property
    @pulumi.getter(name="wanOrVpnNetwork")
    def wan_or_vpn_network(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_or_vpn_network")


class AwaitableGetQosRuleResult(GetQosRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQosRuleResult(
            id=self.id,
            destination=self.destination,
            download_burst=self.download_burst,
            download_limit_kbps=self.download_limit_kbps,
            enabled=self.enabled,
            index=self.index,
            name=self.name,
            objective=self.objective,
            schedule=self.schedule,
            source=self.source,
            upload_burst=self.upload_burst,
            upload_limit_kbps=self.upload_limit_kbps,
            wan_or_vpn_network=self.wan_or_vpn_network)


def get_qos_rule(id: Optional[builtins.str] = None,
                 site_name: Optional[builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQosRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:qos-rules:getQosRule', __args__, opts=opts, typ=GetQosRuleResult).value

    return AwaitableGetQosRuleResult(
        id=pulumi.get(__ret__, 'id'),
        destination=pulumi.get(__ret__, 'destination'),
        download_burst=pulumi.get(__ret__, 'download_burst'),
        download_limit_kbps=pulumi.get(__ret__, 'download_limit_kbps'),
        enabled=pulumi.get(__ret__, 'enabled'),
        index=pulumi.get(__ret__, 'index'),
        name=pulumi.get(__ret__, 'name'),
        objective=pulumi.get(__ret__, 'objective'),
        schedule=pulumi.get(__ret__, 'schedule'),
        source=pulumi.get(__ret__, 'source'),
        upload_burst=pulumi.get(__ret__, 'upload_burst'),
        upload_limit_kbps=pulumi.get(__ret__, 'upload_limit_kbps'),
        wan_or_vpn_network=pulumi.get(__ret__, 'wan_or_vpn_network'))
def get_qos_rule_output(id: Optional[pulumi.Input[builtins.str]] = None,
                        site_name: Optional[pulumi.Input[builtins.str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetQosRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:qos-rules:getQosRule', __args__, opts=opts, typ=GetQosRuleResult)
    return __ret__.apply(lambda __response__: GetQosRuleResult(
        id=pulumi.get(__response__, 'id'),
        destination=pulumi.get(__response__, 'destination'),
        download_burst=pulumi.get(__response__, 'download_burst'),
        download_limit_kbps=pulumi.get(__response__, 'download_limit_kbps'),
        enabled=pulumi.get(__response__, 'enabled'),
        index=pulumi.get(__response__, 'index'),
        name=pulumi.get(__response__, 'name'),
        objective=pulumi.get(__response__, 'objective'),
        schedule=pulumi.get(__response__, 'schedule'),
        source=pulumi.get(__response__, 'source'),
        upload_burst=pulumi.get(__response__, 'upload_burst'),
        upload_limit_kbps=pulumi.get(__response__, 'upload_limit_kbps'),
        wan_or_vpn_network=pulumi.get(__response__, 'wan_or_vpn_network')))
