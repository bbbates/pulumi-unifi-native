# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'FirewallPolicyScheduleDto',
    'FirewallQosDestinationDto',
    'FirewallQosSourceDto',
    'QosRuleDto',
]

@pulumi.output_type
class FirewallPolicyScheduleDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "EndDateApplicableToCUSTOM":
            suggest = "end_date_applicable_to_custom"
        elif key == "StartDateApplicableToCUSTOM":
            suggest = "start_date_applicable_to_custom"
        elif key == "repeatOnDays":
            suggest = "repeat_on_days"
        elif key == "timeAllDay":
            suggest = "time_all_day"
        elif key == "timeRangeEnd":
            suggest = "time_range_end"
        elif key == "timeRangeStart":
            suggest = "time_range_start"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallPolicyScheduleDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallPolicyScheduleDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallPolicyScheduleDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: 'FirewallPolicyScheduleDtoMode',
                 end_date_applicable_to_custom: Optional[builtins.str] = None,
                 start_date_applicable_to_custom: Optional[builtins.str] = None,
                 date: Optional[builtins.str] = None,
                 repeat_on_days: Optional[Sequence['FirewallPolicyScheduleDtoRepeatOnDaysItem']] = None,
                 time_all_day: Optional[builtins.bool] = None,
                 time_range_end: Optional[builtins.str] = None,
                 time_range_start: Optional[builtins.str] = None):
        """
        :param builtins.str date: Start date. Applicable to: ONE_TIME_ONLY
        :param Sequence['FirewallPolicyScheduleDtoRepeatOnDaysItem'] repeat_on_days: Repeat on on days. Applicable to: EVERY_WEEK, CUSTOM
        :param builtins.bool time_all_day: Rule will be running for all day. Time range start/end are ignored. Applicable to: EVERY_WEEK, CUSTOM
        :param builtins.str time_range_end: End time in 24 hours format. It accepts 24:00 as end of the day. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        :param builtins.str time_range_start: Start time in 24 hours format. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        """
        pulumi.set(__self__, "mode", mode)
        if end_date_applicable_to_custom is not None:
            pulumi.set(__self__, "end_date_applicable_to_custom", end_date_applicable_to_custom)
        if start_date_applicable_to_custom is not None:
            pulumi.set(__self__, "start_date_applicable_to_custom", start_date_applicable_to_custom)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if repeat_on_days is not None:
            pulumi.set(__self__, "repeat_on_days", repeat_on_days)
        if time_all_day is not None:
            pulumi.set(__self__, "time_all_day", time_all_day)
        if time_range_end is not None:
            pulumi.set(__self__, "time_range_end", time_range_end)
        if time_range_start is not None:
            pulumi.set(__self__, "time_range_start", time_range_start)

    @property
    @pulumi.getter
    def mode(self) -> 'FirewallPolicyScheduleDtoMode':
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="EndDateApplicableToCUSTOM")
    def end_date_applicable_to_custom(self) -> Optional[builtins.str]:
        return pulumi.get(self, "end_date_applicable_to_custom")

    @property
    @pulumi.getter(name="StartDateApplicableToCUSTOM")
    def start_date_applicable_to_custom(self) -> Optional[builtins.str]:
        return pulumi.get(self, "start_date_applicable_to_custom")

    @property
    @pulumi.getter
    def date(self) -> Optional[builtins.str]:
        """
        Start date. Applicable to: ONE_TIME_ONLY
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter(name="repeatOnDays")
    def repeat_on_days(self) -> Optional[Sequence['FirewallPolicyScheduleDtoRepeatOnDaysItem']]:
        """
        Repeat on on days. Applicable to: EVERY_WEEK, CUSTOM
        """
        return pulumi.get(self, "repeat_on_days")

    @property
    @pulumi.getter(name="timeAllDay")
    def time_all_day(self) -> Optional[builtins.bool]:
        """
        Rule will be running for all day. Time range start/end are ignored. Applicable to: EVERY_WEEK, CUSTOM
        """
        return pulumi.get(self, "time_all_day")

    @property
    @pulumi.getter(name="timeRangeEnd")
    def time_range_end(self) -> Optional[builtins.str]:
        """
        End time in 24 hours format. It accepts 24:00 as end of the day. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        """
        return pulumi.get(self, "time_range_end")

    @property
    @pulumi.getter(name="timeRangeStart")
    def time_range_start(self) -> Optional[builtins.str]:
        """
        Start time in 24 hours format. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        """
        return pulumi.get(self, "time_range_start")


@pulumi.output_type
class FirewallQosDestinationDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchingTarget":
            suggest = "matching_target"
        elif key == "portMatchingType":
            suggest = "port_matching_type"
        elif key == "matchingTargetType":
            suggest = "matching_target_type"
        elif key == "portGroupId":
            suggest = "port_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallQosDestinationDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallQosDestinationDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallQosDestinationDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 matching_target: 'FirewallQosDestinationDtoMatchingTarget',
                 port_matching_type: 'FirewallQosDestinationDtoPortMatchingType',
                 matching_target_type: Optional['FirewallQosDestinationDtoMatchingTargetType'] = None,
                 port: Optional[builtins.str] = None,
                 port_group_id: Optional[builtins.str] = None):
        pulumi.set(__self__, "matching_target", matching_target)
        pulumi.set(__self__, "port_matching_type", port_matching_type)
        if matching_target_type is not None:
            pulumi.set(__self__, "matching_target_type", matching_target_type)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_group_id is not None:
            pulumi.set(__self__, "port_group_id", port_group_id)

    @property
    @pulumi.getter(name="matchingTarget")
    def matching_target(self) -> 'FirewallQosDestinationDtoMatchingTarget':
        return pulumi.get(self, "matching_target")

    @property
    @pulumi.getter(name="portMatchingType")
    def port_matching_type(self) -> 'FirewallQosDestinationDtoPortMatchingType':
        return pulumi.get(self, "port_matching_type")

    @property
    @pulumi.getter(name="matchingTargetType")
    def matching_target_type(self) -> Optional['FirewallQosDestinationDtoMatchingTargetType']:
        return pulumi.get(self, "matching_target_type")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="portGroupId")
    def port_group_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "port_group_id")


@pulumi.output_type
class FirewallQosSourceDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchingTarget":
            suggest = "matching_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallQosSourceDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallQosSourceDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallQosSourceDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 matching_target: 'FirewallQosSourceDtoMatchingTarget'):
        pulumi.set(__self__, "matching_target", matching_target)

    @property
    @pulumi.getter(name="matchingTarget")
    def matching_target(self) -> 'FirewallQosSourceDtoMatchingTarget':
        return pulumi.get(self, "matching_target")


@pulumi.output_type
class QosRuleDto(dict):
    def __init__(__self__, *,
                 destination: 'outputs.FirewallQosDestinationDto',
                 objective: 'QosRuleDtoObjective',
                 schedule: 'outputs.FirewallPolicyScheduleDto',
                 source: 'outputs.FirewallQosSourceDto',
                 id: Optional[builtins.str] = None,
                 download_burst: Optional['QosRuleDtoDownloadBurst'] = None,
                 download_limit_kbps: Optional[builtins.int] = None,
                 enabled: Optional[builtins.bool] = None,
                 index: Optional[builtins.int] = None,
                 name: Optional[builtins.str] = None,
                 upload_burst: Optional['QosRuleDtoUploadBurst'] = None,
                 upload_limit_kbps: Optional[builtins.int] = None,
                 wan_or_vpn_network: Optional[builtins.str] = None):
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "objective", objective)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "source", source)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if download_burst is not None:
            pulumi.set(__self__, "download_burst", download_burst)
        if download_limit_kbps is not None:
            pulumi.set(__self__, "download_limit_kbps", download_limit_kbps)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if upload_burst is not None:
            pulumi.set(__self__, "upload_burst", upload_burst)
        if upload_limit_kbps is not None:
            pulumi.set(__self__, "upload_limit_kbps", upload_limit_kbps)
        if wan_or_vpn_network is not None:
            pulumi.set(__self__, "wan_or_vpn_network", wan_or_vpn_network)

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.FirewallQosDestinationDto':
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def objective(self) -> 'QosRuleDtoObjective':
        return pulumi.get(self, "objective")

    @property
    @pulumi.getter
    def schedule(self) -> 'outputs.FirewallPolicyScheduleDto':
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def source(self) -> 'outputs.FirewallQosSourceDto':
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="downloadBurst")
    def download_burst(self) -> Optional['QosRuleDtoDownloadBurst']:
        return pulumi.get(self, "download_burst")

    @property
    @pulumi.getter(name="downloadLimitKbps")
    def download_limit_kbps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "download_limit_kbps")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def index(self) -> Optional[builtins.int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="uploadBurst")
    def upload_burst(self) -> Optional['QosRuleDtoUploadBurst']:
        return pulumi.get(self, "upload_burst")

    @property
    @pulumi.getter(name="uploadLimitKbps")
    def upload_limit_kbps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "upload_limit_kbps")

    @property
    @pulumi.getter(name="wanOrVpnNetwork")
    def wan_or_vpn_network(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_or_vpn_network")


