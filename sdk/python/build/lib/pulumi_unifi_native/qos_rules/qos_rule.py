# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['QosRuleArgs', 'QosRule']

@pulumi.input_type
class QosRuleArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input['FirewallQosDestinationDtoArgs'],
                 objective: pulumi.Input['Objective'],
                 schedule: pulumi.Input['FirewallPolicyScheduleDtoArgs'],
                 source: pulumi.Input['FirewallQosSourceDtoArgs'],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 download_burst: Optional[pulumi.Input['DownloadBurst']] = None,
                 download_limit_kbps: Optional[pulumi.Input[builtins.int]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 index: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 upload_burst: Optional[pulumi.Input['UploadBurst']] = None,
                 upload_limit_kbps: Optional[pulumi.Input[builtins.int]] = None,
                 wan_or_vpn_network: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a QosRule resource.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "objective", objective)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "source", source)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if download_burst is not None:
            pulumi.set(__self__, "download_burst", download_burst)
        if download_limit_kbps is not None:
            pulumi.set(__self__, "download_limit_kbps", download_limit_kbps)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)
        if upload_burst is not None:
            pulumi.set(__self__, "upload_burst", upload_burst)
        if upload_limit_kbps is not None:
            pulumi.set(__self__, "upload_limit_kbps", upload_limit_kbps)
        if wan_or_vpn_network is not None:
            pulumi.set(__self__, "wan_or_vpn_network", wan_or_vpn_network)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input['FirewallQosDestinationDtoArgs']:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input['FirewallQosDestinationDtoArgs']):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def objective(self) -> pulumi.Input['Objective']:
        return pulumi.get(self, "objective")

    @objective.setter
    def objective(self, value: pulumi.Input['Objective']):
        pulumi.set(self, "objective", value)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input['FirewallPolicyScheduleDtoArgs']:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input['FirewallPolicyScheduleDtoArgs']):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['FirewallQosSourceDtoArgs']:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['FirewallQosSourceDtoArgs']):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="downloadBurst")
    def download_burst(self) -> Optional[pulumi.Input['DownloadBurst']]:
        return pulumi.get(self, "download_burst")

    @download_burst.setter
    def download_burst(self, value: Optional[pulumi.Input['DownloadBurst']]):
        pulumi.set(self, "download_burst", value)

    @property
    @pulumi.getter(name="downloadLimitKbps")
    def download_limit_kbps(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "download_limit_kbps")

    @download_limit_kbps.setter
    def download_limit_kbps(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "download_limit_kbps", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)

    @property
    @pulumi.getter(name="uploadBurst")
    def upload_burst(self) -> Optional[pulumi.Input['UploadBurst']]:
        return pulumi.get(self, "upload_burst")

    @upload_burst.setter
    def upload_burst(self, value: Optional[pulumi.Input['UploadBurst']]):
        pulumi.set(self, "upload_burst", value)

    @property
    @pulumi.getter(name="uploadLimitKbps")
    def upload_limit_kbps(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "upload_limit_kbps")

    @upload_limit_kbps.setter
    def upload_limit_kbps(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "upload_limit_kbps", value)

    @property
    @pulumi.getter(name="wanOrVpnNetwork")
    def wan_or_vpn_network(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_or_vpn_network")

    @wan_or_vpn_network.setter
    def wan_or_vpn_network(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_or_vpn_network", value)


@pulumi.type_token("unifi-native:qos-rules:QosRule")
class QosRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 destination: Optional[pulumi.Input[Union['FirewallQosDestinationDtoArgs', 'FirewallQosDestinationDtoArgsDict']]] = None,
                 download_burst: Optional[pulumi.Input['DownloadBurst']] = None,
                 download_limit_kbps: Optional[pulumi.Input[builtins.int]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 index: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 objective: Optional[pulumi.Input['Objective']] = None,
                 schedule: Optional[pulumi.Input[Union['FirewallPolicyScheduleDtoArgs', 'FirewallPolicyScheduleDtoArgsDict']]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 source: Optional[pulumi.Input[Union['FirewallQosSourceDtoArgs', 'FirewallQosSourceDtoArgsDict']]] = None,
                 upload_burst: Optional[pulumi.Input['UploadBurst']] = None,
                 upload_limit_kbps: Optional[pulumi.Input[builtins.int]] = None,
                 wan_or_vpn_network: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a QosRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: QosRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a QosRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param QosRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(QosRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 destination: Optional[pulumi.Input[Union['FirewallQosDestinationDtoArgs', 'FirewallQosDestinationDtoArgsDict']]] = None,
                 download_burst: Optional[pulumi.Input['DownloadBurst']] = None,
                 download_limit_kbps: Optional[pulumi.Input[builtins.int]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 index: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 objective: Optional[pulumi.Input['Objective']] = None,
                 schedule: Optional[pulumi.Input[Union['FirewallPolicyScheduleDtoArgs', 'FirewallPolicyScheduleDtoArgsDict']]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 source: Optional[pulumi.Input[Union['FirewallQosSourceDtoArgs', 'FirewallQosSourceDtoArgsDict']]] = None,
                 upload_burst: Optional[pulumi.Input['UploadBurst']] = None,
                 upload_limit_kbps: Optional[pulumi.Input[builtins.int]] = None,
                 wan_or_vpn_network: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = QosRuleArgs.__new__(QosRuleArgs)

            __props__.__dict__["id"] = id
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__.__dict__["destination"] = destination
            __props__.__dict__["download_burst"] = download_burst
            __props__.__dict__["download_limit_kbps"] = download_limit_kbps
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["index"] = index
            __props__.__dict__["name"] = name
            if objective is None and not opts.urn:
                raise TypeError("Missing required property 'objective'")
            __props__.__dict__["objective"] = objective
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["site_name"] = site_name
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            __props__.__dict__["upload_burst"] = upload_burst
            __props__.__dict__["upload_limit_kbps"] = upload_limit_kbps
            __props__.__dict__["wan_or_vpn_network"] = wan_or_vpn_network
        super(QosRule, __self__).__init__(
            'unifi-native:qos-rules:QosRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'QosRule':
        """
        Get an existing QosRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = QosRuleArgs.__new__(QosRuleArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["destination"] = None
        __props__.__dict__["download_burst"] = None
        __props__.__dict__["download_limit_kbps"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["index"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["objective"] = None
        __props__.__dict__["schedule"] = None
        __props__.__dict__["source"] = None
        __props__.__dict__["upload_burst"] = None
        __props__.__dict__["upload_limit_kbps"] = None
        __props__.__dict__["wan_or_vpn_network"] = None
        return QosRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Output['outputs.FirewallQosDestinationDto']:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="downloadBurst")
    def download_burst(self) -> pulumi.Output[Optional['DownloadBurst']]:
        return pulumi.get(self, "download_burst")

    @property
    @pulumi.getter(name="downloadLimitKbps")
    def download_limit_kbps(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "download_limit_kbps")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def index(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def objective(self) -> pulumi.Output['Objective']:
        return pulumi.get(self, "objective")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output['outputs.FirewallPolicyScheduleDto']:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output['outputs.FirewallQosSourceDto']:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="uploadBurst")
    def upload_burst(self) -> pulumi.Output[Optional['UploadBurst']]:
        return pulumi.get(self, "upload_burst")

    @property
    @pulumi.getter(name="uploadLimitKbps")
    def upload_limit_kbps(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "upload_limit_kbps")

    @property
    @pulumi.getter(name="wanOrVpnNetwork")
    def wan_or_vpn_network(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wan_or_vpn_network")

