# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SettingNetflowArgs', 'SettingNetflow']

@pulumi.input_type
class SettingNetflowArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_engine_id_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 engine_id: Optional[pulumi.Input[builtins.int]] = None,
                 export_frequency: Optional[pulumi.Input[builtins.int]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 refresh_rate: Optional[pulumi.Input[builtins.int]] = None,
                 sampling_mode: Optional[pulumi.Input[builtins.str]] = None,
                 sampling_rate: Optional[pulumi.Input[builtins.int]] = None,
                 server: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.int]] = None):
        """
        The set of arguments for constructing a SettingNetflow resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if auto_engine_id_enabled is not None:
            pulumi.set(__self__, "auto_engine_id_enabled", auto_engine_id_enabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if engine_id is not None:
            pulumi.set(__self__, "engine_id", engine_id)
        if export_frequency is not None:
            pulumi.set(__self__, "export_frequency", export_frequency)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if network_ids is not None:
            pulumi.set(__self__, "network_ids", network_ids)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if sampling_mode is not None:
            pulumi.set(__self__, "sampling_mode", sampling_mode)
        if sampling_rate is not None:
            pulumi.set(__self__, "sampling_rate", sampling_rate)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter(name="autoEngineIdEnabled")
    def auto_engine_id_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "auto_engine_id_enabled")

    @auto_engine_id_enabled.setter
    def auto_engine_id_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "auto_engine_id_enabled", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "engine_id")

    @engine_id.setter
    def engine_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "engine_id", value)

    @property
    @pulumi.getter(name="exportFrequency")
    def export_frequency(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "export_frequency")

    @export_frequency.setter
    def export_frequency(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "export_frequency", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="networkIds")
    def network_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "network_ids")

    @network_ids.setter
    def network_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "network_ids", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "refresh_rate")

    @refresh_rate.setter
    def refresh_rate(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "refresh_rate", value)

    @property
    @pulumi.getter(name="samplingMode")
    def sampling_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "sampling_mode")

    @sampling_mode.setter
    def sampling_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sampling_mode", value)

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "sampling_rate")

    @sampling_rate.setter
    def sampling_rate(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "sampling_rate", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("unifi-native:netflow:SettingNetflow")
class SettingNetflow(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_engine_id_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 engine_id: Optional[pulumi.Input[builtins.int]] = None,
                 export_frequency: Optional[pulumi.Input[builtins.int]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 refresh_rate: Optional[pulumi.Input[builtins.int]] = None,
                 sampling_mode: Optional[pulumi.Input[builtins.str]] = None,
                 sampling_rate: Optional[pulumi.Input[builtins.int]] = None,
                 server: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        """
        Create a SettingNetflow resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SettingNetflowArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SettingNetflow resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SettingNetflowArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingNetflowArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_engine_id_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 engine_id: Optional[pulumi.Input[builtins.int]] = None,
                 export_frequency: Optional[pulumi.Input[builtins.int]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 refresh_rate: Optional[pulumi.Input[builtins.int]] = None,
                 sampling_mode: Optional[pulumi.Input[builtins.str]] = None,
                 sampling_rate: Optional[pulumi.Input[builtins.int]] = None,
                 server: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingNetflowArgs.__new__(SettingNetflowArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["auto_engine_id_enabled"] = auto_engine_id_enabled
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["engine_id"] = engine_id
            __props__.__dict__["export_frequency"] = export_frequency
            __props__.__dict__["key"] = key
            __props__.__dict__["network_ids"] = network_ids
            __props__.__dict__["port"] = port
            __props__.__dict__["refresh_rate"] = refresh_rate
            __props__.__dict__["sampling_mode"] = sampling_mode
            __props__.__dict__["sampling_rate"] = sampling_rate
            __props__.__dict__["server"] = server
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["version"] = version
        super(SettingNetflow, __self__).__init__(
            'unifi-native:netflow:SettingNetflow',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SettingNetflow':
        """
        Get an existing SettingNetflow resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SettingNetflowArgs.__new__(SettingNetflowArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["auto_engine_id_enabled"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["engine_id"] = None
        __props__.__dict__["export_frequency"] = None
        __props__.__dict__["key"] = None
        __props__.__dict__["network_ids"] = None
        __props__.__dict__["port"] = None
        __props__.__dict__["refresh_rate"] = None
        __props__.__dict__["sampling_mode"] = None
        __props__.__dict__["sampling_rate"] = None
        __props__.__dict__["server"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["version"] = None
        return SettingNetflow(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="autoEngineIdEnabled")
    def auto_engine_id_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "auto_engine_id_enabled")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "engine_id")

    @property
    @pulumi.getter(name="exportFrequency")
    def export_frequency(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "export_frequency")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="networkIds")
    def network_ids(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "network_ids")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "refresh_rate")

    @property
    @pulumi.getter(name="samplingMode")
    def sampling_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "sampling_mode")

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "sampling_rate")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "version")

