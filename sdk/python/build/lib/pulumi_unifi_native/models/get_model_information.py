# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetModelInformationResult',
    'AwaitableGetModelInformationResult',
    'get_model_information',
    'get_model_information_output',
]

@pulumi.output_type
class GetModelInformationResult:
    def __init__(__self__, default_image_id=None, left_no_padding_image_id=None, model_abbreviation=None, model_full_name=None, model_name=None, model_sku=None, model_sysid=None, model_uidb_id=None, no_padding_image_id=None, right_no_padding_image_id=None, topology_image_id=None):
        if default_image_id and not isinstance(default_image_id, str):
            raise TypeError("Expected argument 'default_image_id' to be a str")
        pulumi.set(__self__, "default_image_id", default_image_id)
        if left_no_padding_image_id and not isinstance(left_no_padding_image_id, str):
            raise TypeError("Expected argument 'left_no_padding_image_id' to be a str")
        pulumi.set(__self__, "left_no_padding_image_id", left_no_padding_image_id)
        if model_abbreviation and not isinstance(model_abbreviation, str):
            raise TypeError("Expected argument 'model_abbreviation' to be a str")
        pulumi.set(__self__, "model_abbreviation", model_abbreviation)
        if model_full_name and not isinstance(model_full_name, str):
            raise TypeError("Expected argument 'model_full_name' to be a str")
        pulumi.set(__self__, "model_full_name", model_full_name)
        if model_name and not isinstance(model_name, str):
            raise TypeError("Expected argument 'model_name' to be a str")
        pulumi.set(__self__, "model_name", model_name)
        if model_sku and not isinstance(model_sku, str):
            raise TypeError("Expected argument 'model_sku' to be a str")
        pulumi.set(__self__, "model_sku", model_sku)
        if model_sysid and not isinstance(model_sysid, str):
            raise TypeError("Expected argument 'model_sysid' to be a str")
        pulumi.set(__self__, "model_sysid", model_sysid)
        if model_uidb_id and not isinstance(model_uidb_id, str):
            raise TypeError("Expected argument 'model_uidb_id' to be a str")
        pulumi.set(__self__, "model_uidb_id", model_uidb_id)
        if no_padding_image_id and not isinstance(no_padding_image_id, str):
            raise TypeError("Expected argument 'no_padding_image_id' to be a str")
        pulumi.set(__self__, "no_padding_image_id", no_padding_image_id)
        if right_no_padding_image_id and not isinstance(right_no_padding_image_id, str):
            raise TypeError("Expected argument 'right_no_padding_image_id' to be a str")
        pulumi.set(__self__, "right_no_padding_image_id", right_no_padding_image_id)
        if topology_image_id and not isinstance(topology_image_id, str):
            raise TypeError("Expected argument 'topology_image_id' to be a str")
        pulumi.set(__self__, "topology_image_id", topology_image_id)

    @property
    @pulumi.getter(name="DefaultImageId")
    def default_image_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "default_image_id")

    @property
    @pulumi.getter(name="LeftNoPaddingImageId")
    def left_no_padding_image_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "left_no_padding_image_id")

    @property
    @pulumi.getter(name="ModelAbbreviation")
    def model_abbreviation(self) -> Optional[builtins.str]:
        return pulumi.get(self, "model_abbreviation")

    @property
    @pulumi.getter(name="ModelFullName")
    def model_full_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "model_full_name")

    @property
    @pulumi.getter(name="ModelName")
    def model_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "model_name")

    @property
    @pulumi.getter(name="ModelSku")
    def model_sku(self) -> Optional[builtins.str]:
        return pulumi.get(self, "model_sku")

    @property
    @pulumi.getter(name="ModelSysid")
    def model_sysid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "model_sysid")

    @property
    @pulumi.getter(name="ModelUIDBId")
    def model_uidb_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "model_uidb_id")

    @property
    @pulumi.getter(name="NoPaddingImageId")
    def no_padding_image_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "no_padding_image_id")

    @property
    @pulumi.getter(name="RightNoPaddingImageId")
    def right_no_padding_image_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "right_no_padding_image_id")

    @property
    @pulumi.getter(name="TopologyImageId")
    def topology_image_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "topology_image_id")


class AwaitableGetModelInformationResult(GetModelInformationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetModelInformationResult(
            default_image_id=self.default_image_id,
            left_no_padding_image_id=self.left_no_padding_image_id,
            model_abbreviation=self.model_abbreviation,
            model_full_name=self.model_full_name,
            model_name=self.model_name,
            model_sku=self.model_sku,
            model_sysid=self.model_sysid,
            model_uidb_id=self.model_uidb_id,
            no_padding_image_id=self.no_padding_image_id,
            right_no_padding_image_id=self.right_no_padding_image_id,
            topology_image_id=self.topology_image_id)


def get_model_information(model_name: Optional[builtins.str] = None,
                          site_name: Optional[builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetModelInformationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['modelName'] = model_name
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:models:getModelInformation', __args__, opts=opts, typ=GetModelInformationResult).value

    return AwaitableGetModelInformationResult(
        default_image_id=pulumi.get(__ret__, 'default_image_id'),
        left_no_padding_image_id=pulumi.get(__ret__, 'left_no_padding_image_id'),
        model_abbreviation=pulumi.get(__ret__, 'model_abbreviation'),
        model_full_name=pulumi.get(__ret__, 'model_full_name'),
        model_name=pulumi.get(__ret__, 'model_name'),
        model_sku=pulumi.get(__ret__, 'model_sku'),
        model_sysid=pulumi.get(__ret__, 'model_sysid'),
        model_uidb_id=pulumi.get(__ret__, 'model_uidb_id'),
        no_padding_image_id=pulumi.get(__ret__, 'no_padding_image_id'),
        right_no_padding_image_id=pulumi.get(__ret__, 'right_no_padding_image_id'),
        topology_image_id=pulumi.get(__ret__, 'topology_image_id'))
def get_model_information_output(model_name: Optional[pulumi.Input[builtins.str]] = None,
                                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetModelInformationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['modelName'] = model_name
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:models:getModelInformation', __args__, opts=opts, typ=GetModelInformationResult)
    return __ret__.apply(lambda __response__: GetModelInformationResult(
        default_image_id=pulumi.get(__response__, 'default_image_id'),
        left_no_padding_image_id=pulumi.get(__response__, 'left_no_padding_image_id'),
        model_abbreviation=pulumi.get(__response__, 'model_abbreviation'),
        model_full_name=pulumi.get(__response__, 'model_full_name'),
        model_name=pulumi.get(__response__, 'model_name'),
        model_sku=pulumi.get(__response__, 'model_sku'),
        model_sysid=pulumi.get(__response__, 'model_sysid'),
        model_uidb_id=pulumi.get(__response__, 'model_uidb_id'),
        no_padding_image_id=pulumi.get(__response__, 'no_padding_image_id'),
        right_no_padding_image_id=pulumi.get(__response__, 'right_no_padding_image_id'),
        topology_image_id=pulumi.get(__response__, 'topology_image_id')))
