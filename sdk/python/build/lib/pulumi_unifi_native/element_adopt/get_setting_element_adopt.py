# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSettingElementAdoptResult',
    'AwaitableGetSettingElementAdoptResult',
    'get_setting_element_adopt',
    'get_setting_element_adopt_output',
]

@pulumi.output_type
class GetSettingElementAdoptResult:
    def __init__(__self__, data=None, meta=None):
        if data and not isinstance(data, list):
            raise TypeError("Expected argument 'data' to be a list")
        pulumi.set(__self__, "data", data)
        if meta and not isinstance(meta, dict):
            raise TypeError("Expected argument 'meta' to be a dict")
        pulumi.set(__self__, "meta", meta)

    @property
    @pulumi.getter
    def data(self) -> Optional[Sequence['outputs.SettingElementAdopt']]:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def meta(self) -> Optional['outputs.Meta']:
        return pulumi.get(self, "meta")


class AwaitableGetSettingElementAdoptResult(GetSettingElementAdoptResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSettingElementAdoptResult(
            data=self.data,
            meta=self.meta)


def get_setting_element_adopt(site_id: Optional[builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSettingElementAdoptResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteId'] = site_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:element_adopt:getSettingElementAdopt', __args__, opts=opts, typ=GetSettingElementAdoptResult).value

    return AwaitableGetSettingElementAdoptResult(
        data=pulumi.get(__ret__, 'data'),
        meta=pulumi.get(__ret__, 'meta'))
def get_setting_element_adopt_output(site_id: Optional[pulumi.Input[builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSettingElementAdoptResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteId'] = site_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:element_adopt:getSettingElementAdopt', __args__, opts=opts, typ=GetSettingElementAdoptResult)
    return __ret__.apply(lambda __response__: GetSettingElementAdoptResult(
        data=pulumi.get(__response__, 'data'),
        meta=pulumi.get(__response__, 'meta')))
