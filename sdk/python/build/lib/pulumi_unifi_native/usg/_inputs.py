# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'SettingUsgDNSVerificationArgs',
    'SettingUsgDNSVerificationArgsDict',
]

MYPY = False

if not MYPY:
    class SettingUsgDNSVerificationArgsDict(TypedDict):
        domain: NotRequired[pulumi.Input[builtins.str]]
        primary_dns_server: NotRequired[pulumi.Input[builtins.str]]
        secondary_dns_server: NotRequired[pulumi.Input[builtins.str]]
        setting_preference: NotRequired[pulumi.Input[builtins.str]]
elif False:
    SettingUsgDNSVerificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingUsgDNSVerificationArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[builtins.str]] = None,
                 primary_dns_server: Optional[pulumi.Input[builtins.str]] = None,
                 secondary_dns_server: Optional[pulumi.Input[builtins.str]] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if primary_dns_server is not None:
            pulumi.set(__self__, "primary_dns_server", primary_dns_server)
        if secondary_dns_server is not None:
            pulumi.set(__self__, "secondary_dns_server", secondary_dns_server)
        if setting_preference is not None:
            pulumi.set(__self__, "setting_preference", setting_preference)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="primaryDnsServer")
    def primary_dns_server(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "primary_dns_server")

    @primary_dns_server.setter
    def primary_dns_server(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "primary_dns_server", value)

    @property
    @pulumi.getter(name="secondaryDnsServer")
    def secondary_dns_server(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "secondary_dns_server")

    @secondary_dns_server.setter
    def secondary_dns_server(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secondary_dns_server", value)

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "setting_preference")

    @setting_preference.setter
    def setting_preference(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "setting_preference", value)


