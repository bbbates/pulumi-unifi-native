# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetMicroSegmentGroupResult',
    'AwaitableGetMicroSegmentGroupResult',
    'get_micro_segment_group',
    'get_micro_segment_group_output',
]

@pulumi.output_type
class GetMicroSegmentGroupResult:
    def __init__(__self__, block_internet=None, id=None, members=None, name=None):
        if block_internet and not isinstance(block_internet, bool):
            raise TypeError("Expected argument 'block_internet' to be a bool")
        pulumi.set(__self__, "block_internet", block_internet)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="blockInternet")
    def block_internet(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "block_internet")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def members(self) -> Sequence['outputs.MicroSegmentMemberDto']:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


class AwaitableGetMicroSegmentGroupResult(GetMicroSegmentGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMicroSegmentGroupResult(
            block_internet=self.block_internet,
            id=self.id,
            members=self.members,
            name=self.name)


def get_micro_segment_group(id: Optional[builtins.str] = None,
                            site_name: Optional[builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMicroSegmentGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:micro-segment-group:getMicroSegmentGroup', __args__, opts=opts, typ=GetMicroSegmentGroupResult).value

    return AwaitableGetMicroSegmentGroupResult(
        block_internet=pulumi.get(__ret__, 'block_internet'),
        id=pulumi.get(__ret__, 'id'),
        members=pulumi.get(__ret__, 'members'),
        name=pulumi.get(__ret__, 'name'))
def get_micro_segment_group_output(id: Optional[pulumi.Input[builtins.str]] = None,
                                   site_name: Optional[pulumi.Input[builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMicroSegmentGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:micro-segment-group:getMicroSegmentGroup', __args__, opts=opts, typ=GetMicroSegmentGroupResult)
    return __ret__.apply(lambda __response__: GetMicroSegmentGroupResult(
        block_internet=pulumi.get(__response__, 'block_internet'),
        id=pulumi.get(__response__, 'id'),
        members=pulumi.get(__response__, 'members'),
        name=pulumi.get(__response__, 'name')))
