# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'TrafficDomainDto',
    'TrafficIpDto',
    'TrafficIpRangeDto',
    'TrafficPortRangeDto',
    'TrafficRuleBandwidthLimitDto',
    'TrafficRuleScheduleDto',
    'TrafficTargetDeviceDto',
]

@pulumi.output_type
class TrafficDomainDto(dict):
    def __init__(__self__, *,
                 domain: builtins.str,
                 port_ranges: Optional[Sequence['outputs.TrafficPortRangeDto']] = None,
                 ports: Optional[Sequence[builtins.int]] = None):
        pulumi.set(__self__, "domain", domain)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def domain(self) -> builtins.str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[Sequence['outputs.TrafficPortRangeDto']]:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class TrafficIpDto(dict):
    def __init__(__self__, *,
                 ip_or_subnet: builtins.str,
                 ip_version: 'TrafficIpDtoIpVersion',
                 port_ranges: Optional[Sequence['outputs.TrafficPortRangeDto']] = None,
                 ports: Optional[Sequence[builtins.int]] = None):
        pulumi.set(__self__, "ip_or_subnet", ip_or_subnet)
        pulumi.set(__self__, "ip_version", ip_version)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter(name="ipOrSubnet")
    def ip_or_subnet(self) -> builtins.str:
        return pulumi.get(self, "ip_or_subnet")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> 'TrafficIpDtoIpVersion':
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[Sequence['outputs.TrafficPortRangeDto']]:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class TrafficIpRangeDto(dict):
    def __init__(__self__, *,
                 ip_start: builtins.str,
                 ip_stop: builtins.str,
                 ip_version: 'TrafficIpRangeDtoIpVersion'):
        pulumi.set(__self__, "ip_start", ip_start)
        pulumi.set(__self__, "ip_stop", ip_stop)
        pulumi.set(__self__, "ip_version", ip_version)

    @property
    @pulumi.getter(name="ipStart")
    def ip_start(self) -> builtins.str:
        return pulumi.get(self, "ip_start")

    @property
    @pulumi.getter(name="ipStop")
    def ip_stop(self) -> builtins.str:
        return pulumi.get(self, "ip_stop")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> 'TrafficIpRangeDtoIpVersion':
        return pulumi.get(self, "ip_version")


@pulumi.output_type
class TrafficPortRangeDto(dict):
    def __init__(__self__, *,
                 port_start: Optional[builtins.int] = None,
                 port_stop: Optional[builtins.int] = None):
        if port_start is not None:
            pulumi.set(__self__, "port_start", port_start)
        if port_stop is not None:
            pulumi.set(__self__, "port_stop", port_stop)

    @property
    @pulumi.getter(name="portStart")
    def port_start(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port_start")

    @property
    @pulumi.getter(name="portStop")
    def port_stop(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port_stop")


@pulumi.output_type
class TrafficRuleBandwidthLimitDto(dict):
    def __init__(__self__, *,
                 download_limit_kbps: Optional[builtins.int] = None,
                 enabled: Optional[builtins.bool] = None,
                 upload_limit_kbps: Optional[builtins.int] = None):
        if download_limit_kbps is not None:
            pulumi.set(__self__, "download_limit_kbps", download_limit_kbps)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if upload_limit_kbps is not None:
            pulumi.set(__self__, "upload_limit_kbps", upload_limit_kbps)

    @property
    @pulumi.getter(name="downloadLimitKbps")
    def download_limit_kbps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "download_limit_kbps")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="uploadLimitKbps")
    def upload_limit_kbps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "upload_limit_kbps")


@pulumi.output_type
class TrafficRuleScheduleDto(dict):
    def __init__(__self__, *,
                 mode: 'TrafficRuleScheduleDtoMode',
                 end_date_applicable_to_custom: Optional[builtins.str] = None,
                 start_date_applicable_to_custom: Optional[builtins.str] = None,
                 date: Optional[builtins.str] = None,
                 repeat_on_days: Optional[Sequence['TrafficRuleScheduleDtoRepeatOnDaysItem']] = None,
                 time_all_day: Optional[builtins.bool] = None,
                 time_range_end: Optional[builtins.str] = None,
                 time_range_start: Optional[builtins.str] = None):
        """
        :param builtins.str date: Start date. Applicable to: ONE_TIME_ONLY
        :param Sequence['TrafficRuleScheduleDtoRepeatOnDaysItem'] repeat_on_days: Repeat on on days. Applicable to: EVERY_WEEK, CUSTOM
        :param builtins.bool time_all_day: Rule will be running for all day. Time range start/end are ignored. Applicable to: EVERY_WEEK, CUSTOM
        :param builtins.str time_range_end: End time in 24 hours format. It accepts 24:00 as end of the day. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        :param builtins.str time_range_start: Start time in 24 hours format. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        """
        pulumi.set(__self__, "mode", mode)
        if end_date_applicable_to_custom is not None:
            pulumi.set(__self__, "end_date_applicable_to_custom", end_date_applicable_to_custom)
        if start_date_applicable_to_custom is not None:
            pulumi.set(__self__, "start_date_applicable_to_custom", start_date_applicable_to_custom)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if repeat_on_days is not None:
            pulumi.set(__self__, "repeat_on_days", repeat_on_days)
        if time_all_day is not None:
            pulumi.set(__self__, "time_all_day", time_all_day)
        if time_range_end is not None:
            pulumi.set(__self__, "time_range_end", time_range_end)
        if time_range_start is not None:
            pulumi.set(__self__, "time_range_start", time_range_start)

    @property
    @pulumi.getter
    def mode(self) -> 'TrafficRuleScheduleDtoMode':
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="EndDateApplicableToCUSTOM")
    def end_date_applicable_to_custom(self) -> Optional[builtins.str]:
        return pulumi.get(self, "end_date_applicable_to_custom")

    @property
    @pulumi.getter(name="StartDateApplicableToCUSTOM")
    def start_date_applicable_to_custom(self) -> Optional[builtins.str]:
        return pulumi.get(self, "start_date_applicable_to_custom")

    @property
    @pulumi.getter
    def date(self) -> Optional[builtins.str]:
        """
        Start date. Applicable to: ONE_TIME_ONLY
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter(name="repeatOnDays")
    def repeat_on_days(self) -> Optional[Sequence['TrafficRuleScheduleDtoRepeatOnDaysItem']]:
        """
        Repeat on on days. Applicable to: EVERY_WEEK, CUSTOM
        """
        return pulumi.get(self, "repeat_on_days")

    @property
    @pulumi.getter(name="timeAllDay")
    def time_all_day(self) -> Optional[builtins.bool]:
        """
        Rule will be running for all day. Time range start/end are ignored. Applicable to: EVERY_WEEK, CUSTOM
        """
        return pulumi.get(self, "time_all_day")

    @property
    @pulumi.getter(name="timeRangeEnd")
    def time_range_end(self) -> Optional[builtins.str]:
        """
        End time in 24 hours format. It accepts 24:00 as end of the day. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        """
        return pulumi.get(self, "time_range_end")

    @property
    @pulumi.getter(name="timeRangeStart")
    def time_range_start(self) -> Optional[builtins.str]:
        """
        Start time in 24 hours format. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        """
        return pulumi.get(self, "time_range_start")


@pulumi.output_type
class TrafficTargetDeviceDto(dict):
    def __init__(__self__, *,
                 type: 'TrafficTargetDeviceDtoType',
                 client_mac: Optional[builtins.str] = None,
                 network_id: Optional[builtins.str] = None):
        pulumi.set(__self__, "type", type)
        if client_mac is not None:
            pulumi.set(__self__, "client_mac", client_mac)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)

    @property
    @pulumi.getter
    def type(self) -> 'TrafficTargetDeviceDtoType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="clientMac")
    def client_mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "client_mac")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "network_id")


