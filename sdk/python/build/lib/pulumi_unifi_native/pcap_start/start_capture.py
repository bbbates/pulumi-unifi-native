# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = ['StartCaptureArgs', 'StartCapture']

@pulumi.input_type
class StartCaptureArgs:
    def __init__(__self__, *,
                 mac: pulumi.Input[builtins.str],
                 network_id: pulumi.Input[builtins.str],
                 traffic_type: pulumi.Input['TrafficType'],
                 duration: Optional[pulumi.Input[builtins.int]] = None,
                 max_size: Optional[pulumi.Input[builtins.int]] = None,
                 radio_bands: Optional[pulumi.Input[Sequence[pulumi.Input['RadioBandsItem']]]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a StartCapture resource.
        :param pulumi.Input[builtins.str] mac: MAC address of the device to capture packets
        :param pulumi.Input[builtins.str] network_id: Network ID of the network to capture packets
        :param pulumi.Input['TrafficType'] traffic_type: Type of traffic to capture
        :param pulumi.Input[builtins.int] duration: Duration of the packet capture in seconds
        :param pulumi.Input[builtins.int] max_size: Maximum size of the packet capture file in kilobytes
        :param pulumi.Input[Sequence[pulumi.Input['RadioBandsItem']]] radio_bands: Radios to capture packets from
        :param pulumi.Input[builtins.str] site_name: Site Name
        """
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "traffic_type", traffic_type)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if radio_bands is not None:
            pulumi.set(__self__, "radio_bands", radio_bands)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)

    @property
    @pulumi.getter
    def mac(self) -> pulumi.Input[builtins.str]:
        """
        MAC address of the device to capture packets
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[builtins.str]:
        """
        Network ID of the network to capture packets
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> pulumi.Input['TrafficType']:
        """
        Type of traffic to capture
        """
        return pulumi.get(self, "traffic_type")

    @traffic_type.setter
    def traffic_type(self, value: pulumi.Input['TrafficType']):
        pulumi.set(self, "traffic_type", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Duration of the packet capture in seconds
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Maximum size of the packet capture file in kilobytes
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="radioBands")
    def radio_bands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RadioBandsItem']]]]:
        """
        Radios to capture packets from
        """
        return pulumi.get(self, "radio_bands")

    @radio_bands.setter
    def radio_bands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RadioBandsItem']]]]):
        pulumi.set(self, "radio_bands", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Site Name
        """
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)


@pulumi.type_token("unifi-native:pcap-start:StartCapture")
class StartCapture(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 duration: Optional[pulumi.Input[builtins.int]] = None,
                 mac: Optional[pulumi.Input[builtins.str]] = None,
                 max_size: Optional[pulumi.Input[builtins.int]] = None,
                 network_id: Optional[pulumi.Input[builtins.str]] = None,
                 radio_bands: Optional[pulumi.Input[Sequence[pulumi.Input['RadioBandsItem']]]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 traffic_type: Optional[pulumi.Input['TrafficType']] = None,
                 __props__=None):
        """
        Create a StartCapture resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.int] duration: Duration of the packet capture in seconds
        :param pulumi.Input[builtins.str] mac: MAC address of the device to capture packets
        :param pulumi.Input[builtins.int] max_size: Maximum size of the packet capture file in kilobytes
        :param pulumi.Input[builtins.str] network_id: Network ID of the network to capture packets
        :param pulumi.Input[Sequence[pulumi.Input['RadioBandsItem']]] radio_bands: Radios to capture packets from
        :param pulumi.Input[builtins.str] site_name: Site Name
        :param pulumi.Input['TrafficType'] traffic_type: Type of traffic to capture
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StartCaptureArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a StartCapture resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StartCaptureArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StartCaptureArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 duration: Optional[pulumi.Input[builtins.int]] = None,
                 mac: Optional[pulumi.Input[builtins.str]] = None,
                 max_size: Optional[pulumi.Input[builtins.int]] = None,
                 network_id: Optional[pulumi.Input[builtins.str]] = None,
                 radio_bands: Optional[pulumi.Input[Sequence[pulumi.Input['RadioBandsItem']]]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 traffic_type: Optional[pulumi.Input['TrafficType']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StartCaptureArgs.__new__(StartCaptureArgs)

            __props__.__dict__["duration"] = duration
            if mac is None and not opts.urn:
                raise TypeError("Missing required property 'mac'")
            __props__.__dict__["mac"] = mac
            __props__.__dict__["max_size"] = max_size
            if network_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_id'")
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["radio_bands"] = radio_bands
            __props__.__dict__["site_name"] = site_name
            if traffic_type is None and not opts.urn:
                raise TypeError("Missing required property 'traffic_type'")
            __props__.__dict__["traffic_type"] = traffic_type
        super(StartCapture, __self__).__init__(
            'unifi-native:pcap-start:StartCapture',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'StartCapture':
        """
        Get an existing StartCapture resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = StartCaptureArgs.__new__(StartCaptureArgs)

        __props__.__dict__["duration"] = None
        __props__.__dict__["mac"] = None
        __props__.__dict__["max_size"] = None
        __props__.__dict__["network_id"] = None
        __props__.__dict__["radio_bands"] = None
        __props__.__dict__["traffic_type"] = None
        return StartCapture(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        Duration of the packet capture in seconds
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def mac(self) -> pulumi.Output[builtins.str]:
        """
        MAC address of the device to capture packets
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        Maximum size of the packet capture file in kilobytes
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[builtins.str]:
        """
        Network ID of the network to capture packets
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="radioBands")
    def radio_bands(self) -> pulumi.Output[Optional[Sequence['RadioBandsItem']]]:
        """
        Radios to capture packets from
        """
        return pulumi.get(self, "radio_bands")

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> pulumi.Output['TrafficType']:
        """
        Type of traffic to capture
        """
        return pulumi.get(self, "traffic_type")

