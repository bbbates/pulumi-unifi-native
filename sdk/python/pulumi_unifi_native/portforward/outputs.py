# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'Meta',
    'PortForward',
    'PortForwardDestinationIPs',
]

@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


@pulumi.output_type
class PortForward(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 destination_ip: Optional[builtins.str] = None,
                 destination_ips: Optional[Sequence['outputs.PortForwardDestinationIPs']] = None,
                 dst_port: Optional[builtins.str] = None,
                 enabled: Optional[builtins.bool] = None,
                 fwd: Optional[builtins.str] = None,
                 fwd_port: Optional[builtins.str] = None,
                 log: Optional[builtins.bool] = None,
                 name: Optional[builtins.str] = None,
                 pfwd_interface: Optional[builtins.str] = None,
                 proto: Optional[builtins.str] = None,
                 site_id: Optional[builtins.str] = None,
                 src: Optional[builtins.str] = None,
                 src_firewall_group_id: Optional[builtins.str] = None,
                 src_limiting_enabled: Optional[builtins.bool] = None,
                 src_limiting_type: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_ips is not None:
            pulumi.set(__self__, "destination_ips", destination_ips)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if fwd is not None:
            pulumi.set(__self__, "fwd", fwd)
        if fwd_port is not None:
            pulumi.set(__self__, "fwd_port", fwd_port)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pfwd_interface is not None:
            pulumi.set(__self__, "pfwd_interface", pfwd_interface)
        if proto is not None:
            pulumi.set(__self__, "proto", proto)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if src is not None:
            pulumi.set(__self__, "src", src)
        if src_firewall_group_id is not None:
            pulumi.set(__self__, "src_firewall_group_id", src_firewall_group_id)
        if src_limiting_enabled is not None:
            pulumi.set(__self__, "src_limiting_enabled", src_limiting_enabled)
        if src_limiting_type is not None:
            pulumi.set(__self__, "src_limiting_type", src_limiting_type)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "destination_ip")

    @property
    @pulumi.getter(name="destinationIps")
    def destination_ips(self) -> Optional[Sequence['outputs.PortForwardDestinationIPs']]:
        return pulumi.get(self, "destination_ips")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def fwd(self) -> Optional[builtins.str]:
        return pulumi.get(self, "fwd")

    @property
    @pulumi.getter(name="fwdPort")
    def fwd_port(self) -> Optional[builtins.str]:
        return pulumi.get(self, "fwd_port")

    @property
    @pulumi.getter
    def log(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pfwdInterface")
    def pfwd_interface(self) -> Optional[builtins.str]:
        return pulumi.get(self, "pfwd_interface")

    @property
    @pulumi.getter
    def proto(self) -> Optional[builtins.str]:
        return pulumi.get(self, "proto")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def src(self) -> Optional[builtins.str]:
        return pulumi.get(self, "src")

    @property
    @pulumi.getter(name="srcFirewallGroupId")
    def src_firewall_group_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "src_firewall_group_id")

    @property
    @pulumi.getter(name="srcLimitingEnabled")
    def src_limiting_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "src_limiting_enabled")

    @property
    @pulumi.getter(name="srcLimitingType")
    def src_limiting_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "src_limiting_type")


@pulumi.output_type
class PortForwardDestinationIPs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationIp":
            suggest = "destination_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortForwardDestinationIPs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortForwardDestinationIPs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortForwardDestinationIPs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_ip: Optional[builtins.str] = None,
                 interface: Optional[builtins.str] = None):
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)

    @property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "destination_ip")

    @property
    @pulumi.getter
    def interface(self) -> Optional[builtins.str]:
        return pulumi.get(self, "interface")


