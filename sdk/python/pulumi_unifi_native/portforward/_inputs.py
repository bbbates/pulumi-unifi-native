# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'PortForwardDestinationIPsArgs',
    'PortForwardDestinationIPsArgsDict',
]

MYPY = False

if not MYPY:
    class PortForwardDestinationIPsArgsDict(TypedDict):
        destination_ip: NotRequired[pulumi.Input[builtins.str]]
        interface: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PortForwardDestinationIPsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PortForwardDestinationIPsArgs:
    def __init__(__self__, *,
                 destination_ip: Optional[pulumi.Input[builtins.str]] = None,
                 interface: Optional[pulumi.Input[builtins.str]] = None):
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)

    @property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "destination_ip")

    @destination_ip.setter
    def destination_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "destination_ip", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "interface", value)


