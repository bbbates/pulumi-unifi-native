# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'Dashboard',
    'DashboardModules',
    'Meta',
    'SettingDashboard',
    'SettingDashboardWidgets',
]

@pulumi.output_type
class Dashboard(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 controller_version: Optional[builtins.str] = None,
                 desc: Optional[builtins.str] = None,
                 is_public: Optional[builtins.bool] = None,
                 modules: Optional[Sequence['outputs.DashboardModules']] = None,
                 name: Optional[builtins.str] = None,
                 site_id: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if controller_version is not None:
            pulumi.set(__self__, "controller_version", controller_version)
        if desc is not None:
            pulumi.set(__self__, "desc", desc)
        if is_public is not None:
            pulumi.set(__self__, "is_public", is_public)
        if modules is not None:
            pulumi.set(__self__, "modules", modules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="controllerVersion")
    def controller_version(self) -> Optional[builtins.str]:
        return pulumi.get(self, "controller_version")

    @property
    @pulumi.getter
    def desc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter
    def modules(self) -> Optional[Sequence['outputs.DashboardModules']]:
        return pulumi.get(self, "modules")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")


@pulumi.output_type
class DashboardModules(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "moduleId":
            suggest = "module_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardModules. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardModules.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardModules.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 module_id: Optional[builtins.str] = None,
                 restrictions: Optional[builtins.str] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if module_id is not None:
            pulumi.set(__self__, "module_id", module_id)
        if restrictions is not None:
            pulumi.set(__self__, "restrictions", restrictions)

    @property
    @pulumi.getter
    def config(self) -> Optional[builtins.str]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "module_id")

    @property
    @pulumi.getter
    def restrictions(self) -> Optional[builtins.str]:
        return pulumi.get(self, "restrictions")


@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


@pulumi.output_type
class SettingDashboard(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 key: Optional[builtins.str] = None,
                 layout_preference: Optional[builtins.str] = None,
                 site_id: Optional[builtins.str] = None,
                 widgets: Optional[Sequence['outputs.SettingDashboardWidgets']] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if layout_preference is not None:
            pulumi.set(__self__, "layout_preference", layout_preference)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if widgets is not None:
            pulumi.set(__self__, "widgets", widgets)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="layoutPreference")
    def layout_preference(self) -> Optional[builtins.str]:
        return pulumi.get(self, "layout_preference")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def widgets(self) -> Optional[Sequence['outputs.SettingDashboardWidgets']]:
        return pulumi.get(self, "widgets")


@pulumi.output_type
class SettingDashboardWidgets(dict):
    def __init__(__self__, *,
                 enabled: Optional[builtins.bool] = None,
                 name: Optional[builtins.str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")


