# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DynamicDNSArgs', 'DynamicDNS']

@pulumi.input_type
class DynamicDNSArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 custom_service: Optional[pulumi.Input[builtins.str]] = None,
                 host_name: Optional[pulumi.Input[builtins.str]] = None,
                 interface: Optional[pulumi.Input[builtins.str]] = None,
                 login: Optional[pulumi.Input[builtins.str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 server: Optional[pulumi.Input[builtins.str]] = None,
                 service: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 x_password: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a DynamicDNS resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if custom_service is not None:
            pulumi.set(__self__, "custom_service", custom_service)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if x_password is not None:
            pulumi.set(__self__, "x_password", x_password)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter(name="customService")
    def custom_service(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "custom_service")

    @custom_service.setter
    def custom_service(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_service", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="xPassword")
    def x_password(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_password")

    @x_password.setter
    def x_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_password", value)


@pulumi.type_token("unifi-native:dynamicdns:DynamicDNS")
class DynamicDNS(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 custom_service: Optional[pulumi.Input[builtins.str]] = None,
                 host_name: Optional[pulumi.Input[builtins.str]] = None,
                 interface: Optional[pulumi.Input[builtins.str]] = None,
                 login: Optional[pulumi.Input[builtins.str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 server: Optional[pulumi.Input[builtins.str]] = None,
                 service: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 x_password: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a DynamicDNS resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DynamicDNSArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DynamicDNS resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DynamicDNSArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DynamicDNSArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 custom_service: Optional[pulumi.Input[builtins.str]] = None,
                 host_name: Optional[pulumi.Input[builtins.str]] = None,
                 interface: Optional[pulumi.Input[builtins.str]] = None,
                 login: Optional[pulumi.Input[builtins.str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 server: Optional[pulumi.Input[builtins.str]] = None,
                 service: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 x_password: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DynamicDNSArgs.__new__(DynamicDNSArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["custom_service"] = custom_service
            __props__.__dict__["host_name"] = host_name
            __props__.__dict__["interface"] = interface
            __props__.__dict__["login"] = login
            __props__.__dict__["options"] = options
            __props__.__dict__["server"] = server
            __props__.__dict__["service"] = service
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["x_password"] = x_password
        super(DynamicDNS, __self__).__init__(
            'unifi-native:dynamicdns:DynamicDNS',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DynamicDNS':
        """
        Get an existing DynamicDNS resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DynamicDNSArgs.__new__(DynamicDNSArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["custom_service"] = None
        __props__.__dict__["host_name"] = None
        __props__.__dict__["interface"] = None
        __props__.__dict__["login"] = None
        __props__.__dict__["options"] = None
        __props__.__dict__["server"] = None
        __props__.__dict__["service"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["x_password"] = None
        return DynamicDNS(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="customService")
    def custom_service(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "custom_service")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def login(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "login")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def service(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="xPassword")
    def x_password(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_password")

