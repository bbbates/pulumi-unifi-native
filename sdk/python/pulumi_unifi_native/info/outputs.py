# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ModelMetaDto',
    'SelfDto',
    'SiteDto',
    'SystemDto',
    'X',
]

@pulumi.output_type
class ModelMetaDto(dict):
    def __init__(__self__, *,
                 default_image_id: Optional[builtins.str] = None,
                 left_no_padding_image_id: Optional[builtins.str] = None,
                 model_abbreviation: Optional[builtins.str] = None,
                 model_full_name: Optional[builtins.str] = None,
                 model_name: Optional[builtins.str] = None,
                 model_sku: Optional[builtins.str] = None,
                 model_sysid: Optional[builtins.str] = None,
                 model_uidb_id: Optional[builtins.str] = None,
                 no_padding_image_id: Optional[builtins.str] = None,
                 right_no_padding_image_id: Optional[builtins.str] = None,
                 topology_image_id: Optional[builtins.str] = None):
        if default_image_id is not None:
            pulumi.set(__self__, "default_image_id", default_image_id)
        if left_no_padding_image_id is not None:
            pulumi.set(__self__, "left_no_padding_image_id", left_no_padding_image_id)
        if model_abbreviation is not None:
            pulumi.set(__self__, "model_abbreviation", model_abbreviation)
        if model_full_name is not None:
            pulumi.set(__self__, "model_full_name", model_full_name)
        if model_name is not None:
            pulumi.set(__self__, "model_name", model_name)
        if model_sku is not None:
            pulumi.set(__self__, "model_sku", model_sku)
        if model_sysid is not None:
            pulumi.set(__self__, "model_sysid", model_sysid)
        if model_uidb_id is not None:
            pulumi.set(__self__, "model_uidb_id", model_uidb_id)
        if no_padding_image_id is not None:
            pulumi.set(__self__, "no_padding_image_id", no_padding_image_id)
        if right_no_padding_image_id is not None:
            pulumi.set(__self__, "right_no_padding_image_id", right_no_padding_image_id)
        if topology_image_id is not None:
            pulumi.set(__self__, "topology_image_id", topology_image_id)

    @property
    @pulumi.getter(name="DefaultImageId")
    def default_image_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "default_image_id")

    @property
    @pulumi.getter(name="LeftNoPaddingImageId")
    def left_no_padding_image_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "left_no_padding_image_id")

    @property
    @pulumi.getter(name="ModelAbbreviation")
    def model_abbreviation(self) -> Optional[builtins.str]:
        return pulumi.get(self, "model_abbreviation")

    @property
    @pulumi.getter(name="ModelFullName")
    def model_full_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "model_full_name")

    @property
    @pulumi.getter(name="ModelName")
    def model_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "model_name")

    @property
    @pulumi.getter(name="ModelSku")
    def model_sku(self) -> Optional[builtins.str]:
        return pulumi.get(self, "model_sku")

    @property
    @pulumi.getter(name="ModelSysid")
    def model_sysid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "model_sysid")

    @property
    @pulumi.getter(name="ModelUIDBId")
    def model_uidb_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "model_uidb_id")

    @property
    @pulumi.getter(name="NoPaddingImageId")
    def no_padding_image_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "no_padding_image_id")

    @property
    @pulumi.getter(name="RightNoPaddingImageId")
    def right_no_padding_image_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "right_no_padding_image_id")

    @property
    @pulumi.getter(name="TopologyImageId")
    def topology_image_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "topology_image_id")


@pulumi.output_type
class SelfDto(dict):
    def __init__(__self__, *,
                 admin_id: Optional[builtins.str] = None,
                 avatar_url: Optional[builtins.str] = None,
                 community_id: Optional[builtins.str] = None,
                 email: Optional[builtins.str] = None,
                 email_alert_enabled: Optional[builtins.bool] = None,
                 email_alert_grouping_delay: Optional[builtins.int] = None,
                 email_alert_grouping_enabled: Optional[builtins.bool] = None,
                 first_name: Optional[builtins.str] = None,
                 html_email_enabled: Optional[builtins.bool] = None,
                 is_owner: Optional[builtins.bool] = None,
                 is_professional_installer: Optional[builtins.bool] = None,
                 is_super: Optional[builtins.bool] = None,
                 last_name: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 push_alert_enabled: Optional[builtins.bool] = None,
                 requires_new_password: Optional[builtins.bool] = None,
                 ubic_name: Optional[builtins.str] = None,
                 ubic_uuid: Optional[builtins.str] = None,
                 ui_settings: Optional['outputs.X'] = None,
                 uid: Optional[builtins.str] = None):
        if admin_id is not None:
            pulumi.set(__self__, "admin_id", admin_id)
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if community_id is not None:
            pulumi.set(__self__, "community_id", community_id)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if email_alert_enabled is not None:
            pulumi.set(__self__, "email_alert_enabled", email_alert_enabled)
        if email_alert_grouping_delay is not None:
            pulumi.set(__self__, "email_alert_grouping_delay", email_alert_grouping_delay)
        if email_alert_grouping_enabled is not None:
            pulumi.set(__self__, "email_alert_grouping_enabled", email_alert_grouping_enabled)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if html_email_enabled is not None:
            pulumi.set(__self__, "html_email_enabled", html_email_enabled)
        if is_owner is not None:
            pulumi.set(__self__, "is_owner", is_owner)
        if is_professional_installer is not None:
            pulumi.set(__self__, "is_professional_installer", is_professional_installer)
        if is_super is not None:
            pulumi.set(__self__, "is_super", is_super)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if push_alert_enabled is not None:
            pulumi.set(__self__, "push_alert_enabled", push_alert_enabled)
        if requires_new_password is not None:
            pulumi.set(__self__, "requires_new_password", requires_new_password)
        if ubic_name is not None:
            pulumi.set(__self__, "ubic_name", ubic_name)
        if ubic_uuid is not None:
            pulumi.set(__self__, "ubic_uuid", ubic_uuid)
        if ui_settings is not None:
            pulumi.set(__self__, "ui_settings", ui_settings)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="adminId")
    def admin_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "admin_id")

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="communityId")
    def community_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "community_id")

    @property
    @pulumi.getter
    def email(self) -> Optional[builtins.str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="emailAlertEnabled")
    def email_alert_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "email_alert_enabled")

    @property
    @pulumi.getter(name="emailAlertGroupingDelay")
    def email_alert_grouping_delay(self) -> Optional[builtins.int]:
        return pulumi.get(self, "email_alert_grouping_delay")

    @property
    @pulumi.getter(name="emailAlertGroupingEnabled")
    def email_alert_grouping_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "email_alert_grouping_enabled")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="htmlEmailEnabled")
    def html_email_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "html_email_enabled")

    @property
    @pulumi.getter(name="isOwner")
    def is_owner(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "is_owner")

    @property
    @pulumi.getter(name="isProfessionalInstaller")
    def is_professional_installer(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "is_professional_installer")

    @property
    @pulumi.getter(name="isSuper")
    def is_super(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "is_super")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pushAlertEnabled")
    def push_alert_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "push_alert_enabled")

    @property
    @pulumi.getter(name="requiresNewPassword")
    def requires_new_password(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "requires_new_password")

    @property
    @pulumi.getter(name="ubicName")
    def ubic_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ubic_name")

    @property
    @pulumi.getter(name="ubicUuid")
    def ubic_uuid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ubic_uuid")

    @property
    @pulumi.getter(name="uiSettings")
    def ui_settings(self) -> Optional['outputs.X']:
        return pulumi.get(self, "ui_settings")

    @property
    @pulumi.getter
    def uid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "uid")


@pulumi.output_type
class SiteDto(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 desc: Optional[builtins.str] = None,
                 device_count: Optional[builtins.int] = None,
                 name: Optional[builtins.str] = None,
                 permissions: Optional[Sequence[builtins.str]] = None,
                 role: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if desc is not None:
            pulumi.set(__self__, "desc", desc)
        if device_count is not None:
            pulumi.set(__self__, "device_count", device_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter
    def desc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter(name="deviceCount")
    def device_count(self) -> Optional[builtins.int]:
        return pulumi.get(self, "device_count")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def role(self) -> Optional[builtins.str]:
        return pulumi.get(self, "role")


@pulumi.output_type
class SystemDto(dict):
    def __init__(__self__, *,
                 device_id: Optional[builtins.str] = None,
                 host_meta: Optional['outputs.ModelMetaDto'] = None,
                 multiple_sites_supported: Optional[builtins.bool] = None,
                 super_permissions: Optional[Sequence[builtins.str]] = None,
                 version: Optional[builtins.str] = None):
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if host_meta is not None:
            pulumi.set(__self__, "host_meta", host_meta)
        if multiple_sites_supported is not None:
            pulumi.set(__self__, "multiple_sites_supported", multiple_sites_supported)
        if super_permissions is not None:
            pulumi.set(__self__, "super_permissions", super_permissions)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="hostMeta")
    def host_meta(self) -> Optional['outputs.ModelMetaDto']:
        return pulumi.get(self, "host_meta")

    @property
    @pulumi.getter(name="multipleSitesSupported")
    def multiple_sites_supported(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "multiple_sites_supported")

    @property
    @pulumi.getter(name="superPermissions")
    def super_permissions(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "super_permissions")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class X(dict):
    def __init__(__self__, *,
                 creation_timestamp: Optional[builtins.int] = None,
                 empty: Optional[builtins.bool] = None,
                 partial_object: Optional[builtins.bool] = None):
        if creation_timestamp is not None:
            pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        if empty is not None:
            pulumi.set(__self__, "empty", empty)
        if partial_object is not None:
            pulumi.set(__self__, "partial_object", partial_object)

    @property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> Optional[builtins.int]:
        return pulumi.get(self, "creation_timestamp")

    @property
    @pulumi.getter
    def empty(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "empty")

    @property
    @pulumi.getter(name="partialObject")
    def partial_object(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "partial_object")


