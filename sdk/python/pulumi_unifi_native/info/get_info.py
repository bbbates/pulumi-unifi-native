# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInfoResult',
    'AwaitableGetInfoResult',
    'get_info',
    'get_info_output',
]

@pulumi.output_type
class GetInfoResult:
    def __init__(__self__, self=None, sites=None, system=None):
        if self and not isinstance(self, dict):
            raise TypeError("Expected argument 'self' to be a dict")
        pulumi.set(__self__, "self", self)
        if sites and not isinstance(sites, list):
            raise TypeError("Expected argument 'sites' to be a list")
        pulumi.set(__self__, "sites", sites)
        if system and not isinstance(system, dict):
            raise TypeError("Expected argument 'system' to be a dict")
        pulumi.set(__self__, "system", system)

    @property
    @pulumi.getter
    def self(self) -> Optional['outputs.SelfDto']:
        return pulumi.get(self, "self")

    @property
    @pulumi.getter
    def sites(self) -> Optional[Sequence['outputs.SiteDto']]:
        return pulumi.get(self, "sites")

    @property
    @pulumi.getter
    def system(self) -> Optional['outputs.SystemDto']:
        return pulumi.get(self, "system")


class AwaitableGetInfoResult(GetInfoResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInfoResult(
            self=self.self,
            sites=self.sites,
            system=self.system)


def get_info(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInfoResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:info:getInfo', __args__, opts=opts, typ=GetInfoResult).value

    return AwaitableGetInfoResult(
        self=pulumi.get(__ret__, 'self'),
        sites=pulumi.get(__ret__, 'sites'),
        system=pulumi.get(__ret__, 'system'))
def get_info_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInfoResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:info:getInfo', __args__, opts=opts, typ=GetInfoResult)
    return __ret__.apply(lambda __response__: GetInfoResult(
        self=pulumi.get(__response__, 'self'),
        sites=pulumi.get(__response__, 'sites'),
        system=pulumi.get(__response__, 'system')))
