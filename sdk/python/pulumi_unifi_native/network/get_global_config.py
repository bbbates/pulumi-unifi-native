# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetGlobalConfigResult',
    'AwaitableGetGlobalConfigResult',
    'get_global_config',
    'get_global_config_output',
]

@pulumi.output_type
class GetGlobalConfigResult:
    def __init__(__self__, flood_unknown_multicast_for_network_ids=None, igmp_fastleave_for_network_ids=None, igmp_querier_switches=None, igmp_snooping_for=None, igmp_snooping_for_network_ids=None, ipv6_pd_interfaces=None, mdns_enabled_for=None, mdns_enabled_for_network_ids=None):
        if flood_unknown_multicast_for_network_ids and not isinstance(flood_unknown_multicast_for_network_ids, list):
            raise TypeError("Expected argument 'flood_unknown_multicast_for_network_ids' to be a list")
        pulumi.set(__self__, "flood_unknown_multicast_for_network_ids", flood_unknown_multicast_for_network_ids)
        if igmp_fastleave_for_network_ids and not isinstance(igmp_fastleave_for_network_ids, list):
            raise TypeError("Expected argument 'igmp_fastleave_for_network_ids' to be a list")
        pulumi.set(__self__, "igmp_fastleave_for_network_ids", igmp_fastleave_for_network_ids)
        if igmp_querier_switches and not isinstance(igmp_querier_switches, list):
            raise TypeError("Expected argument 'igmp_querier_switches' to be a list")
        pulumi.set(__self__, "igmp_querier_switches", igmp_querier_switches)
        if igmp_snooping_for and not isinstance(igmp_snooping_for, str):
            raise TypeError("Expected argument 'igmp_snooping_for' to be a str")
        pulumi.set(__self__, "igmp_snooping_for", igmp_snooping_for)
        if igmp_snooping_for_network_ids and not isinstance(igmp_snooping_for_network_ids, list):
            raise TypeError("Expected argument 'igmp_snooping_for_network_ids' to be a list")
        pulumi.set(__self__, "igmp_snooping_for_network_ids", igmp_snooping_for_network_ids)
        if ipv6_pd_interfaces and not isinstance(ipv6_pd_interfaces, list):
            raise TypeError("Expected argument 'ipv6_pd_interfaces' to be a list")
        pulumi.set(__self__, "ipv6_pd_interfaces", ipv6_pd_interfaces)
        if mdns_enabled_for and not isinstance(mdns_enabled_for, str):
            raise TypeError("Expected argument 'mdns_enabled_for' to be a str")
        pulumi.set(__self__, "mdns_enabled_for", mdns_enabled_for)
        if mdns_enabled_for_network_ids and not isinstance(mdns_enabled_for_network_ids, list):
            raise TypeError("Expected argument 'mdns_enabled_for_network_ids' to be a list")
        pulumi.set(__self__, "mdns_enabled_for_network_ids", mdns_enabled_for_network_ids)

    @property
    @pulumi.getter(name="floodUnknownMulticastForNetworkIds")
    def flood_unknown_multicast_for_network_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "flood_unknown_multicast_for_network_ids")

    @property
    @pulumi.getter(name="igmpFastleaveForNetworkIds")
    def igmp_fastleave_for_network_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "igmp_fastleave_for_network_ids")

    @property
    @pulumi.getter(name="igmpQuerierSwitches")
    def igmp_querier_switches(self) -> Optional[Sequence['outputs.IgmpQuerierSwitchDto']]:
        return pulumi.get(self, "igmp_querier_switches")

    @property
    @pulumi.getter(name="igmpSnoopingFor")
    def igmp_snooping_for(self) -> 'GlobalNetworkConfigDtoIgmpSnoopingFor':
        return pulumi.get(self, "igmp_snooping_for")

    @property
    @pulumi.getter(name="igmpSnoopingForNetworkIds")
    def igmp_snooping_for_network_ids(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "igmp_snooping_for_network_ids")

    @property
    @pulumi.getter(name="ipv6PdInterfaces")
    def ipv6_pd_interfaces(self) -> Optional[Sequence['outputs.WanGroupDto']]:
        return pulumi.get(self, "ipv6_pd_interfaces")

    @property
    @pulumi.getter(name="mdnsEnabledFor")
    def mdns_enabled_for(self) -> 'GlobalNetworkConfigDtoMdnsEnabledFor':
        return pulumi.get(self, "mdns_enabled_for")

    @property
    @pulumi.getter(name="mdnsEnabledForNetworkIds")
    def mdns_enabled_for_network_ids(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "mdns_enabled_for_network_ids")


class AwaitableGetGlobalConfigResult(GetGlobalConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGlobalConfigResult(
            flood_unknown_multicast_for_network_ids=self.flood_unknown_multicast_for_network_ids,
            igmp_fastleave_for_network_ids=self.igmp_fastleave_for_network_ids,
            igmp_querier_switches=self.igmp_querier_switches,
            igmp_snooping_for=self.igmp_snooping_for,
            igmp_snooping_for_network_ids=self.igmp_snooping_for_network_ids,
            ipv6_pd_interfaces=self.ipv6_pd_interfaces,
            mdns_enabled_for=self.mdns_enabled_for,
            mdns_enabled_for_network_ids=self.mdns_enabled_for_network_ids)


def get_global_config(site_name: Optional[builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGlobalConfigResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:network:getGlobalConfig', __args__, opts=opts, typ=GetGlobalConfigResult).value

    return AwaitableGetGlobalConfigResult(
        flood_unknown_multicast_for_network_ids=pulumi.get(__ret__, 'flood_unknown_multicast_for_network_ids'),
        igmp_fastleave_for_network_ids=pulumi.get(__ret__, 'igmp_fastleave_for_network_ids'),
        igmp_querier_switches=pulumi.get(__ret__, 'igmp_querier_switches'),
        igmp_snooping_for=pulumi.get(__ret__, 'igmp_snooping_for'),
        igmp_snooping_for_network_ids=pulumi.get(__ret__, 'igmp_snooping_for_network_ids'),
        ipv6_pd_interfaces=pulumi.get(__ret__, 'ipv6_pd_interfaces'),
        mdns_enabled_for=pulumi.get(__ret__, 'mdns_enabled_for'),
        mdns_enabled_for_network_ids=pulumi.get(__ret__, 'mdns_enabled_for_network_ids'))
def get_global_config_output(site_name: Optional[pulumi.Input[builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGlobalConfigResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:network:getGlobalConfig', __args__, opts=opts, typ=GetGlobalConfigResult)
    return __ret__.apply(lambda __response__: GetGlobalConfigResult(
        flood_unknown_multicast_for_network_ids=pulumi.get(__response__, 'flood_unknown_multicast_for_network_ids'),
        igmp_fastleave_for_network_ids=pulumi.get(__response__, 'igmp_fastleave_for_network_ids'),
        igmp_querier_switches=pulumi.get(__response__, 'igmp_querier_switches'),
        igmp_snooping_for=pulumi.get(__response__, 'igmp_snooping_for'),
        igmp_snooping_for_network_ids=pulumi.get(__response__, 'igmp_snooping_for_network_ids'),
        ipv6_pd_interfaces=pulumi.get(__response__, 'ipv6_pd_interfaces'),
        mdns_enabled_for=pulumi.get(__response__, 'mdns_enabled_for'),
        mdns_enabled_for_network_ids=pulumi.get(__response__, 'mdns_enabled_for_network_ids')))
