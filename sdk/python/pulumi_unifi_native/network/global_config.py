# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['GlobalConfigArgs', 'GlobalConfig']

@pulumi.input_type
class GlobalConfigArgs:
    def __init__(__self__, *,
                 igmp_snooping_for: pulumi.Input['IgmpSnoopingFor'],
                 igmp_snooping_for_network_ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 mdns_enabled_for: pulumi.Input['MdnsEnabledFor'],
                 mdns_enabled_for_network_ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 flood_unknown_multicast_for_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 igmp_fastleave_for_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 igmp_querier_switches: Optional[pulumi.Input[Sequence[pulumi.Input['IgmpQuerierSwitchDtoArgs']]]] = None,
                 ipv6_pd_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['WanGroupDtoArgs']]]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a GlobalConfig resource.
        """
        pulumi.set(__self__, "igmp_snooping_for", igmp_snooping_for)
        pulumi.set(__self__, "igmp_snooping_for_network_ids", igmp_snooping_for_network_ids)
        pulumi.set(__self__, "mdns_enabled_for", mdns_enabled_for)
        pulumi.set(__self__, "mdns_enabled_for_network_ids", mdns_enabled_for_network_ids)
        if flood_unknown_multicast_for_network_ids is not None:
            pulumi.set(__self__, "flood_unknown_multicast_for_network_ids", flood_unknown_multicast_for_network_ids)
        if igmp_fastleave_for_network_ids is not None:
            pulumi.set(__self__, "igmp_fastleave_for_network_ids", igmp_fastleave_for_network_ids)
        if igmp_querier_switches is not None:
            pulumi.set(__self__, "igmp_querier_switches", igmp_querier_switches)
        if ipv6_pd_interfaces is not None:
            pulumi.set(__self__, "ipv6_pd_interfaces", ipv6_pd_interfaces)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)

    @property
    @pulumi.getter(name="igmpSnoopingFor")
    def igmp_snooping_for(self) -> pulumi.Input['IgmpSnoopingFor']:
        return pulumi.get(self, "igmp_snooping_for")

    @igmp_snooping_for.setter
    def igmp_snooping_for(self, value: pulumi.Input['IgmpSnoopingFor']):
        pulumi.set(self, "igmp_snooping_for", value)

    @property
    @pulumi.getter(name="igmpSnoopingForNetworkIds")
    def igmp_snooping_for_network_ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "igmp_snooping_for_network_ids")

    @igmp_snooping_for_network_ids.setter
    def igmp_snooping_for_network_ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "igmp_snooping_for_network_ids", value)

    @property
    @pulumi.getter(name="mdnsEnabledFor")
    def mdns_enabled_for(self) -> pulumi.Input['MdnsEnabledFor']:
        return pulumi.get(self, "mdns_enabled_for")

    @mdns_enabled_for.setter
    def mdns_enabled_for(self, value: pulumi.Input['MdnsEnabledFor']):
        pulumi.set(self, "mdns_enabled_for", value)

    @property
    @pulumi.getter(name="mdnsEnabledForNetworkIds")
    def mdns_enabled_for_network_ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "mdns_enabled_for_network_ids")

    @mdns_enabled_for_network_ids.setter
    def mdns_enabled_for_network_ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "mdns_enabled_for_network_ids", value)

    @property
    @pulumi.getter(name="floodUnknownMulticastForNetworkIds")
    def flood_unknown_multicast_for_network_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "flood_unknown_multicast_for_network_ids")

    @flood_unknown_multicast_for_network_ids.setter
    def flood_unknown_multicast_for_network_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "flood_unknown_multicast_for_network_ids", value)

    @property
    @pulumi.getter(name="igmpFastleaveForNetworkIds")
    def igmp_fastleave_for_network_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "igmp_fastleave_for_network_ids")

    @igmp_fastleave_for_network_ids.setter
    def igmp_fastleave_for_network_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "igmp_fastleave_for_network_ids", value)

    @property
    @pulumi.getter(name="igmpQuerierSwitches")
    def igmp_querier_switches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IgmpQuerierSwitchDtoArgs']]]]:
        return pulumi.get(self, "igmp_querier_switches")

    @igmp_querier_switches.setter
    def igmp_querier_switches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IgmpQuerierSwitchDtoArgs']]]]):
        pulumi.set(self, "igmp_querier_switches", value)

    @property
    @pulumi.getter(name="ipv6PdInterfaces")
    def ipv6_pd_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WanGroupDtoArgs']]]]:
        return pulumi.get(self, "ipv6_pd_interfaces")

    @ipv6_pd_interfaces.setter
    def ipv6_pd_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WanGroupDtoArgs']]]]):
        pulumi.set(self, "ipv6_pd_interfaces", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)


@pulumi.type_token("unifi-native:network:GlobalConfig")
class GlobalConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 flood_unknown_multicast_for_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 igmp_fastleave_for_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 igmp_querier_switches: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IgmpQuerierSwitchDtoArgs', 'IgmpQuerierSwitchDtoArgsDict']]]]] = None,
                 igmp_snooping_for: Optional[pulumi.Input['IgmpSnoopingFor']] = None,
                 igmp_snooping_for_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ipv6_pd_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WanGroupDtoArgs', 'WanGroupDtoArgsDict']]]]] = None,
                 mdns_enabled_for: Optional[pulumi.Input['MdnsEnabledFor']] = None,
                 mdns_enabled_for_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a GlobalConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GlobalConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a GlobalConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param GlobalConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GlobalConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 flood_unknown_multicast_for_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 igmp_fastleave_for_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 igmp_querier_switches: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IgmpQuerierSwitchDtoArgs', 'IgmpQuerierSwitchDtoArgsDict']]]]] = None,
                 igmp_snooping_for: Optional[pulumi.Input['IgmpSnoopingFor']] = None,
                 igmp_snooping_for_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ipv6_pd_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WanGroupDtoArgs', 'WanGroupDtoArgsDict']]]]] = None,
                 mdns_enabled_for: Optional[pulumi.Input['MdnsEnabledFor']] = None,
                 mdns_enabled_for_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GlobalConfigArgs.__new__(GlobalConfigArgs)

            __props__.__dict__["flood_unknown_multicast_for_network_ids"] = flood_unknown_multicast_for_network_ids
            __props__.__dict__["igmp_fastleave_for_network_ids"] = igmp_fastleave_for_network_ids
            __props__.__dict__["igmp_querier_switches"] = igmp_querier_switches
            if igmp_snooping_for is None and not opts.urn:
                raise TypeError("Missing required property 'igmp_snooping_for'")
            __props__.__dict__["igmp_snooping_for"] = igmp_snooping_for
            if igmp_snooping_for_network_ids is None and not opts.urn:
                raise TypeError("Missing required property 'igmp_snooping_for_network_ids'")
            __props__.__dict__["igmp_snooping_for_network_ids"] = igmp_snooping_for_network_ids
            __props__.__dict__["ipv6_pd_interfaces"] = ipv6_pd_interfaces
            if mdns_enabled_for is None and not opts.urn:
                raise TypeError("Missing required property 'mdns_enabled_for'")
            __props__.__dict__["mdns_enabled_for"] = mdns_enabled_for
            if mdns_enabled_for_network_ids is None and not opts.urn:
                raise TypeError("Missing required property 'mdns_enabled_for_network_ids'")
            __props__.__dict__["mdns_enabled_for_network_ids"] = mdns_enabled_for_network_ids
            __props__.__dict__["site_name"] = site_name
        super(GlobalConfig, __self__).__init__(
            'unifi-native:network:GlobalConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'GlobalConfig':
        """
        Get an existing GlobalConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = GlobalConfigArgs.__new__(GlobalConfigArgs)

        __props__.__dict__["flood_unknown_multicast_for_network_ids"] = None
        __props__.__dict__["igmp_fastleave_for_network_ids"] = None
        __props__.__dict__["igmp_querier_switches"] = None
        __props__.__dict__["igmp_snooping_for"] = None
        __props__.__dict__["igmp_snooping_for_network_ids"] = None
        __props__.__dict__["ipv6_pd_interfaces"] = None
        __props__.__dict__["mdns_enabled_for"] = None
        __props__.__dict__["mdns_enabled_for_network_ids"] = None
        return GlobalConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="floodUnknownMulticastForNetworkIds")
    def flood_unknown_multicast_for_network_ids(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "flood_unknown_multicast_for_network_ids")

    @property
    @pulumi.getter(name="igmpFastleaveForNetworkIds")
    def igmp_fastleave_for_network_ids(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "igmp_fastleave_for_network_ids")

    @property
    @pulumi.getter(name="igmpQuerierSwitches")
    def igmp_querier_switches(self) -> pulumi.Output[Optional[Sequence['outputs.IgmpQuerierSwitchDto']]]:
        return pulumi.get(self, "igmp_querier_switches")

    @property
    @pulumi.getter(name="igmpSnoopingFor")
    def igmp_snooping_for(self) -> pulumi.Output['IgmpSnoopingFor']:
        return pulumi.get(self, "igmp_snooping_for")

    @property
    @pulumi.getter(name="igmpSnoopingForNetworkIds")
    def igmp_snooping_for_network_ids(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "igmp_snooping_for_network_ids")

    @property
    @pulumi.getter(name="ipv6PdInterfaces")
    def ipv6_pd_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.WanGroupDto']]]:
        return pulumi.get(self, "ipv6_pd_interfaces")

    @property
    @pulumi.getter(name="mdnsEnabledFor")
    def mdns_enabled_for(self) -> pulumi.Output['MdnsEnabledFor']:
        return pulumi.get(self, "mdns_enabled_for")

    @property
    @pulumi.getter(name="mdnsEnabledForNetworkIds")
    def mdns_enabled_for_network_ids(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "mdns_enabled_for_network_ids")

