# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'IgmpQuerierSwitchDto',
    'WanGroupDto',
]

@pulumi.output_type
class IgmpQuerierSwitchDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkId":
            suggest = "network_id"
        elif key == "querierAddress":
            suggest = "querier_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IgmpQuerierSwitchDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IgmpQuerierSwitchDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IgmpQuerierSwitchDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mac: builtins.str,
                 network_id: builtins.str,
                 querier_address: Optional[builtins.str] = None):
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "network_id", network_id)
        if querier_address is not None:
            pulumi.set(__self__, "querier_address", querier_address)

    @property
    @pulumi.getter
    def mac(self) -> builtins.str:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> builtins.str:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="querierAddress")
    def querier_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "querier_address")


@pulumi.output_type
class WanGroupDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "wanId":
            suggest = "wan_id"
        elif key == "wanNetworkgroup":
            suggest = "wan_networkgroup"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WanGroupDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WanGroupDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WanGroupDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 wan_id: Optional[builtins.str] = None,
                 wan_networkgroup: Optional['WanGroupDtoWanNetworkgroup'] = None):
        if wan_id is not None:
            pulumi.set(__self__, "wan_id", wan_id)
        if wan_networkgroup is not None:
            pulumi.set(__self__, "wan_networkgroup", wan_networkgroup)

    @property
    @pulumi.getter(name="wanId")
    def wan_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_id")

    @property
    @pulumi.getter(name="wanNetworkgroup")
    def wan_networkgroup(self) -> Optional['WanGroupDtoWanNetworkgroup']:
        return pulumi.get(self, "wan_networkgroup")


