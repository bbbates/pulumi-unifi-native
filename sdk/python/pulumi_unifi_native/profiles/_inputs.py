# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'RadiusServerDtoArgs',
    'RadiusServerDtoArgsDict',
]

MYPY = False

if not MYPY:
    class RadiusServerDtoArgsDict(TypedDict):
        ip: pulumi.Input[builtins.str]
        x_secret: pulumi.Input[builtins.str]
        port: NotRequired[pulumi.Input[builtins.int]]
elif False:
    RadiusServerDtoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RadiusServerDtoArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[builtins.str],
                 x_secret: pulumi.Input[builtins.str],
                 port: Optional[pulumi.Input[builtins.int]] = None):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "x_secret", x_secret)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="xSecret")
    def x_secret(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "x_secret")

    @x_secret.setter
    def x_secret(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "x_secret", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)


