# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'PoeHostDeviceDto',
    'PoeNearPowerLimitDownlinkDtos',
]

@pulumi.output_type
class PoeHostDeviceDto(dict):
    def __init__(__self__, *,
                 avg_poe_usage: Optional[builtins.float] = None,
                 display_name: Optional[builtins.str] = None,
                 mac: Optional[builtins.str] = None,
                 max_poe_usage: Optional[builtins.float] = None,
                 near_power_limit_downlinks: Optional[Sequence['outputs.PoeNearPowerLimitDownlinkDtos']] = None):
        if avg_poe_usage is not None:
            pulumi.set(__self__, "avg_poe_usage", avg_poe_usage)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if max_poe_usage is not None:
            pulumi.set(__self__, "max_poe_usage", max_poe_usage)
        if near_power_limit_downlinks is not None:
            pulumi.set(__self__, "near_power_limit_downlinks", near_power_limit_downlinks)

    @property
    @pulumi.getter(name="avgPoeUsage")
    def avg_poe_usage(self) -> Optional[builtins.float]:
        return pulumi.get(self, "avg_poe_usage")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="maxPoeUsage")
    def max_poe_usage(self) -> Optional[builtins.float]:
        return pulumi.get(self, "max_poe_usage")

    @property
    @pulumi.getter(name="nearPowerLimitDownlinks")
    def near_power_limit_downlinks(self) -> Optional[Sequence['outputs.PoeNearPowerLimitDownlinkDtos']]:
        return pulumi.get(self, "near_power_limit_downlinks")


@pulumi.output_type
class PoeNearPowerLimitDownlinkDtos(dict):
    def __init__(__self__, *,
                 avg_poe_usage: Optional[builtins.float] = None,
                 display_name: Optional[builtins.str] = None,
                 mac: Optional[builtins.str] = None,
                 max_poe_usage: Optional[builtins.float] = None,
                 port_number: Optional[builtins.int] = None):
        if avg_poe_usage is not None:
            pulumi.set(__self__, "avg_poe_usage", avg_poe_usage)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if max_poe_usage is not None:
            pulumi.set(__self__, "max_poe_usage", max_poe_usage)
        if port_number is not None:
            pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="avgPoeUsage")
    def avg_poe_usage(self) -> Optional[builtins.float]:
        return pulumi.get(self, "avg_poe_usage")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="maxPoeUsage")
    def max_poe_usage(self) -> Optional[builtins.float]:
        return pulumi.get(self, "max_poe_usage")

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port_number")


