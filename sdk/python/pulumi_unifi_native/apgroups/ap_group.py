# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ApGroupArgs', 'ApGroup']

@pulumi.input_type
class ApGroupArgs:
    def __init__(__self__, *,
                 list_of_device_macs_will_be_ignored_when_updating_default_ap_group: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 for_wlanconf: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a ApGroup resource.
        :param pulumi.Input[builtins.bool] for_wlanconf: Mark AP Group as dedicated for a single WLAN Conf (Devices view). It will be hidden from list results by default for backward compatibility, but possible to enable optionally
        """
        pulumi.set(__self__, "list_of_device_macs_will_be_ignored_when_updating_default_ap_group", list_of_device_macs_will_be_ignored_when_updating_default_ap_group)
        if for_wlanconf is not None:
            pulumi.set(__self__, "for_wlanconf", for_wlanconf)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)

    @property
    @pulumi.getter(name="ListOfDeviceMacsWillBeIgnoredWhenUpdatingDefaultAPGroup")
    def list_of_device_macs_will_be_ignored_when_updating_default_ap_group(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "list_of_device_macs_will_be_ignored_when_updating_default_ap_group")

    @list_of_device_macs_will_be_ignored_when_updating_default_ap_group.setter
    def list_of_device_macs_will_be_ignored_when_updating_default_ap_group(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "list_of_device_macs_will_be_ignored_when_updating_default_ap_group", value)

    @property
    @pulumi.getter(name="forWlanconf")
    def for_wlanconf(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Mark AP Group as dedicated for a single WLAN Conf (Devices view). It will be hidden from list results by default for backward compatibility, but possible to enable optionally
        """
        return pulumi.get(self, "for_wlanconf")

    @for_wlanconf.setter
    def for_wlanconf(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "for_wlanconf", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)


@pulumi.type_token("unifi-native:apgroups:ApGroup")
class ApGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 list_of_device_macs_will_be_ignored_when_updating_default_ap_group: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 for_wlanconf: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a ApGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] for_wlanconf: Mark AP Group as dedicated for a single WLAN Conf (Devices view). It will be hidden from list results by default for backward compatibility, but possible to enable optionally
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ApGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ApGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 list_of_device_macs_will_be_ignored_when_updating_default_ap_group: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 for_wlanconf: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApGroupArgs.__new__(ApGroupArgs)

            if list_of_device_macs_will_be_ignored_when_updating_default_ap_group is None and not opts.urn:
                raise TypeError("Missing required property 'list_of_device_macs_will_be_ignored_when_updating_default_ap_group'")
            __props__.__dict__["list_of_device_macs_will_be_ignored_when_updating_default_ap_group"] = list_of_device_macs_will_be_ignored_when_updating_default_ap_group
            __props__.__dict__["for_wlanconf"] = for_wlanconf
            __props__.__dict__["name"] = name
            __props__.__dict__["site_name"] = site_name
            __props__.__dict__["id"] = None
            __props__.__dict__["attr_hidden_id"] = None
            __props__.__dict__["attr_no_delete"] = None
        super(ApGroup, __self__).__init__(
            'unifi-native:apgroups:ApGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ApGroup':
        """
        Get an existing ApGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ApGroupArgs.__new__(ApGroupArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["list_of_device_macs_will_be_ignored_when_updating_default_ap_group"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["for_wlanconf"] = None
        __props__.__dict__["name"] = None
        return ApGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ListOfDeviceMacsWillBeIgnoredWhenUpdatingDefaultAPGroup")
    def list_of_device_macs_will_be_ignored_when_updating_default_ap_group(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "list_of_device_macs_will_be_ignored_when_updating_default_ap_group")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="forWlanconf")
    def for_wlanconf(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Mark AP Group as dedicated for a single WLAN Conf (Devices view). It will be hidden from list results by default for backward compatibility, but possible to enable optionally
        """
        return pulumi.get(self, "for_wlanconf")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

