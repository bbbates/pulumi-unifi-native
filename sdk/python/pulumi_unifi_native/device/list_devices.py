# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ListDevicesResult',
    'AwaitableListDevicesResult',
    'list_devices',
    'list_devices_output',
]

@pulumi.output_type
class ListDevicesResult:
    def __init__(__self__, devices_from_uni_fi_access_application=None, devices_from_uni_fi_apollo_application=None, devices_from_uni_fi_connect_application=None, devices_from_uni_fi_drive_application=None, devices_from_uni_fi_led_application=None, devices_from_uni_fi_network_application=None, devices_from_uni_fi_protect_application=None, devices_from_uni_fi_talk_application=None, standalone_or_managed_by_other_console_devices=None):
        if devices_from_uni_fi_access_application and not isinstance(devices_from_uni_fi_access_application, list):
            raise TypeError("Expected argument 'devices_from_uni_fi_access_application' to be a list")
        pulumi.set(__self__, "devices_from_uni_fi_access_application", devices_from_uni_fi_access_application)
        if devices_from_uni_fi_apollo_application and not isinstance(devices_from_uni_fi_apollo_application, list):
            raise TypeError("Expected argument 'devices_from_uni_fi_apollo_application' to be a list")
        pulumi.set(__self__, "devices_from_uni_fi_apollo_application", devices_from_uni_fi_apollo_application)
        if devices_from_uni_fi_connect_application and not isinstance(devices_from_uni_fi_connect_application, list):
            raise TypeError("Expected argument 'devices_from_uni_fi_connect_application' to be a list")
        pulumi.set(__self__, "devices_from_uni_fi_connect_application", devices_from_uni_fi_connect_application)
        if devices_from_uni_fi_drive_application and not isinstance(devices_from_uni_fi_drive_application, list):
            raise TypeError("Expected argument 'devices_from_uni_fi_drive_application' to be a list")
        pulumi.set(__self__, "devices_from_uni_fi_drive_application", devices_from_uni_fi_drive_application)
        if devices_from_uni_fi_led_application and not isinstance(devices_from_uni_fi_led_application, list):
            raise TypeError("Expected argument 'devices_from_uni_fi_led_application' to be a list")
        pulumi.set(__self__, "devices_from_uni_fi_led_application", devices_from_uni_fi_led_application)
        if devices_from_uni_fi_network_application and not isinstance(devices_from_uni_fi_network_application, list):
            raise TypeError("Expected argument 'devices_from_uni_fi_network_application' to be a list")
        pulumi.set(__self__, "devices_from_uni_fi_network_application", devices_from_uni_fi_network_application)
        if devices_from_uni_fi_protect_application and not isinstance(devices_from_uni_fi_protect_application, list):
            raise TypeError("Expected argument 'devices_from_uni_fi_protect_application' to be a list")
        pulumi.set(__self__, "devices_from_uni_fi_protect_application", devices_from_uni_fi_protect_application)
        if devices_from_uni_fi_talk_application and not isinstance(devices_from_uni_fi_talk_application, list):
            raise TypeError("Expected argument 'devices_from_uni_fi_talk_application' to be a list")
        pulumi.set(__self__, "devices_from_uni_fi_talk_application", devices_from_uni_fi_talk_application)
        if standalone_or_managed_by_other_console_devices and not isinstance(standalone_or_managed_by_other_console_devices, list):
            raise TypeError("Expected argument 'standalone_or_managed_by_other_console_devices' to be a list")
        pulumi.set(__self__, "standalone_or_managed_by_other_console_devices", standalone_or_managed_by_other_console_devices)

    @property
    @pulumi.getter(name="DevicesFromUniFiAccessApplication")
    def devices_from_uni_fi_access_application(self) -> Optional[Sequence['outputs.UnifiDeviceDto']]:
        return pulumi.get(self, "devices_from_uni_fi_access_application")

    @property
    @pulumi.getter(name="DevicesFromUniFiApolloApplication")
    def devices_from_uni_fi_apollo_application(self) -> Optional[Sequence['outputs.UnifiDeviceDto']]:
        return pulumi.get(self, "devices_from_uni_fi_apollo_application")

    @property
    @pulumi.getter(name="DevicesFromUniFiConnectApplication")
    def devices_from_uni_fi_connect_application(self) -> Optional[Sequence['outputs.UnifiDeviceDto']]:
        return pulumi.get(self, "devices_from_uni_fi_connect_application")

    @property
    @pulumi.getter(name="DevicesFromUniFiDriveApplication")
    def devices_from_uni_fi_drive_application(self) -> Optional[Sequence['outputs.UnifiDeviceDto']]:
        return pulumi.get(self, "devices_from_uni_fi_drive_application")

    @property
    @pulumi.getter(name="DevicesFromUniFiLEDApplication")
    def devices_from_uni_fi_led_application(self) -> Optional[Sequence['outputs.UnifiDeviceDto']]:
        return pulumi.get(self, "devices_from_uni_fi_led_application")

    @property
    @pulumi.getter(name="DevicesFromUniFiNetworkApplication")
    def devices_from_uni_fi_network_application(self) -> Optional[Sequence['outputs.UnifiDeviceDto']]:
        return pulumi.get(self, "devices_from_uni_fi_network_application")

    @property
    @pulumi.getter(name="DevicesFromUniFiProtectApplication")
    def devices_from_uni_fi_protect_application(self) -> Optional[Sequence['outputs.UnifiDeviceDto']]:
        return pulumi.get(self, "devices_from_uni_fi_protect_application")

    @property
    @pulumi.getter(name="DevicesFromUniFiTalkApplication")
    def devices_from_uni_fi_talk_application(self) -> Optional[Sequence['outputs.UnifiDeviceDto']]:
        return pulumi.get(self, "devices_from_uni_fi_talk_application")

    @property
    @pulumi.getter(name="StandaloneOrManagedByOtherConsoleDevices")
    def standalone_or_managed_by_other_console_devices(self) -> Optional[Sequence['outputs.UnifiDeviceDto']]:
        """
        Since 7.1.46
        """
        return pulumi.get(self, "standalone_or_managed_by_other_console_devices")


class AwaitableListDevicesResult(ListDevicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListDevicesResult(
            devices_from_uni_fi_access_application=self.devices_from_uni_fi_access_application,
            devices_from_uni_fi_apollo_application=self.devices_from_uni_fi_apollo_application,
            devices_from_uni_fi_connect_application=self.devices_from_uni_fi_connect_application,
            devices_from_uni_fi_drive_application=self.devices_from_uni_fi_drive_application,
            devices_from_uni_fi_led_application=self.devices_from_uni_fi_led_application,
            devices_from_uni_fi_network_application=self.devices_from_uni_fi_network_application,
            devices_from_uni_fi_protect_application=self.devices_from_uni_fi_protect_application,
            devices_from_uni_fi_talk_application=self.devices_from_uni_fi_talk_application,
            standalone_or_managed_by_other_console_devices=self.standalone_or_managed_by_other_console_devices)


def list_devices(site_name: Optional[builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListDevicesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:device:listDevices', __args__, opts=opts, typ=ListDevicesResult).value

    return AwaitableListDevicesResult(
        devices_from_uni_fi_access_application=pulumi.get(__ret__, 'devices_from_uni_fi_access_application'),
        devices_from_uni_fi_apollo_application=pulumi.get(__ret__, 'devices_from_uni_fi_apollo_application'),
        devices_from_uni_fi_connect_application=pulumi.get(__ret__, 'devices_from_uni_fi_connect_application'),
        devices_from_uni_fi_drive_application=pulumi.get(__ret__, 'devices_from_uni_fi_drive_application'),
        devices_from_uni_fi_led_application=pulumi.get(__ret__, 'devices_from_uni_fi_led_application'),
        devices_from_uni_fi_network_application=pulumi.get(__ret__, 'devices_from_uni_fi_network_application'),
        devices_from_uni_fi_protect_application=pulumi.get(__ret__, 'devices_from_uni_fi_protect_application'),
        devices_from_uni_fi_talk_application=pulumi.get(__ret__, 'devices_from_uni_fi_talk_application'),
        standalone_or_managed_by_other_console_devices=pulumi.get(__ret__, 'standalone_or_managed_by_other_console_devices'))
def list_devices_output(site_name: Optional[pulumi.Input[builtins.str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[ListDevicesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:device:listDevices', __args__, opts=opts, typ=ListDevicesResult)
    return __ret__.apply(lambda __response__: ListDevicesResult(
        devices_from_uni_fi_access_application=pulumi.get(__response__, 'devices_from_uni_fi_access_application'),
        devices_from_uni_fi_apollo_application=pulumi.get(__response__, 'devices_from_uni_fi_apollo_application'),
        devices_from_uni_fi_connect_application=pulumi.get(__response__, 'devices_from_uni_fi_connect_application'),
        devices_from_uni_fi_drive_application=pulumi.get(__response__, 'devices_from_uni_fi_drive_application'),
        devices_from_uni_fi_led_application=pulumi.get(__response__, 'devices_from_uni_fi_led_application'),
        devices_from_uni_fi_network_application=pulumi.get(__response__, 'devices_from_uni_fi_network_application'),
        devices_from_uni_fi_protect_application=pulumi.get(__response__, 'devices_from_uni_fi_protect_application'),
        devices_from_uni_fi_talk_application=pulumi.get(__response__, 'devices_from_uni_fi_talk_application'),
        standalone_or_managed_by_other_console_devices=pulumi.get(__response__, 'standalone_or_managed_by_other_console_devices')))
