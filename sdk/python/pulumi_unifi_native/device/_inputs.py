# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'DeviceConfigNetworkArgs',
    'DeviceConfigNetworkArgsDict',
    'DeviceEtherLightingArgs',
    'DeviceEtherLightingArgsDict',
    'DeviceEthernetOverridesArgs',
    'DeviceEthernetOverridesArgsDict',
    'DeviceOutletOverridesArgs',
    'DeviceOutletOverridesArgsDict',
    'DevicePortOverridesArgs',
    'DevicePortOverridesArgsDict',
    'DeviceQOSMarkingArgs',
    'DeviceQOSMarkingArgsDict',
    'DeviceQOSMatchingArgs',
    'DeviceQOSMatchingArgsDict',
    'DeviceQOSPoliciesArgs',
    'DeviceQOSPoliciesArgsDict',
    'DeviceQOSProfileArgs',
    'DeviceQOSProfileArgsDict',
    'DeviceRadioIDentifiersArgs',
    'DeviceRadioIDentifiersArgsDict',
    'DeviceRadioTableArgs',
    'DeviceRadioTableArgsDict',
    'DeviceRpsOverrideArgs',
    'DeviceRpsOverrideArgsDict',
    'DeviceRpsPortTableArgs',
    'DeviceRpsPortTableArgsDict',
]

MYPY = False

if not MYPY:
    class DeviceConfigNetworkArgsDict(TypedDict):
        bonding_enabled: NotRequired[pulumi.Input[builtins.bool]]
        dns1: NotRequired[pulumi.Input[builtins.str]]
        dns2: NotRequired[pulumi.Input[builtins.str]]
        dnssuffix: NotRequired[pulumi.Input[builtins.str]]
        gateway: NotRequired[pulumi.Input[builtins.str]]
        ip: NotRequired[pulumi.Input[builtins.str]]
        netmask: NotRequired[pulumi.Input[builtins.str]]
        type: NotRequired[pulumi.Input[builtins.str]]
elif False:
    DeviceConfigNetworkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeviceConfigNetworkArgs:
    def __init__(__self__, *,
                 bonding_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dns1: Optional[pulumi.Input[builtins.str]] = None,
                 dns2: Optional[pulumi.Input[builtins.str]] = None,
                 dnssuffix: Optional[pulumi.Input[builtins.str]] = None,
                 gateway: Optional[pulumi.Input[builtins.str]] = None,
                 ip: Optional[pulumi.Input[builtins.str]] = None,
                 netmask: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        if bonding_enabled is not None:
            pulumi.set(__self__, "bonding_enabled", bonding_enabled)
        if dns1 is not None:
            pulumi.set(__self__, "dns1", dns1)
        if dns2 is not None:
            pulumi.set(__self__, "dns2", dns2)
        if dnssuffix is not None:
            pulumi.set(__self__, "dnssuffix", dnssuffix)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bondingEnabled")
    def bonding_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "bonding_enabled")

    @bonding_enabled.setter
    def bonding_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "bonding_enabled", value)

    @property
    @pulumi.getter
    def dns1(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dns1")

    @dns1.setter
    def dns1(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dns1", value)

    @property
    @pulumi.getter
    def dns2(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dns2")

    @dns2.setter
    def dns2(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dns2", value)

    @property
    @pulumi.getter
    def dnssuffix(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dnssuffix")

    @dnssuffix.setter
    def dnssuffix(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dnssuffix", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def netmask(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DeviceEtherLightingArgsDict(TypedDict):
        behavior: NotRequired[pulumi.Input[builtins.str]]
        brightness: NotRequired[pulumi.Input[builtins.int]]
        led_mode: NotRequired[pulumi.Input[builtins.str]]
        mode: NotRequired[pulumi.Input[builtins.str]]
elif False:
    DeviceEtherLightingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeviceEtherLightingArgs:
    def __init__(__self__, *,
                 behavior: Optional[pulumi.Input[builtins.str]] = None,
                 brightness: Optional[pulumi.Input[builtins.int]] = None,
                 led_mode: Optional[pulumi.Input[builtins.str]] = None,
                 mode: Optional[pulumi.Input[builtins.str]] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if brightness is not None:
            pulumi.set(__self__, "brightness", brightness)
        if led_mode is not None:
            pulumi.set(__self__, "led_mode", led_mode)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter
    def brightness(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "brightness")

    @brightness.setter
    def brightness(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "brightness", value)

    @property
    @pulumi.getter(name="ledMode")
    def led_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "led_mode")

    @led_mode.setter
    def led_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "led_mode", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mode", value)


if not MYPY:
    class DeviceEthernetOverridesArgsDict(TypedDict):
        disabled: NotRequired[pulumi.Input[builtins.bool]]
        ifname: NotRequired[pulumi.Input[builtins.str]]
        networkgroup: NotRequired[pulumi.Input[builtins.str]]
elif False:
    DeviceEthernetOverridesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeviceEthernetOverridesArgs:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ifname: Optional[pulumi.Input[builtins.str]] = None,
                 networkgroup: Optional[pulumi.Input[builtins.str]] = None):
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if networkgroup is not None:
            pulumi.set(__self__, "networkgroup", networkgroup)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def ifname(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ifname")

    @ifname.setter
    def ifname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ifname", value)

    @property
    @pulumi.getter
    def networkgroup(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "networkgroup")

    @networkgroup.setter
    def networkgroup(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "networkgroup", value)


if not MYPY:
    class DeviceOutletOverridesArgsDict(TypedDict):
        cycle_enabled: NotRequired[pulumi.Input[builtins.bool]]
        index: NotRequired[pulumi.Input[builtins.int]]
        name: NotRequired[pulumi.Input[builtins.str]]
        relay_state: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    DeviceOutletOverridesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeviceOutletOverridesArgs:
    def __init__(__self__, *,
                 cycle_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 index: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 relay_state: Optional[pulumi.Input[builtins.bool]] = None):
        if cycle_enabled is not None:
            pulumi.set(__self__, "cycle_enabled", cycle_enabled)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if relay_state is not None:
            pulumi.set(__self__, "relay_state", relay_state)

    @property
    @pulumi.getter(name="cycleEnabled")
    def cycle_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "cycle_enabled")

    @cycle_enabled.setter
    def cycle_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cycle_enabled", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="relayState")
    def relay_state(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "relay_state")

    @relay_state.setter
    def relay_state(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "relay_state", value)


if not MYPY:
    class DevicePortOverridesArgsDict(TypedDict):
        _dot1x_ctrl: NotRequired[pulumi.Input[builtins.str]]
        _dot1x_idle_timeout: NotRequired[pulumi.Input[builtins.int]]
        _priority_queue1_level: NotRequired[pulumi.Input[builtins.int]]
        _priority_queue2_level: NotRequired[pulumi.Input[builtins.int]]
        _priority_queue3_level: NotRequired[pulumi.Input[builtins.int]]
        _priority_queue4_level: NotRequired[pulumi.Input[builtins.int]]
        aggregate_num_ports: NotRequired[pulumi.Input[builtins.int]]
        autoneg: NotRequired[pulumi.Input[builtins.bool]]
        egress_rate_limit_kbps: NotRequired[pulumi.Input[builtins.int]]
        egress_rate_limit_kbps_enabled: NotRequired[pulumi.Input[builtins.bool]]
        excluded_networkconf_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        fec_mode: NotRequired[pulumi.Input[builtins.str]]
        forward: NotRequired[pulumi.Input[builtins.str]]
        full_duplex: NotRequired[pulumi.Input[builtins.bool]]
        isolation: NotRequired[pulumi.Input[builtins.bool]]
        lldpmed_enabled: NotRequired[pulumi.Input[builtins.bool]]
        lldpmed_notify_enabled: NotRequired[pulumi.Input[builtins.bool]]
        mirror_port_idx: NotRequired[pulumi.Input[builtins.int]]
        multicast_router_networkconf_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        name: NotRequired[pulumi.Input[builtins.str]]
        native_networkconf_id: NotRequired[pulumi.Input[builtins.str]]
        op_mode: NotRequired[pulumi.Input[builtins.str]]
        poe_mode: NotRequired[pulumi.Input[builtins.str]]
        port_idx: NotRequired[pulumi.Input[builtins.int]]
        port_keepalive_enabled: NotRequired[pulumi.Input[builtins.bool]]
        port_security_enabled: NotRequired[pulumi.Input[builtins.bool]]
        port_security_mac_address: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        portconf_id: NotRequired[pulumi.Input[builtins.str]]
        qos_profile: NotRequired[pulumi.Input['DeviceQOSProfileArgsDict']]
        setting_preference: NotRequired[pulumi.Input[builtins.str]]
        speed: NotRequired[pulumi.Input[builtins.int]]
        stormctrl_bcast_enabled: NotRequired[pulumi.Input[builtins.bool]]
        stormctrl_bcast_level: NotRequired[pulumi.Input[builtins.int]]
        stormctrl_bcast_rate: NotRequired[pulumi.Input[builtins.int]]
        stormctrl_mcast_enabled: NotRequired[pulumi.Input[builtins.bool]]
        stormctrl_mcast_level: NotRequired[pulumi.Input[builtins.int]]
        stormctrl_mcast_rate: NotRequired[pulumi.Input[builtins.int]]
        stormctrl_type: NotRequired[pulumi.Input[builtins.str]]
        stormctrl_ucast_enabled: NotRequired[pulumi.Input[builtins.bool]]
        stormctrl_ucast_level: NotRequired[pulumi.Input[builtins.int]]
        stormctrl_ucast_rate: NotRequired[pulumi.Input[builtins.int]]
        stp_port_mode: NotRequired[pulumi.Input[builtins.bool]]
        tagged_vlan_mgmt: NotRequired[pulumi.Input[builtins.str]]
        voice_networkconf_id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    DevicePortOverridesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DevicePortOverridesArgs:
    def __init__(__self__, *,
                 _dot1x_ctrl: Optional[pulumi.Input[builtins.str]] = None,
                 _dot1x_idle_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 _priority_queue1_level: Optional[pulumi.Input[builtins.int]] = None,
                 _priority_queue2_level: Optional[pulumi.Input[builtins.int]] = None,
                 _priority_queue3_level: Optional[pulumi.Input[builtins.int]] = None,
                 _priority_queue4_level: Optional[pulumi.Input[builtins.int]] = None,
                 aggregate_num_ports: Optional[pulumi.Input[builtins.int]] = None,
                 autoneg: Optional[pulumi.Input[builtins.bool]] = None,
                 egress_rate_limit_kbps: Optional[pulumi.Input[builtins.int]] = None,
                 egress_rate_limit_kbps_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 excluded_networkconf_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 fec_mode: Optional[pulumi.Input[builtins.str]] = None,
                 forward: Optional[pulumi.Input[builtins.str]] = None,
                 full_duplex: Optional[pulumi.Input[builtins.bool]] = None,
                 isolation: Optional[pulumi.Input[builtins.bool]] = None,
                 lldpmed_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lldpmed_notify_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mirror_port_idx: Optional[pulumi.Input[builtins.int]] = None,
                 multicast_router_networkconf_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 native_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 op_mode: Optional[pulumi.Input[builtins.str]] = None,
                 poe_mode: Optional[pulumi.Input[builtins.str]] = None,
                 port_idx: Optional[pulumi.Input[builtins.int]] = None,
                 port_keepalive_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 port_security_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 port_security_mac_address: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 portconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 qos_profile: Optional[pulumi.Input['DeviceQOSProfileArgs']] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 speed: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_bcast_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 stormctrl_bcast_level: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_bcast_rate: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_mcast_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 stormctrl_mcast_level: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_mcast_rate: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_type: Optional[pulumi.Input[builtins.str]] = None,
                 stormctrl_ucast_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 stormctrl_ucast_level: Optional[pulumi.Input[builtins.int]] = None,
                 stormctrl_ucast_rate: Optional[pulumi.Input[builtins.int]] = None,
                 stp_port_mode: Optional[pulumi.Input[builtins.bool]] = None,
                 tagged_vlan_mgmt: Optional[pulumi.Input[builtins.str]] = None,
                 voice_networkconf_id: Optional[pulumi.Input[builtins.str]] = None):
        if _dot1x_ctrl is not None:
            pulumi.set(__self__, "_dot1x_ctrl", _dot1x_ctrl)
        if _dot1x_idle_timeout is not None:
            pulumi.set(__self__, "_dot1x_idle_timeout", _dot1x_idle_timeout)
        if _priority_queue1_level is not None:
            pulumi.set(__self__, "_priority_queue1_level", _priority_queue1_level)
        if _priority_queue2_level is not None:
            pulumi.set(__self__, "_priority_queue2_level", _priority_queue2_level)
        if _priority_queue3_level is not None:
            pulumi.set(__self__, "_priority_queue3_level", _priority_queue3_level)
        if _priority_queue4_level is not None:
            pulumi.set(__self__, "_priority_queue4_level", _priority_queue4_level)
        if aggregate_num_ports is not None:
            pulumi.set(__self__, "aggregate_num_ports", aggregate_num_ports)
        if autoneg is not None:
            pulumi.set(__self__, "autoneg", autoneg)
        if egress_rate_limit_kbps is not None:
            pulumi.set(__self__, "egress_rate_limit_kbps", egress_rate_limit_kbps)
        if egress_rate_limit_kbps_enabled is not None:
            pulumi.set(__self__, "egress_rate_limit_kbps_enabled", egress_rate_limit_kbps_enabled)
        if excluded_networkconf_ids is not None:
            pulumi.set(__self__, "excluded_networkconf_ids", excluded_networkconf_ids)
        if fec_mode is not None:
            pulumi.set(__self__, "fec_mode", fec_mode)
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if full_duplex is not None:
            pulumi.set(__self__, "full_duplex", full_duplex)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if lldpmed_enabled is not None:
            pulumi.set(__self__, "lldpmed_enabled", lldpmed_enabled)
        if lldpmed_notify_enabled is not None:
            pulumi.set(__self__, "lldpmed_notify_enabled", lldpmed_notify_enabled)
        if mirror_port_idx is not None:
            pulumi.set(__self__, "mirror_port_idx", mirror_port_idx)
        if multicast_router_networkconf_ids is not None:
            pulumi.set(__self__, "multicast_router_networkconf_ids", multicast_router_networkconf_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if native_networkconf_id is not None:
            pulumi.set(__self__, "native_networkconf_id", native_networkconf_id)
        if op_mode is not None:
            pulumi.set(__self__, "op_mode", op_mode)
        if poe_mode is not None:
            pulumi.set(__self__, "poe_mode", poe_mode)
        if port_idx is not None:
            pulumi.set(__self__, "port_idx", port_idx)
        if port_keepalive_enabled is not None:
            pulumi.set(__self__, "port_keepalive_enabled", port_keepalive_enabled)
        if port_security_enabled is not None:
            pulumi.set(__self__, "port_security_enabled", port_security_enabled)
        if port_security_mac_address is not None:
            pulumi.set(__self__, "port_security_mac_address", port_security_mac_address)
        if portconf_id is not None:
            pulumi.set(__self__, "portconf_id", portconf_id)
        if qos_profile is not None:
            pulumi.set(__self__, "qos_profile", qos_profile)
        if setting_preference is not None:
            pulumi.set(__self__, "setting_preference", setting_preference)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if stormctrl_bcast_enabled is not None:
            pulumi.set(__self__, "stormctrl_bcast_enabled", stormctrl_bcast_enabled)
        if stormctrl_bcast_level is not None:
            pulumi.set(__self__, "stormctrl_bcast_level", stormctrl_bcast_level)
        if stormctrl_bcast_rate is not None:
            pulumi.set(__self__, "stormctrl_bcast_rate", stormctrl_bcast_rate)
        if stormctrl_mcast_enabled is not None:
            pulumi.set(__self__, "stormctrl_mcast_enabled", stormctrl_mcast_enabled)
        if stormctrl_mcast_level is not None:
            pulumi.set(__self__, "stormctrl_mcast_level", stormctrl_mcast_level)
        if stormctrl_mcast_rate is not None:
            pulumi.set(__self__, "stormctrl_mcast_rate", stormctrl_mcast_rate)
        if stormctrl_type is not None:
            pulumi.set(__self__, "stormctrl_type", stormctrl_type)
        if stormctrl_ucast_enabled is not None:
            pulumi.set(__self__, "stormctrl_ucast_enabled", stormctrl_ucast_enabled)
        if stormctrl_ucast_level is not None:
            pulumi.set(__self__, "stormctrl_ucast_level", stormctrl_ucast_level)
        if stormctrl_ucast_rate is not None:
            pulumi.set(__self__, "stormctrl_ucast_rate", stormctrl_ucast_rate)
        if stp_port_mode is not None:
            pulumi.set(__self__, "stp_port_mode", stp_port_mode)
        if tagged_vlan_mgmt is not None:
            pulumi.set(__self__, "tagged_vlan_mgmt", tagged_vlan_mgmt)
        if voice_networkconf_id is not None:
            pulumi.set(__self__, "voice_networkconf_id", voice_networkconf_id)

    @property
    @pulumi.getter(name="_dot1xCtrl")
    def _dot1x_ctrl(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "_dot1x_ctrl")

    @_dot1x_ctrl.setter
    def _dot1x_ctrl(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "_dot1x_ctrl", value)

    @property
    @pulumi.getter(name="_dot1xIdleTimeout")
    def _dot1x_idle_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "_dot1x_idle_timeout")

    @_dot1x_idle_timeout.setter
    def _dot1x_idle_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "_dot1x_idle_timeout", value)

    @property
    @pulumi.getter(name="_priorityQueue1Level")
    def _priority_queue1_level(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "_priority_queue1_level")

    @_priority_queue1_level.setter
    def _priority_queue1_level(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "_priority_queue1_level", value)

    @property
    @pulumi.getter(name="_priorityQueue2Level")
    def _priority_queue2_level(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "_priority_queue2_level")

    @_priority_queue2_level.setter
    def _priority_queue2_level(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "_priority_queue2_level", value)

    @property
    @pulumi.getter(name="_priorityQueue3Level")
    def _priority_queue3_level(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "_priority_queue3_level")

    @_priority_queue3_level.setter
    def _priority_queue3_level(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "_priority_queue3_level", value)

    @property
    @pulumi.getter(name="_priorityQueue4Level")
    def _priority_queue4_level(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "_priority_queue4_level")

    @_priority_queue4_level.setter
    def _priority_queue4_level(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "_priority_queue4_level", value)

    @property
    @pulumi.getter(name="aggregateNumPorts")
    def aggregate_num_ports(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "aggregate_num_ports")

    @aggregate_num_ports.setter
    def aggregate_num_ports(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "aggregate_num_ports", value)

    @property
    @pulumi.getter
    def autoneg(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "autoneg")

    @autoneg.setter
    def autoneg(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "autoneg", value)

    @property
    @pulumi.getter(name="egressRateLimitKbps")
    def egress_rate_limit_kbps(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "egress_rate_limit_kbps")

    @egress_rate_limit_kbps.setter
    def egress_rate_limit_kbps(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "egress_rate_limit_kbps", value)

    @property
    @pulumi.getter(name="egressRateLimitKbpsEnabled")
    def egress_rate_limit_kbps_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "egress_rate_limit_kbps_enabled")

    @egress_rate_limit_kbps_enabled.setter
    def egress_rate_limit_kbps_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "egress_rate_limit_kbps_enabled", value)

    @property
    @pulumi.getter(name="excludedNetworkconfIds")
    def excluded_networkconf_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "excluded_networkconf_ids")

    @excluded_networkconf_ids.setter
    def excluded_networkconf_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "excluded_networkconf_ids", value)

    @property
    @pulumi.getter(name="fecMode")
    def fec_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "fec_mode")

    @fec_mode.setter
    def fec_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fec_mode", value)

    @property
    @pulumi.getter
    def forward(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "forward")

    @forward.setter
    def forward(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "forward", value)

    @property
    @pulumi.getter(name="fullDuplex")
    def full_duplex(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "full_duplex")

    @full_duplex.setter
    def full_duplex(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "full_duplex", value)

    @property
    @pulumi.getter
    def isolation(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "isolation")

    @isolation.setter
    def isolation(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "isolation", value)

    @property
    @pulumi.getter(name="lldpmedEnabled")
    def lldpmed_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lldpmed_enabled")

    @lldpmed_enabled.setter
    def lldpmed_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lldpmed_enabled", value)

    @property
    @pulumi.getter(name="lldpmedNotifyEnabled")
    def lldpmed_notify_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lldpmed_notify_enabled")

    @lldpmed_notify_enabled.setter
    def lldpmed_notify_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lldpmed_notify_enabled", value)

    @property
    @pulumi.getter(name="mirrorPortIdx")
    def mirror_port_idx(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "mirror_port_idx")

    @mirror_port_idx.setter
    def mirror_port_idx(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "mirror_port_idx", value)

    @property
    @pulumi.getter(name="multicastRouterNetworkconfIds")
    def multicast_router_networkconf_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "multicast_router_networkconf_ids")

    @multicast_router_networkconf_ids.setter
    def multicast_router_networkconf_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "multicast_router_networkconf_ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nativeNetworkconfId")
    def native_networkconf_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "native_networkconf_id")

    @native_networkconf_id.setter
    def native_networkconf_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "native_networkconf_id", value)

    @property
    @pulumi.getter(name="opMode")
    def op_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "op_mode")

    @op_mode.setter
    def op_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "op_mode", value)

    @property
    @pulumi.getter(name="poeMode")
    def poe_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "poe_mode")

    @poe_mode.setter
    def poe_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "poe_mode", value)

    @property
    @pulumi.getter(name="portIdx")
    def port_idx(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port_idx")

    @port_idx.setter
    def port_idx(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port_idx", value)

    @property
    @pulumi.getter(name="portKeepaliveEnabled")
    def port_keepalive_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "port_keepalive_enabled")

    @port_keepalive_enabled.setter
    def port_keepalive_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "port_keepalive_enabled", value)

    @property
    @pulumi.getter(name="portSecurityEnabled")
    def port_security_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "port_security_enabled")

    @port_security_enabled.setter
    def port_security_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "port_security_enabled", value)

    @property
    @pulumi.getter(name="portSecurityMacAddress")
    def port_security_mac_address(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "port_security_mac_address")

    @port_security_mac_address.setter
    def port_security_mac_address(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "port_security_mac_address", value)

    @property
    @pulumi.getter(name="portconfId")
    def portconf_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "portconf_id")

    @portconf_id.setter
    def portconf_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "portconf_id", value)

    @property
    @pulumi.getter(name="qosProfile")
    def qos_profile(self) -> Optional[pulumi.Input['DeviceQOSProfileArgs']]:
        return pulumi.get(self, "qos_profile")

    @qos_profile.setter
    def qos_profile(self, value: Optional[pulumi.Input['DeviceQOSProfileArgs']]):
        pulumi.set(self, "qos_profile", value)

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "setting_preference")

    @setting_preference.setter
    def setting_preference(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "setting_preference", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter(name="stormctrlBcastEnabled")
    def stormctrl_bcast_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "stormctrl_bcast_enabled")

    @stormctrl_bcast_enabled.setter
    def stormctrl_bcast_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "stormctrl_bcast_enabled", value)

    @property
    @pulumi.getter(name="stormctrlBcastLevel")
    def stormctrl_bcast_level(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "stormctrl_bcast_level")

    @stormctrl_bcast_level.setter
    def stormctrl_bcast_level(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "stormctrl_bcast_level", value)

    @property
    @pulumi.getter(name="stormctrlBcastRate")
    def stormctrl_bcast_rate(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "stormctrl_bcast_rate")

    @stormctrl_bcast_rate.setter
    def stormctrl_bcast_rate(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "stormctrl_bcast_rate", value)

    @property
    @pulumi.getter(name="stormctrlMcastEnabled")
    def stormctrl_mcast_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "stormctrl_mcast_enabled")

    @stormctrl_mcast_enabled.setter
    def stormctrl_mcast_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "stormctrl_mcast_enabled", value)

    @property
    @pulumi.getter(name="stormctrlMcastLevel")
    def stormctrl_mcast_level(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "stormctrl_mcast_level")

    @stormctrl_mcast_level.setter
    def stormctrl_mcast_level(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "stormctrl_mcast_level", value)

    @property
    @pulumi.getter(name="stormctrlMcastRate")
    def stormctrl_mcast_rate(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "stormctrl_mcast_rate")

    @stormctrl_mcast_rate.setter
    def stormctrl_mcast_rate(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "stormctrl_mcast_rate", value)

    @property
    @pulumi.getter(name="stormctrlType")
    def stormctrl_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "stormctrl_type")

    @stormctrl_type.setter
    def stormctrl_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "stormctrl_type", value)

    @property
    @pulumi.getter(name="stormctrlUcastEnabled")
    def stormctrl_ucast_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "stormctrl_ucast_enabled")

    @stormctrl_ucast_enabled.setter
    def stormctrl_ucast_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "stormctrl_ucast_enabled", value)

    @property
    @pulumi.getter(name="stormctrlUcastLevel")
    def stormctrl_ucast_level(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "stormctrl_ucast_level")

    @stormctrl_ucast_level.setter
    def stormctrl_ucast_level(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "stormctrl_ucast_level", value)

    @property
    @pulumi.getter(name="stormctrlUcastRate")
    def stormctrl_ucast_rate(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "stormctrl_ucast_rate")

    @stormctrl_ucast_rate.setter
    def stormctrl_ucast_rate(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "stormctrl_ucast_rate", value)

    @property
    @pulumi.getter(name="stpPortMode")
    def stp_port_mode(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "stp_port_mode")

    @stp_port_mode.setter
    def stp_port_mode(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "stp_port_mode", value)

    @property
    @pulumi.getter(name="taggedVlanMgmt")
    def tagged_vlan_mgmt(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "tagged_vlan_mgmt")

    @tagged_vlan_mgmt.setter
    def tagged_vlan_mgmt(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tagged_vlan_mgmt", value)

    @property
    @pulumi.getter(name="voiceNetworkconfId")
    def voice_networkconf_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "voice_networkconf_id")

    @voice_networkconf_id.setter
    def voice_networkconf_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "voice_networkconf_id", value)


if not MYPY:
    class DeviceQOSMarkingArgsDict(TypedDict):
        cos_code: NotRequired[pulumi.Input[builtins.int]]
        dscp_code: NotRequired[pulumi.Input[builtins.int]]
        ip_precedence_code: NotRequired[pulumi.Input[builtins.int]]
        queue: NotRequired[pulumi.Input[builtins.int]]
elif False:
    DeviceQOSMarkingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeviceQOSMarkingArgs:
    def __init__(__self__, *,
                 cos_code: Optional[pulumi.Input[builtins.int]] = None,
                 dscp_code: Optional[pulumi.Input[builtins.int]] = None,
                 ip_precedence_code: Optional[pulumi.Input[builtins.int]] = None,
                 queue: Optional[pulumi.Input[builtins.int]] = None):
        if cos_code is not None:
            pulumi.set(__self__, "cos_code", cos_code)
        if dscp_code is not None:
            pulumi.set(__self__, "dscp_code", dscp_code)
        if ip_precedence_code is not None:
            pulumi.set(__self__, "ip_precedence_code", ip_precedence_code)
        if queue is not None:
            pulumi.set(__self__, "queue", queue)

    @property
    @pulumi.getter(name="cosCode")
    def cos_code(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "cos_code")

    @cos_code.setter
    def cos_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cos_code", value)

    @property
    @pulumi.getter(name="dscpCode")
    def dscp_code(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dscp_code")

    @dscp_code.setter
    def dscp_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dscp_code", value)

    @property
    @pulumi.getter(name="ipPrecedenceCode")
    def ip_precedence_code(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "ip_precedence_code")

    @ip_precedence_code.setter
    def ip_precedence_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ip_precedence_code", value)

    @property
    @pulumi.getter
    def queue(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "queue")

    @queue.setter
    def queue(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "queue", value)


if not MYPY:
    class DeviceQOSMatchingArgsDict(TypedDict):
        cos_code: NotRequired[pulumi.Input[builtins.int]]
        dscp_code: NotRequired[pulumi.Input[builtins.int]]
        dst_port: NotRequired[pulumi.Input[builtins.int]]
        ip_precedence_code: NotRequired[pulumi.Input[builtins.int]]
        protocol: NotRequired[pulumi.Input[builtins.str]]
        src_port: NotRequired[pulumi.Input[builtins.int]]
elif False:
    DeviceQOSMatchingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeviceQOSMatchingArgs:
    def __init__(__self__, *,
                 cos_code: Optional[pulumi.Input[builtins.int]] = None,
                 dscp_code: Optional[pulumi.Input[builtins.int]] = None,
                 dst_port: Optional[pulumi.Input[builtins.int]] = None,
                 ip_precedence_code: Optional[pulumi.Input[builtins.int]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 src_port: Optional[pulumi.Input[builtins.int]] = None):
        if cos_code is not None:
            pulumi.set(__self__, "cos_code", cos_code)
        if dscp_code is not None:
            pulumi.set(__self__, "dscp_code", dscp_code)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if ip_precedence_code is not None:
            pulumi.set(__self__, "ip_precedence_code", ip_precedence_code)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="cosCode")
    def cos_code(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "cos_code")

    @cos_code.setter
    def cos_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cos_code", value)

    @property
    @pulumi.getter(name="dscpCode")
    def dscp_code(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dscp_code")

    @dscp_code.setter
    def dscp_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dscp_code", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter(name="ipPrecedenceCode")
    def ip_precedence_code(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "ip_precedence_code")

    @ip_precedence_code.setter
    def ip_precedence_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ip_precedence_code", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "src_port", value)


if not MYPY:
    class DeviceQOSPoliciesArgsDict(TypedDict):
        qos_marking: NotRequired[pulumi.Input['DeviceQOSMarkingArgsDict']]
        qos_matching: NotRequired[pulumi.Input['DeviceQOSMatchingArgsDict']]
elif False:
    DeviceQOSPoliciesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeviceQOSPoliciesArgs:
    def __init__(__self__, *,
                 qos_marking: Optional[pulumi.Input['DeviceQOSMarkingArgs']] = None,
                 qos_matching: Optional[pulumi.Input['DeviceQOSMatchingArgs']] = None):
        if qos_marking is not None:
            pulumi.set(__self__, "qos_marking", qos_marking)
        if qos_matching is not None:
            pulumi.set(__self__, "qos_matching", qos_matching)

    @property
    @pulumi.getter(name="qosMarking")
    def qos_marking(self) -> Optional[pulumi.Input['DeviceQOSMarkingArgs']]:
        return pulumi.get(self, "qos_marking")

    @qos_marking.setter
    def qos_marking(self, value: Optional[pulumi.Input['DeviceQOSMarkingArgs']]):
        pulumi.set(self, "qos_marking", value)

    @property
    @pulumi.getter(name="qosMatching")
    def qos_matching(self) -> Optional[pulumi.Input['DeviceQOSMatchingArgs']]:
        return pulumi.get(self, "qos_matching")

    @qos_matching.setter
    def qos_matching(self, value: Optional[pulumi.Input['DeviceQOSMatchingArgs']]):
        pulumi.set(self, "qos_matching", value)


if not MYPY:
    class DeviceQOSProfileArgsDict(TypedDict):
        qos_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['DeviceQOSPoliciesArgsDict']]]]
        qos_profile_mode: NotRequired[pulumi.Input[builtins.str]]
elif False:
    DeviceQOSProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeviceQOSProfileArgs:
    def __init__(__self__, *,
                 qos_policies: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceQOSPoliciesArgs']]]] = None,
                 qos_profile_mode: Optional[pulumi.Input[builtins.str]] = None):
        if qos_policies is not None:
            pulumi.set(__self__, "qos_policies", qos_policies)
        if qos_profile_mode is not None:
            pulumi.set(__self__, "qos_profile_mode", qos_profile_mode)

    @property
    @pulumi.getter(name="qosPolicies")
    def qos_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceQOSPoliciesArgs']]]]:
        return pulumi.get(self, "qos_policies")

    @qos_policies.setter
    def qos_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceQOSPoliciesArgs']]]]):
        pulumi.set(self, "qos_policies", value)

    @property
    @pulumi.getter(name="qosProfileMode")
    def qos_profile_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "qos_profile_mode")

    @qos_profile_mode.setter
    def qos_profile_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "qos_profile_mode", value)


if not MYPY:
    class DeviceRadioIDentifiersArgsDict(TypedDict):
        device_id: NotRequired[pulumi.Input[builtins.str]]
        radio_name: NotRequired[pulumi.Input[builtins.str]]
elif False:
    DeviceRadioIDentifiersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeviceRadioIDentifiersArgs:
    def __init__(__self__, *,
                 device_id: Optional[pulumi.Input[builtins.str]] = None,
                 radio_name: Optional[pulumi.Input[builtins.str]] = None):
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if radio_name is not None:
            pulumi.set(__self__, "radio_name", radio_name)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter(name="radioName")
    def radio_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "radio_name")

    @radio_name.setter
    def radio_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "radio_name", value)


if not MYPY:
    class DeviceRadioTableArgsDict(TypedDict):
        antenna_gain: NotRequired[pulumi.Input[builtins.int]]
        antenna_id: NotRequired[pulumi.Input[builtins.int]]
        backup_channel: NotRequired[pulumi.Input[builtins.str]]
        channel: NotRequired[pulumi.Input[builtins.str]]
        channel_optimization_enabled: NotRequired[pulumi.Input[builtins.bool]]
        dfs: NotRequired[pulumi.Input[builtins.bool]]
        hard_noise_floor_enabled: NotRequired[pulumi.Input[builtins.bool]]
        ht: NotRequired[pulumi.Input[builtins.int]]
        loadbalance_enabled: NotRequired[pulumi.Input[builtins.bool]]
        maxsta: NotRequired[pulumi.Input[builtins.int]]
        min_rssi: NotRequired[pulumi.Input[builtins.int]]
        min_rssi_enabled: NotRequired[pulumi.Input[builtins.bool]]
        name: NotRequired[pulumi.Input[builtins.str]]
        radio: NotRequired[pulumi.Input[builtins.str]]
        radio_identifiers: NotRequired[pulumi.Input[Sequence[pulumi.Input['DeviceRadioIDentifiersArgsDict']]]]
        sens_level: NotRequired[pulumi.Input[builtins.int]]
        sens_level_enabled: NotRequired[pulumi.Input[builtins.bool]]
        tx_power: NotRequired[pulumi.Input[builtins.str]]
        tx_power_mode: NotRequired[pulumi.Input[builtins.str]]
        vwire_enabled: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    DeviceRadioTableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeviceRadioTableArgs:
    def __init__(__self__, *,
                 antenna_gain: Optional[pulumi.Input[builtins.int]] = None,
                 antenna_id: Optional[pulumi.Input[builtins.int]] = None,
                 backup_channel: Optional[pulumi.Input[builtins.str]] = None,
                 channel: Optional[pulumi.Input[builtins.str]] = None,
                 channel_optimization_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dfs: Optional[pulumi.Input[builtins.bool]] = None,
                 hard_noise_floor_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ht: Optional[pulumi.Input[builtins.int]] = None,
                 loadbalance_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 maxsta: Optional[pulumi.Input[builtins.int]] = None,
                 min_rssi: Optional[pulumi.Input[builtins.int]] = None,
                 min_rssi_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 radio: Optional[pulumi.Input[builtins.str]] = None,
                 radio_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceRadioIDentifiersArgs']]]] = None,
                 sens_level: Optional[pulumi.Input[builtins.int]] = None,
                 sens_level_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 tx_power: Optional[pulumi.Input[builtins.str]] = None,
                 tx_power_mode: Optional[pulumi.Input[builtins.str]] = None,
                 vwire_enabled: Optional[pulumi.Input[builtins.bool]] = None):
        if antenna_gain is not None:
            pulumi.set(__self__, "antenna_gain", antenna_gain)
        if antenna_id is not None:
            pulumi.set(__self__, "antenna_id", antenna_id)
        if backup_channel is not None:
            pulumi.set(__self__, "backup_channel", backup_channel)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channel_optimization_enabled is not None:
            pulumi.set(__self__, "channel_optimization_enabled", channel_optimization_enabled)
        if dfs is not None:
            pulumi.set(__self__, "dfs", dfs)
        if hard_noise_floor_enabled is not None:
            pulumi.set(__self__, "hard_noise_floor_enabled", hard_noise_floor_enabled)
        if ht is not None:
            pulumi.set(__self__, "ht", ht)
        if loadbalance_enabled is not None:
            pulumi.set(__self__, "loadbalance_enabled", loadbalance_enabled)
        if maxsta is not None:
            pulumi.set(__self__, "maxsta", maxsta)
        if min_rssi is not None:
            pulumi.set(__self__, "min_rssi", min_rssi)
        if min_rssi_enabled is not None:
            pulumi.set(__self__, "min_rssi_enabled", min_rssi_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if radio is not None:
            pulumi.set(__self__, "radio", radio)
        if radio_identifiers is not None:
            pulumi.set(__self__, "radio_identifiers", radio_identifiers)
        if sens_level is not None:
            pulumi.set(__self__, "sens_level", sens_level)
        if sens_level_enabled is not None:
            pulumi.set(__self__, "sens_level_enabled", sens_level_enabled)
        if tx_power is not None:
            pulumi.set(__self__, "tx_power", tx_power)
        if tx_power_mode is not None:
            pulumi.set(__self__, "tx_power_mode", tx_power_mode)
        if vwire_enabled is not None:
            pulumi.set(__self__, "vwire_enabled", vwire_enabled)

    @property
    @pulumi.getter(name="antennaGain")
    def antenna_gain(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "antenna_gain")

    @antenna_gain.setter
    def antenna_gain(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "antenna_gain", value)

    @property
    @pulumi.getter(name="antennaId")
    def antenna_id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "antenna_id")

    @antenna_id.setter
    def antenna_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "antenna_id", value)

    @property
    @pulumi.getter(name="backupChannel")
    def backup_channel(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "backup_channel")

    @backup_channel.setter
    def backup_channel(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "backup_channel", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter(name="channelOptimizationEnabled")
    def channel_optimization_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "channel_optimization_enabled")

    @channel_optimization_enabled.setter
    def channel_optimization_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "channel_optimization_enabled", value)

    @property
    @pulumi.getter
    def dfs(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dfs")

    @dfs.setter
    def dfs(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dfs", value)

    @property
    @pulumi.getter(name="hardNoiseFloorEnabled")
    def hard_noise_floor_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "hard_noise_floor_enabled")

    @hard_noise_floor_enabled.setter
    def hard_noise_floor_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "hard_noise_floor_enabled", value)

    @property
    @pulumi.getter
    def ht(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "ht")

    @ht.setter
    def ht(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ht", value)

    @property
    @pulumi.getter(name="loadbalanceEnabled")
    def loadbalance_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "loadbalance_enabled")

    @loadbalance_enabled.setter
    def loadbalance_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "loadbalance_enabled", value)

    @property
    @pulumi.getter
    def maxsta(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "maxsta")

    @maxsta.setter
    def maxsta(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "maxsta", value)

    @property
    @pulumi.getter(name="minRssi")
    def min_rssi(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "min_rssi")

    @min_rssi.setter
    def min_rssi(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_rssi", value)

    @property
    @pulumi.getter(name="minRssiEnabled")
    def min_rssi_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "min_rssi_enabled")

    @min_rssi_enabled.setter
    def min_rssi_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "min_rssi_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def radio(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "radio")

    @radio.setter
    def radio(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "radio", value)

    @property
    @pulumi.getter(name="radioIdentifiers")
    def radio_identifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceRadioIDentifiersArgs']]]]:
        return pulumi.get(self, "radio_identifiers")

    @radio_identifiers.setter
    def radio_identifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceRadioIDentifiersArgs']]]]):
        pulumi.set(self, "radio_identifiers", value)

    @property
    @pulumi.getter(name="sensLevel")
    def sens_level(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "sens_level")

    @sens_level.setter
    def sens_level(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "sens_level", value)

    @property
    @pulumi.getter(name="sensLevelEnabled")
    def sens_level_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "sens_level_enabled")

    @sens_level_enabled.setter
    def sens_level_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sens_level_enabled", value)

    @property
    @pulumi.getter(name="txPower")
    def tx_power(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "tx_power")

    @tx_power.setter
    def tx_power(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tx_power", value)

    @property
    @pulumi.getter(name="txPowerMode")
    def tx_power_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "tx_power_mode")

    @tx_power_mode.setter
    def tx_power_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tx_power_mode", value)

    @property
    @pulumi.getter(name="vwireEnabled")
    def vwire_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "vwire_enabled")

    @vwire_enabled.setter
    def vwire_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "vwire_enabled", value)


if not MYPY:
    class DeviceRpsOverrideArgsDict(TypedDict):
        power_management_mode: NotRequired[pulumi.Input[builtins.str]]
        rps_port_table: NotRequired[pulumi.Input[Sequence[pulumi.Input['DeviceRpsPortTableArgsDict']]]]
elif False:
    DeviceRpsOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeviceRpsOverrideArgs:
    def __init__(__self__, *,
                 power_management_mode: Optional[pulumi.Input[builtins.str]] = None,
                 rps_port_table: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceRpsPortTableArgs']]]] = None):
        if power_management_mode is not None:
            pulumi.set(__self__, "power_management_mode", power_management_mode)
        if rps_port_table is not None:
            pulumi.set(__self__, "rps_port_table", rps_port_table)

    @property
    @pulumi.getter(name="powerManagementMode")
    def power_management_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "power_management_mode")

    @power_management_mode.setter
    def power_management_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "power_management_mode", value)

    @property
    @pulumi.getter(name="rpsPortTable")
    def rps_port_table(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceRpsPortTableArgs']]]]:
        return pulumi.get(self, "rps_port_table")

    @rps_port_table.setter
    def rps_port_table(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceRpsPortTableArgs']]]]):
        pulumi.set(self, "rps_port_table", value)


if not MYPY:
    class DeviceRpsPortTableArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[builtins.str]]
        port_idx: NotRequired[pulumi.Input[builtins.int]]
        port_mode: NotRequired[pulumi.Input[builtins.str]]
elif False:
    DeviceRpsPortTableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeviceRpsPortTableArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 port_idx: Optional[pulumi.Input[builtins.int]] = None,
                 port_mode: Optional[pulumi.Input[builtins.str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port_idx is not None:
            pulumi.set(__self__, "port_idx", port_idx)
        if port_mode is not None:
            pulumi.set(__self__, "port_mode", port_mode)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="portIdx")
    def port_idx(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "port_idx")

    @port_idx.setter
    def port_idx(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port_idx", value)

    @property
    @pulumi.getter(name="portMode")
    def port_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "port_mode")

    @port_mode.setter
    def port_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "port_mode", value)


