# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeviceArgs', 'Device']

@pulumi.input_type
class DeviceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 adopted: Optional[pulumi.Input[builtins.bool]] = None,
                 afc_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 atf_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 bandsteering_mode: Optional[pulumi.Input[builtins.str]] = None,
                 baresip_auth_user: Optional[pulumi.Input[builtins.str]] = None,
                 baresip_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 baresip_extension: Optional[pulumi.Input[builtins.str]] = None,
                 config_network: Optional[pulumi.Input['DeviceConfigNetworkArgs']] = None,
                 disabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dot1x_fallback_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 dot1x_portctrl_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dpi_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ether_lighting: Optional[pulumi.Input['DeviceEtherLightingArgs']] = None,
                 ethernet_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceEthernetOverridesArgs']]]] = None,
                 fan_mode_override: Optional[pulumi.Input[builtins.str]] = None,
                 flowctrl_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 gateway_vrrp_mode: Optional[pulumi.Input[builtins.str]] = None,
                 gateway_vrrp_priority: Optional[pulumi.Input[builtins.int]] = None,
                 green_ap_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 height_in_meters: Optional[pulumi.Input[builtins.float]] = None,
                 hostname: Optional[pulumi.Input[builtins.str]] = None,
                 jumboframe_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lcm_brightness: Optional[pulumi.Input[builtins.int]] = None,
                 lcm_brightness_override: Optional[pulumi.Input[builtins.bool]] = None,
                 lcm_idle_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 lcm_idle_timeout_override: Optional[pulumi.Input[builtins.bool]] = None,
                 lcm_night_mode_begins: Optional[pulumi.Input[builtins.str]] = None,
                 lcm_night_mode_ends: Optional[pulumi.Input[builtins.str]] = None,
                 lcm_orientation_override: Optional[pulumi.Input[builtins.int]] = None,
                 lcm_settings_restricted_access: Optional[pulumi.Input[builtins.bool]] = None,
                 lcm_tracker_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lcm_tracker_seed: Optional[pulumi.Input[builtins.str]] = None,
                 led_override: Optional[pulumi.Input[builtins.str]] = None,
                 led_override_color: Optional[pulumi.Input[builtins.str]] = None,
                 led_override_color_brightness: Optional[pulumi.Input[builtins.int]] = None,
                 locked: Optional[pulumi.Input[builtins.bool]] = None,
                 lowpfmode_override: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_apn: Optional[pulumi.Input[builtins.str]] = None,
                 lte_auth_type: Optional[pulumi.Input[builtins.str]] = None,
                 lte_data_limit_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_data_warning_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_ext_ant: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_hard_limit: Optional[pulumi.Input[builtins.int]] = None,
                 lte_password: Optional[pulumi.Input[builtins.str]] = None,
                 lte_poe: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_roaming_allowed: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_sim_pin: Optional[pulumi.Input[builtins.int]] = None,
                 lte_soft_limit: Optional[pulumi.Input[builtins.int]] = None,
                 lte_username: Optional[pulumi.Input[builtins.str]] = None,
                 mac: Optional[pulumi.Input[builtins.str]] = None,
                 map_id: Optional[pulumi.Input[builtins.str]] = None,
                 mesh_sta_vap_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mgmt_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 model: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 outdoor_mode_override: Optional[pulumi.Input[builtins.str]] = None,
                 outlet_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 outlet_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceOutletOverridesArgs']]]] = None,
                 outlet_power_cycle_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 peer_to_peer_mode: Optional[pulumi.Input[builtins.str]] = None,
                 poe_mode: Optional[pulumi.Input[builtins.str]] = None,
                 port_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['DevicePortOverridesArgs']]]] = None,
                 power_source_ctrl: Optional[pulumi.Input[builtins.str]] = None,
                 power_source_ctrl_budget: Optional[pulumi.Input[builtins.int]] = None,
                 power_source_ctrl_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ptmp_ap_mac: Optional[pulumi.Input[builtins.str]] = None,
                 ptp_ap_mac: Optional[pulumi.Input[builtins.str]] = None,
                 radio_table: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceRadioTableArgs']]]] = None,
                 radiusprofile_id: Optional[pulumi.Input[builtins.str]] = None,
                 resetbtn_enabled: Optional[pulumi.Input[builtins.str]] = None,
                 rps_override: Optional[pulumi.Input['DeviceRpsOverrideArgs']] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 snmp_contact: Optional[pulumi.Input[builtins.str]] = None,
                 snmp_location: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.int]] = None,
                 station_mode: Optional[pulumi.Input[builtins.str]] = None,
                 stp_priority: Optional[pulumi.Input[builtins.str]] = None,
                 stp_version: Optional[pulumi.Input[builtins.str]] = None,
                 switch_vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 ubb_pair_name: Optional[pulumi.Input[builtins.str]] = None,
                 volume: Optional[pulumi.Input[builtins.int]] = None,
                 x: Optional[pulumi.Input[builtins.float]] = None,
                 x_baresip_password: Optional[pulumi.Input[builtins.str]] = None,
                 y: Optional[pulumi.Input[builtins.float]] = None):
        """
        The set of arguments for constructing a Device resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if adopted is not None:
            pulumi.set(__self__, "adopted", adopted)
        if afc_enabled is not None:
            pulumi.set(__self__, "afc_enabled", afc_enabled)
        if atf_enabled is not None:
            pulumi.set(__self__, "atf_enabled", atf_enabled)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if bandsteering_mode is not None:
            pulumi.set(__self__, "bandsteering_mode", bandsteering_mode)
        if baresip_auth_user is not None:
            pulumi.set(__self__, "baresip_auth_user", baresip_auth_user)
        if baresip_enabled is not None:
            pulumi.set(__self__, "baresip_enabled", baresip_enabled)
        if baresip_extension is not None:
            pulumi.set(__self__, "baresip_extension", baresip_extension)
        if config_network is not None:
            pulumi.set(__self__, "config_network", config_network)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if dot1x_fallback_networkconf_id is not None:
            pulumi.set(__self__, "dot1x_fallback_networkconf_id", dot1x_fallback_networkconf_id)
        if dot1x_portctrl_enabled is not None:
            pulumi.set(__self__, "dot1x_portctrl_enabled", dot1x_portctrl_enabled)
        if dpi_enabled is not None:
            pulumi.set(__self__, "dpi_enabled", dpi_enabled)
        if ether_lighting is not None:
            pulumi.set(__self__, "ether_lighting", ether_lighting)
        if ethernet_overrides is not None:
            pulumi.set(__self__, "ethernet_overrides", ethernet_overrides)
        if fan_mode_override is not None:
            pulumi.set(__self__, "fan_mode_override", fan_mode_override)
        if flowctrl_enabled is not None:
            pulumi.set(__self__, "flowctrl_enabled", flowctrl_enabled)
        if gateway_vrrp_mode is not None:
            pulumi.set(__self__, "gateway_vrrp_mode", gateway_vrrp_mode)
        if gateway_vrrp_priority is not None:
            pulumi.set(__self__, "gateway_vrrp_priority", gateway_vrrp_priority)
        if green_ap_enabled is not None:
            pulumi.set(__self__, "green_ap_enabled", green_ap_enabled)
        if height_in_meters is not None:
            pulumi.set(__self__, "height_in_meters", height_in_meters)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if jumboframe_enabled is not None:
            pulumi.set(__self__, "jumboframe_enabled", jumboframe_enabled)
        if lcm_brightness is not None:
            pulumi.set(__self__, "lcm_brightness", lcm_brightness)
        if lcm_brightness_override is not None:
            pulumi.set(__self__, "lcm_brightness_override", lcm_brightness_override)
        if lcm_idle_timeout is not None:
            pulumi.set(__self__, "lcm_idle_timeout", lcm_idle_timeout)
        if lcm_idle_timeout_override is not None:
            pulumi.set(__self__, "lcm_idle_timeout_override", lcm_idle_timeout_override)
        if lcm_night_mode_begins is not None:
            pulumi.set(__self__, "lcm_night_mode_begins", lcm_night_mode_begins)
        if lcm_night_mode_ends is not None:
            pulumi.set(__self__, "lcm_night_mode_ends", lcm_night_mode_ends)
        if lcm_orientation_override is not None:
            pulumi.set(__self__, "lcm_orientation_override", lcm_orientation_override)
        if lcm_settings_restricted_access is not None:
            pulumi.set(__self__, "lcm_settings_restricted_access", lcm_settings_restricted_access)
        if lcm_tracker_enabled is not None:
            pulumi.set(__self__, "lcm_tracker_enabled", lcm_tracker_enabled)
        if lcm_tracker_seed is not None:
            pulumi.set(__self__, "lcm_tracker_seed", lcm_tracker_seed)
        if led_override is not None:
            pulumi.set(__self__, "led_override", led_override)
        if led_override_color is not None:
            pulumi.set(__self__, "led_override_color", led_override_color)
        if led_override_color_brightness is not None:
            pulumi.set(__self__, "led_override_color_brightness", led_override_color_brightness)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lowpfmode_override is not None:
            pulumi.set(__self__, "lowpfmode_override", lowpfmode_override)
        if lte_apn is not None:
            pulumi.set(__self__, "lte_apn", lte_apn)
        if lte_auth_type is not None:
            pulumi.set(__self__, "lte_auth_type", lte_auth_type)
        if lte_data_limit_enabled is not None:
            pulumi.set(__self__, "lte_data_limit_enabled", lte_data_limit_enabled)
        if lte_data_warning_enabled is not None:
            pulumi.set(__self__, "lte_data_warning_enabled", lte_data_warning_enabled)
        if lte_ext_ant is not None:
            pulumi.set(__self__, "lte_ext_ant", lte_ext_ant)
        if lte_hard_limit is not None:
            pulumi.set(__self__, "lte_hard_limit", lte_hard_limit)
        if lte_password is not None:
            pulumi.set(__self__, "lte_password", lte_password)
        if lte_poe is not None:
            pulumi.set(__self__, "lte_poe", lte_poe)
        if lte_roaming_allowed is not None:
            pulumi.set(__self__, "lte_roaming_allowed", lte_roaming_allowed)
        if lte_sim_pin is not None:
            pulumi.set(__self__, "lte_sim_pin", lte_sim_pin)
        if lte_soft_limit is not None:
            pulumi.set(__self__, "lte_soft_limit", lte_soft_limit)
        if lte_username is not None:
            pulumi.set(__self__, "lte_username", lte_username)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if map_id is not None:
            pulumi.set(__self__, "map_id", map_id)
        if mesh_sta_vap_enabled is not None:
            pulumi.set(__self__, "mesh_sta_vap_enabled", mesh_sta_vap_enabled)
        if mgmt_network_id is not None:
            pulumi.set(__self__, "mgmt_network_id", mgmt_network_id)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if outdoor_mode_override is not None:
            pulumi.set(__self__, "outdoor_mode_override", outdoor_mode_override)
        if outlet_enabled is not None:
            pulumi.set(__self__, "outlet_enabled", outlet_enabled)
        if outlet_overrides is not None:
            pulumi.set(__self__, "outlet_overrides", outlet_overrides)
        if outlet_power_cycle_enabled is not None:
            pulumi.set(__self__, "outlet_power_cycle_enabled", outlet_power_cycle_enabled)
        if peer_to_peer_mode is not None:
            pulumi.set(__self__, "peer_to_peer_mode", peer_to_peer_mode)
        if poe_mode is not None:
            pulumi.set(__self__, "poe_mode", poe_mode)
        if port_overrides is not None:
            pulumi.set(__self__, "port_overrides", port_overrides)
        if power_source_ctrl is not None:
            pulumi.set(__self__, "power_source_ctrl", power_source_ctrl)
        if power_source_ctrl_budget is not None:
            pulumi.set(__self__, "power_source_ctrl_budget", power_source_ctrl_budget)
        if power_source_ctrl_enabled is not None:
            pulumi.set(__self__, "power_source_ctrl_enabled", power_source_ctrl_enabled)
        if ptmp_ap_mac is not None:
            pulumi.set(__self__, "ptmp_ap_mac", ptmp_ap_mac)
        if ptp_ap_mac is not None:
            pulumi.set(__self__, "ptp_ap_mac", ptp_ap_mac)
        if radio_table is not None:
            pulumi.set(__self__, "radio_table", radio_table)
        if radiusprofile_id is not None:
            pulumi.set(__self__, "radiusprofile_id", radiusprofile_id)
        if resetbtn_enabled is not None:
            pulumi.set(__self__, "resetbtn_enabled", resetbtn_enabled)
        if rps_override is not None:
            pulumi.set(__self__, "rps_override", rps_override)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if snmp_contact is not None:
            pulumi.set(__self__, "snmp_contact", snmp_contact)
        if snmp_location is not None:
            pulumi.set(__self__, "snmp_location", snmp_location)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if station_mode is not None:
            pulumi.set(__self__, "station_mode", station_mode)
        if stp_priority is not None:
            pulumi.set(__self__, "stp_priority", stp_priority)
        if stp_version is not None:
            pulumi.set(__self__, "stp_version", stp_version)
        if switch_vlan_enabled is not None:
            pulumi.set(__self__, "switch_vlan_enabled", switch_vlan_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if ubb_pair_name is not None:
            pulumi.set(__self__, "ubb_pair_name", ubb_pair_name)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_baresip_password is not None:
            pulumi.set(__self__, "x_baresip_password", x_baresip_password)
        if y is not None:
            pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def adopted(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "adopted")

    @adopted.setter
    def adopted(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "adopted", value)

    @property
    @pulumi.getter(name="afcEnabled")
    def afc_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "afc_enabled")

    @afc_enabled.setter
    def afc_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "afc_enabled", value)

    @property
    @pulumi.getter(name="atfEnabled")
    def atf_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "atf_enabled")

    @atf_enabled.setter
    def atf_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "atf_enabled", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter(name="bandsteeringMode")
    def bandsteering_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "bandsteering_mode")

    @bandsteering_mode.setter
    def bandsteering_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "bandsteering_mode", value)

    @property
    @pulumi.getter(name="baresipAuthUser")
    def baresip_auth_user(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "baresip_auth_user")

    @baresip_auth_user.setter
    def baresip_auth_user(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "baresip_auth_user", value)

    @property
    @pulumi.getter(name="baresipEnabled")
    def baresip_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "baresip_enabled")

    @baresip_enabled.setter
    def baresip_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "baresip_enabled", value)

    @property
    @pulumi.getter(name="baresipExtension")
    def baresip_extension(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "baresip_extension")

    @baresip_extension.setter
    def baresip_extension(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "baresip_extension", value)

    @property
    @pulumi.getter(name="configNetwork")
    def config_network(self) -> Optional[pulumi.Input['DeviceConfigNetworkArgs']]:
        return pulumi.get(self, "config_network")

    @config_network.setter
    def config_network(self, value: Optional[pulumi.Input['DeviceConfigNetworkArgs']]):
        pulumi.set(self, "config_network", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="dot1xFallbackNetworkconfId")
    def dot1x_fallback_networkconf_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dot1x_fallback_networkconf_id")

    @dot1x_fallback_networkconf_id.setter
    def dot1x_fallback_networkconf_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dot1x_fallback_networkconf_id", value)

    @property
    @pulumi.getter(name="dot1xPortctrlEnabled")
    def dot1x_portctrl_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dot1x_portctrl_enabled")

    @dot1x_portctrl_enabled.setter
    def dot1x_portctrl_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dot1x_portctrl_enabled", value)

    @property
    @pulumi.getter(name="dpiEnabled")
    def dpi_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dpi_enabled")

    @dpi_enabled.setter
    def dpi_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dpi_enabled", value)

    @property
    @pulumi.getter(name="etherLighting")
    def ether_lighting(self) -> Optional[pulumi.Input['DeviceEtherLightingArgs']]:
        return pulumi.get(self, "ether_lighting")

    @ether_lighting.setter
    def ether_lighting(self, value: Optional[pulumi.Input['DeviceEtherLightingArgs']]):
        pulumi.set(self, "ether_lighting", value)

    @property
    @pulumi.getter(name="ethernetOverrides")
    def ethernet_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceEthernetOverridesArgs']]]]:
        return pulumi.get(self, "ethernet_overrides")

    @ethernet_overrides.setter
    def ethernet_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceEthernetOverridesArgs']]]]):
        pulumi.set(self, "ethernet_overrides", value)

    @property
    @pulumi.getter(name="fanModeOverride")
    def fan_mode_override(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "fan_mode_override")

    @fan_mode_override.setter
    def fan_mode_override(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fan_mode_override", value)

    @property
    @pulumi.getter(name="flowctrlEnabled")
    def flowctrl_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "flowctrl_enabled")

    @flowctrl_enabled.setter
    def flowctrl_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "flowctrl_enabled", value)

    @property
    @pulumi.getter(name="gatewayVrrpMode")
    def gateway_vrrp_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "gateway_vrrp_mode")

    @gateway_vrrp_mode.setter
    def gateway_vrrp_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "gateway_vrrp_mode", value)

    @property
    @pulumi.getter(name="gatewayVrrpPriority")
    def gateway_vrrp_priority(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "gateway_vrrp_priority")

    @gateway_vrrp_priority.setter
    def gateway_vrrp_priority(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "gateway_vrrp_priority", value)

    @property
    @pulumi.getter(name="greenApEnabled")
    def green_ap_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "green_ap_enabled")

    @green_ap_enabled.setter
    def green_ap_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "green_ap_enabled", value)

    @property
    @pulumi.getter(name="heightInMeters")
    def height_in_meters(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "height_in_meters")

    @height_in_meters.setter
    def height_in_meters(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "height_in_meters", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="jumboframeEnabled")
    def jumboframe_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "jumboframe_enabled")

    @jumboframe_enabled.setter
    def jumboframe_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "jumboframe_enabled", value)

    @property
    @pulumi.getter(name="lcmBrightness")
    def lcm_brightness(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "lcm_brightness")

    @lcm_brightness.setter
    def lcm_brightness(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "lcm_brightness", value)

    @property
    @pulumi.getter(name="lcmBrightnessOverride")
    def lcm_brightness_override(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lcm_brightness_override")

    @lcm_brightness_override.setter
    def lcm_brightness_override(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lcm_brightness_override", value)

    @property
    @pulumi.getter(name="lcmIdleTimeout")
    def lcm_idle_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "lcm_idle_timeout")

    @lcm_idle_timeout.setter
    def lcm_idle_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "lcm_idle_timeout", value)

    @property
    @pulumi.getter(name="lcmIdleTimeoutOverride")
    def lcm_idle_timeout_override(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lcm_idle_timeout_override")

    @lcm_idle_timeout_override.setter
    def lcm_idle_timeout_override(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lcm_idle_timeout_override", value)

    @property
    @pulumi.getter(name="lcmNightModeBegins")
    def lcm_night_mode_begins(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lcm_night_mode_begins")

    @lcm_night_mode_begins.setter
    def lcm_night_mode_begins(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lcm_night_mode_begins", value)

    @property
    @pulumi.getter(name="lcmNightModeEnds")
    def lcm_night_mode_ends(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lcm_night_mode_ends")

    @lcm_night_mode_ends.setter
    def lcm_night_mode_ends(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lcm_night_mode_ends", value)

    @property
    @pulumi.getter(name="lcmOrientationOverride")
    def lcm_orientation_override(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "lcm_orientation_override")

    @lcm_orientation_override.setter
    def lcm_orientation_override(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "lcm_orientation_override", value)

    @property
    @pulumi.getter(name="lcmSettingsRestrictedAccess")
    def lcm_settings_restricted_access(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lcm_settings_restricted_access")

    @lcm_settings_restricted_access.setter
    def lcm_settings_restricted_access(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lcm_settings_restricted_access", value)

    @property
    @pulumi.getter(name="lcmTrackerEnabled")
    def lcm_tracker_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lcm_tracker_enabled")

    @lcm_tracker_enabled.setter
    def lcm_tracker_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lcm_tracker_enabled", value)

    @property
    @pulumi.getter(name="lcmTrackerSeed")
    def lcm_tracker_seed(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lcm_tracker_seed")

    @lcm_tracker_seed.setter
    def lcm_tracker_seed(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lcm_tracker_seed", value)

    @property
    @pulumi.getter(name="ledOverride")
    def led_override(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "led_override")

    @led_override.setter
    def led_override(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "led_override", value)

    @property
    @pulumi.getter(name="ledOverrideColor")
    def led_override_color(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "led_override_color")

    @led_override_color.setter
    def led_override_color(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "led_override_color", value)

    @property
    @pulumi.getter(name="ledOverrideColorBrightness")
    def led_override_color_brightness(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "led_override_color_brightness")

    @led_override_color_brightness.setter
    def led_override_color_brightness(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "led_override_color_brightness", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="lowpfmodeOverride")
    def lowpfmode_override(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lowpfmode_override")

    @lowpfmode_override.setter
    def lowpfmode_override(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lowpfmode_override", value)

    @property
    @pulumi.getter(name="lteApn")
    def lte_apn(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lte_apn")

    @lte_apn.setter
    def lte_apn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lte_apn", value)

    @property
    @pulumi.getter(name="lteAuthType")
    def lte_auth_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lte_auth_type")

    @lte_auth_type.setter
    def lte_auth_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lte_auth_type", value)

    @property
    @pulumi.getter(name="lteDataLimitEnabled")
    def lte_data_limit_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lte_data_limit_enabled")

    @lte_data_limit_enabled.setter
    def lte_data_limit_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lte_data_limit_enabled", value)

    @property
    @pulumi.getter(name="lteDataWarningEnabled")
    def lte_data_warning_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lte_data_warning_enabled")

    @lte_data_warning_enabled.setter
    def lte_data_warning_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lte_data_warning_enabled", value)

    @property
    @pulumi.getter(name="lteExtAnt")
    def lte_ext_ant(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lte_ext_ant")

    @lte_ext_ant.setter
    def lte_ext_ant(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lte_ext_ant", value)

    @property
    @pulumi.getter(name="lteHardLimit")
    def lte_hard_limit(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "lte_hard_limit")

    @lte_hard_limit.setter
    def lte_hard_limit(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "lte_hard_limit", value)

    @property
    @pulumi.getter(name="ltePassword")
    def lte_password(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lte_password")

    @lte_password.setter
    def lte_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lte_password", value)

    @property
    @pulumi.getter(name="ltePoe")
    def lte_poe(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lte_poe")

    @lte_poe.setter
    def lte_poe(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lte_poe", value)

    @property
    @pulumi.getter(name="lteRoamingAllowed")
    def lte_roaming_allowed(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lte_roaming_allowed")

    @lte_roaming_allowed.setter
    def lte_roaming_allowed(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lte_roaming_allowed", value)

    @property
    @pulumi.getter(name="lteSimPin")
    def lte_sim_pin(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "lte_sim_pin")

    @lte_sim_pin.setter
    def lte_sim_pin(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "lte_sim_pin", value)

    @property
    @pulumi.getter(name="lteSoftLimit")
    def lte_soft_limit(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "lte_soft_limit")

    @lte_soft_limit.setter
    def lte_soft_limit(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "lte_soft_limit", value)

    @property
    @pulumi.getter(name="lteUsername")
    def lte_username(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lte_username")

    @lte_username.setter
    def lte_username(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lte_username", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter(name="mapId")
    def map_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "map_id")

    @map_id.setter
    def map_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "map_id", value)

    @property
    @pulumi.getter(name="meshStaVapEnabled")
    def mesh_sta_vap_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "mesh_sta_vap_enabled")

    @mesh_sta_vap_enabled.setter
    def mesh_sta_vap_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "mesh_sta_vap_enabled", value)

    @property
    @pulumi.getter(name="mgmtNetworkId")
    def mgmt_network_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "mgmt_network_id")

    @mgmt_network_id.setter
    def mgmt_network_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mgmt_network_id", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="outdoorModeOverride")
    def outdoor_mode_override(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "outdoor_mode_override")

    @outdoor_mode_override.setter
    def outdoor_mode_override(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "outdoor_mode_override", value)

    @property
    @pulumi.getter(name="outletEnabled")
    def outlet_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "outlet_enabled")

    @outlet_enabled.setter
    def outlet_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "outlet_enabled", value)

    @property
    @pulumi.getter(name="outletOverrides")
    def outlet_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceOutletOverridesArgs']]]]:
        return pulumi.get(self, "outlet_overrides")

    @outlet_overrides.setter
    def outlet_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceOutletOverridesArgs']]]]):
        pulumi.set(self, "outlet_overrides", value)

    @property
    @pulumi.getter(name="outletPowerCycleEnabled")
    def outlet_power_cycle_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "outlet_power_cycle_enabled")

    @outlet_power_cycle_enabled.setter
    def outlet_power_cycle_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "outlet_power_cycle_enabled", value)

    @property
    @pulumi.getter(name="peerToPeerMode")
    def peer_to_peer_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "peer_to_peer_mode")

    @peer_to_peer_mode.setter
    def peer_to_peer_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "peer_to_peer_mode", value)

    @property
    @pulumi.getter(name="poeMode")
    def poe_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "poe_mode")

    @poe_mode.setter
    def poe_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "poe_mode", value)

    @property
    @pulumi.getter(name="portOverrides")
    def port_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DevicePortOverridesArgs']]]]:
        return pulumi.get(self, "port_overrides")

    @port_overrides.setter
    def port_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DevicePortOverridesArgs']]]]):
        pulumi.set(self, "port_overrides", value)

    @property
    @pulumi.getter(name="powerSourceCtrl")
    def power_source_ctrl(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "power_source_ctrl")

    @power_source_ctrl.setter
    def power_source_ctrl(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "power_source_ctrl", value)

    @property
    @pulumi.getter(name="powerSourceCtrlBudget")
    def power_source_ctrl_budget(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "power_source_ctrl_budget")

    @power_source_ctrl_budget.setter
    def power_source_ctrl_budget(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "power_source_ctrl_budget", value)

    @property
    @pulumi.getter(name="powerSourceCtrlEnabled")
    def power_source_ctrl_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "power_source_ctrl_enabled")

    @power_source_ctrl_enabled.setter
    def power_source_ctrl_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "power_source_ctrl_enabled", value)

    @property
    @pulumi.getter(name="ptmpApMac")
    def ptmp_ap_mac(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ptmp_ap_mac")

    @ptmp_ap_mac.setter
    def ptmp_ap_mac(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ptmp_ap_mac", value)

    @property
    @pulumi.getter(name="ptpApMac")
    def ptp_ap_mac(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ptp_ap_mac")

    @ptp_ap_mac.setter
    def ptp_ap_mac(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ptp_ap_mac", value)

    @property
    @pulumi.getter(name="radioTable")
    def radio_table(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceRadioTableArgs']]]]:
        return pulumi.get(self, "radio_table")

    @radio_table.setter
    def radio_table(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceRadioTableArgs']]]]):
        pulumi.set(self, "radio_table", value)

    @property
    @pulumi.getter(name="radiusprofileId")
    def radiusprofile_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "radiusprofile_id")

    @radiusprofile_id.setter
    def radiusprofile_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "radiusprofile_id", value)

    @property
    @pulumi.getter(name="resetbtnEnabled")
    def resetbtn_enabled(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "resetbtn_enabled")

    @resetbtn_enabled.setter
    def resetbtn_enabled(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resetbtn_enabled", value)

    @property
    @pulumi.getter(name="rpsOverride")
    def rps_override(self) -> Optional[pulumi.Input['DeviceRpsOverrideArgs']]:
        return pulumi.get(self, "rps_override")

    @rps_override.setter
    def rps_override(self, value: Optional[pulumi.Input['DeviceRpsOverrideArgs']]):
        pulumi.set(self, "rps_override", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="snmpContact")
    def snmp_contact(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "snmp_contact")

    @snmp_contact.setter
    def snmp_contact(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "snmp_contact", value)

    @property
    @pulumi.getter(name="snmpLocation")
    def snmp_location(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "snmp_location")

    @snmp_location.setter
    def snmp_location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "snmp_location", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="stationMode")
    def station_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "station_mode")

    @station_mode.setter
    def station_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "station_mode", value)

    @property
    @pulumi.getter(name="stpPriority")
    def stp_priority(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "stp_priority")

    @stp_priority.setter
    def stp_priority(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "stp_priority", value)

    @property
    @pulumi.getter(name="stpVersion")
    def stp_version(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "stp_version")

    @stp_version.setter
    def stp_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "stp_version", value)

    @property
    @pulumi.getter(name="switchVlanEnabled")
    def switch_vlan_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "switch_vlan_enabled")

    @switch_vlan_enabled.setter
    def switch_vlan_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "switch_vlan_enabled", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="ubbPairName")
    def ubb_pair_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ubb_pair_name")

    @ubb_pair_name.setter
    def ubb_pair_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ubb_pair_name", value)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter(name="xBaresipPassword")
    def x_baresip_password(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_baresip_password")

    @x_baresip_password.setter
    def x_baresip_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_baresip_password", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "y", value)


@pulumi.type_token("unifi-native:device:Device")
class Device(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 adopted: Optional[pulumi.Input[builtins.bool]] = None,
                 afc_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 atf_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 bandsteering_mode: Optional[pulumi.Input[builtins.str]] = None,
                 baresip_auth_user: Optional[pulumi.Input[builtins.str]] = None,
                 baresip_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 baresip_extension: Optional[pulumi.Input[builtins.str]] = None,
                 config_network: Optional[pulumi.Input[Union['DeviceConfigNetworkArgs', 'DeviceConfigNetworkArgsDict']]] = None,
                 disabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dot1x_fallback_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 dot1x_portctrl_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dpi_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ether_lighting: Optional[pulumi.Input[Union['DeviceEtherLightingArgs', 'DeviceEtherLightingArgsDict']]] = None,
                 ethernet_overrides: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeviceEthernetOverridesArgs', 'DeviceEthernetOverridesArgsDict']]]]] = None,
                 fan_mode_override: Optional[pulumi.Input[builtins.str]] = None,
                 flowctrl_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 gateway_vrrp_mode: Optional[pulumi.Input[builtins.str]] = None,
                 gateway_vrrp_priority: Optional[pulumi.Input[builtins.int]] = None,
                 green_ap_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 height_in_meters: Optional[pulumi.Input[builtins.float]] = None,
                 hostname: Optional[pulumi.Input[builtins.str]] = None,
                 jumboframe_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lcm_brightness: Optional[pulumi.Input[builtins.int]] = None,
                 lcm_brightness_override: Optional[pulumi.Input[builtins.bool]] = None,
                 lcm_idle_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 lcm_idle_timeout_override: Optional[pulumi.Input[builtins.bool]] = None,
                 lcm_night_mode_begins: Optional[pulumi.Input[builtins.str]] = None,
                 lcm_night_mode_ends: Optional[pulumi.Input[builtins.str]] = None,
                 lcm_orientation_override: Optional[pulumi.Input[builtins.int]] = None,
                 lcm_settings_restricted_access: Optional[pulumi.Input[builtins.bool]] = None,
                 lcm_tracker_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lcm_tracker_seed: Optional[pulumi.Input[builtins.str]] = None,
                 led_override: Optional[pulumi.Input[builtins.str]] = None,
                 led_override_color: Optional[pulumi.Input[builtins.str]] = None,
                 led_override_color_brightness: Optional[pulumi.Input[builtins.int]] = None,
                 locked: Optional[pulumi.Input[builtins.bool]] = None,
                 lowpfmode_override: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_apn: Optional[pulumi.Input[builtins.str]] = None,
                 lte_auth_type: Optional[pulumi.Input[builtins.str]] = None,
                 lte_data_limit_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_data_warning_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_ext_ant: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_hard_limit: Optional[pulumi.Input[builtins.int]] = None,
                 lte_password: Optional[pulumi.Input[builtins.str]] = None,
                 lte_poe: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_roaming_allowed: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_sim_pin: Optional[pulumi.Input[builtins.int]] = None,
                 lte_soft_limit: Optional[pulumi.Input[builtins.int]] = None,
                 lte_username: Optional[pulumi.Input[builtins.str]] = None,
                 mac: Optional[pulumi.Input[builtins.str]] = None,
                 map_id: Optional[pulumi.Input[builtins.str]] = None,
                 mesh_sta_vap_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mgmt_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 model: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 outdoor_mode_override: Optional[pulumi.Input[builtins.str]] = None,
                 outlet_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 outlet_overrides: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeviceOutletOverridesArgs', 'DeviceOutletOverridesArgsDict']]]]] = None,
                 outlet_power_cycle_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 peer_to_peer_mode: Optional[pulumi.Input[builtins.str]] = None,
                 poe_mode: Optional[pulumi.Input[builtins.str]] = None,
                 port_overrides: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DevicePortOverridesArgs', 'DevicePortOverridesArgsDict']]]]] = None,
                 power_source_ctrl: Optional[pulumi.Input[builtins.str]] = None,
                 power_source_ctrl_budget: Optional[pulumi.Input[builtins.int]] = None,
                 power_source_ctrl_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ptmp_ap_mac: Optional[pulumi.Input[builtins.str]] = None,
                 ptp_ap_mac: Optional[pulumi.Input[builtins.str]] = None,
                 radio_table: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeviceRadioTableArgs', 'DeviceRadioTableArgsDict']]]]] = None,
                 radiusprofile_id: Optional[pulumi.Input[builtins.str]] = None,
                 resetbtn_enabled: Optional[pulumi.Input[builtins.str]] = None,
                 rps_override: Optional[pulumi.Input[Union['DeviceRpsOverrideArgs', 'DeviceRpsOverrideArgsDict']]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 snmp_contact: Optional[pulumi.Input[builtins.str]] = None,
                 snmp_location: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.int]] = None,
                 station_mode: Optional[pulumi.Input[builtins.str]] = None,
                 stp_priority: Optional[pulumi.Input[builtins.str]] = None,
                 stp_version: Optional[pulumi.Input[builtins.str]] = None,
                 switch_vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 ubb_pair_name: Optional[pulumi.Input[builtins.str]] = None,
                 volume: Optional[pulumi.Input[builtins.int]] = None,
                 x: Optional[pulumi.Input[builtins.float]] = None,
                 x_baresip_password: Optional[pulumi.Input[builtins.str]] = None,
                 y: Optional[pulumi.Input[builtins.float]] = None,
                 __props__=None):
        """
        Create a Device resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DeviceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Device resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DeviceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 adopted: Optional[pulumi.Input[builtins.bool]] = None,
                 afc_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 atf_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 bandsteering_mode: Optional[pulumi.Input[builtins.str]] = None,
                 baresip_auth_user: Optional[pulumi.Input[builtins.str]] = None,
                 baresip_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 baresip_extension: Optional[pulumi.Input[builtins.str]] = None,
                 config_network: Optional[pulumi.Input[Union['DeviceConfigNetworkArgs', 'DeviceConfigNetworkArgsDict']]] = None,
                 disabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dot1x_fallback_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 dot1x_portctrl_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dpi_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ether_lighting: Optional[pulumi.Input[Union['DeviceEtherLightingArgs', 'DeviceEtherLightingArgsDict']]] = None,
                 ethernet_overrides: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeviceEthernetOverridesArgs', 'DeviceEthernetOverridesArgsDict']]]]] = None,
                 fan_mode_override: Optional[pulumi.Input[builtins.str]] = None,
                 flowctrl_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 gateway_vrrp_mode: Optional[pulumi.Input[builtins.str]] = None,
                 gateway_vrrp_priority: Optional[pulumi.Input[builtins.int]] = None,
                 green_ap_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 height_in_meters: Optional[pulumi.Input[builtins.float]] = None,
                 hostname: Optional[pulumi.Input[builtins.str]] = None,
                 jumboframe_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lcm_brightness: Optional[pulumi.Input[builtins.int]] = None,
                 lcm_brightness_override: Optional[pulumi.Input[builtins.bool]] = None,
                 lcm_idle_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 lcm_idle_timeout_override: Optional[pulumi.Input[builtins.bool]] = None,
                 lcm_night_mode_begins: Optional[pulumi.Input[builtins.str]] = None,
                 lcm_night_mode_ends: Optional[pulumi.Input[builtins.str]] = None,
                 lcm_orientation_override: Optional[pulumi.Input[builtins.int]] = None,
                 lcm_settings_restricted_access: Optional[pulumi.Input[builtins.bool]] = None,
                 lcm_tracker_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lcm_tracker_seed: Optional[pulumi.Input[builtins.str]] = None,
                 led_override: Optional[pulumi.Input[builtins.str]] = None,
                 led_override_color: Optional[pulumi.Input[builtins.str]] = None,
                 led_override_color_brightness: Optional[pulumi.Input[builtins.int]] = None,
                 locked: Optional[pulumi.Input[builtins.bool]] = None,
                 lowpfmode_override: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_apn: Optional[pulumi.Input[builtins.str]] = None,
                 lte_auth_type: Optional[pulumi.Input[builtins.str]] = None,
                 lte_data_limit_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_data_warning_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_ext_ant: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_hard_limit: Optional[pulumi.Input[builtins.int]] = None,
                 lte_password: Optional[pulumi.Input[builtins.str]] = None,
                 lte_poe: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_roaming_allowed: Optional[pulumi.Input[builtins.bool]] = None,
                 lte_sim_pin: Optional[pulumi.Input[builtins.int]] = None,
                 lte_soft_limit: Optional[pulumi.Input[builtins.int]] = None,
                 lte_username: Optional[pulumi.Input[builtins.str]] = None,
                 mac: Optional[pulumi.Input[builtins.str]] = None,
                 map_id: Optional[pulumi.Input[builtins.str]] = None,
                 mesh_sta_vap_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mgmt_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 model: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 outdoor_mode_override: Optional[pulumi.Input[builtins.str]] = None,
                 outlet_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 outlet_overrides: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeviceOutletOverridesArgs', 'DeviceOutletOverridesArgsDict']]]]] = None,
                 outlet_power_cycle_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 peer_to_peer_mode: Optional[pulumi.Input[builtins.str]] = None,
                 poe_mode: Optional[pulumi.Input[builtins.str]] = None,
                 port_overrides: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DevicePortOverridesArgs', 'DevicePortOverridesArgsDict']]]]] = None,
                 power_source_ctrl: Optional[pulumi.Input[builtins.str]] = None,
                 power_source_ctrl_budget: Optional[pulumi.Input[builtins.int]] = None,
                 power_source_ctrl_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ptmp_ap_mac: Optional[pulumi.Input[builtins.str]] = None,
                 ptp_ap_mac: Optional[pulumi.Input[builtins.str]] = None,
                 radio_table: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeviceRadioTableArgs', 'DeviceRadioTableArgsDict']]]]] = None,
                 radiusprofile_id: Optional[pulumi.Input[builtins.str]] = None,
                 resetbtn_enabled: Optional[pulumi.Input[builtins.str]] = None,
                 rps_override: Optional[pulumi.Input[Union['DeviceRpsOverrideArgs', 'DeviceRpsOverrideArgsDict']]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 snmp_contact: Optional[pulumi.Input[builtins.str]] = None,
                 snmp_location: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.int]] = None,
                 station_mode: Optional[pulumi.Input[builtins.str]] = None,
                 stp_priority: Optional[pulumi.Input[builtins.str]] = None,
                 stp_version: Optional[pulumi.Input[builtins.str]] = None,
                 switch_vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 ubb_pair_name: Optional[pulumi.Input[builtins.str]] = None,
                 volume: Optional[pulumi.Input[builtins.int]] = None,
                 x: Optional[pulumi.Input[builtins.float]] = None,
                 x_baresip_password: Optional[pulumi.Input[builtins.str]] = None,
                 y: Optional[pulumi.Input[builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceArgs.__new__(DeviceArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["adopted"] = adopted
            __props__.__dict__["afc_enabled"] = afc_enabled
            __props__.__dict__["atf_enabled"] = atf_enabled
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["bandsteering_mode"] = bandsteering_mode
            __props__.__dict__["baresip_auth_user"] = baresip_auth_user
            __props__.__dict__["baresip_enabled"] = baresip_enabled
            __props__.__dict__["baresip_extension"] = baresip_extension
            __props__.__dict__["config_network"] = config_network
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["dot1x_fallback_networkconf_id"] = dot1x_fallback_networkconf_id
            __props__.__dict__["dot1x_portctrl_enabled"] = dot1x_portctrl_enabled
            __props__.__dict__["dpi_enabled"] = dpi_enabled
            __props__.__dict__["ether_lighting"] = ether_lighting
            __props__.__dict__["ethernet_overrides"] = ethernet_overrides
            __props__.__dict__["fan_mode_override"] = fan_mode_override
            __props__.__dict__["flowctrl_enabled"] = flowctrl_enabled
            __props__.__dict__["gateway_vrrp_mode"] = gateway_vrrp_mode
            __props__.__dict__["gateway_vrrp_priority"] = gateway_vrrp_priority
            __props__.__dict__["green_ap_enabled"] = green_ap_enabled
            __props__.__dict__["height_in_meters"] = height_in_meters
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["jumboframe_enabled"] = jumboframe_enabled
            __props__.__dict__["lcm_brightness"] = lcm_brightness
            __props__.__dict__["lcm_brightness_override"] = lcm_brightness_override
            __props__.__dict__["lcm_idle_timeout"] = lcm_idle_timeout
            __props__.__dict__["lcm_idle_timeout_override"] = lcm_idle_timeout_override
            __props__.__dict__["lcm_night_mode_begins"] = lcm_night_mode_begins
            __props__.__dict__["lcm_night_mode_ends"] = lcm_night_mode_ends
            __props__.__dict__["lcm_orientation_override"] = lcm_orientation_override
            __props__.__dict__["lcm_settings_restricted_access"] = lcm_settings_restricted_access
            __props__.__dict__["lcm_tracker_enabled"] = lcm_tracker_enabled
            __props__.__dict__["lcm_tracker_seed"] = lcm_tracker_seed
            __props__.__dict__["led_override"] = led_override
            __props__.__dict__["led_override_color"] = led_override_color
            __props__.__dict__["led_override_color_brightness"] = led_override_color_brightness
            __props__.__dict__["locked"] = locked
            __props__.__dict__["lowpfmode_override"] = lowpfmode_override
            __props__.__dict__["lte_apn"] = lte_apn
            __props__.__dict__["lte_auth_type"] = lte_auth_type
            __props__.__dict__["lte_data_limit_enabled"] = lte_data_limit_enabled
            __props__.__dict__["lte_data_warning_enabled"] = lte_data_warning_enabled
            __props__.__dict__["lte_ext_ant"] = lte_ext_ant
            __props__.__dict__["lte_hard_limit"] = lte_hard_limit
            __props__.__dict__["lte_password"] = lte_password
            __props__.__dict__["lte_poe"] = lte_poe
            __props__.__dict__["lte_roaming_allowed"] = lte_roaming_allowed
            __props__.__dict__["lte_sim_pin"] = lte_sim_pin
            __props__.__dict__["lte_soft_limit"] = lte_soft_limit
            __props__.__dict__["lte_username"] = lte_username
            __props__.__dict__["mac"] = mac
            __props__.__dict__["map_id"] = map_id
            __props__.__dict__["mesh_sta_vap_enabled"] = mesh_sta_vap_enabled
            __props__.__dict__["mgmt_network_id"] = mgmt_network_id
            __props__.__dict__["model"] = model
            __props__.__dict__["name"] = name
            __props__.__dict__["outdoor_mode_override"] = outdoor_mode_override
            __props__.__dict__["outlet_enabled"] = outlet_enabled
            __props__.__dict__["outlet_overrides"] = outlet_overrides
            __props__.__dict__["outlet_power_cycle_enabled"] = outlet_power_cycle_enabled
            __props__.__dict__["peer_to_peer_mode"] = peer_to_peer_mode
            __props__.__dict__["poe_mode"] = poe_mode
            __props__.__dict__["port_overrides"] = port_overrides
            __props__.__dict__["power_source_ctrl"] = power_source_ctrl
            __props__.__dict__["power_source_ctrl_budget"] = power_source_ctrl_budget
            __props__.__dict__["power_source_ctrl_enabled"] = power_source_ctrl_enabled
            __props__.__dict__["ptmp_ap_mac"] = ptmp_ap_mac
            __props__.__dict__["ptp_ap_mac"] = ptp_ap_mac
            __props__.__dict__["radio_table"] = radio_table
            __props__.__dict__["radiusprofile_id"] = radiusprofile_id
            __props__.__dict__["resetbtn_enabled"] = resetbtn_enabled
            __props__.__dict__["rps_override"] = rps_override
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["snmp_contact"] = snmp_contact
            __props__.__dict__["snmp_location"] = snmp_location
            __props__.__dict__["state"] = state
            __props__.__dict__["station_mode"] = station_mode
            __props__.__dict__["stp_priority"] = stp_priority
            __props__.__dict__["stp_version"] = stp_version
            __props__.__dict__["switch_vlan_enabled"] = switch_vlan_enabled
            __props__.__dict__["type"] = type
            __props__.__dict__["ubb_pair_name"] = ubb_pair_name
            __props__.__dict__["volume"] = volume
            __props__.__dict__["x"] = x
            __props__.__dict__["x_baresip_password"] = x_baresip_password
            __props__.__dict__["y"] = y
        super(Device, __self__).__init__(
            'unifi-native:device:Device',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Device':
        """
        Get an existing Device resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DeviceArgs.__new__(DeviceArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["adopted"] = None
        __props__.__dict__["afc_enabled"] = None
        __props__.__dict__["atf_enabled"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["bandsteering_mode"] = None
        __props__.__dict__["baresip_auth_user"] = None
        __props__.__dict__["baresip_enabled"] = None
        __props__.__dict__["baresip_extension"] = None
        __props__.__dict__["config_network"] = None
        __props__.__dict__["disabled"] = None
        __props__.__dict__["dot1x_fallback_networkconf_id"] = None
        __props__.__dict__["dot1x_portctrl_enabled"] = None
        __props__.__dict__["dpi_enabled"] = None
        __props__.__dict__["ether_lighting"] = None
        __props__.__dict__["ethernet_overrides"] = None
        __props__.__dict__["fan_mode_override"] = None
        __props__.__dict__["flowctrl_enabled"] = None
        __props__.__dict__["gateway_vrrp_mode"] = None
        __props__.__dict__["gateway_vrrp_priority"] = None
        __props__.__dict__["green_ap_enabled"] = None
        __props__.__dict__["height_in_meters"] = None
        __props__.__dict__["hostname"] = None
        __props__.__dict__["jumboframe_enabled"] = None
        __props__.__dict__["lcm_brightness"] = None
        __props__.__dict__["lcm_brightness_override"] = None
        __props__.__dict__["lcm_idle_timeout"] = None
        __props__.__dict__["lcm_idle_timeout_override"] = None
        __props__.__dict__["lcm_night_mode_begins"] = None
        __props__.__dict__["lcm_night_mode_ends"] = None
        __props__.__dict__["lcm_orientation_override"] = None
        __props__.__dict__["lcm_settings_restricted_access"] = None
        __props__.__dict__["lcm_tracker_enabled"] = None
        __props__.__dict__["lcm_tracker_seed"] = None
        __props__.__dict__["led_override"] = None
        __props__.__dict__["led_override_color"] = None
        __props__.__dict__["led_override_color_brightness"] = None
        __props__.__dict__["locked"] = None
        __props__.__dict__["lowpfmode_override"] = None
        __props__.__dict__["lte_apn"] = None
        __props__.__dict__["lte_auth_type"] = None
        __props__.__dict__["lte_data_limit_enabled"] = None
        __props__.__dict__["lte_data_warning_enabled"] = None
        __props__.__dict__["lte_ext_ant"] = None
        __props__.__dict__["lte_hard_limit"] = None
        __props__.__dict__["lte_password"] = None
        __props__.__dict__["lte_poe"] = None
        __props__.__dict__["lte_roaming_allowed"] = None
        __props__.__dict__["lte_sim_pin"] = None
        __props__.__dict__["lte_soft_limit"] = None
        __props__.__dict__["lte_username"] = None
        __props__.__dict__["mac"] = None
        __props__.__dict__["map_id"] = None
        __props__.__dict__["mesh_sta_vap_enabled"] = None
        __props__.__dict__["mgmt_network_id"] = None
        __props__.__dict__["model"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["outdoor_mode_override"] = None
        __props__.__dict__["outlet_enabled"] = None
        __props__.__dict__["outlet_overrides"] = None
        __props__.__dict__["outlet_power_cycle_enabled"] = None
        __props__.__dict__["peer_to_peer_mode"] = None
        __props__.__dict__["poe_mode"] = None
        __props__.__dict__["port_overrides"] = None
        __props__.__dict__["power_source_ctrl"] = None
        __props__.__dict__["power_source_ctrl_budget"] = None
        __props__.__dict__["power_source_ctrl_enabled"] = None
        __props__.__dict__["ptmp_ap_mac"] = None
        __props__.__dict__["ptp_ap_mac"] = None
        __props__.__dict__["radio_table"] = None
        __props__.__dict__["radiusprofile_id"] = None
        __props__.__dict__["resetbtn_enabled"] = None
        __props__.__dict__["rps_override"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["snmp_contact"] = None
        __props__.__dict__["snmp_location"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["station_mode"] = None
        __props__.__dict__["stp_priority"] = None
        __props__.__dict__["stp_version"] = None
        __props__.__dict__["switch_vlan_enabled"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["ubb_pair_name"] = None
        __props__.__dict__["volume"] = None
        __props__.__dict__["x"] = None
        __props__.__dict__["x_baresip_password"] = None
        __props__.__dict__["y"] = None
        return Device(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def adopted(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "adopted")

    @property
    @pulumi.getter(name="afcEnabled")
    def afc_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "afc_enabled")

    @property
    @pulumi.getter(name="atfEnabled")
    def atf_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "atf_enabled")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="bandsteeringMode")
    def bandsteering_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "bandsteering_mode")

    @property
    @pulumi.getter(name="baresipAuthUser")
    def baresip_auth_user(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "baresip_auth_user")

    @property
    @pulumi.getter(name="baresipEnabled")
    def baresip_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "baresip_enabled")

    @property
    @pulumi.getter(name="baresipExtension")
    def baresip_extension(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "baresip_extension")

    @property
    @pulumi.getter(name="configNetwork")
    def config_network(self) -> pulumi.Output[Optional['outputs.DeviceConfigNetwork']]:
        return pulumi.get(self, "config_network")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="dot1xFallbackNetworkconfId")
    def dot1x_fallback_networkconf_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dot1x_fallback_networkconf_id")

    @property
    @pulumi.getter(name="dot1xPortctrlEnabled")
    def dot1x_portctrl_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dot1x_portctrl_enabled")

    @property
    @pulumi.getter(name="dpiEnabled")
    def dpi_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dpi_enabled")

    @property
    @pulumi.getter(name="etherLighting")
    def ether_lighting(self) -> pulumi.Output[Optional['outputs.DeviceEtherLighting']]:
        return pulumi.get(self, "ether_lighting")

    @property
    @pulumi.getter(name="ethernetOverrides")
    def ethernet_overrides(self) -> pulumi.Output[Optional[Sequence['outputs.DeviceEthernetOverrides']]]:
        return pulumi.get(self, "ethernet_overrides")

    @property
    @pulumi.getter(name="fanModeOverride")
    def fan_mode_override(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "fan_mode_override")

    @property
    @pulumi.getter(name="flowctrlEnabled")
    def flowctrl_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "flowctrl_enabled")

    @property
    @pulumi.getter(name="gatewayVrrpMode")
    def gateway_vrrp_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "gateway_vrrp_mode")

    @property
    @pulumi.getter(name="gatewayVrrpPriority")
    def gateway_vrrp_priority(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "gateway_vrrp_priority")

    @property
    @pulumi.getter(name="greenApEnabled")
    def green_ap_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "green_ap_enabled")

    @property
    @pulumi.getter(name="heightInMeters")
    def height_in_meters(self) -> pulumi.Output[Optional[builtins.float]]:
        return pulumi.get(self, "height_in_meters")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="jumboframeEnabled")
    def jumboframe_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "jumboframe_enabled")

    @property
    @pulumi.getter(name="lcmBrightness")
    def lcm_brightness(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "lcm_brightness")

    @property
    @pulumi.getter(name="lcmBrightnessOverride")
    def lcm_brightness_override(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "lcm_brightness_override")

    @property
    @pulumi.getter(name="lcmIdleTimeout")
    def lcm_idle_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "lcm_idle_timeout")

    @property
    @pulumi.getter(name="lcmIdleTimeoutOverride")
    def lcm_idle_timeout_override(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "lcm_idle_timeout_override")

    @property
    @pulumi.getter(name="lcmNightModeBegins")
    def lcm_night_mode_begins(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "lcm_night_mode_begins")

    @property
    @pulumi.getter(name="lcmNightModeEnds")
    def lcm_night_mode_ends(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "lcm_night_mode_ends")

    @property
    @pulumi.getter(name="lcmOrientationOverride")
    def lcm_orientation_override(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "lcm_orientation_override")

    @property
    @pulumi.getter(name="lcmSettingsRestrictedAccess")
    def lcm_settings_restricted_access(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "lcm_settings_restricted_access")

    @property
    @pulumi.getter(name="lcmTrackerEnabled")
    def lcm_tracker_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "lcm_tracker_enabled")

    @property
    @pulumi.getter(name="lcmTrackerSeed")
    def lcm_tracker_seed(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "lcm_tracker_seed")

    @property
    @pulumi.getter(name="ledOverride")
    def led_override(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "led_override")

    @property
    @pulumi.getter(name="ledOverrideColor")
    def led_override_color(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "led_override_color")

    @property
    @pulumi.getter(name="ledOverrideColorBrightness")
    def led_override_color_brightness(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "led_override_color_brightness")

    @property
    @pulumi.getter
    def locked(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowpfmodeOverride")
    def lowpfmode_override(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "lowpfmode_override")

    @property
    @pulumi.getter(name="lteApn")
    def lte_apn(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "lte_apn")

    @property
    @pulumi.getter(name="lteAuthType")
    def lte_auth_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "lte_auth_type")

    @property
    @pulumi.getter(name="lteDataLimitEnabled")
    def lte_data_limit_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "lte_data_limit_enabled")

    @property
    @pulumi.getter(name="lteDataWarningEnabled")
    def lte_data_warning_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "lte_data_warning_enabled")

    @property
    @pulumi.getter(name="lteExtAnt")
    def lte_ext_ant(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "lte_ext_ant")

    @property
    @pulumi.getter(name="lteHardLimit")
    def lte_hard_limit(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "lte_hard_limit")

    @property
    @pulumi.getter(name="ltePassword")
    def lte_password(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "lte_password")

    @property
    @pulumi.getter(name="ltePoe")
    def lte_poe(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "lte_poe")

    @property
    @pulumi.getter(name="lteRoamingAllowed")
    def lte_roaming_allowed(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "lte_roaming_allowed")

    @property
    @pulumi.getter(name="lteSimPin")
    def lte_sim_pin(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "lte_sim_pin")

    @property
    @pulumi.getter(name="lteSoftLimit")
    def lte_soft_limit(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "lte_soft_limit")

    @property
    @pulumi.getter(name="lteUsername")
    def lte_username(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "lte_username")

    @property
    @pulumi.getter
    def mac(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="mapId")
    def map_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "map_id")

    @property
    @pulumi.getter(name="meshStaVapEnabled")
    def mesh_sta_vap_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "mesh_sta_vap_enabled")

    @property
    @pulumi.getter(name="mgmtNetworkId")
    def mgmt_network_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "mgmt_network_id")

    @property
    @pulumi.getter
    def model(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outdoorModeOverride")
    def outdoor_mode_override(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "outdoor_mode_override")

    @property
    @pulumi.getter(name="outletEnabled")
    def outlet_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "outlet_enabled")

    @property
    @pulumi.getter(name="outletOverrides")
    def outlet_overrides(self) -> pulumi.Output[Optional[Sequence['outputs.DeviceOutletOverrides']]]:
        return pulumi.get(self, "outlet_overrides")

    @property
    @pulumi.getter(name="outletPowerCycleEnabled")
    def outlet_power_cycle_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "outlet_power_cycle_enabled")

    @property
    @pulumi.getter(name="peerToPeerMode")
    def peer_to_peer_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "peer_to_peer_mode")

    @property
    @pulumi.getter(name="poeMode")
    def poe_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "poe_mode")

    @property
    @pulumi.getter(name="portOverrides")
    def port_overrides(self) -> pulumi.Output[Optional[Sequence['outputs.DevicePortOverrides']]]:
        return pulumi.get(self, "port_overrides")

    @property
    @pulumi.getter(name="powerSourceCtrl")
    def power_source_ctrl(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "power_source_ctrl")

    @property
    @pulumi.getter(name="powerSourceCtrlBudget")
    def power_source_ctrl_budget(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "power_source_ctrl_budget")

    @property
    @pulumi.getter(name="powerSourceCtrlEnabled")
    def power_source_ctrl_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "power_source_ctrl_enabled")

    @property
    @pulumi.getter(name="ptmpApMac")
    def ptmp_ap_mac(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ptmp_ap_mac")

    @property
    @pulumi.getter(name="ptpApMac")
    def ptp_ap_mac(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ptp_ap_mac")

    @property
    @pulumi.getter(name="radioTable")
    def radio_table(self) -> pulumi.Output[Optional[Sequence['outputs.DeviceRadioTable']]]:
        return pulumi.get(self, "radio_table")

    @property
    @pulumi.getter(name="radiusprofileId")
    def radiusprofile_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "radiusprofile_id")

    @property
    @pulumi.getter(name="resetbtnEnabled")
    def resetbtn_enabled(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "resetbtn_enabled")

    @property
    @pulumi.getter(name="rpsOverride")
    def rps_override(self) -> pulumi.Output[Optional['outputs.DeviceRpsOverride']]:
        return pulumi.get(self, "rps_override")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="snmpContact")
    def snmp_contact(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "snmp_contact")

    @property
    @pulumi.getter(name="snmpLocation")
    def snmp_location(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "snmp_location")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stationMode")
    def station_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "station_mode")

    @property
    @pulumi.getter(name="stpPriority")
    def stp_priority(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "stp_priority")

    @property
    @pulumi.getter(name="stpVersion")
    def stp_version(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "stp_version")

    @property
    @pulumi.getter(name="switchVlanEnabled")
    def switch_vlan_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "switch_vlan_enabled")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="ubbPairName")
    def ubb_pair_name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ubb_pair_name")

    @property
    @pulumi.getter
    def volume(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter
    def x(self) -> pulumi.Output[Optional[builtins.float]]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xBaresipPassword")
    def x_baresip_password(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_baresip_password")

    @property
    @pulumi.getter
    def y(self) -> pulumi.Output[Optional[builtins.float]]:
        return pulumi.get(self, "y")

