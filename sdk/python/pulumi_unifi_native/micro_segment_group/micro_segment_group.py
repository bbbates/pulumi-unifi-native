# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['MicroSegmentGroupArgs', 'MicroSegmentGroup']

@pulumi.input_type
class MicroSegmentGroupArgs:
    def __init__(__self__, *,
                 members: pulumi.Input[Sequence[pulumi.Input['MicroSegmentMemberDtoArgs']]],
                 block_internet: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a MicroSegmentGroup resource.
        """
        pulumi.set(__self__, "members", members)
        if block_internet is not None:
            pulumi.set(__self__, "block_internet", block_internet)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)

    @property
    @pulumi.getter
    def members(self) -> pulumi.Input[Sequence[pulumi.Input['MicroSegmentMemberDtoArgs']]]:
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: pulumi.Input[Sequence[pulumi.Input['MicroSegmentMemberDtoArgs']]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="blockInternet")
    def block_internet(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "block_internet")

    @block_internet.setter
    def block_internet(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "block_internet", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)


@pulumi.type_token("unifi-native:micro-segment-group:MicroSegmentGroup")
class MicroSegmentGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block_internet: Optional[pulumi.Input[builtins.bool]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MicroSegmentMemberDtoArgs', 'MicroSegmentMemberDtoArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a MicroSegmentGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MicroSegmentGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MicroSegmentGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MicroSegmentGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MicroSegmentGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block_internet: Optional[pulumi.Input[builtins.bool]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MicroSegmentMemberDtoArgs', 'MicroSegmentMemberDtoArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MicroSegmentGroupArgs.__new__(MicroSegmentGroupArgs)

            __props__.__dict__["block_internet"] = block_internet
            if members is None and not opts.urn:
                raise TypeError("Missing required property 'members'")
            __props__.__dict__["members"] = members
            __props__.__dict__["name"] = name
            __props__.__dict__["site_name"] = site_name
        super(MicroSegmentGroup, __self__).__init__(
            'unifi-native:micro-segment-group:MicroSegmentGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'MicroSegmentGroup':
        """
        Get an existing MicroSegmentGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = MicroSegmentGroupArgs.__new__(MicroSegmentGroupArgs)

        __props__.__dict__["block_internet"] = None
        __props__.__dict__["members"] = None
        __props__.__dict__["name"] = None
        return MicroSegmentGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="blockInternet")
    def block_internet(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "block_internet")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Sequence['outputs.MicroSegmentMemberDto']]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

