# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'FirewallPolicyDestinationDto',
    'FirewallPolicyDto',
    'FirewallPolicyScheduleDto',
    'FirewallPolicySourceDto',
]

@pulumi.output_type
class FirewallPolicyDestinationDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchingTarget":
            suggest = "matching_target"
        elif key == "portMatchingType":
            suggest = "port_matching_type"
        elif key == "zoneId":
            suggest = "zone_id"
        elif key == "matchOppositePorts":
            suggest = "match_opposite_ports"
        elif key == "matchingTargetType":
            suggest = "matching_target_type"
        elif key == "portGroupId":
            suggest = "port_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallPolicyDestinationDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallPolicyDestinationDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallPolicyDestinationDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 matching_target: 'FirewallPolicyDestinationDtoMatchingTarget',
                 port_matching_type: 'FirewallPolicyDestinationDtoPortMatchingType',
                 zone_id: builtins.str,
                 match_opposite_ports: Optional[builtins.bool] = None,
                 matching_target_type: Optional['FirewallPolicyDestinationDtoMatchingTargetType'] = None,
                 port: Optional[builtins.str] = None,
                 port_group_id: Optional[builtins.str] = None):
        pulumi.set(__self__, "matching_target", matching_target)
        pulumi.set(__self__, "port_matching_type", port_matching_type)
        pulumi.set(__self__, "zone_id", zone_id)
        if match_opposite_ports is not None:
            pulumi.set(__self__, "match_opposite_ports", match_opposite_ports)
        if matching_target_type is not None:
            pulumi.set(__self__, "matching_target_type", matching_target_type)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_group_id is not None:
            pulumi.set(__self__, "port_group_id", port_group_id)

    @property
    @pulumi.getter(name="matchingTarget")
    def matching_target(self) -> 'FirewallPolicyDestinationDtoMatchingTarget':
        return pulumi.get(self, "matching_target")

    @property
    @pulumi.getter(name="portMatchingType")
    def port_matching_type(self) -> 'FirewallPolicyDestinationDtoPortMatchingType':
        return pulumi.get(self, "port_matching_type")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> builtins.str:
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="matchOppositePorts")
    def match_opposite_ports(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "match_opposite_ports")

    @property
    @pulumi.getter(name="matchingTargetType")
    def matching_target_type(self) -> Optional['FirewallPolicyDestinationDtoMatchingTargetType']:
        return pulumi.get(self, "matching_target_type")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="portGroupId")
    def port_group_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "port_group_id")


@pulumi.output_type
class FirewallPolicyDto(dict):
    def __init__(__self__, *,
                 action: 'FirewallPolicyDtoAction',
                 destination: 'outputs.FirewallPolicyDestinationDto',
                 ip_version: 'FirewallPolicyDtoIpVersion',
                 name: builtins.str,
                 schedule: 'outputs.FirewallPolicyScheduleDto',
                 source: 'outputs.FirewallPolicySourceDto',
                 id: Optional[builtins.str] = None,
                 connection_state_type: Optional['FirewallPolicyDtoConnectionStateType'] = None,
                 connection_states: Optional[Sequence['FirewallPolicyDtoConnectionStatesItem']] = None,
                 create_allow_respond: Optional[builtins.bool] = None,
                 description: Optional[builtins.str] = None,
                 enabled: Optional[builtins.bool] = None,
                 icmp_typename: Optional['FirewallPolicyDtoIcmpTypename'] = None,
                 icmp_v6_typename: Optional['FirewallPolicyDtoIcmpV6Typename'] = None,
                 index: Optional[builtins.int] = None,
                 logging: Optional[builtins.bool] = None,
                 match_ip_sec: Optional[builtins.bool] = None,
                 match_ip_sec_type: Optional['FirewallPolicyDtoMatchIpSecType'] = None,
                 match_opposite_protocol: Optional[builtins.bool] = None,
                 origin_id: Optional[builtins.str] = None,
                 origin_type: Optional['FirewallPolicyDtoOriginType'] = None,
                 predefined: Optional[builtins.bool] = None,
                 protocol: Optional[builtins.str] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "source", source)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if connection_state_type is not None:
            pulumi.set(__self__, "connection_state_type", connection_state_type)
        if connection_states is not None:
            pulumi.set(__self__, "connection_states", connection_states)
        if create_allow_respond is not None:
            pulumi.set(__self__, "create_allow_respond", create_allow_respond)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if icmp_typename is not None:
            pulumi.set(__self__, "icmp_typename", icmp_typename)
        if icmp_v6_typename is not None:
            pulumi.set(__self__, "icmp_v6_typename", icmp_v6_typename)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if match_ip_sec is not None:
            pulumi.set(__self__, "match_ip_sec", match_ip_sec)
        if match_ip_sec_type is not None:
            pulumi.set(__self__, "match_ip_sec_type", match_ip_sec_type)
        if match_opposite_protocol is not None:
            pulumi.set(__self__, "match_opposite_protocol", match_opposite_protocol)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if origin_type is not None:
            pulumi.set(__self__, "origin_type", origin_type)
        if predefined is not None:
            pulumi.set(__self__, "predefined", predefined)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> 'FirewallPolicyDtoAction':
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.FirewallPolicyDestinationDto':
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> 'FirewallPolicyDtoIpVersion':
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schedule(self) -> 'outputs.FirewallPolicyScheduleDto':
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def source(self) -> 'outputs.FirewallPolicySourceDto':
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="connectionStateType")
    def connection_state_type(self) -> Optional['FirewallPolicyDtoConnectionStateType']:
        return pulumi.get(self, "connection_state_type")

    @property
    @pulumi.getter(name="connectionStates")
    def connection_states(self) -> Optional[Sequence['FirewallPolicyDtoConnectionStatesItem']]:
        return pulumi.get(self, "connection_states")

    @property
    @pulumi.getter(name="createAllowRespond")
    def create_allow_respond(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "create_allow_respond")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="icmpTypename")
    def icmp_typename(self) -> Optional['FirewallPolicyDtoIcmpTypename']:
        return pulumi.get(self, "icmp_typename")

    @property
    @pulumi.getter(name="icmpV6Typename")
    def icmp_v6_typename(self) -> Optional['FirewallPolicyDtoIcmpV6Typename']:
        return pulumi.get(self, "icmp_v6_typename")

    @property
    @pulumi.getter
    def index(self) -> Optional[builtins.int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def logging(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter(name="matchIpSec")
    def match_ip_sec(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "match_ip_sec")

    @property
    @pulumi.getter(name="matchIpSecType")
    def match_ip_sec_type(self) -> Optional['FirewallPolicyDtoMatchIpSecType']:
        return pulumi.get(self, "match_ip_sec_type")

    @property
    @pulumi.getter(name="matchOppositeProtocol")
    def match_opposite_protocol(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "match_opposite_protocol")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional['FirewallPolicyDtoOriginType']:
        return pulumi.get(self, "origin_type")

    @property
    @pulumi.getter
    def predefined(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "predefined")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class FirewallPolicyScheduleDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "EndDateApplicableToCUSTOM":
            suggest = "end_date_applicable_to_custom"
        elif key == "StartDateApplicableToCUSTOM":
            suggest = "start_date_applicable_to_custom"
        elif key == "repeatOnDays":
            suggest = "repeat_on_days"
        elif key == "timeAllDay":
            suggest = "time_all_day"
        elif key == "timeRangeEnd":
            suggest = "time_range_end"
        elif key == "timeRangeStart":
            suggest = "time_range_start"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallPolicyScheduleDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallPolicyScheduleDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallPolicyScheduleDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: 'FirewallPolicyScheduleDtoMode',
                 end_date_applicable_to_custom: Optional[builtins.str] = None,
                 start_date_applicable_to_custom: Optional[builtins.str] = None,
                 date: Optional[builtins.str] = None,
                 repeat_on_days: Optional[Sequence['FirewallPolicyScheduleDtoRepeatOnDaysItem']] = None,
                 time_all_day: Optional[builtins.bool] = None,
                 time_range_end: Optional[builtins.str] = None,
                 time_range_start: Optional[builtins.str] = None):
        """
        :param builtins.str date: Start date. Applicable to: ONE_TIME_ONLY
        :param Sequence['FirewallPolicyScheduleDtoRepeatOnDaysItem'] repeat_on_days: Repeat on on days. Applicable to: EVERY_WEEK, CUSTOM
        :param builtins.bool time_all_day: Rule will be running for all day. Time range start/end are ignored. Applicable to: EVERY_WEEK, CUSTOM
        :param builtins.str time_range_end: End time in 24 hours format. It accepts 24:00 as end of the day. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        :param builtins.str time_range_start: Start time in 24 hours format. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        """
        pulumi.set(__self__, "mode", mode)
        if end_date_applicable_to_custom is not None:
            pulumi.set(__self__, "end_date_applicable_to_custom", end_date_applicable_to_custom)
        if start_date_applicable_to_custom is not None:
            pulumi.set(__self__, "start_date_applicable_to_custom", start_date_applicable_to_custom)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if repeat_on_days is not None:
            pulumi.set(__self__, "repeat_on_days", repeat_on_days)
        if time_all_day is not None:
            pulumi.set(__self__, "time_all_day", time_all_day)
        if time_range_end is not None:
            pulumi.set(__self__, "time_range_end", time_range_end)
        if time_range_start is not None:
            pulumi.set(__self__, "time_range_start", time_range_start)

    @property
    @pulumi.getter
    def mode(self) -> 'FirewallPolicyScheduleDtoMode':
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="EndDateApplicableToCUSTOM")
    def end_date_applicable_to_custom(self) -> Optional[builtins.str]:
        return pulumi.get(self, "end_date_applicable_to_custom")

    @property
    @pulumi.getter(name="StartDateApplicableToCUSTOM")
    def start_date_applicable_to_custom(self) -> Optional[builtins.str]:
        return pulumi.get(self, "start_date_applicable_to_custom")

    @property
    @pulumi.getter
    def date(self) -> Optional[builtins.str]:
        """
        Start date. Applicable to: ONE_TIME_ONLY
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter(name="repeatOnDays")
    def repeat_on_days(self) -> Optional[Sequence['FirewallPolicyScheduleDtoRepeatOnDaysItem']]:
        """
        Repeat on on days. Applicable to: EVERY_WEEK, CUSTOM
        """
        return pulumi.get(self, "repeat_on_days")

    @property
    @pulumi.getter(name="timeAllDay")
    def time_all_day(self) -> Optional[builtins.bool]:
        """
        Rule will be running for all day. Time range start/end are ignored. Applicable to: EVERY_WEEK, CUSTOM
        """
        return pulumi.get(self, "time_all_day")

    @property
    @pulumi.getter(name="timeRangeEnd")
    def time_range_end(self) -> Optional[builtins.str]:
        """
        End time in 24 hours format. It accepts 24:00 as end of the day. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        """
        return pulumi.get(self, "time_range_end")

    @property
    @pulumi.getter(name="timeRangeStart")
    def time_range_start(self) -> Optional[builtins.str]:
        """
        Start time in 24 hours format. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        """
        return pulumi.get(self, "time_range_start")


@pulumi.output_type
class FirewallPolicySourceDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchingTarget":
            suggest = "matching_target"
        elif key == "portMatchingType":
            suggest = "port_matching_type"
        elif key == "zoneId":
            suggest = "zone_id"
        elif key == "matchOppositePorts":
            suggest = "match_opposite_ports"
        elif key == "matchingTargetType":
            suggest = "matching_target_type"
        elif key == "portGroupId":
            suggest = "port_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallPolicySourceDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallPolicySourceDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallPolicySourceDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 matching_target: 'FirewallPolicySourceDtoMatchingTarget',
                 port_matching_type: 'FirewallPolicySourceDtoPortMatchingType',
                 zone_id: builtins.str,
                 match_opposite_ports: Optional[builtins.bool] = None,
                 matching_target_type: Optional['FirewallPolicySourceDtoMatchingTargetType'] = None,
                 port: Optional[builtins.str] = None,
                 port_group_id: Optional[builtins.str] = None):
        pulumi.set(__self__, "matching_target", matching_target)
        pulumi.set(__self__, "port_matching_type", port_matching_type)
        pulumi.set(__self__, "zone_id", zone_id)
        if match_opposite_ports is not None:
            pulumi.set(__self__, "match_opposite_ports", match_opposite_ports)
        if matching_target_type is not None:
            pulumi.set(__self__, "matching_target_type", matching_target_type)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_group_id is not None:
            pulumi.set(__self__, "port_group_id", port_group_id)

    @property
    @pulumi.getter(name="matchingTarget")
    def matching_target(self) -> 'FirewallPolicySourceDtoMatchingTarget':
        return pulumi.get(self, "matching_target")

    @property
    @pulumi.getter(name="portMatchingType")
    def port_matching_type(self) -> 'FirewallPolicySourceDtoPortMatchingType':
        return pulumi.get(self, "port_matching_type")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> builtins.str:
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="matchOppositePorts")
    def match_opposite_ports(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "match_opposite_ports")

    @property
    @pulumi.getter(name="matchingTargetType")
    def matching_target_type(self) -> Optional['FirewallPolicySourceDtoMatchingTargetType']:
        return pulumi.get(self, "matching_target_type")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="portGroupId")
    def port_group_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "port_group_id")


