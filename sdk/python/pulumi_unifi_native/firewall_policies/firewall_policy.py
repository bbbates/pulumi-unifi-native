# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['FirewallPolicyArgs', 'FirewallPolicy']

@pulumi.input_type
class FirewallPolicyArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['Action'],
                 destination: pulumi.Input['FirewallPolicyDestinationDtoArgs'],
                 ip_version: pulumi.Input['IpVersion'],
                 schedule: pulumi.Input['FirewallPolicyScheduleDtoArgs'],
                 source: pulumi.Input['FirewallPolicySourceDtoArgs'],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 connection_state_type: Optional[pulumi.Input['ConnectionStateType']] = None,
                 connection_states: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionStatesItem']]]] = None,
                 create_allow_respond: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 icmp_typename: Optional[pulumi.Input['IcmpTypename']] = None,
                 icmp_v6_typename: Optional[pulumi.Input['IcmpV6Typename']] = None,
                 index: Optional[pulumi.Input[builtins.int]] = None,
                 logging: Optional[pulumi.Input[builtins.bool]] = None,
                 match_ip_sec: Optional[pulumi.Input[builtins.bool]] = None,
                 match_ip_sec_type: Optional[pulumi.Input['MatchIpSecType']] = None,
                 match_opposite_protocol: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 origin_id: Optional[pulumi.Input[builtins.str]] = None,
                 origin_type: Optional[pulumi.Input['OriginType']] = None,
                 predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a FirewallPolicy resource.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "source", source)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if connection_state_type is not None:
            pulumi.set(__self__, "connection_state_type", connection_state_type)
        if connection_states is not None:
            pulumi.set(__self__, "connection_states", connection_states)
        if create_allow_respond is not None:
            pulumi.set(__self__, "create_allow_respond", create_allow_respond)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if icmp_typename is not None:
            pulumi.set(__self__, "icmp_typename", icmp_typename)
        if icmp_v6_typename is not None:
            pulumi.set(__self__, "icmp_v6_typename", icmp_v6_typename)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if match_ip_sec is not None:
            pulumi.set(__self__, "match_ip_sec", match_ip_sec)
        if match_ip_sec_type is not None:
            pulumi.set(__self__, "match_ip_sec_type", match_ip_sec_type)
        if match_opposite_protocol is not None:
            pulumi.set(__self__, "match_opposite_protocol", match_opposite_protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if origin_type is not None:
            pulumi.set(__self__, "origin_type", origin_type)
        if predefined is not None:
            pulumi.set(__self__, "predefined", predefined)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['Action']:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['Action']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input['FirewallPolicyDestinationDtoArgs']:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input['FirewallPolicyDestinationDtoArgs']):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Input['IpVersion']:
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: pulumi.Input['IpVersion']):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input['FirewallPolicyScheduleDtoArgs']:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input['FirewallPolicyScheduleDtoArgs']):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['FirewallPolicySourceDtoArgs']:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['FirewallPolicySourceDtoArgs']):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="connectionStateType")
    def connection_state_type(self) -> Optional[pulumi.Input['ConnectionStateType']]:
        return pulumi.get(self, "connection_state_type")

    @connection_state_type.setter
    def connection_state_type(self, value: Optional[pulumi.Input['ConnectionStateType']]):
        pulumi.set(self, "connection_state_type", value)

    @property
    @pulumi.getter(name="connectionStates")
    def connection_states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionStatesItem']]]]:
        return pulumi.get(self, "connection_states")

    @connection_states.setter
    def connection_states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionStatesItem']]]]):
        pulumi.set(self, "connection_states", value)

    @property
    @pulumi.getter(name="createAllowRespond")
    def create_allow_respond(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "create_allow_respond")

    @create_allow_respond.setter
    def create_allow_respond(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "create_allow_respond", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="icmpTypename")
    def icmp_typename(self) -> Optional[pulumi.Input['IcmpTypename']]:
        return pulumi.get(self, "icmp_typename")

    @icmp_typename.setter
    def icmp_typename(self, value: Optional[pulumi.Input['IcmpTypename']]):
        pulumi.set(self, "icmp_typename", value)

    @property
    @pulumi.getter(name="icmpV6Typename")
    def icmp_v6_typename(self) -> Optional[pulumi.Input['IcmpV6Typename']]:
        return pulumi.get(self, "icmp_v6_typename")

    @icmp_v6_typename.setter
    def icmp_v6_typename(self, value: Optional[pulumi.Input['IcmpV6Typename']]):
        pulumi.set(self, "icmp_v6_typename", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter(name="matchIpSec")
    def match_ip_sec(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "match_ip_sec")

    @match_ip_sec.setter
    def match_ip_sec(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "match_ip_sec", value)

    @property
    @pulumi.getter(name="matchIpSecType")
    def match_ip_sec_type(self) -> Optional[pulumi.Input['MatchIpSecType']]:
        return pulumi.get(self, "match_ip_sec_type")

    @match_ip_sec_type.setter
    def match_ip_sec_type(self, value: Optional[pulumi.Input['MatchIpSecType']]):
        pulumi.set(self, "match_ip_sec_type", value)

    @property
    @pulumi.getter(name="matchOppositeProtocol")
    def match_opposite_protocol(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "match_opposite_protocol")

    @match_opposite_protocol.setter
    def match_opposite_protocol(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "match_opposite_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional[pulumi.Input['OriginType']]:
        return pulumi.get(self, "origin_type")

    @origin_type.setter
    def origin_type(self, value: Optional[pulumi.Input['OriginType']]):
        pulumi.set(self, "origin_type", value)

    @property
    @pulumi.getter
    def predefined(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "predefined")

    @predefined.setter
    def predefined(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "predefined", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)


@pulumi.type_token("unifi-native:firewall-policies:FirewallPolicy")
class FirewallPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 action: Optional[pulumi.Input['Action']] = None,
                 connection_state_type: Optional[pulumi.Input['ConnectionStateType']] = None,
                 connection_states: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionStatesItem']]]] = None,
                 create_allow_respond: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 destination: Optional[pulumi.Input[Union['FirewallPolicyDestinationDtoArgs', 'FirewallPolicyDestinationDtoArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 icmp_typename: Optional[pulumi.Input['IcmpTypename']] = None,
                 icmp_v6_typename: Optional[pulumi.Input['IcmpV6Typename']] = None,
                 index: Optional[pulumi.Input[builtins.int]] = None,
                 ip_version: Optional[pulumi.Input['IpVersion']] = None,
                 logging: Optional[pulumi.Input[builtins.bool]] = None,
                 match_ip_sec: Optional[pulumi.Input[builtins.bool]] = None,
                 match_ip_sec_type: Optional[pulumi.Input['MatchIpSecType']] = None,
                 match_opposite_protocol: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 origin_id: Optional[pulumi.Input[builtins.str]] = None,
                 origin_type: Optional[pulumi.Input['OriginType']] = None,
                 predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 schedule: Optional[pulumi.Input[Union['FirewallPolicyScheduleDtoArgs', 'FirewallPolicyScheduleDtoArgsDict']]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 source: Optional[pulumi.Input[Union['FirewallPolicySourceDtoArgs', 'FirewallPolicySourceDtoArgsDict']]] = None,
                 __props__=None):
        """
        Create a FirewallPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FirewallPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirewallPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 action: Optional[pulumi.Input['Action']] = None,
                 connection_state_type: Optional[pulumi.Input['ConnectionStateType']] = None,
                 connection_states: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionStatesItem']]]] = None,
                 create_allow_respond: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 destination: Optional[pulumi.Input[Union['FirewallPolicyDestinationDtoArgs', 'FirewallPolicyDestinationDtoArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 icmp_typename: Optional[pulumi.Input['IcmpTypename']] = None,
                 icmp_v6_typename: Optional[pulumi.Input['IcmpV6Typename']] = None,
                 index: Optional[pulumi.Input[builtins.int]] = None,
                 ip_version: Optional[pulumi.Input['IpVersion']] = None,
                 logging: Optional[pulumi.Input[builtins.bool]] = None,
                 match_ip_sec: Optional[pulumi.Input[builtins.bool]] = None,
                 match_ip_sec_type: Optional[pulumi.Input['MatchIpSecType']] = None,
                 match_opposite_protocol: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 origin_id: Optional[pulumi.Input[builtins.str]] = None,
                 origin_type: Optional[pulumi.Input['OriginType']] = None,
                 predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 schedule: Optional[pulumi.Input[Union['FirewallPolicyScheduleDtoArgs', 'FirewallPolicyScheduleDtoArgsDict']]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 source: Optional[pulumi.Input[Union['FirewallPolicySourceDtoArgs', 'FirewallPolicySourceDtoArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallPolicyArgs.__new__(FirewallPolicyArgs)

            __props__.__dict__["id"] = id
            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["connection_state_type"] = connection_state_type
            __props__.__dict__["connection_states"] = connection_states
            __props__.__dict__["create_allow_respond"] = create_allow_respond
            __props__.__dict__["description"] = description
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__.__dict__["destination"] = destination
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["icmp_typename"] = icmp_typename
            __props__.__dict__["icmp_v6_typename"] = icmp_v6_typename
            __props__.__dict__["index"] = index
            if ip_version is None and not opts.urn:
                raise TypeError("Missing required property 'ip_version'")
            __props__.__dict__["ip_version"] = ip_version
            __props__.__dict__["logging"] = logging
            __props__.__dict__["match_ip_sec"] = match_ip_sec
            __props__.__dict__["match_ip_sec_type"] = match_ip_sec_type
            __props__.__dict__["match_opposite_protocol"] = match_opposite_protocol
            __props__.__dict__["name"] = name
            __props__.__dict__["origin_id"] = origin_id
            __props__.__dict__["origin_type"] = origin_type
            __props__.__dict__["predefined"] = predefined
            __props__.__dict__["protocol"] = protocol
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["site_name"] = site_name
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
        super(FirewallPolicy, __self__).__init__(
            'unifi-native:firewall-policies:FirewallPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'FirewallPolicy':
        """
        Get an existing FirewallPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = FirewallPolicyArgs.__new__(FirewallPolicyArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["action"] = None
        __props__.__dict__["connection_state_type"] = None
        __props__.__dict__["connection_states"] = None
        __props__.__dict__["create_allow_respond"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["destination"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["icmp_typename"] = None
        __props__.__dict__["icmp_v6_typename"] = None
        __props__.__dict__["index"] = None
        __props__.__dict__["ip_version"] = None
        __props__.__dict__["logging"] = None
        __props__.__dict__["match_ip_sec"] = None
        __props__.__dict__["match_ip_sec_type"] = None
        __props__.__dict__["match_opposite_protocol"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["origin_id"] = None
        __props__.__dict__["origin_type"] = None
        __props__.__dict__["predefined"] = None
        __props__.__dict__["protocol"] = None
        __props__.__dict__["schedule"] = None
        __props__.__dict__["source"] = None
        return FirewallPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output['Action']:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="connectionStateType")
    def connection_state_type(self) -> pulumi.Output[Optional['ConnectionStateType']]:
        return pulumi.get(self, "connection_state_type")

    @property
    @pulumi.getter(name="connectionStates")
    def connection_states(self) -> pulumi.Output[Optional[Sequence['ConnectionStatesItem']]]:
        return pulumi.get(self, "connection_states")

    @property
    @pulumi.getter(name="createAllowRespond")
    def create_allow_respond(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "create_allow_respond")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Output['outputs.FirewallPolicyDestinationDto']:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="icmpTypename")
    def icmp_typename(self) -> pulumi.Output[Optional['IcmpTypename']]:
        return pulumi.get(self, "icmp_typename")

    @property
    @pulumi.getter(name="icmpV6Typename")
    def icmp_v6_typename(self) -> pulumi.Output[Optional['IcmpV6Typename']]:
        return pulumi.get(self, "icmp_v6_typename")

    @property
    @pulumi.getter
    def index(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output['IpVersion']:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def logging(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter(name="matchIpSec")
    def match_ip_sec(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "match_ip_sec")

    @property
    @pulumi.getter(name="matchIpSecType")
    def match_ip_sec_type(self) -> pulumi.Output[Optional['MatchIpSecType']]:
        return pulumi.get(self, "match_ip_sec_type")

    @property
    @pulumi.getter(name="matchOppositeProtocol")
    def match_opposite_protocol(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "match_opposite_protocol")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> pulumi.Output[Optional['OriginType']]:
        return pulumi.get(self, "origin_type")

    @property
    @pulumi.getter
    def predefined(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "predefined")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output['outputs.FirewallPolicyScheduleDto']:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output['outputs.FirewallPolicySourceDto']:
        return pulumi.get(self, "source")

