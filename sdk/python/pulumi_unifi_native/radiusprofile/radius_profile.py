# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RADIUSProfileArgs', 'RADIUSProfile']

@pulumi.input_type
class RADIUSProfileArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 accounting_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 acct_servers: Optional[pulumi.Input[Sequence[pulumi.Input['RADIUSProfileAcctServersArgs']]]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input['RADIUSProfileAuthServersArgs']]]] = None,
                 interim_update_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 interim_update_interval: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 tls_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 use_usg_acct_server: Optional[pulumi.Input[builtins.bool]] = None,
                 use_usg_auth_server: Optional[pulumi.Input[builtins.bool]] = None,
                 vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 vlan_wlan_mode: Optional[pulumi.Input[builtins.str]] = None,
                 x_ca_crts: Optional[pulumi.Input[Sequence[pulumi.Input['RADIUSProfileXCaCrtsArgs']]]] = None,
                 x_client_crt: Optional[pulumi.Input[builtins.str]] = None,
                 x_client_crt_filename: Optional[pulumi.Input[builtins.str]] = None,
                 x_client_private_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_client_private_key_filename: Optional[pulumi.Input[builtins.str]] = None,
                 x_client_private_key_password: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a RADIUSProfile resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if accounting_enabled is not None:
            pulumi.set(__self__, "accounting_enabled", accounting_enabled)
        if acct_servers is not None:
            pulumi.set(__self__, "acct_servers", acct_servers)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if auth_servers is not None:
            pulumi.set(__self__, "auth_servers", auth_servers)
        if interim_update_enabled is not None:
            pulumi.set(__self__, "interim_update_enabled", interim_update_enabled)
        if interim_update_interval is not None:
            pulumi.set(__self__, "interim_update_interval", interim_update_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if tls_enabled is not None:
            pulumi.set(__self__, "tls_enabled", tls_enabled)
        if use_usg_acct_server is not None:
            pulumi.set(__self__, "use_usg_acct_server", use_usg_acct_server)
        if use_usg_auth_server is not None:
            pulumi.set(__self__, "use_usg_auth_server", use_usg_auth_server)
        if vlan_enabled is not None:
            pulumi.set(__self__, "vlan_enabled", vlan_enabled)
        if vlan_wlan_mode is not None:
            pulumi.set(__self__, "vlan_wlan_mode", vlan_wlan_mode)
        if x_ca_crts is not None:
            pulumi.set(__self__, "x_ca_crts", x_ca_crts)
        if x_client_crt is not None:
            pulumi.set(__self__, "x_client_crt", x_client_crt)
        if x_client_crt_filename is not None:
            pulumi.set(__self__, "x_client_crt_filename", x_client_crt_filename)
        if x_client_private_key is not None:
            pulumi.set(__self__, "x_client_private_key", x_client_private_key)
        if x_client_private_key_filename is not None:
            pulumi.set(__self__, "x_client_private_key_filename", x_client_private_key_filename)
        if x_client_private_key_password is not None:
            pulumi.set(__self__, "x_client_private_key_password", x_client_private_key_password)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="accountingEnabled")
    def accounting_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "accounting_enabled")

    @accounting_enabled.setter
    def accounting_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "accounting_enabled", value)

    @property
    @pulumi.getter(name="acctServers")
    def acct_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RADIUSProfileAcctServersArgs']]]]:
        return pulumi.get(self, "acct_servers")

    @acct_servers.setter
    def acct_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RADIUSProfileAcctServersArgs']]]]):
        pulumi.set(self, "acct_servers", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter(name="authServers")
    def auth_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RADIUSProfileAuthServersArgs']]]]:
        return pulumi.get(self, "auth_servers")

    @auth_servers.setter
    def auth_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RADIUSProfileAuthServersArgs']]]]):
        pulumi.set(self, "auth_servers", value)

    @property
    @pulumi.getter(name="interimUpdateEnabled")
    def interim_update_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "interim_update_enabled")

    @interim_update_enabled.setter
    def interim_update_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "interim_update_enabled", value)

    @property
    @pulumi.getter(name="interimUpdateInterval")
    def interim_update_interval(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "interim_update_interval")

    @interim_update_interval.setter
    def interim_update_interval(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "interim_update_interval", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="tlsEnabled")
    def tls_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "tls_enabled")

    @tls_enabled.setter
    def tls_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "tls_enabled", value)

    @property
    @pulumi.getter(name="useUsgAcctServer")
    def use_usg_acct_server(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "use_usg_acct_server")

    @use_usg_acct_server.setter
    def use_usg_acct_server(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "use_usg_acct_server", value)

    @property
    @pulumi.getter(name="useUsgAuthServer")
    def use_usg_auth_server(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "use_usg_auth_server")

    @use_usg_auth_server.setter
    def use_usg_auth_server(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "use_usg_auth_server", value)

    @property
    @pulumi.getter(name="vlanEnabled")
    def vlan_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "vlan_enabled")

    @vlan_enabled.setter
    def vlan_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "vlan_enabled", value)

    @property
    @pulumi.getter(name="vlanWlanMode")
    def vlan_wlan_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "vlan_wlan_mode")

    @vlan_wlan_mode.setter
    def vlan_wlan_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vlan_wlan_mode", value)

    @property
    @pulumi.getter(name="xCaCrts")
    def x_ca_crts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RADIUSProfileXCaCrtsArgs']]]]:
        return pulumi.get(self, "x_ca_crts")

    @x_ca_crts.setter
    def x_ca_crts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RADIUSProfileXCaCrtsArgs']]]]):
        pulumi.set(self, "x_ca_crts", value)

    @property
    @pulumi.getter(name="xClientCrt")
    def x_client_crt(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_client_crt")

    @x_client_crt.setter
    def x_client_crt(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_client_crt", value)

    @property
    @pulumi.getter(name="xClientCrtFilename")
    def x_client_crt_filename(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_client_crt_filename")

    @x_client_crt_filename.setter
    def x_client_crt_filename(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_client_crt_filename", value)

    @property
    @pulumi.getter(name="xClientPrivateKey")
    def x_client_private_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_client_private_key")

    @x_client_private_key.setter
    def x_client_private_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_client_private_key", value)

    @property
    @pulumi.getter(name="xClientPrivateKeyFilename")
    def x_client_private_key_filename(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_client_private_key_filename")

    @x_client_private_key_filename.setter
    def x_client_private_key_filename(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_client_private_key_filename", value)

    @property
    @pulumi.getter(name="xClientPrivateKeyPassword")
    def x_client_private_key_password(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_client_private_key_password")

    @x_client_private_key_password.setter
    def x_client_private_key_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_client_private_key_password", value)


@pulumi.type_token("unifi-native:radiusprofile:RADIUSProfile")
class RADIUSProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 accounting_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 acct_servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RADIUSProfileAcctServersArgs', 'RADIUSProfileAcctServersArgsDict']]]]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RADIUSProfileAuthServersArgs', 'RADIUSProfileAuthServersArgsDict']]]]] = None,
                 interim_update_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 interim_update_interval: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 tls_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 use_usg_acct_server: Optional[pulumi.Input[builtins.bool]] = None,
                 use_usg_auth_server: Optional[pulumi.Input[builtins.bool]] = None,
                 vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 vlan_wlan_mode: Optional[pulumi.Input[builtins.str]] = None,
                 x_ca_crts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RADIUSProfileXCaCrtsArgs', 'RADIUSProfileXCaCrtsArgsDict']]]]] = None,
                 x_client_crt: Optional[pulumi.Input[builtins.str]] = None,
                 x_client_crt_filename: Optional[pulumi.Input[builtins.str]] = None,
                 x_client_private_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_client_private_key_filename: Optional[pulumi.Input[builtins.str]] = None,
                 x_client_private_key_password: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a RADIUSProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RADIUSProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RADIUSProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RADIUSProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RADIUSProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 accounting_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 acct_servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RADIUSProfileAcctServersArgs', 'RADIUSProfileAcctServersArgsDict']]]]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RADIUSProfileAuthServersArgs', 'RADIUSProfileAuthServersArgsDict']]]]] = None,
                 interim_update_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 interim_update_interval: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 tls_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 use_usg_acct_server: Optional[pulumi.Input[builtins.bool]] = None,
                 use_usg_auth_server: Optional[pulumi.Input[builtins.bool]] = None,
                 vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 vlan_wlan_mode: Optional[pulumi.Input[builtins.str]] = None,
                 x_ca_crts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RADIUSProfileXCaCrtsArgs', 'RADIUSProfileXCaCrtsArgsDict']]]]] = None,
                 x_client_crt: Optional[pulumi.Input[builtins.str]] = None,
                 x_client_crt_filename: Optional[pulumi.Input[builtins.str]] = None,
                 x_client_private_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_client_private_key_filename: Optional[pulumi.Input[builtins.str]] = None,
                 x_client_private_key_password: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RADIUSProfileArgs.__new__(RADIUSProfileArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["accounting_enabled"] = accounting_enabled
            __props__.__dict__["acct_servers"] = acct_servers
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["auth_servers"] = auth_servers
            __props__.__dict__["interim_update_enabled"] = interim_update_enabled
            __props__.__dict__["interim_update_interval"] = interim_update_interval
            __props__.__dict__["name"] = name
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["tls_enabled"] = tls_enabled
            __props__.__dict__["use_usg_acct_server"] = use_usg_acct_server
            __props__.__dict__["use_usg_auth_server"] = use_usg_auth_server
            __props__.__dict__["vlan_enabled"] = vlan_enabled
            __props__.__dict__["vlan_wlan_mode"] = vlan_wlan_mode
            __props__.__dict__["x_ca_crts"] = x_ca_crts
            __props__.__dict__["x_client_crt"] = x_client_crt
            __props__.__dict__["x_client_crt_filename"] = x_client_crt_filename
            __props__.__dict__["x_client_private_key"] = x_client_private_key
            __props__.__dict__["x_client_private_key_filename"] = x_client_private_key_filename
            __props__.__dict__["x_client_private_key_password"] = x_client_private_key_password
        super(RADIUSProfile, __self__).__init__(
            'unifi-native:radiusprofile:RADIUSProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'RADIUSProfile':
        """
        Get an existing RADIUSProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = RADIUSProfileArgs.__new__(RADIUSProfileArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["accounting_enabled"] = None
        __props__.__dict__["acct_servers"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["auth_servers"] = None
        __props__.__dict__["interim_update_enabled"] = None
        __props__.__dict__["interim_update_interval"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["tls_enabled"] = None
        __props__.__dict__["use_usg_acct_server"] = None
        __props__.__dict__["use_usg_auth_server"] = None
        __props__.__dict__["vlan_enabled"] = None
        __props__.__dict__["vlan_wlan_mode"] = None
        __props__.__dict__["x_ca_crts"] = None
        __props__.__dict__["x_client_crt"] = None
        __props__.__dict__["x_client_crt_filename"] = None
        __props__.__dict__["x_client_private_key"] = None
        __props__.__dict__["x_client_private_key_filename"] = None
        __props__.__dict__["x_client_private_key_password"] = None
        return RADIUSProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="accountingEnabled")
    def accounting_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "accounting_enabled")

    @property
    @pulumi.getter(name="acctServers")
    def acct_servers(self) -> pulumi.Output[Optional[Sequence['outputs.RADIUSProfileAcctServers']]]:
        return pulumi.get(self, "acct_servers")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="authServers")
    def auth_servers(self) -> pulumi.Output[Optional[Sequence['outputs.RADIUSProfileAuthServers']]]:
        return pulumi.get(self, "auth_servers")

    @property
    @pulumi.getter(name="interimUpdateEnabled")
    def interim_update_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "interim_update_enabled")

    @property
    @pulumi.getter(name="interimUpdateInterval")
    def interim_update_interval(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "interim_update_interval")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="tlsEnabled")
    def tls_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "tls_enabled")

    @property
    @pulumi.getter(name="useUsgAcctServer")
    def use_usg_acct_server(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "use_usg_acct_server")

    @property
    @pulumi.getter(name="useUsgAuthServer")
    def use_usg_auth_server(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "use_usg_auth_server")

    @property
    @pulumi.getter(name="vlanEnabled")
    def vlan_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "vlan_enabled")

    @property
    @pulumi.getter(name="vlanWlanMode")
    def vlan_wlan_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "vlan_wlan_mode")

    @property
    @pulumi.getter(name="xCaCrts")
    def x_ca_crts(self) -> pulumi.Output[Optional[Sequence['outputs.RADIUSProfileXCaCrts']]]:
        return pulumi.get(self, "x_ca_crts")

    @property
    @pulumi.getter(name="xClientCrt")
    def x_client_crt(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_client_crt")

    @property
    @pulumi.getter(name="xClientCrtFilename")
    def x_client_crt_filename(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_client_crt_filename")

    @property
    @pulumi.getter(name="xClientPrivateKey")
    def x_client_private_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_client_private_key")

    @property
    @pulumi.getter(name="xClientPrivateKeyFilename")
    def x_client_private_key_filename(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_client_private_key_filename")

    @property
    @pulumi.getter(name="xClientPrivateKeyPassword")
    def x_client_private_key_password(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_client_private_key_password")

