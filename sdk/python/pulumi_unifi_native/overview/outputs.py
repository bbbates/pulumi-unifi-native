# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'SiteOverviewCountsDto',
    'SiteOverviewDto',
    'SiteOverviewPercentagesDto',
]

@pulumi.output_type
class SiteOverviewCountsDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "criticalNotification":
            suggest = "critical_notification"
        elif key == "gatewayDevice":
            suggest = "gateway_device"
        elif key == "guestClient":
            suggest = "guest_client"
        elif key == "lanConfiguration":
            suggest = "lan_configuration"
        elif key == "offlineDevice":
            suggest = "offline_device"
        elif key == "offlineGatewayDevice":
            suggest = "offline_gateway_device"
        elif key == "offlineWifiDevice":
            suggest = "offline_wifi_device"
        elif key == "offlineWiredDevice":
            suggest = "offline_wired_device"
        elif key == "pendingUpdateDevice":
            suggest = "pending_update_device"
        elif key == "totalDevice":
            suggest = "total_device"
        elif key == "wanConfiguration":
            suggest = "wan_configuration"
        elif key == "wifiClient":
            suggest = "wifi_client"
        elif key == "wifiConfiguration":
            suggest = "wifi_configuration"
        elif key == "wifiDevice":
            suggest = "wifi_device"
        elif key == "wiredClient":
            suggest = "wired_client"
        elif key == "wiredDevice":
            suggest = "wired_device"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SiteOverviewCountsDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SiteOverviewCountsDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SiteOverviewCountsDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 critical_notification: Optional[builtins.int] = None,
                 gateway_device: Optional[builtins.int] = None,
                 guest_client: Optional[builtins.int] = None,
                 lan_configuration: Optional[builtins.int] = None,
                 offline_device: Optional[builtins.int] = None,
                 offline_gateway_device: Optional[builtins.int] = None,
                 offline_wifi_device: Optional[builtins.int] = None,
                 offline_wired_device: Optional[builtins.int] = None,
                 pending_update_device: Optional[builtins.int] = None,
                 total_device: Optional[builtins.int] = None,
                 wan_configuration: Optional[builtins.int] = None,
                 wifi_client: Optional[builtins.int] = None,
                 wifi_configuration: Optional[builtins.int] = None,
                 wifi_device: Optional[builtins.int] = None,
                 wired_client: Optional[builtins.int] = None,
                 wired_device: Optional[builtins.int] = None):
        if critical_notification is not None:
            pulumi.set(__self__, "critical_notification", critical_notification)
        if gateway_device is not None:
            pulumi.set(__self__, "gateway_device", gateway_device)
        if guest_client is not None:
            pulumi.set(__self__, "guest_client", guest_client)
        if lan_configuration is not None:
            pulumi.set(__self__, "lan_configuration", lan_configuration)
        if offline_device is not None:
            pulumi.set(__self__, "offline_device", offline_device)
        if offline_gateway_device is not None:
            pulumi.set(__self__, "offline_gateway_device", offline_gateway_device)
        if offline_wifi_device is not None:
            pulumi.set(__self__, "offline_wifi_device", offline_wifi_device)
        if offline_wired_device is not None:
            pulumi.set(__self__, "offline_wired_device", offline_wired_device)
        if pending_update_device is not None:
            pulumi.set(__self__, "pending_update_device", pending_update_device)
        if total_device is not None:
            pulumi.set(__self__, "total_device", total_device)
        if wan_configuration is not None:
            pulumi.set(__self__, "wan_configuration", wan_configuration)
        if wifi_client is not None:
            pulumi.set(__self__, "wifi_client", wifi_client)
        if wifi_configuration is not None:
            pulumi.set(__self__, "wifi_configuration", wifi_configuration)
        if wifi_device is not None:
            pulumi.set(__self__, "wifi_device", wifi_device)
        if wired_client is not None:
            pulumi.set(__self__, "wired_client", wired_client)
        if wired_device is not None:
            pulumi.set(__self__, "wired_device", wired_device)

    @property
    @pulumi.getter(name="criticalNotification")
    def critical_notification(self) -> Optional[builtins.int]:
        return pulumi.get(self, "critical_notification")

    @property
    @pulumi.getter(name="gatewayDevice")
    def gateway_device(self) -> Optional[builtins.int]:
        return pulumi.get(self, "gateway_device")

    @property
    @pulumi.getter(name="guestClient")
    def guest_client(self) -> Optional[builtins.int]:
        return pulumi.get(self, "guest_client")

    @property
    @pulumi.getter(name="lanConfiguration")
    def lan_configuration(self) -> Optional[builtins.int]:
        return pulumi.get(self, "lan_configuration")

    @property
    @pulumi.getter(name="offlineDevice")
    def offline_device(self) -> Optional[builtins.int]:
        return pulumi.get(self, "offline_device")

    @property
    @pulumi.getter(name="offlineGatewayDevice")
    def offline_gateway_device(self) -> Optional[builtins.int]:
        return pulumi.get(self, "offline_gateway_device")

    @property
    @pulumi.getter(name="offlineWifiDevice")
    def offline_wifi_device(self) -> Optional[builtins.int]:
        return pulumi.get(self, "offline_wifi_device")

    @property
    @pulumi.getter(name="offlineWiredDevice")
    def offline_wired_device(self) -> Optional[builtins.int]:
        return pulumi.get(self, "offline_wired_device")

    @property
    @pulumi.getter(name="pendingUpdateDevice")
    def pending_update_device(self) -> Optional[builtins.int]:
        return pulumi.get(self, "pending_update_device")

    @property
    @pulumi.getter(name="totalDevice")
    def total_device(self) -> Optional[builtins.int]:
        return pulumi.get(self, "total_device")

    @property
    @pulumi.getter(name="wanConfiguration")
    def wan_configuration(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wan_configuration")

    @property
    @pulumi.getter(name="wifiClient")
    def wifi_client(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wifi_client")

    @property
    @pulumi.getter(name="wifiConfiguration")
    def wifi_configuration(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wifi_configuration")

    @property
    @pulumi.getter(name="wifiDevice")
    def wifi_device(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wifi_device")

    @property
    @pulumi.getter(name="wiredClient")
    def wired_client(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wired_client")

    @property
    @pulumi.getter(name="wiredDevice")
    def wired_device(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wired_device")


@pulumi.output_type
class SiteOverviewDto(dict):
    def __init__(__self__, *,
                 counts: Optional['outputs.SiteOverviewCountsDto'] = None,
                 description: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 percentages: Optional['outputs.SiteOverviewPercentagesDto'] = None):
        if counts is not None:
            pulumi.set(__self__, "counts", counts)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if percentages is not None:
            pulumi.set(__self__, "percentages", percentages)

    @property
    @pulumi.getter
    def counts(self) -> Optional['outputs.SiteOverviewCountsDto']:
        return pulumi.get(self, "counts")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def percentages(self) -> Optional['outputs.SiteOverviewPercentagesDto']:
        return pulumi.get(self, "percentages")


@pulumi.output_type
class SiteOverviewPercentagesDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "successfulAssociation":
            suggest = "successful_association"
        elif key == "txRetry":
            suggest = "tx_retry"
        elif key == "wanUptime":
            suggest = "wan_uptime"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SiteOverviewPercentagesDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SiteOverviewPercentagesDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SiteOverviewPercentagesDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 successful_association: Optional[builtins.float] = None,
                 tx_retry: Optional[builtins.float] = None,
                 wan_uptime: Optional[builtins.float] = None):
        if successful_association is not None:
            pulumi.set(__self__, "successful_association", successful_association)
        if tx_retry is not None:
            pulumi.set(__self__, "tx_retry", tx_retry)
        if wan_uptime is not None:
            pulumi.set(__self__, "wan_uptime", wan_uptime)

    @property
    @pulumi.getter(name="successfulAssociation")
    def successful_association(self) -> Optional[builtins.float]:
        return pulumi.get(self, "successful_association")

    @property
    @pulumi.getter(name="txRetry")
    def tx_retry(self) -> Optional[builtins.float]:
        return pulumi.get(self, "tx_retry")

    @property
    @pulumi.getter(name="wanUptime")
    def wan_uptime(self) -> Optional[builtins.float]:
        return pulumi.get(self, "wan_uptime")


