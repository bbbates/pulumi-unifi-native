# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = ['ListSitesOverviewArgs', 'ListSitesOverview']

@pulumi.input_type
class ListSitesOverviewArgs:
    def __init__(__self__, *,
                 page_number: Optional[pulumi.Input[builtins.int]] = None,
                 page_size: Optional[pulumi.Input[builtins.int]] = None,
                 search_text: Optional[pulumi.Input[builtins.str]] = None,
                 sort_by_field: Optional[pulumi.Input['SortByField']] = None,
                 sort_direction: Optional[pulumi.Input['SortDirection']] = None):
        """
        The set of arguments for constructing a ListSitesOverview resource.
        """
        if page_number is not None:
            pulumi.set(__self__, "page_number", page_number)
        if page_size is not None:
            pulumi.set(__self__, "page_size", page_size)
        if search_text is not None:
            pulumi.set(__self__, "search_text", search_text)
        if sort_by_field is not None:
            pulumi.set(__self__, "sort_by_field", sort_by_field)
        if sort_direction is not None:
            pulumi.set(__self__, "sort_direction", sort_direction)

    @property
    @pulumi.getter(name="pageNumber")
    def page_number(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "page_number")

    @page_number.setter
    def page_number(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "page_number", value)

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "page_size")

    @page_size.setter
    def page_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "page_size", value)

    @property
    @pulumi.getter(name="searchText")
    def search_text(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "search_text")

    @search_text.setter
    def search_text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "search_text", value)

    @property
    @pulumi.getter(name="sortByField")
    def sort_by_field(self) -> Optional[pulumi.Input['SortByField']]:
        return pulumi.get(self, "sort_by_field")

    @sort_by_field.setter
    def sort_by_field(self, value: Optional[pulumi.Input['SortByField']]):
        pulumi.set(self, "sort_by_field", value)

    @property
    @pulumi.getter(name="sortDirection")
    def sort_direction(self) -> Optional[pulumi.Input['SortDirection']]:
        return pulumi.get(self, "sort_direction")

    @sort_direction.setter
    def sort_direction(self, value: Optional[pulumi.Input['SortDirection']]):
        pulumi.set(self, "sort_direction", value)


@pulumi.type_token("unifi-native:overview:ListSitesOverview")
class ListSitesOverview(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 page_number: Optional[pulumi.Input[builtins.int]] = None,
                 page_size: Optional[pulumi.Input[builtins.int]] = None,
                 search_text: Optional[pulumi.Input[builtins.str]] = None,
                 sort_by_field: Optional[pulumi.Input['SortByField']] = None,
                 sort_direction: Optional[pulumi.Input['SortDirection']] = None,
                 __props__=None):
        """
        Create a ListSitesOverview resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ListSitesOverviewArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ListSitesOverview resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ListSitesOverviewArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ListSitesOverviewArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 page_number: Optional[pulumi.Input[builtins.int]] = None,
                 page_size: Optional[pulumi.Input[builtins.int]] = None,
                 search_text: Optional[pulumi.Input[builtins.str]] = None,
                 sort_by_field: Optional[pulumi.Input['SortByField']] = None,
                 sort_direction: Optional[pulumi.Input['SortDirection']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ListSitesOverviewArgs.__new__(ListSitesOverviewArgs)

            __props__.__dict__["page_number"] = page_number
            __props__.__dict__["page_size"] = page_size
            __props__.__dict__["search_text"] = search_text
            __props__.__dict__["sort_by_field"] = sort_by_field
            __props__.__dict__["sort_direction"] = sort_direction
            __props__.__dict__["data"] = None
            __props__.__dict__["has_next"] = None
            __props__.__dict__["or_more"] = None
            __props__.__dict__["total_element_count"] = None
            __props__.__dict__["total_page_count"] = None
        super(ListSitesOverview, __self__).__init__(
            'unifi-native:overview:ListSitesOverview',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ListSitesOverview':
        """
        Get an existing ListSitesOverview resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ListSitesOverviewArgs.__new__(ListSitesOverviewArgs)

        __props__.__dict__["data"] = None
        __props__.__dict__["has_next"] = None
        __props__.__dict__["or_more"] = None
        __props__.__dict__["page_number"] = None
        __props__.__dict__["page_size"] = None
        __props__.__dict__["search_text"] = None
        __props__.__dict__["sort_by_field"] = None
        __props__.__dict__["sort_direction"] = None
        __props__.__dict__["total_element_count"] = None
        __props__.__dict__["total_page_count"] = None
        return ListSitesOverview(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def data(self) -> pulumi.Output[Optional[Sequence['outputs.SiteOverviewDto']]]:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter(name="hasNext")
    def has_next(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "has_next")

    @property
    @pulumi.getter(name="orMore")
    def or_more(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        True if there can be more elements than based on the total number of page
        """
        return pulumi.get(self, "or_more")

    @property
    @pulumi.getter(name="pageNumber")
    def page_number(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "page_number")

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "page_size")

    @property
    @pulumi.getter(name="searchText")
    def search_text(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "search_text")

    @property
    @pulumi.getter(name="sortByField")
    def sort_by_field(self) -> pulumi.Output[Optional['SortByField']]:
        return pulumi.get(self, "sort_by_field")

    @property
    @pulumi.getter(name="sortDirection")
    def sort_direction(self) -> pulumi.Output[Optional['SortDirection']]:
        return pulumi.get(self, "sort_direction")

    @property
    @pulumi.getter(name="totalElementCount")
    def total_element_count(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        Number of total matched elements searching by the given criteria
        """
        return pulumi.get(self, "total_element_count")

    @property
    @pulumi.getter(name="totalPageCount")
    def total_page_count(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "total_page_count")

