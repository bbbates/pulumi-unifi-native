# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetWanLoadBalancingConfigurationResult',
    'AwaitableGetWanLoadBalancingConfigurationResult',
    'get_wan_load_balancing_configuration',
    'get_wan_load_balancing_configuration_output',
]

@pulumi.output_type
class GetWanLoadBalancingConfigurationResult:
    def __init__(__self__, mode=None, wan_interfaces=None):
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if wan_interfaces and not isinstance(wan_interfaces, list):
            raise TypeError("Expected argument 'wan_interfaces' to be a list")
        pulumi.set(__self__, "wan_interfaces", wan_interfaces)

    @property
    @pulumi.getter
    def mode(self) -> Optional['WANLoadBalancingConfigurationMode']:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="wanInterfaces")
    def wan_interfaces(self) -> Optional[Sequence['outputs.WanInterfaceConfigurationDto']]:
        return pulumi.get(self, "wan_interfaces")


class AwaitableGetWanLoadBalancingConfigurationResult(GetWanLoadBalancingConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWanLoadBalancingConfigurationResult(
            mode=self.mode,
            wan_interfaces=self.wan_interfaces)


def get_wan_load_balancing_configuration(site_name: Optional[builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWanLoadBalancingConfigurationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:configuration:getWanLoadBalancingConfiguration', __args__, opts=opts, typ=GetWanLoadBalancingConfigurationResult).value

    return AwaitableGetWanLoadBalancingConfigurationResult(
        mode=pulumi.get(__ret__, 'mode'),
        wan_interfaces=pulumi.get(__ret__, 'wan_interfaces'))
def get_wan_load_balancing_configuration_output(site_name: Optional[pulumi.Input[builtins.str]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWanLoadBalancingConfigurationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:configuration:getWanLoadBalancingConfiguration', __args__, opts=opts, typ=GetWanLoadBalancingConfigurationResult)
    return __ret__.apply(lambda __response__: GetWanLoadBalancingConfigurationResult(
        mode=pulumi.get(__response__, 'mode'),
        wan_interfaces=pulumi.get(__response__, 'wan_interfaces')))
