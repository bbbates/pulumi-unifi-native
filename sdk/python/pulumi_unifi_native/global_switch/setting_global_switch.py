# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SettingGlobalSwitchArgs', 'SettingGlobalSwitch']

@pulumi.input_type
class SettingGlobalSwitchArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 acl_device_isolation: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 acl_l3_isolation: Optional[pulumi.Input[Sequence[pulumi.Input['SettingGlobalSwitchAclL3IsolationArgs']]]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcp_snoop: Optional[pulumi.Input[builtins.bool]] = None,
                 dot1x_fallback_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 dot1x_portctrl_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 flood_known_protocols: Optional[pulumi.Input[builtins.bool]] = None,
                 flowctrl_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 forward_unknown_mcast_router_ports: Optional[pulumi.Input[builtins.bool]] = None,
                 jumboframe_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 radiusprofile_id: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 stp_version: Optional[pulumi.Input[builtins.str]] = None,
                 switch_exclusions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a SettingGlobalSwitch resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if acl_device_isolation is not None:
            pulumi.set(__self__, "acl_device_isolation", acl_device_isolation)
        if acl_l3_isolation is not None:
            pulumi.set(__self__, "acl_l3_isolation", acl_l3_isolation)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if dhcp_snoop is not None:
            pulumi.set(__self__, "dhcp_snoop", dhcp_snoop)
        if dot1x_fallback_networkconf_id is not None:
            pulumi.set(__self__, "dot1x_fallback_networkconf_id", dot1x_fallback_networkconf_id)
        if dot1x_portctrl_enabled is not None:
            pulumi.set(__self__, "dot1x_portctrl_enabled", dot1x_portctrl_enabled)
        if flood_known_protocols is not None:
            pulumi.set(__self__, "flood_known_protocols", flood_known_protocols)
        if flowctrl_enabled is not None:
            pulumi.set(__self__, "flowctrl_enabled", flowctrl_enabled)
        if forward_unknown_mcast_router_ports is not None:
            pulumi.set(__self__, "forward_unknown_mcast_router_ports", forward_unknown_mcast_router_ports)
        if jumboframe_enabled is not None:
            pulumi.set(__self__, "jumboframe_enabled", jumboframe_enabled)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if radiusprofile_id is not None:
            pulumi.set(__self__, "radiusprofile_id", radiusprofile_id)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if stp_version is not None:
            pulumi.set(__self__, "stp_version", stp_version)
        if switch_exclusions is not None:
            pulumi.set(__self__, "switch_exclusions", switch_exclusions)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="aclDeviceIsolation")
    def acl_device_isolation(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "acl_device_isolation")

    @acl_device_isolation.setter
    def acl_device_isolation(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "acl_device_isolation", value)

    @property
    @pulumi.getter(name="aclL3Isolation")
    def acl_l3_isolation(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingGlobalSwitchAclL3IsolationArgs']]]]:
        return pulumi.get(self, "acl_l3_isolation")

    @acl_l3_isolation.setter
    def acl_l3_isolation(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingGlobalSwitchAclL3IsolationArgs']]]]):
        pulumi.set(self, "acl_l3_isolation", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter(name="dhcpSnoop")
    def dhcp_snoop(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcp_snoop")

    @dhcp_snoop.setter
    def dhcp_snoop(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcp_snoop", value)

    @property
    @pulumi.getter(name="dot1xFallbackNetworkconfId")
    def dot1x_fallback_networkconf_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dot1x_fallback_networkconf_id")

    @dot1x_fallback_networkconf_id.setter
    def dot1x_fallback_networkconf_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dot1x_fallback_networkconf_id", value)

    @property
    @pulumi.getter(name="dot1xPortctrlEnabled")
    def dot1x_portctrl_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dot1x_portctrl_enabled")

    @dot1x_portctrl_enabled.setter
    def dot1x_portctrl_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dot1x_portctrl_enabled", value)

    @property
    @pulumi.getter(name="floodKnownProtocols")
    def flood_known_protocols(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "flood_known_protocols")

    @flood_known_protocols.setter
    def flood_known_protocols(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "flood_known_protocols", value)

    @property
    @pulumi.getter(name="flowctrlEnabled")
    def flowctrl_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "flowctrl_enabled")

    @flowctrl_enabled.setter
    def flowctrl_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "flowctrl_enabled", value)

    @property
    @pulumi.getter(name="forwardUnknownMcastRouterPorts")
    def forward_unknown_mcast_router_ports(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "forward_unknown_mcast_router_ports")

    @forward_unknown_mcast_router_ports.setter
    def forward_unknown_mcast_router_ports(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "forward_unknown_mcast_router_ports", value)

    @property
    @pulumi.getter(name="jumboframeEnabled")
    def jumboframe_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "jumboframe_enabled")

    @jumboframe_enabled.setter
    def jumboframe_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "jumboframe_enabled", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="radiusprofileId")
    def radiusprofile_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "radiusprofile_id")

    @radiusprofile_id.setter
    def radiusprofile_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "radiusprofile_id", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="stpVersion")
    def stp_version(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "stp_version")

    @stp_version.setter
    def stp_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "stp_version", value)

    @property
    @pulumi.getter(name="switchExclusions")
    def switch_exclusions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "switch_exclusions")

    @switch_exclusions.setter
    def switch_exclusions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "switch_exclusions", value)


@pulumi.type_token("unifi-native:global_switch:SettingGlobalSwitch")
class SettingGlobalSwitch(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 acl_device_isolation: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 acl_l3_isolation: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingGlobalSwitchAclL3IsolationArgs', 'SettingGlobalSwitchAclL3IsolationArgsDict']]]]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcp_snoop: Optional[pulumi.Input[builtins.bool]] = None,
                 dot1x_fallback_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 dot1x_portctrl_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 flood_known_protocols: Optional[pulumi.Input[builtins.bool]] = None,
                 flowctrl_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 forward_unknown_mcast_router_ports: Optional[pulumi.Input[builtins.bool]] = None,
                 jumboframe_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 radiusprofile_id: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 stp_version: Optional[pulumi.Input[builtins.str]] = None,
                 switch_exclusions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        Create a SettingGlobalSwitch resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SettingGlobalSwitchArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SettingGlobalSwitch resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SettingGlobalSwitchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingGlobalSwitchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 acl_device_isolation: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 acl_l3_isolation: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingGlobalSwitchAclL3IsolationArgs', 'SettingGlobalSwitchAclL3IsolationArgsDict']]]]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcp_snoop: Optional[pulumi.Input[builtins.bool]] = None,
                 dot1x_fallback_networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 dot1x_portctrl_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 flood_known_protocols: Optional[pulumi.Input[builtins.bool]] = None,
                 flowctrl_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 forward_unknown_mcast_router_ports: Optional[pulumi.Input[builtins.bool]] = None,
                 jumboframe_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 radiusprofile_id: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 stp_version: Optional[pulumi.Input[builtins.str]] = None,
                 switch_exclusions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingGlobalSwitchArgs.__new__(SettingGlobalSwitchArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["acl_device_isolation"] = acl_device_isolation
            __props__.__dict__["acl_l3_isolation"] = acl_l3_isolation
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["dhcp_snoop"] = dhcp_snoop
            __props__.__dict__["dot1x_fallback_networkconf_id"] = dot1x_fallback_networkconf_id
            __props__.__dict__["dot1x_portctrl_enabled"] = dot1x_portctrl_enabled
            __props__.__dict__["flood_known_protocols"] = flood_known_protocols
            __props__.__dict__["flowctrl_enabled"] = flowctrl_enabled
            __props__.__dict__["forward_unknown_mcast_router_ports"] = forward_unknown_mcast_router_ports
            __props__.__dict__["jumboframe_enabled"] = jumboframe_enabled
            __props__.__dict__["key"] = key
            __props__.__dict__["radiusprofile_id"] = radiusprofile_id
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["stp_version"] = stp_version
            __props__.__dict__["switch_exclusions"] = switch_exclusions
        super(SettingGlobalSwitch, __self__).__init__(
            'unifi-native:global_switch:SettingGlobalSwitch',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SettingGlobalSwitch':
        """
        Get an existing SettingGlobalSwitch resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SettingGlobalSwitchArgs.__new__(SettingGlobalSwitchArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["acl_device_isolation"] = None
        __props__.__dict__["acl_l3_isolation"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["dhcp_snoop"] = None
        __props__.__dict__["dot1x_fallback_networkconf_id"] = None
        __props__.__dict__["dot1x_portctrl_enabled"] = None
        __props__.__dict__["flood_known_protocols"] = None
        __props__.__dict__["flowctrl_enabled"] = None
        __props__.__dict__["forward_unknown_mcast_router_ports"] = None
        __props__.__dict__["jumboframe_enabled"] = None
        __props__.__dict__["key"] = None
        __props__.__dict__["radiusprofile_id"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["stp_version"] = None
        __props__.__dict__["switch_exclusions"] = None
        return SettingGlobalSwitch(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="aclDeviceIsolation")
    def acl_device_isolation(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "acl_device_isolation")

    @property
    @pulumi.getter(name="aclL3Isolation")
    def acl_l3_isolation(self) -> pulumi.Output[Optional[Sequence['outputs.SettingGlobalSwitchAclL3Isolation']]]:
        return pulumi.get(self, "acl_l3_isolation")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="dhcpSnoop")
    def dhcp_snoop(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcp_snoop")

    @property
    @pulumi.getter(name="dot1xFallbackNetworkconfId")
    def dot1x_fallback_networkconf_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dot1x_fallback_networkconf_id")

    @property
    @pulumi.getter(name="dot1xPortctrlEnabled")
    def dot1x_portctrl_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dot1x_portctrl_enabled")

    @property
    @pulumi.getter(name="floodKnownProtocols")
    def flood_known_protocols(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "flood_known_protocols")

    @property
    @pulumi.getter(name="flowctrlEnabled")
    def flowctrl_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "flowctrl_enabled")

    @property
    @pulumi.getter(name="forwardUnknownMcastRouterPorts")
    def forward_unknown_mcast_router_ports(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "forward_unknown_mcast_router_ports")

    @property
    @pulumi.getter(name="jumboframeEnabled")
    def jumboframe_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "jumboframe_enabled")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="radiusprofileId")
    def radiusprofile_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "radiusprofile_id")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="stpVersion")
    def stp_version(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "stp_version")

    @property
    @pulumi.getter(name="switchExclusions")
    def switch_exclusions(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "switch_exclusions")

