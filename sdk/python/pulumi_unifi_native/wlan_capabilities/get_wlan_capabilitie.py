# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetWlanCapabilitieResult',
    'AwaitableGetWlanCapabilitieResult',
    'get_wlan_capabilitie',
    'get_wlan_capabilitie_output',
]

@pulumi.output_type
class GetWlanCapabilitieResult:
    def __init__(__self__, _6ghz_band_supported=None, wpa3_supported=None):
        if _6ghz_band_supported and not isinstance(_6ghz_band_supported, bool):
            raise TypeError("Expected argument '_6ghz_band_supported' to be a bool")
        pulumi.set(__self__, "_6ghz_band_supported", _6ghz_band_supported)
        if wpa3_supported and not isinstance(wpa3_supported, bool):
            raise TypeError("Expected argument 'wpa3_supported' to be a bool")
        pulumi.set(__self__, "wpa3_supported", wpa3_supported)

    @property
    @pulumi.getter(name="_6ghzBandSupported")
    def _6ghz_band_supported(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "_6ghz_band_supported")

    @property
    @pulumi.getter(name="wpa3Supported")
    def wpa3_supported(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "wpa3_supported")


class AwaitableGetWlanCapabilitieResult(GetWlanCapabilitieResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWlanCapabilitieResult(
            _6ghz_band_supported=self._6ghz_band_supported,
            wpa3_supported=self.wpa3_supported)


def get_wlan_capabilitie(site_name: Optional[builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWlanCapabilitieResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:wlan-capabilities:getWlanCapabilitie', __args__, opts=opts, typ=GetWlanCapabilitieResult).value

    return AwaitableGetWlanCapabilitieResult(
        _6ghz_band_supported=pulumi.get(__ret__, '_6ghz_band_supported'),
        wpa3_supported=pulumi.get(__ret__, 'wpa3_supported'))
def get_wlan_capabilitie_output(site_name: Optional[pulumi.Input[builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWlanCapabilitieResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:wlan-capabilities:getWlanCapabilitie', __args__, opts=opts, typ=GetWlanCapabilitieResult)
    return __ret__.apply(lambda __response__: GetWlanCapabilitieResult(
        _6ghz_band_supported=pulumi.get(__response__, '_6ghz_band_supported'),
        wpa3_supported=pulumi.get(__response__, 'wpa3_supported')))
