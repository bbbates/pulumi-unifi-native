# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'Hotspot2Conf',
    'Hotspot2ConfCapab',
    'Hotspot2ConfCellularNetworkList',
    'Hotspot2ConfDescription',
    'Hotspot2ConfFriendlyName',
    'Hotspot2ConfIcon',
    'Hotspot2ConfIcons',
    'Hotspot2ConfNaiRealmList',
    'Hotspot2ConfOsu',
    'Hotspot2ConfQOSMapDcsp',
    'Hotspot2ConfQOSMapExceptions',
    'Hotspot2ConfRoamingConsortiumList',
    'Hotspot2ConfVenueName',
    'Meta',
]

@pulumi.output_type
class Hotspot2Conf(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 anqp_domain_id: Optional[builtins.int] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 capab: Optional[Sequence['outputs.Hotspot2ConfCapab']] = None,
                 cellular_network_list: Optional[Sequence['outputs.Hotspot2ConfCellularNetworkList']] = None,
                 deauth_req_timeout: Optional[builtins.int] = None,
                 disable_dgaf: Optional[builtins.bool] = None,
                 domain_name_list: Optional[Sequence[builtins.str]] = None,
                 friendly_name: Optional[Sequence['outputs.Hotspot2ConfFriendlyName']] = None,
                 gas_advanced: Optional[builtins.bool] = None,
                 gas_comeback_delay: Optional[builtins.int] = None,
                 gas_frag_limit: Optional[builtins.int] = None,
                 hessid: Optional[builtins.str] = None,
                 hessid_used: Optional[builtins.bool] = None,
                 icons: Optional[Sequence['outputs.Hotspot2ConfIcons']] = None,
                 ipaddr_type_avail_v4: Optional[builtins.int] = None,
                 ipaddr_type_avail_v6: Optional[builtins.int] = None,
                 metrics_downlink_load: Optional[builtins.int] = None,
                 metrics_downlink_load_set: Optional[builtins.bool] = None,
                 metrics_downlink_speed: Optional[builtins.int] = None,
                 metrics_downlink_speed_set: Optional[builtins.bool] = None,
                 metrics_info_at_capacity: Optional[builtins.bool] = None,
                 metrics_info_link_status: Optional[builtins.str] = None,
                 metrics_info_symmetric: Optional[builtins.bool] = None,
                 metrics_measurement: Optional[builtins.int] = None,
                 metrics_measurement_set: Optional[builtins.bool] = None,
                 metrics_status: Optional[builtins.bool] = None,
                 metrics_uplink_load: Optional[builtins.int] = None,
                 metrics_uplink_load_set: Optional[builtins.bool] = None,
                 metrics_uplink_speed: Optional[builtins.int] = None,
                 metrics_uplink_speed_set: Optional[builtins.bool] = None,
                 nai_realm_list: Optional[Sequence['outputs.Hotspot2ConfNaiRealmList']] = None,
                 name: Optional[builtins.str] = None,
                 network_access_asra: Optional[builtins.bool] = None,
                 network_access_esr: Optional[builtins.bool] = None,
                 network_access_internet: Optional[builtins.bool] = None,
                 network_access_uesa: Optional[builtins.bool] = None,
                 network_auth_type: Optional[builtins.int] = None,
                 network_auth_url: Optional[builtins.str] = None,
                 network_type: Optional[builtins.int] = None,
                 osu: Optional[Sequence['outputs.Hotspot2ConfOsu']] = None,
                 osu_ssid: Optional[builtins.str] = None,
                 qos_map_dcsp: Optional[Sequence['outputs.Hotspot2ConfQOSMapDcsp']] = None,
                 qos_map_exceptions: Optional[Sequence['outputs.Hotspot2ConfQOSMapExceptions']] = None,
                 qos_map_status: Optional[builtins.bool] = None,
                 roaming_consortium_list: Optional[Sequence['outputs.Hotspot2ConfRoamingConsortiumList']] = None,
                 save_timestamp: Optional[builtins.str] = None,
                 site_id: Optional[builtins.str] = None,
                 t_c_filename: Optional[builtins.str] = None,
                 t_c_timestamp: Optional[builtins.int] = None,
                 venue_group: Optional[builtins.int] = None,
                 venue_name: Optional[Sequence['outputs.Hotspot2ConfVenueName']] = None,
                 venue_type: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if anqp_domain_id is not None:
            pulumi.set(__self__, "anqp_domain_id", anqp_domain_id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if capab is not None:
            pulumi.set(__self__, "capab", capab)
        if cellular_network_list is not None:
            pulumi.set(__self__, "cellular_network_list", cellular_network_list)
        if deauth_req_timeout is not None:
            pulumi.set(__self__, "deauth_req_timeout", deauth_req_timeout)
        if disable_dgaf is not None:
            pulumi.set(__self__, "disable_dgaf", disable_dgaf)
        if domain_name_list is not None:
            pulumi.set(__self__, "domain_name_list", domain_name_list)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if gas_advanced is not None:
            pulumi.set(__self__, "gas_advanced", gas_advanced)
        if gas_comeback_delay is not None:
            pulumi.set(__self__, "gas_comeback_delay", gas_comeback_delay)
        if gas_frag_limit is not None:
            pulumi.set(__self__, "gas_frag_limit", gas_frag_limit)
        if hessid is not None:
            pulumi.set(__self__, "hessid", hessid)
        if hessid_used is not None:
            pulumi.set(__self__, "hessid_used", hessid_used)
        if icons is not None:
            pulumi.set(__self__, "icons", icons)
        if ipaddr_type_avail_v4 is not None:
            pulumi.set(__self__, "ipaddr_type_avail_v4", ipaddr_type_avail_v4)
        if ipaddr_type_avail_v6 is not None:
            pulumi.set(__self__, "ipaddr_type_avail_v6", ipaddr_type_avail_v6)
        if metrics_downlink_load is not None:
            pulumi.set(__self__, "metrics_downlink_load", metrics_downlink_load)
        if metrics_downlink_load_set is not None:
            pulumi.set(__self__, "metrics_downlink_load_set", metrics_downlink_load_set)
        if metrics_downlink_speed is not None:
            pulumi.set(__self__, "metrics_downlink_speed", metrics_downlink_speed)
        if metrics_downlink_speed_set is not None:
            pulumi.set(__self__, "metrics_downlink_speed_set", metrics_downlink_speed_set)
        if metrics_info_at_capacity is not None:
            pulumi.set(__self__, "metrics_info_at_capacity", metrics_info_at_capacity)
        if metrics_info_link_status is not None:
            pulumi.set(__self__, "metrics_info_link_status", metrics_info_link_status)
        if metrics_info_symmetric is not None:
            pulumi.set(__self__, "metrics_info_symmetric", metrics_info_symmetric)
        if metrics_measurement is not None:
            pulumi.set(__self__, "metrics_measurement", metrics_measurement)
        if metrics_measurement_set is not None:
            pulumi.set(__self__, "metrics_measurement_set", metrics_measurement_set)
        if metrics_status is not None:
            pulumi.set(__self__, "metrics_status", metrics_status)
        if metrics_uplink_load is not None:
            pulumi.set(__self__, "metrics_uplink_load", metrics_uplink_load)
        if metrics_uplink_load_set is not None:
            pulumi.set(__self__, "metrics_uplink_load_set", metrics_uplink_load_set)
        if metrics_uplink_speed is not None:
            pulumi.set(__self__, "metrics_uplink_speed", metrics_uplink_speed)
        if metrics_uplink_speed_set is not None:
            pulumi.set(__self__, "metrics_uplink_speed_set", metrics_uplink_speed_set)
        if nai_realm_list is not None:
            pulumi.set(__self__, "nai_realm_list", nai_realm_list)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_access_asra is not None:
            pulumi.set(__self__, "network_access_asra", network_access_asra)
        if network_access_esr is not None:
            pulumi.set(__self__, "network_access_esr", network_access_esr)
        if network_access_internet is not None:
            pulumi.set(__self__, "network_access_internet", network_access_internet)
        if network_access_uesa is not None:
            pulumi.set(__self__, "network_access_uesa", network_access_uesa)
        if network_auth_type is not None:
            pulumi.set(__self__, "network_auth_type", network_auth_type)
        if network_auth_url is not None:
            pulumi.set(__self__, "network_auth_url", network_auth_url)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if osu is not None:
            pulumi.set(__self__, "osu", osu)
        if osu_ssid is not None:
            pulumi.set(__self__, "osu_ssid", osu_ssid)
        if qos_map_dcsp is not None:
            pulumi.set(__self__, "qos_map_dcsp", qos_map_dcsp)
        if qos_map_exceptions is not None:
            pulumi.set(__self__, "qos_map_exceptions", qos_map_exceptions)
        if qos_map_status is not None:
            pulumi.set(__self__, "qos_map_status", qos_map_status)
        if roaming_consortium_list is not None:
            pulumi.set(__self__, "roaming_consortium_list", roaming_consortium_list)
        if save_timestamp is not None:
            pulumi.set(__self__, "save_timestamp", save_timestamp)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if t_c_filename is not None:
            pulumi.set(__self__, "t_c_filename", t_c_filename)
        if t_c_timestamp is not None:
            pulumi.set(__self__, "t_c_timestamp", t_c_timestamp)
        if venue_group is not None:
            pulumi.set(__self__, "venue_group", venue_group)
        if venue_name is not None:
            pulumi.set(__self__, "venue_name", venue_name)
        if venue_type is not None:
            pulumi.set(__self__, "venue_type", venue_type)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="anqpDomainId")
    def anqp_domain_id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "anqp_domain_id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter
    def capab(self) -> Optional[Sequence['outputs.Hotspot2ConfCapab']]:
        return pulumi.get(self, "capab")

    @property
    @pulumi.getter(name="cellularNetworkList")
    def cellular_network_list(self) -> Optional[Sequence['outputs.Hotspot2ConfCellularNetworkList']]:
        return pulumi.get(self, "cellular_network_list")

    @property
    @pulumi.getter(name="deauthReqTimeout")
    def deauth_req_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "deauth_req_timeout")

    @property
    @pulumi.getter(name="disableDgaf")
    def disable_dgaf(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "disable_dgaf")

    @property
    @pulumi.getter(name="domainNameList")
    def domain_name_list(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "domain_name_list")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[Sequence['outputs.Hotspot2ConfFriendlyName']]:
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter(name="gasAdvanced")
    def gas_advanced(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "gas_advanced")

    @property
    @pulumi.getter(name="gasComebackDelay")
    def gas_comeback_delay(self) -> Optional[builtins.int]:
        return pulumi.get(self, "gas_comeback_delay")

    @property
    @pulumi.getter(name="gasFragLimit")
    def gas_frag_limit(self) -> Optional[builtins.int]:
        return pulumi.get(self, "gas_frag_limit")

    @property
    @pulumi.getter
    def hessid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "hessid")

    @property
    @pulumi.getter(name="hessidUsed")
    def hessid_used(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "hessid_used")

    @property
    @pulumi.getter
    def icons(self) -> Optional[Sequence['outputs.Hotspot2ConfIcons']]:
        return pulumi.get(self, "icons")

    @property
    @pulumi.getter(name="ipaddrTypeAvailV4")
    def ipaddr_type_avail_v4(self) -> Optional[builtins.int]:
        return pulumi.get(self, "ipaddr_type_avail_v4")

    @property
    @pulumi.getter(name="ipaddrTypeAvailV6")
    def ipaddr_type_avail_v6(self) -> Optional[builtins.int]:
        return pulumi.get(self, "ipaddr_type_avail_v6")

    @property
    @pulumi.getter(name="metricsDownlinkLoad")
    def metrics_downlink_load(self) -> Optional[builtins.int]:
        return pulumi.get(self, "metrics_downlink_load")

    @property
    @pulumi.getter(name="metricsDownlinkLoadSet")
    def metrics_downlink_load_set(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "metrics_downlink_load_set")

    @property
    @pulumi.getter(name="metricsDownlinkSpeed")
    def metrics_downlink_speed(self) -> Optional[builtins.int]:
        return pulumi.get(self, "metrics_downlink_speed")

    @property
    @pulumi.getter(name="metricsDownlinkSpeedSet")
    def metrics_downlink_speed_set(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "metrics_downlink_speed_set")

    @property
    @pulumi.getter(name="metricsInfoAtCapacity")
    def metrics_info_at_capacity(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "metrics_info_at_capacity")

    @property
    @pulumi.getter(name="metricsInfoLinkStatus")
    def metrics_info_link_status(self) -> Optional[builtins.str]:
        return pulumi.get(self, "metrics_info_link_status")

    @property
    @pulumi.getter(name="metricsInfoSymmetric")
    def metrics_info_symmetric(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "metrics_info_symmetric")

    @property
    @pulumi.getter(name="metricsMeasurement")
    def metrics_measurement(self) -> Optional[builtins.int]:
        return pulumi.get(self, "metrics_measurement")

    @property
    @pulumi.getter(name="metricsMeasurementSet")
    def metrics_measurement_set(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "metrics_measurement_set")

    @property
    @pulumi.getter(name="metricsStatus")
    def metrics_status(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "metrics_status")

    @property
    @pulumi.getter(name="metricsUplinkLoad")
    def metrics_uplink_load(self) -> Optional[builtins.int]:
        return pulumi.get(self, "metrics_uplink_load")

    @property
    @pulumi.getter(name="metricsUplinkLoadSet")
    def metrics_uplink_load_set(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "metrics_uplink_load_set")

    @property
    @pulumi.getter(name="metricsUplinkSpeed")
    def metrics_uplink_speed(self) -> Optional[builtins.int]:
        return pulumi.get(self, "metrics_uplink_speed")

    @property
    @pulumi.getter(name="metricsUplinkSpeedSet")
    def metrics_uplink_speed_set(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "metrics_uplink_speed_set")

    @property
    @pulumi.getter(name="naiRealmList")
    def nai_realm_list(self) -> Optional[Sequence['outputs.Hotspot2ConfNaiRealmList']]:
        return pulumi.get(self, "nai_realm_list")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkAccessAsra")
    def network_access_asra(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "network_access_asra")

    @property
    @pulumi.getter(name="networkAccessEsr")
    def network_access_esr(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "network_access_esr")

    @property
    @pulumi.getter(name="networkAccessInternet")
    def network_access_internet(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "network_access_internet")

    @property
    @pulumi.getter(name="networkAccessUesa")
    def network_access_uesa(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "network_access_uesa")

    @property
    @pulumi.getter(name="networkAuthType")
    def network_auth_type(self) -> Optional[builtins.int]:
        return pulumi.get(self, "network_auth_type")

    @property
    @pulumi.getter(name="networkAuthUrl")
    def network_auth_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "network_auth_url")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[builtins.int]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def osu(self) -> Optional[Sequence['outputs.Hotspot2ConfOsu']]:
        return pulumi.get(self, "osu")

    @property
    @pulumi.getter(name="osuSsid")
    def osu_ssid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "osu_ssid")

    @property
    @pulumi.getter(name="qosMapDcsp")
    def qos_map_dcsp(self) -> Optional[Sequence['outputs.Hotspot2ConfQOSMapDcsp']]:
        return pulumi.get(self, "qos_map_dcsp")

    @property
    @pulumi.getter(name="qosMapExceptions")
    def qos_map_exceptions(self) -> Optional[Sequence['outputs.Hotspot2ConfQOSMapExceptions']]:
        return pulumi.get(self, "qos_map_exceptions")

    @property
    @pulumi.getter(name="qosMapStatus")
    def qos_map_status(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "qos_map_status")

    @property
    @pulumi.getter(name="roamingConsortiumList")
    def roaming_consortium_list(self) -> Optional[Sequence['outputs.Hotspot2ConfRoamingConsortiumList']]:
        return pulumi.get(self, "roaming_consortium_list")

    @property
    @pulumi.getter(name="saveTimestamp")
    def save_timestamp(self) -> Optional[builtins.str]:
        return pulumi.get(self, "save_timestamp")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="tCFilename")
    def t_c_filename(self) -> Optional[builtins.str]:
        return pulumi.get(self, "t_c_filename")

    @property
    @pulumi.getter(name="tCTimestamp")
    def t_c_timestamp(self) -> Optional[builtins.int]:
        return pulumi.get(self, "t_c_timestamp")

    @property
    @pulumi.getter(name="venueGroup")
    def venue_group(self) -> Optional[builtins.int]:
        return pulumi.get(self, "venue_group")

    @property
    @pulumi.getter(name="venueName")
    def venue_name(self) -> Optional[Sequence['outputs.Hotspot2ConfVenueName']]:
        return pulumi.get(self, "venue_name")

    @property
    @pulumi.getter(name="venueType")
    def venue_type(self) -> Optional[builtins.int]:
        return pulumi.get(self, "venue_type")


@pulumi.output_type
class Hotspot2ConfCapab(dict):
    def __init__(__self__, *,
                 port: Optional[builtins.int] = None,
                 protocol: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None):
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class Hotspot2ConfCellularNetworkList(dict):
    def __init__(__self__, *,
                 mcc: Optional[builtins.int] = None,
                 mnc: Optional[builtins.int] = None,
                 name: Optional[builtins.str] = None):
        if mcc is not None:
            pulumi.set(__self__, "mcc", mcc)
        if mnc is not None:
            pulumi.set(__self__, "mnc", mnc)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def mcc(self) -> Optional[builtins.int]:
        return pulumi.get(self, "mcc")

    @property
    @pulumi.getter
    def mnc(self) -> Optional[builtins.int]:
        return pulumi.get(self, "mnc")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class Hotspot2ConfDescription(dict):
    def __init__(__self__, *,
                 language: Optional[builtins.str] = None,
                 text: Optional[builtins.str] = None):
        if language is not None:
            pulumi.set(__self__, "language", language)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def language(self) -> Optional[builtins.str]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def text(self) -> Optional[builtins.str]:
        return pulumi.get(self, "text")


@pulumi.output_type
class Hotspot2ConfFriendlyName(dict):
    def __init__(__self__, *,
                 language: Optional[builtins.str] = None,
                 text: Optional[builtins.str] = None):
        if language is not None:
            pulumi.set(__self__, "language", language)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def language(self) -> Optional[builtins.str]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def text(self) -> Optional[builtins.str]:
        return pulumi.get(self, "text")


@pulumi.output_type
class Hotspot2ConfIcon(dict):
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class Hotspot2ConfIcons(dict):
    def __init__(__self__, *,
                 data: Optional[builtins.str] = None,
                 filename: Optional[builtins.str] = None,
                 height: Optional[builtins.int] = None,
                 language: Optional[builtins.str] = None,
                 media: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 size: Optional[builtins.int] = None,
                 width: Optional[builtins.int] = None):
        if data is not None:
            pulumi.set(__self__, "data", data)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if media is not None:
            pulumi.set(__self__, "media", media)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def data(self) -> Optional[builtins.str]:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def filename(self) -> Optional[builtins.str]:
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def height(self) -> Optional[builtins.int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def language(self) -> Optional[builtins.str]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def media(self) -> Optional[builtins.str]:
        return pulumi.get(self, "media")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def width(self) -> Optional[builtins.int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class Hotspot2ConfNaiRealmList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authIds":
            suggest = "auth_ids"
        elif key == "authVals":
            suggest = "auth_vals"
        elif key == "eapMethod":
            suggest = "eap_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Hotspot2ConfNaiRealmList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Hotspot2ConfNaiRealmList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Hotspot2ConfNaiRealmList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_ids: Optional[builtins.str] = None,
                 auth_vals: Optional[builtins.str] = None,
                 eap_method: Optional[builtins.int] = None,
                 encoding: Optional[builtins.int] = None,
                 name: Optional[builtins.str] = None,
                 status: Optional[builtins.bool] = None):
        if auth_ids is not None:
            pulumi.set(__self__, "auth_ids", auth_ids)
        if auth_vals is not None:
            pulumi.set(__self__, "auth_vals", auth_vals)
        if eap_method is not None:
            pulumi.set(__self__, "eap_method", eap_method)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="authIds")
    def auth_ids(self) -> Optional[builtins.str]:
        return pulumi.get(self, "auth_ids")

    @property
    @pulumi.getter(name="authVals")
    def auth_vals(self) -> Optional[builtins.str]:
        return pulumi.get(self, "auth_vals")

    @property
    @pulumi.getter(name="eapMethod")
    def eap_method(self) -> Optional[builtins.int]:
        return pulumi.get(self, "eap_method")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[builtins.int]:
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "status")


@pulumi.output_type
class Hotspot2ConfOsu(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "friendlyName":
            suggest = "friendly_name"
        elif key == "methodOmaDm":
            suggest = "method_oma_dm"
        elif key == "methodSoapXmlSpp":
            suggest = "method_soap_xml_spp"
        elif key == "operatingClass":
            suggest = "operating_class"
        elif key == "serverUri":
            suggest = "server_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Hotspot2ConfOsu. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Hotspot2ConfOsu.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Hotspot2ConfOsu.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[Sequence['outputs.Hotspot2ConfDescription']] = None,
                 friendly_name: Optional[Sequence['outputs.Hotspot2ConfFriendlyName']] = None,
                 icon: Optional[Sequence['outputs.Hotspot2ConfIcon']] = None,
                 method_oma_dm: Optional[builtins.bool] = None,
                 method_soap_xml_spp: Optional[builtins.bool] = None,
                 nai: Optional[builtins.str] = None,
                 nai2: Optional[builtins.str] = None,
                 operating_class: Optional[builtins.str] = None,
                 server_uri: Optional[builtins.str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if method_oma_dm is not None:
            pulumi.set(__self__, "method_oma_dm", method_oma_dm)
        if method_soap_xml_spp is not None:
            pulumi.set(__self__, "method_soap_xml_spp", method_soap_xml_spp)
        if nai is not None:
            pulumi.set(__self__, "nai", nai)
        if nai2 is not None:
            pulumi.set(__self__, "nai2", nai2)
        if operating_class is not None:
            pulumi.set(__self__, "operating_class", operating_class)
        if server_uri is not None:
            pulumi.set(__self__, "server_uri", server_uri)

    @property
    @pulumi.getter
    def description(self) -> Optional[Sequence['outputs.Hotspot2ConfDescription']]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[Sequence['outputs.Hotspot2ConfFriendlyName']]:
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter
    def icon(self) -> Optional[Sequence['outputs.Hotspot2ConfIcon']]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter(name="methodOmaDm")
    def method_oma_dm(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "method_oma_dm")

    @property
    @pulumi.getter(name="methodSoapXmlSpp")
    def method_soap_xml_spp(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "method_soap_xml_spp")

    @property
    @pulumi.getter
    def nai(self) -> Optional[builtins.str]:
        return pulumi.get(self, "nai")

    @property
    @pulumi.getter
    def nai2(self) -> Optional[builtins.str]:
        return pulumi.get(self, "nai2")

    @property
    @pulumi.getter(name="operatingClass")
    def operating_class(self) -> Optional[builtins.str]:
        return pulumi.get(self, "operating_class")

    @property
    @pulumi.getter(name="serverUri")
    def server_uri(self) -> Optional[builtins.str]:
        return pulumi.get(self, "server_uri")


@pulumi.output_type
class Hotspot2ConfQOSMapDcsp(dict):
    def __init__(__self__, *,
                 high: Optional[builtins.int] = None,
                 low: Optional[builtins.int] = None):
        if high is not None:
            pulumi.set(__self__, "high", high)
        if low is not None:
            pulumi.set(__self__, "low", low)

    @property
    @pulumi.getter
    def high(self) -> Optional[builtins.int]:
        return pulumi.get(self, "high")

    @property
    @pulumi.getter
    def low(self) -> Optional[builtins.int]:
        return pulumi.get(self, "low")


@pulumi.output_type
class Hotspot2ConfQOSMapExceptions(dict):
    def __init__(__self__, *,
                 dcsp: Optional[builtins.int] = None,
                 up: Optional[builtins.int] = None):
        if dcsp is not None:
            pulumi.set(__self__, "dcsp", dcsp)
        if up is not None:
            pulumi.set(__self__, "up", up)

    @property
    @pulumi.getter
    def dcsp(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dcsp")

    @property
    @pulumi.getter
    def up(self) -> Optional[builtins.int]:
        return pulumi.get(self, "up")


@pulumi.output_type
class Hotspot2ConfRoamingConsortiumList(dict):
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 oid: Optional[builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oid is not None:
            pulumi.set(__self__, "oid", oid)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def oid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "oid")


@pulumi.output_type
class Hotspot2ConfVenueName(dict):
    def __init__(__self__, *,
                 language: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 url: Optional[builtins.str] = None):
        if language is not None:
            pulumi.set(__self__, "language", language)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def language(self) -> Optional[builtins.str]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


