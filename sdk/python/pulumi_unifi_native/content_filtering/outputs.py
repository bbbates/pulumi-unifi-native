# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ContentFiltering',
    'FirewallPolicyScheduleDto',
]

@pulumi.output_type
class ContentFiltering(dict):
    def __init__(__self__, *,
                 categories: Sequence['ContentFilteringCategoriesItem'],
                 name: builtins.str,
                 safe_search: Sequence['ContentFilteringSafeSearchItem'],
                 schedule: 'outputs.FirewallPolicyScheduleDto',
                 id: Optional[builtins.str] = None,
                 allow_list: Optional[Sequence[builtins.str]] = None,
                 block_list: Optional[Sequence[builtins.str]] = None,
                 client_macs: Optional[Sequence[builtins.str]] = None,
                 enabled: Optional[builtins.bool] = None,
                 network_ids: Optional[Sequence[builtins.str]] = None):
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "safe_search", safe_search)
        pulumi.set(__self__, "schedule", schedule)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if allow_list is not None:
            pulumi.set(__self__, "allow_list", allow_list)
        if block_list is not None:
            pulumi.set(__self__, "block_list", block_list)
        if client_macs is not None:
            pulumi.set(__self__, "client_macs", client_macs)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if network_ids is not None:
            pulumi.set(__self__, "network_ids", network_ids)

    @property
    @pulumi.getter
    def categories(self) -> Sequence['ContentFilteringCategoriesItem']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="safeSearch")
    def safe_search(self) -> Sequence['ContentFilteringSafeSearchItem']:
        return pulumi.get(self, "safe_search")

    @property
    @pulumi.getter
    def schedule(self) -> 'outputs.FirewallPolicyScheduleDto':
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="allowList")
    def allow_list(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "allow_list")

    @property
    @pulumi.getter(name="blockList")
    def block_list(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "block_list")

    @property
    @pulumi.getter(name="clientMacs")
    def client_macs(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "client_macs")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="networkIds")
    def network_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "network_ids")


@pulumi.output_type
class FirewallPolicyScheduleDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "EndDateApplicableToCUSTOM":
            suggest = "end_date_applicable_to_custom"
        elif key == "StartDateApplicableToCUSTOM":
            suggest = "start_date_applicable_to_custom"
        elif key == "repeatOnDays":
            suggest = "repeat_on_days"
        elif key == "timeAllDay":
            suggest = "time_all_day"
        elif key == "timeRangeEnd":
            suggest = "time_range_end"
        elif key == "timeRangeStart":
            suggest = "time_range_start"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallPolicyScheduleDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallPolicyScheduleDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallPolicyScheduleDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: 'FirewallPolicyScheduleDtoMode',
                 end_date_applicable_to_custom: Optional[builtins.str] = None,
                 start_date_applicable_to_custom: Optional[builtins.str] = None,
                 date: Optional[builtins.str] = None,
                 repeat_on_days: Optional[Sequence['FirewallPolicyScheduleDtoRepeatOnDaysItem']] = None,
                 time_all_day: Optional[builtins.bool] = None,
                 time_range_end: Optional[builtins.str] = None,
                 time_range_start: Optional[builtins.str] = None):
        """
        :param builtins.str date: Start date. Applicable to: ONE_TIME_ONLY
        :param Sequence['FirewallPolicyScheduleDtoRepeatOnDaysItem'] repeat_on_days: Repeat on on days. Applicable to: EVERY_WEEK, CUSTOM
        :param builtins.bool time_all_day: Rule will be running for all day. Time range start/end are ignored. Applicable to: EVERY_WEEK, CUSTOM
        :param builtins.str time_range_end: End time in 24 hours format. It accepts 24:00 as end of the day. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        :param builtins.str time_range_start: Start time in 24 hours format. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        """
        pulumi.set(__self__, "mode", mode)
        if end_date_applicable_to_custom is not None:
            pulumi.set(__self__, "end_date_applicable_to_custom", end_date_applicable_to_custom)
        if start_date_applicable_to_custom is not None:
            pulumi.set(__self__, "start_date_applicable_to_custom", start_date_applicable_to_custom)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if repeat_on_days is not None:
            pulumi.set(__self__, "repeat_on_days", repeat_on_days)
        if time_all_day is not None:
            pulumi.set(__self__, "time_all_day", time_all_day)
        if time_range_end is not None:
            pulumi.set(__self__, "time_range_end", time_range_end)
        if time_range_start is not None:
            pulumi.set(__self__, "time_range_start", time_range_start)

    @property
    @pulumi.getter
    def mode(self) -> 'FirewallPolicyScheduleDtoMode':
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="EndDateApplicableToCUSTOM")
    def end_date_applicable_to_custom(self) -> Optional[builtins.str]:
        return pulumi.get(self, "end_date_applicable_to_custom")

    @property
    @pulumi.getter(name="StartDateApplicableToCUSTOM")
    def start_date_applicable_to_custom(self) -> Optional[builtins.str]:
        return pulumi.get(self, "start_date_applicable_to_custom")

    @property
    @pulumi.getter
    def date(self) -> Optional[builtins.str]:
        """
        Start date. Applicable to: ONE_TIME_ONLY
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter(name="repeatOnDays")
    def repeat_on_days(self) -> Optional[Sequence['FirewallPolicyScheduleDtoRepeatOnDaysItem']]:
        """
        Repeat on on days. Applicable to: EVERY_WEEK, CUSTOM
        """
        return pulumi.get(self, "repeat_on_days")

    @property
    @pulumi.getter(name="timeAllDay")
    def time_all_day(self) -> Optional[builtins.bool]:
        """
        Rule will be running for all day. Time range start/end are ignored. Applicable to: EVERY_WEEK, CUSTOM
        """
        return pulumi.get(self, "time_all_day")

    @property
    @pulumi.getter(name="timeRangeEnd")
    def time_range_end(self) -> Optional[builtins.str]:
        """
        End time in 24 hours format. It accepts 24:00 as end of the day. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        """
        return pulumi.get(self, "time_range_end")

    @property
    @pulumi.getter(name="timeRangeStart")
    def time_range_start(self) -> Optional[builtins.str]:
        """
        Start time in 24 hours format. Applicable to: EVERY_DAY, EVERY_WEEK, ONE_TIME_ONLY, CUSTOM
        """
        return pulumi.get(self, "time_range_start")


