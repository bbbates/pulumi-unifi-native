# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'Meta',
    'SettingUsg',
    'SettingUsgDNSVerification',
]

@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


@pulumi.output_type
class SettingUsg(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 _h323_module: Optional[builtins.bool] = None,
                 _offload_l2_blocking: Optional[builtins.bool] = None,
                 arp_cache_base_reachable: Optional[builtins.int] = None,
                 arp_cache_timeout: Optional[builtins.str] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 broadcast_ping: Optional[builtins.bool] = None,
                 dhcp_relay_agents_packets: Optional[builtins.str] = None,
                 dhcp_relay_hop_count: Optional[builtins.int] = None,
                 dhcp_relay_max_size: Optional[builtins.int] = None,
                 dhcp_relay_port: Optional[builtins.int] = None,
                 dhcp_relay_server1: Optional[builtins.str] = None,
                 dhcp_relay_server2: Optional[builtins.str] = None,
                 dhcp_relay_server3: Optional[builtins.str] = None,
                 dhcp_relay_server4: Optional[builtins.str] = None,
                 dhcp_relay_server5: Optional[builtins.str] = None,
                 dhcpd_hostfile_update: Optional[builtins.bool] = None,
                 dhcpd_use_dnsmasq: Optional[builtins.bool] = None,
                 dns_verification: Optional['outputs.SettingUsgDNSVerification'] = None,
                 dnsmasq_all_servers: Optional[builtins.bool] = None,
                 echo_server: Optional[builtins.str] = None,
                 ftp_module: Optional[builtins.bool] = None,
                 geo_ip_filtering_block: Optional[builtins.str] = None,
                 geo_ip_filtering_countries: Optional[builtins.str] = None,
                 geo_ip_filtering_enabled: Optional[builtins.bool] = None,
                 geo_ip_filtering_traffic_direction: Optional[builtins.str] = None,
                 gre_module: Optional[builtins.bool] = None,
                 icmp_timeout: Optional[builtins.int] = None,
                 key: Optional[builtins.str] = None,
                 lldp_enable_all: Optional[builtins.bool] = None,
                 mdns_enabled: Optional[builtins.bool] = None,
                 mss_clamp: Optional[builtins.str] = None,
                 mss_clamp_mss: Optional[builtins.int] = None,
                 offload_accounting: Optional[builtins.bool] = None,
                 offload_sch: Optional[builtins.bool] = None,
                 other_timeout: Optional[builtins.int] = None,
                 pptp_module: Optional[builtins.bool] = None,
                 receive_redirects: Optional[builtins.bool] = None,
                 send_redirects: Optional[builtins.bool] = None,
                 sip_module: Optional[builtins.bool] = None,
                 site_id: Optional[builtins.str] = None,
                 syn_cookies: Optional[builtins.bool] = None,
                 tcp_close_timeout: Optional[builtins.int] = None,
                 tcp_close_wait_timeout: Optional[builtins.int] = None,
                 tcp_established_timeout: Optional[builtins.int] = None,
                 tcp_fin_wait_timeout: Optional[builtins.int] = None,
                 tcp_last_ack_timeout: Optional[builtins.int] = None,
                 tcp_syn_recv_timeout: Optional[builtins.int] = None,
                 tcp_syn_sent_timeout: Optional[builtins.int] = None,
                 tcp_time_wait_timeout: Optional[builtins.int] = None,
                 tftp_module: Optional[builtins.bool] = None,
                 timeout_setting_preference: Optional[builtins.str] = None,
                 udp_other_timeout: Optional[builtins.int] = None,
                 udp_stream_timeout: Optional[builtins.int] = None,
                 unbind_wan_monitors: Optional[builtins.bool] = None,
                 upnp_enabled: Optional[builtins.bool] = None,
                 upnp_nat_pmp_enabled: Optional[builtins.bool] = None,
                 upnp_secure_mode: Optional[builtins.bool] = None,
                 upnp_wan_interface: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if _h323_module is not None:
            pulumi.set(__self__, "_h323_module", _h323_module)
        if _offload_l2_blocking is not None:
            pulumi.set(__self__, "_offload_l2_blocking", _offload_l2_blocking)
        if arp_cache_base_reachable is not None:
            pulumi.set(__self__, "arp_cache_base_reachable", arp_cache_base_reachable)
        if arp_cache_timeout is not None:
            pulumi.set(__self__, "arp_cache_timeout", arp_cache_timeout)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if broadcast_ping is not None:
            pulumi.set(__self__, "broadcast_ping", broadcast_ping)
        if dhcp_relay_agents_packets is not None:
            pulumi.set(__self__, "dhcp_relay_agents_packets", dhcp_relay_agents_packets)
        if dhcp_relay_hop_count is not None:
            pulumi.set(__self__, "dhcp_relay_hop_count", dhcp_relay_hop_count)
        if dhcp_relay_max_size is not None:
            pulumi.set(__self__, "dhcp_relay_max_size", dhcp_relay_max_size)
        if dhcp_relay_port is not None:
            pulumi.set(__self__, "dhcp_relay_port", dhcp_relay_port)
        if dhcp_relay_server1 is not None:
            pulumi.set(__self__, "dhcp_relay_server1", dhcp_relay_server1)
        if dhcp_relay_server2 is not None:
            pulumi.set(__self__, "dhcp_relay_server2", dhcp_relay_server2)
        if dhcp_relay_server3 is not None:
            pulumi.set(__self__, "dhcp_relay_server3", dhcp_relay_server3)
        if dhcp_relay_server4 is not None:
            pulumi.set(__self__, "dhcp_relay_server4", dhcp_relay_server4)
        if dhcp_relay_server5 is not None:
            pulumi.set(__self__, "dhcp_relay_server5", dhcp_relay_server5)
        if dhcpd_hostfile_update is not None:
            pulumi.set(__self__, "dhcpd_hostfile_update", dhcpd_hostfile_update)
        if dhcpd_use_dnsmasq is not None:
            pulumi.set(__self__, "dhcpd_use_dnsmasq", dhcpd_use_dnsmasq)
        if dns_verification is not None:
            pulumi.set(__self__, "dns_verification", dns_verification)
        if dnsmasq_all_servers is not None:
            pulumi.set(__self__, "dnsmasq_all_servers", dnsmasq_all_servers)
        if echo_server is not None:
            pulumi.set(__self__, "echo_server", echo_server)
        if ftp_module is not None:
            pulumi.set(__self__, "ftp_module", ftp_module)
        if geo_ip_filtering_block is not None:
            pulumi.set(__self__, "geo_ip_filtering_block", geo_ip_filtering_block)
        if geo_ip_filtering_countries is not None:
            pulumi.set(__self__, "geo_ip_filtering_countries", geo_ip_filtering_countries)
        if geo_ip_filtering_enabled is not None:
            pulumi.set(__self__, "geo_ip_filtering_enabled", geo_ip_filtering_enabled)
        if geo_ip_filtering_traffic_direction is not None:
            pulumi.set(__self__, "geo_ip_filtering_traffic_direction", geo_ip_filtering_traffic_direction)
        if gre_module is not None:
            pulumi.set(__self__, "gre_module", gre_module)
        if icmp_timeout is not None:
            pulumi.set(__self__, "icmp_timeout", icmp_timeout)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if lldp_enable_all is not None:
            pulumi.set(__self__, "lldp_enable_all", lldp_enable_all)
        if mdns_enabled is not None:
            pulumi.set(__self__, "mdns_enabled", mdns_enabled)
        if mss_clamp is not None:
            pulumi.set(__self__, "mss_clamp", mss_clamp)
        if mss_clamp_mss is not None:
            pulumi.set(__self__, "mss_clamp_mss", mss_clamp_mss)
        if offload_accounting is not None:
            pulumi.set(__self__, "offload_accounting", offload_accounting)
        if offload_sch is not None:
            pulumi.set(__self__, "offload_sch", offload_sch)
        if other_timeout is not None:
            pulumi.set(__self__, "other_timeout", other_timeout)
        if pptp_module is not None:
            pulumi.set(__self__, "pptp_module", pptp_module)
        if receive_redirects is not None:
            pulumi.set(__self__, "receive_redirects", receive_redirects)
        if send_redirects is not None:
            pulumi.set(__self__, "send_redirects", send_redirects)
        if sip_module is not None:
            pulumi.set(__self__, "sip_module", sip_module)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if syn_cookies is not None:
            pulumi.set(__self__, "syn_cookies", syn_cookies)
        if tcp_close_timeout is not None:
            pulumi.set(__self__, "tcp_close_timeout", tcp_close_timeout)
        if tcp_close_wait_timeout is not None:
            pulumi.set(__self__, "tcp_close_wait_timeout", tcp_close_wait_timeout)
        if tcp_established_timeout is not None:
            pulumi.set(__self__, "tcp_established_timeout", tcp_established_timeout)
        if tcp_fin_wait_timeout is not None:
            pulumi.set(__self__, "tcp_fin_wait_timeout", tcp_fin_wait_timeout)
        if tcp_last_ack_timeout is not None:
            pulumi.set(__self__, "tcp_last_ack_timeout", tcp_last_ack_timeout)
        if tcp_syn_recv_timeout is not None:
            pulumi.set(__self__, "tcp_syn_recv_timeout", tcp_syn_recv_timeout)
        if tcp_syn_sent_timeout is not None:
            pulumi.set(__self__, "tcp_syn_sent_timeout", tcp_syn_sent_timeout)
        if tcp_time_wait_timeout is not None:
            pulumi.set(__self__, "tcp_time_wait_timeout", tcp_time_wait_timeout)
        if tftp_module is not None:
            pulumi.set(__self__, "tftp_module", tftp_module)
        if timeout_setting_preference is not None:
            pulumi.set(__self__, "timeout_setting_preference", timeout_setting_preference)
        if udp_other_timeout is not None:
            pulumi.set(__self__, "udp_other_timeout", udp_other_timeout)
        if udp_stream_timeout is not None:
            pulumi.set(__self__, "udp_stream_timeout", udp_stream_timeout)
        if unbind_wan_monitors is not None:
            pulumi.set(__self__, "unbind_wan_monitors", unbind_wan_monitors)
        if upnp_enabled is not None:
            pulumi.set(__self__, "upnp_enabled", upnp_enabled)
        if upnp_nat_pmp_enabled is not None:
            pulumi.set(__self__, "upnp_nat_pmp_enabled", upnp_nat_pmp_enabled)
        if upnp_secure_mode is not None:
            pulumi.set(__self__, "upnp_secure_mode", upnp_secure_mode)
        if upnp_wan_interface is not None:
            pulumi.set(__self__, "upnp_wan_interface", upnp_wan_interface)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="_h323Module")
    def _h323_module(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "_h323_module")

    @property
    @pulumi.getter(name="_offloadL2Blocking")
    def _offload_l2_blocking(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "_offload_l2_blocking")

    @property
    @pulumi.getter(name="arpCacheBaseReachable")
    def arp_cache_base_reachable(self) -> Optional[builtins.int]:
        return pulumi.get(self, "arp_cache_base_reachable")

    @property
    @pulumi.getter(name="arpCacheTimeout")
    def arp_cache_timeout(self) -> Optional[builtins.str]:
        return pulumi.get(self, "arp_cache_timeout")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="broadcastPing")
    def broadcast_ping(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "broadcast_ping")

    @property
    @pulumi.getter(name="dhcpRelayAgentsPackets")
    def dhcp_relay_agents_packets(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcp_relay_agents_packets")

    @property
    @pulumi.getter(name="dhcpRelayHopCount")
    def dhcp_relay_hop_count(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dhcp_relay_hop_count")

    @property
    @pulumi.getter(name="dhcpRelayMaxSize")
    def dhcp_relay_max_size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dhcp_relay_max_size")

    @property
    @pulumi.getter(name="dhcpRelayPort")
    def dhcp_relay_port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dhcp_relay_port")

    @property
    @pulumi.getter(name="dhcpRelayServer1")
    def dhcp_relay_server1(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcp_relay_server1")

    @property
    @pulumi.getter(name="dhcpRelayServer2")
    def dhcp_relay_server2(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcp_relay_server2")

    @property
    @pulumi.getter(name="dhcpRelayServer3")
    def dhcp_relay_server3(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcp_relay_server3")

    @property
    @pulumi.getter(name="dhcpRelayServer4")
    def dhcp_relay_server4(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcp_relay_server4")

    @property
    @pulumi.getter(name="dhcpRelayServer5")
    def dhcp_relay_server5(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcp_relay_server5")

    @property
    @pulumi.getter(name="dhcpdHostfileUpdate")
    def dhcpd_hostfile_update(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dhcpd_hostfile_update")

    @property
    @pulumi.getter(name="dhcpdUseDnsmasq")
    def dhcpd_use_dnsmasq(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dhcpd_use_dnsmasq")

    @property
    @pulumi.getter(name="dnsVerification")
    def dns_verification(self) -> Optional['outputs.SettingUsgDNSVerification']:
        return pulumi.get(self, "dns_verification")

    @property
    @pulumi.getter(name="dnsmasqAllServers")
    def dnsmasq_all_servers(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dnsmasq_all_servers")

    @property
    @pulumi.getter(name="echoServer")
    def echo_server(self) -> Optional[builtins.str]:
        return pulumi.get(self, "echo_server")

    @property
    @pulumi.getter(name="ftpModule")
    def ftp_module(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "ftp_module")

    @property
    @pulumi.getter(name="geoIpFilteringBlock")
    def geo_ip_filtering_block(self) -> Optional[builtins.str]:
        return pulumi.get(self, "geo_ip_filtering_block")

    @property
    @pulumi.getter(name="geoIpFilteringCountries")
    def geo_ip_filtering_countries(self) -> Optional[builtins.str]:
        return pulumi.get(self, "geo_ip_filtering_countries")

    @property
    @pulumi.getter(name="geoIpFilteringEnabled")
    def geo_ip_filtering_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "geo_ip_filtering_enabled")

    @property
    @pulumi.getter(name="geoIpFilteringTrafficDirection")
    def geo_ip_filtering_traffic_direction(self) -> Optional[builtins.str]:
        return pulumi.get(self, "geo_ip_filtering_traffic_direction")

    @property
    @pulumi.getter(name="greModule")
    def gre_module(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "gre_module")

    @property
    @pulumi.getter(name="icmpTimeout")
    def icmp_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "icmp_timeout")

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="lldpEnableAll")
    def lldp_enable_all(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "lldp_enable_all")

    @property
    @pulumi.getter(name="mdnsEnabled")
    def mdns_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "mdns_enabled")

    @property
    @pulumi.getter(name="mssClamp")
    def mss_clamp(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mss_clamp")

    @property
    @pulumi.getter(name="mssClampMss")
    def mss_clamp_mss(self) -> Optional[builtins.int]:
        return pulumi.get(self, "mss_clamp_mss")

    @property
    @pulumi.getter(name="offloadAccounting")
    def offload_accounting(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "offload_accounting")

    @property
    @pulumi.getter(name="offloadSch")
    def offload_sch(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "offload_sch")

    @property
    @pulumi.getter(name="otherTimeout")
    def other_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "other_timeout")

    @property
    @pulumi.getter(name="pptpModule")
    def pptp_module(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "pptp_module")

    @property
    @pulumi.getter(name="receiveRedirects")
    def receive_redirects(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "receive_redirects")

    @property
    @pulumi.getter(name="sendRedirects")
    def send_redirects(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "send_redirects")

    @property
    @pulumi.getter(name="sipModule")
    def sip_module(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "sip_module")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="synCookies")
    def syn_cookies(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "syn_cookies")

    @property
    @pulumi.getter(name="tcpCloseTimeout")
    def tcp_close_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "tcp_close_timeout")

    @property
    @pulumi.getter(name="tcpCloseWaitTimeout")
    def tcp_close_wait_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "tcp_close_wait_timeout")

    @property
    @pulumi.getter(name="tcpEstablishedTimeout")
    def tcp_established_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "tcp_established_timeout")

    @property
    @pulumi.getter(name="tcpFinWaitTimeout")
    def tcp_fin_wait_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "tcp_fin_wait_timeout")

    @property
    @pulumi.getter(name="tcpLastAckTimeout")
    def tcp_last_ack_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "tcp_last_ack_timeout")

    @property
    @pulumi.getter(name="tcpSynRecvTimeout")
    def tcp_syn_recv_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "tcp_syn_recv_timeout")

    @property
    @pulumi.getter(name="tcpSynSentTimeout")
    def tcp_syn_sent_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "tcp_syn_sent_timeout")

    @property
    @pulumi.getter(name="tcpTimeWaitTimeout")
    def tcp_time_wait_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "tcp_time_wait_timeout")

    @property
    @pulumi.getter(name="tftpModule")
    def tftp_module(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "tftp_module")

    @property
    @pulumi.getter(name="timeoutSettingPreference")
    def timeout_setting_preference(self) -> Optional[builtins.str]:
        return pulumi.get(self, "timeout_setting_preference")

    @property
    @pulumi.getter(name="udpOtherTimeout")
    def udp_other_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "udp_other_timeout")

    @property
    @pulumi.getter(name="udpStreamTimeout")
    def udp_stream_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "udp_stream_timeout")

    @property
    @pulumi.getter(name="unbindWanMonitors")
    def unbind_wan_monitors(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "unbind_wan_monitors")

    @property
    @pulumi.getter(name="upnpEnabled")
    def upnp_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "upnp_enabled")

    @property
    @pulumi.getter(name="upnpNatPmpEnabled")
    def upnp_nat_pmp_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "upnp_nat_pmp_enabled")

    @property
    @pulumi.getter(name="upnpSecureMode")
    def upnp_secure_mode(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "upnp_secure_mode")

    @property
    @pulumi.getter(name="upnpWanInterface")
    def upnp_wan_interface(self) -> Optional[builtins.str]:
        return pulumi.get(self, "upnp_wan_interface")


@pulumi.output_type
class SettingUsgDNSVerification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primaryDnsServer":
            suggest = "primary_dns_server"
        elif key == "secondaryDnsServer":
            suggest = "secondary_dns_server"
        elif key == "settingPreference":
            suggest = "setting_preference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingUsgDNSVerification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingUsgDNSVerification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingUsgDNSVerification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain: Optional[builtins.str] = None,
                 primary_dns_server: Optional[builtins.str] = None,
                 secondary_dns_server: Optional[builtins.str] = None,
                 setting_preference: Optional[builtins.str] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if primary_dns_server is not None:
            pulumi.set(__self__, "primary_dns_server", primary_dns_server)
        if secondary_dns_server is not None:
            pulumi.set(__self__, "secondary_dns_server", secondary_dns_server)
        if setting_preference is not None:
            pulumi.set(__self__, "setting_preference", setting_preference)

    @property
    @pulumi.getter
    def domain(self) -> Optional[builtins.str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="primaryDnsServer")
    def primary_dns_server(self) -> Optional[builtins.str]:
        return pulumi.get(self, "primary_dns_server")

    @property
    @pulumi.getter(name="secondaryDnsServer")
    def secondary_dns_server(self) -> Optional[builtins.str]:
        return pulumi.get(self, "secondary_dns_server")

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> Optional[builtins.str]:
        return pulumi.get(self, "setting_preference")


