# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SettingUsgArgs', 'SettingUsg']

@pulumi.input_type
class SettingUsgArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 _h323_module: Optional[pulumi.Input[builtins.bool]] = None,
                 _offload_l2_blocking: Optional[pulumi.Input[builtins.bool]] = None,
                 arp_cache_base_reachable: Optional[pulumi.Input[builtins.int]] = None,
                 arp_cache_timeout: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 broadcast_ping: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcp_relay_agents_packets: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_relay_hop_count: Optional[pulumi.Input[builtins.int]] = None,
                 dhcp_relay_max_size: Optional[pulumi.Input[builtins.int]] = None,
                 dhcp_relay_port: Optional[pulumi.Input[builtins.int]] = None,
                 dhcp_relay_server1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_relay_server2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_relay_server3: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_relay_server4: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_relay_server5: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_hostfile_update: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_use_dnsmasq: Optional[pulumi.Input[builtins.bool]] = None,
                 dns_verification: Optional[pulumi.Input['SettingUsgDNSVerificationArgs']] = None,
                 dnsmasq_all_servers: Optional[pulumi.Input[builtins.bool]] = None,
                 echo_server: Optional[pulumi.Input[builtins.str]] = None,
                 ftp_module: Optional[pulumi.Input[builtins.bool]] = None,
                 geo_ip_filtering_block: Optional[pulumi.Input[builtins.str]] = None,
                 geo_ip_filtering_countries: Optional[pulumi.Input[builtins.str]] = None,
                 geo_ip_filtering_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 geo_ip_filtering_traffic_direction: Optional[pulumi.Input[builtins.str]] = None,
                 gre_module: Optional[pulumi.Input[builtins.bool]] = None,
                 icmp_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 lldp_enable_all: Optional[pulumi.Input[builtins.bool]] = None,
                 mdns_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mss_clamp: Optional[pulumi.Input[builtins.str]] = None,
                 mss_clamp_mss: Optional[pulumi.Input[builtins.int]] = None,
                 offload_accounting: Optional[pulumi.Input[builtins.bool]] = None,
                 offload_sch: Optional[pulumi.Input[builtins.bool]] = None,
                 other_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 pptp_module: Optional[pulumi.Input[builtins.bool]] = None,
                 receive_redirects: Optional[pulumi.Input[builtins.bool]] = None,
                 send_redirects: Optional[pulumi.Input[builtins.bool]] = None,
                 sip_module: Optional[pulumi.Input[builtins.bool]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 syn_cookies: Optional[pulumi.Input[builtins.bool]] = None,
                 tcp_close_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_close_wait_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_established_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_fin_wait_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_last_ack_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_syn_recv_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_syn_sent_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_time_wait_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tftp_module: Optional[pulumi.Input[builtins.bool]] = None,
                 timeout_setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 udp_other_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 udp_stream_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 unbind_wan_monitors: Optional[pulumi.Input[builtins.bool]] = None,
                 upnp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 upnp_nat_pmp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 upnp_secure_mode: Optional[pulumi.Input[builtins.bool]] = None,
                 upnp_wan_interface: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a SettingUsg resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if _h323_module is not None:
            pulumi.set(__self__, "_h323_module", _h323_module)
        if _offload_l2_blocking is not None:
            pulumi.set(__self__, "_offload_l2_blocking", _offload_l2_blocking)
        if arp_cache_base_reachable is not None:
            pulumi.set(__self__, "arp_cache_base_reachable", arp_cache_base_reachable)
        if arp_cache_timeout is not None:
            pulumi.set(__self__, "arp_cache_timeout", arp_cache_timeout)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if broadcast_ping is not None:
            pulumi.set(__self__, "broadcast_ping", broadcast_ping)
        if dhcp_relay_agents_packets is not None:
            pulumi.set(__self__, "dhcp_relay_agents_packets", dhcp_relay_agents_packets)
        if dhcp_relay_hop_count is not None:
            pulumi.set(__self__, "dhcp_relay_hop_count", dhcp_relay_hop_count)
        if dhcp_relay_max_size is not None:
            pulumi.set(__self__, "dhcp_relay_max_size", dhcp_relay_max_size)
        if dhcp_relay_port is not None:
            pulumi.set(__self__, "dhcp_relay_port", dhcp_relay_port)
        if dhcp_relay_server1 is not None:
            pulumi.set(__self__, "dhcp_relay_server1", dhcp_relay_server1)
        if dhcp_relay_server2 is not None:
            pulumi.set(__self__, "dhcp_relay_server2", dhcp_relay_server2)
        if dhcp_relay_server3 is not None:
            pulumi.set(__self__, "dhcp_relay_server3", dhcp_relay_server3)
        if dhcp_relay_server4 is not None:
            pulumi.set(__self__, "dhcp_relay_server4", dhcp_relay_server4)
        if dhcp_relay_server5 is not None:
            pulumi.set(__self__, "dhcp_relay_server5", dhcp_relay_server5)
        if dhcpd_hostfile_update is not None:
            pulumi.set(__self__, "dhcpd_hostfile_update", dhcpd_hostfile_update)
        if dhcpd_use_dnsmasq is not None:
            pulumi.set(__self__, "dhcpd_use_dnsmasq", dhcpd_use_dnsmasq)
        if dns_verification is not None:
            pulumi.set(__self__, "dns_verification", dns_verification)
        if dnsmasq_all_servers is not None:
            pulumi.set(__self__, "dnsmasq_all_servers", dnsmasq_all_servers)
        if echo_server is not None:
            pulumi.set(__self__, "echo_server", echo_server)
        if ftp_module is not None:
            pulumi.set(__self__, "ftp_module", ftp_module)
        if geo_ip_filtering_block is not None:
            pulumi.set(__self__, "geo_ip_filtering_block", geo_ip_filtering_block)
        if geo_ip_filtering_countries is not None:
            pulumi.set(__self__, "geo_ip_filtering_countries", geo_ip_filtering_countries)
        if geo_ip_filtering_enabled is not None:
            pulumi.set(__self__, "geo_ip_filtering_enabled", geo_ip_filtering_enabled)
        if geo_ip_filtering_traffic_direction is not None:
            pulumi.set(__self__, "geo_ip_filtering_traffic_direction", geo_ip_filtering_traffic_direction)
        if gre_module is not None:
            pulumi.set(__self__, "gre_module", gre_module)
        if icmp_timeout is not None:
            pulumi.set(__self__, "icmp_timeout", icmp_timeout)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if lldp_enable_all is not None:
            pulumi.set(__self__, "lldp_enable_all", lldp_enable_all)
        if mdns_enabled is not None:
            pulumi.set(__self__, "mdns_enabled", mdns_enabled)
        if mss_clamp is not None:
            pulumi.set(__self__, "mss_clamp", mss_clamp)
        if mss_clamp_mss is not None:
            pulumi.set(__self__, "mss_clamp_mss", mss_clamp_mss)
        if offload_accounting is not None:
            pulumi.set(__self__, "offload_accounting", offload_accounting)
        if offload_sch is not None:
            pulumi.set(__self__, "offload_sch", offload_sch)
        if other_timeout is not None:
            pulumi.set(__self__, "other_timeout", other_timeout)
        if pptp_module is not None:
            pulumi.set(__self__, "pptp_module", pptp_module)
        if receive_redirects is not None:
            pulumi.set(__self__, "receive_redirects", receive_redirects)
        if send_redirects is not None:
            pulumi.set(__self__, "send_redirects", send_redirects)
        if sip_module is not None:
            pulumi.set(__self__, "sip_module", sip_module)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if syn_cookies is not None:
            pulumi.set(__self__, "syn_cookies", syn_cookies)
        if tcp_close_timeout is not None:
            pulumi.set(__self__, "tcp_close_timeout", tcp_close_timeout)
        if tcp_close_wait_timeout is not None:
            pulumi.set(__self__, "tcp_close_wait_timeout", tcp_close_wait_timeout)
        if tcp_established_timeout is not None:
            pulumi.set(__self__, "tcp_established_timeout", tcp_established_timeout)
        if tcp_fin_wait_timeout is not None:
            pulumi.set(__self__, "tcp_fin_wait_timeout", tcp_fin_wait_timeout)
        if tcp_last_ack_timeout is not None:
            pulumi.set(__self__, "tcp_last_ack_timeout", tcp_last_ack_timeout)
        if tcp_syn_recv_timeout is not None:
            pulumi.set(__self__, "tcp_syn_recv_timeout", tcp_syn_recv_timeout)
        if tcp_syn_sent_timeout is not None:
            pulumi.set(__self__, "tcp_syn_sent_timeout", tcp_syn_sent_timeout)
        if tcp_time_wait_timeout is not None:
            pulumi.set(__self__, "tcp_time_wait_timeout", tcp_time_wait_timeout)
        if tftp_module is not None:
            pulumi.set(__self__, "tftp_module", tftp_module)
        if timeout_setting_preference is not None:
            pulumi.set(__self__, "timeout_setting_preference", timeout_setting_preference)
        if udp_other_timeout is not None:
            pulumi.set(__self__, "udp_other_timeout", udp_other_timeout)
        if udp_stream_timeout is not None:
            pulumi.set(__self__, "udp_stream_timeout", udp_stream_timeout)
        if unbind_wan_monitors is not None:
            pulumi.set(__self__, "unbind_wan_monitors", unbind_wan_monitors)
        if upnp_enabled is not None:
            pulumi.set(__self__, "upnp_enabled", upnp_enabled)
        if upnp_nat_pmp_enabled is not None:
            pulumi.set(__self__, "upnp_nat_pmp_enabled", upnp_nat_pmp_enabled)
        if upnp_secure_mode is not None:
            pulumi.set(__self__, "upnp_secure_mode", upnp_secure_mode)
        if upnp_wan_interface is not None:
            pulumi.set(__self__, "upnp_wan_interface", upnp_wan_interface)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="_h323Module")
    def _h323_module(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "_h323_module")

    @_h323_module.setter
    def _h323_module(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "_h323_module", value)

    @property
    @pulumi.getter(name="_offloadL2Blocking")
    def _offload_l2_blocking(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "_offload_l2_blocking")

    @_offload_l2_blocking.setter
    def _offload_l2_blocking(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "_offload_l2_blocking", value)

    @property
    @pulumi.getter(name="arpCacheBaseReachable")
    def arp_cache_base_reachable(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "arp_cache_base_reachable")

    @arp_cache_base_reachable.setter
    def arp_cache_base_reachable(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "arp_cache_base_reachable", value)

    @property
    @pulumi.getter(name="arpCacheTimeout")
    def arp_cache_timeout(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "arp_cache_timeout")

    @arp_cache_timeout.setter
    def arp_cache_timeout(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "arp_cache_timeout", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter(name="broadcastPing")
    def broadcast_ping(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "broadcast_ping")

    @broadcast_ping.setter
    def broadcast_ping(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "broadcast_ping", value)

    @property
    @pulumi.getter(name="dhcpRelayAgentsPackets")
    def dhcp_relay_agents_packets(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcp_relay_agents_packets")

    @dhcp_relay_agents_packets.setter
    def dhcp_relay_agents_packets(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcp_relay_agents_packets", value)

    @property
    @pulumi.getter(name="dhcpRelayHopCount")
    def dhcp_relay_hop_count(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dhcp_relay_hop_count")

    @dhcp_relay_hop_count.setter
    def dhcp_relay_hop_count(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dhcp_relay_hop_count", value)

    @property
    @pulumi.getter(name="dhcpRelayMaxSize")
    def dhcp_relay_max_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dhcp_relay_max_size")

    @dhcp_relay_max_size.setter
    def dhcp_relay_max_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dhcp_relay_max_size", value)

    @property
    @pulumi.getter(name="dhcpRelayPort")
    def dhcp_relay_port(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dhcp_relay_port")

    @dhcp_relay_port.setter
    def dhcp_relay_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dhcp_relay_port", value)

    @property
    @pulumi.getter(name="dhcpRelayServer1")
    def dhcp_relay_server1(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcp_relay_server1")

    @dhcp_relay_server1.setter
    def dhcp_relay_server1(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcp_relay_server1", value)

    @property
    @pulumi.getter(name="dhcpRelayServer2")
    def dhcp_relay_server2(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcp_relay_server2")

    @dhcp_relay_server2.setter
    def dhcp_relay_server2(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcp_relay_server2", value)

    @property
    @pulumi.getter(name="dhcpRelayServer3")
    def dhcp_relay_server3(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcp_relay_server3")

    @dhcp_relay_server3.setter
    def dhcp_relay_server3(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcp_relay_server3", value)

    @property
    @pulumi.getter(name="dhcpRelayServer4")
    def dhcp_relay_server4(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcp_relay_server4")

    @dhcp_relay_server4.setter
    def dhcp_relay_server4(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcp_relay_server4", value)

    @property
    @pulumi.getter(name="dhcpRelayServer5")
    def dhcp_relay_server5(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dhcp_relay_server5")

    @dhcp_relay_server5.setter
    def dhcp_relay_server5(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dhcp_relay_server5", value)

    @property
    @pulumi.getter(name="dhcpdHostfileUpdate")
    def dhcpd_hostfile_update(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcpd_hostfile_update")

    @dhcpd_hostfile_update.setter
    def dhcpd_hostfile_update(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcpd_hostfile_update", value)

    @property
    @pulumi.getter(name="dhcpdUseDnsmasq")
    def dhcpd_use_dnsmasq(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dhcpd_use_dnsmasq")

    @dhcpd_use_dnsmasq.setter
    def dhcpd_use_dnsmasq(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dhcpd_use_dnsmasq", value)

    @property
    @pulumi.getter(name="dnsVerification")
    def dns_verification(self) -> Optional[pulumi.Input['SettingUsgDNSVerificationArgs']]:
        return pulumi.get(self, "dns_verification")

    @dns_verification.setter
    def dns_verification(self, value: Optional[pulumi.Input['SettingUsgDNSVerificationArgs']]):
        pulumi.set(self, "dns_verification", value)

    @property
    @pulumi.getter(name="dnsmasqAllServers")
    def dnsmasq_all_servers(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dnsmasq_all_servers")

    @dnsmasq_all_servers.setter
    def dnsmasq_all_servers(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dnsmasq_all_servers", value)

    @property
    @pulumi.getter(name="echoServer")
    def echo_server(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "echo_server")

    @echo_server.setter
    def echo_server(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "echo_server", value)

    @property
    @pulumi.getter(name="ftpModule")
    def ftp_module(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "ftp_module")

    @ftp_module.setter
    def ftp_module(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ftp_module", value)

    @property
    @pulumi.getter(name="geoIpFilteringBlock")
    def geo_ip_filtering_block(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "geo_ip_filtering_block")

    @geo_ip_filtering_block.setter
    def geo_ip_filtering_block(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "geo_ip_filtering_block", value)

    @property
    @pulumi.getter(name="geoIpFilteringCountries")
    def geo_ip_filtering_countries(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "geo_ip_filtering_countries")

    @geo_ip_filtering_countries.setter
    def geo_ip_filtering_countries(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "geo_ip_filtering_countries", value)

    @property
    @pulumi.getter(name="geoIpFilteringEnabled")
    def geo_ip_filtering_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "geo_ip_filtering_enabled")

    @geo_ip_filtering_enabled.setter
    def geo_ip_filtering_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "geo_ip_filtering_enabled", value)

    @property
    @pulumi.getter(name="geoIpFilteringTrafficDirection")
    def geo_ip_filtering_traffic_direction(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "geo_ip_filtering_traffic_direction")

    @geo_ip_filtering_traffic_direction.setter
    def geo_ip_filtering_traffic_direction(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "geo_ip_filtering_traffic_direction", value)

    @property
    @pulumi.getter(name="greModule")
    def gre_module(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "gre_module")

    @gre_module.setter
    def gre_module(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "gre_module", value)

    @property
    @pulumi.getter(name="icmpTimeout")
    def icmp_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "icmp_timeout")

    @icmp_timeout.setter
    def icmp_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "icmp_timeout", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="lldpEnableAll")
    def lldp_enable_all(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lldp_enable_all")

    @lldp_enable_all.setter
    def lldp_enable_all(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lldp_enable_all", value)

    @property
    @pulumi.getter(name="mdnsEnabled")
    def mdns_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "mdns_enabled")

    @mdns_enabled.setter
    def mdns_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "mdns_enabled", value)

    @property
    @pulumi.getter(name="mssClamp")
    def mss_clamp(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "mss_clamp")

    @mss_clamp.setter
    def mss_clamp(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mss_clamp", value)

    @property
    @pulumi.getter(name="mssClampMss")
    def mss_clamp_mss(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "mss_clamp_mss")

    @mss_clamp_mss.setter
    def mss_clamp_mss(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "mss_clamp_mss", value)

    @property
    @pulumi.getter(name="offloadAccounting")
    def offload_accounting(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "offload_accounting")

    @offload_accounting.setter
    def offload_accounting(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "offload_accounting", value)

    @property
    @pulumi.getter(name="offloadSch")
    def offload_sch(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "offload_sch")

    @offload_sch.setter
    def offload_sch(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "offload_sch", value)

    @property
    @pulumi.getter(name="otherTimeout")
    def other_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "other_timeout")

    @other_timeout.setter
    def other_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "other_timeout", value)

    @property
    @pulumi.getter(name="pptpModule")
    def pptp_module(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "pptp_module")

    @pptp_module.setter
    def pptp_module(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "pptp_module", value)

    @property
    @pulumi.getter(name="receiveRedirects")
    def receive_redirects(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "receive_redirects")

    @receive_redirects.setter
    def receive_redirects(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "receive_redirects", value)

    @property
    @pulumi.getter(name="sendRedirects")
    def send_redirects(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "send_redirects")

    @send_redirects.setter
    def send_redirects(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "send_redirects", value)

    @property
    @pulumi.getter(name="sipModule")
    def sip_module(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "sip_module")

    @sip_module.setter
    def sip_module(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sip_module", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="synCookies")
    def syn_cookies(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "syn_cookies")

    @syn_cookies.setter
    def syn_cookies(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "syn_cookies", value)

    @property
    @pulumi.getter(name="tcpCloseTimeout")
    def tcp_close_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "tcp_close_timeout")

    @tcp_close_timeout.setter
    def tcp_close_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "tcp_close_timeout", value)

    @property
    @pulumi.getter(name="tcpCloseWaitTimeout")
    def tcp_close_wait_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "tcp_close_wait_timeout")

    @tcp_close_wait_timeout.setter
    def tcp_close_wait_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "tcp_close_wait_timeout", value)

    @property
    @pulumi.getter(name="tcpEstablishedTimeout")
    def tcp_established_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "tcp_established_timeout")

    @tcp_established_timeout.setter
    def tcp_established_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "tcp_established_timeout", value)

    @property
    @pulumi.getter(name="tcpFinWaitTimeout")
    def tcp_fin_wait_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "tcp_fin_wait_timeout")

    @tcp_fin_wait_timeout.setter
    def tcp_fin_wait_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "tcp_fin_wait_timeout", value)

    @property
    @pulumi.getter(name="tcpLastAckTimeout")
    def tcp_last_ack_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "tcp_last_ack_timeout")

    @tcp_last_ack_timeout.setter
    def tcp_last_ack_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "tcp_last_ack_timeout", value)

    @property
    @pulumi.getter(name="tcpSynRecvTimeout")
    def tcp_syn_recv_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "tcp_syn_recv_timeout")

    @tcp_syn_recv_timeout.setter
    def tcp_syn_recv_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "tcp_syn_recv_timeout", value)

    @property
    @pulumi.getter(name="tcpSynSentTimeout")
    def tcp_syn_sent_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "tcp_syn_sent_timeout")

    @tcp_syn_sent_timeout.setter
    def tcp_syn_sent_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "tcp_syn_sent_timeout", value)

    @property
    @pulumi.getter(name="tcpTimeWaitTimeout")
    def tcp_time_wait_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "tcp_time_wait_timeout")

    @tcp_time_wait_timeout.setter
    def tcp_time_wait_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "tcp_time_wait_timeout", value)

    @property
    @pulumi.getter(name="tftpModule")
    def tftp_module(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "tftp_module")

    @tftp_module.setter
    def tftp_module(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "tftp_module", value)

    @property
    @pulumi.getter(name="timeoutSettingPreference")
    def timeout_setting_preference(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "timeout_setting_preference")

    @timeout_setting_preference.setter
    def timeout_setting_preference(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "timeout_setting_preference", value)

    @property
    @pulumi.getter(name="udpOtherTimeout")
    def udp_other_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "udp_other_timeout")

    @udp_other_timeout.setter
    def udp_other_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "udp_other_timeout", value)

    @property
    @pulumi.getter(name="udpStreamTimeout")
    def udp_stream_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "udp_stream_timeout")

    @udp_stream_timeout.setter
    def udp_stream_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "udp_stream_timeout", value)

    @property
    @pulumi.getter(name="unbindWanMonitors")
    def unbind_wan_monitors(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "unbind_wan_monitors")

    @unbind_wan_monitors.setter
    def unbind_wan_monitors(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "unbind_wan_monitors", value)

    @property
    @pulumi.getter(name="upnpEnabled")
    def upnp_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "upnp_enabled")

    @upnp_enabled.setter
    def upnp_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "upnp_enabled", value)

    @property
    @pulumi.getter(name="upnpNatPmpEnabled")
    def upnp_nat_pmp_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "upnp_nat_pmp_enabled")

    @upnp_nat_pmp_enabled.setter
    def upnp_nat_pmp_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "upnp_nat_pmp_enabled", value)

    @property
    @pulumi.getter(name="upnpSecureMode")
    def upnp_secure_mode(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "upnp_secure_mode")

    @upnp_secure_mode.setter
    def upnp_secure_mode(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "upnp_secure_mode", value)

    @property
    @pulumi.getter(name="upnpWanInterface")
    def upnp_wan_interface(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "upnp_wan_interface")

    @upnp_wan_interface.setter
    def upnp_wan_interface(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "upnp_wan_interface", value)


@pulumi.type_token("unifi-native:usg:SettingUsg")
class SettingUsg(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 _h323_module: Optional[pulumi.Input[builtins.bool]] = None,
                 _offload_l2_blocking: Optional[pulumi.Input[builtins.bool]] = None,
                 arp_cache_base_reachable: Optional[pulumi.Input[builtins.int]] = None,
                 arp_cache_timeout: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 broadcast_ping: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcp_relay_agents_packets: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_relay_hop_count: Optional[pulumi.Input[builtins.int]] = None,
                 dhcp_relay_max_size: Optional[pulumi.Input[builtins.int]] = None,
                 dhcp_relay_port: Optional[pulumi.Input[builtins.int]] = None,
                 dhcp_relay_server1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_relay_server2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_relay_server3: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_relay_server4: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_relay_server5: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_hostfile_update: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_use_dnsmasq: Optional[pulumi.Input[builtins.bool]] = None,
                 dns_verification: Optional[pulumi.Input[Union['SettingUsgDNSVerificationArgs', 'SettingUsgDNSVerificationArgsDict']]] = None,
                 dnsmasq_all_servers: Optional[pulumi.Input[builtins.bool]] = None,
                 echo_server: Optional[pulumi.Input[builtins.str]] = None,
                 ftp_module: Optional[pulumi.Input[builtins.bool]] = None,
                 geo_ip_filtering_block: Optional[pulumi.Input[builtins.str]] = None,
                 geo_ip_filtering_countries: Optional[pulumi.Input[builtins.str]] = None,
                 geo_ip_filtering_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 geo_ip_filtering_traffic_direction: Optional[pulumi.Input[builtins.str]] = None,
                 gre_module: Optional[pulumi.Input[builtins.bool]] = None,
                 icmp_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 lldp_enable_all: Optional[pulumi.Input[builtins.bool]] = None,
                 mdns_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mss_clamp: Optional[pulumi.Input[builtins.str]] = None,
                 mss_clamp_mss: Optional[pulumi.Input[builtins.int]] = None,
                 offload_accounting: Optional[pulumi.Input[builtins.bool]] = None,
                 offload_sch: Optional[pulumi.Input[builtins.bool]] = None,
                 other_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 pptp_module: Optional[pulumi.Input[builtins.bool]] = None,
                 receive_redirects: Optional[pulumi.Input[builtins.bool]] = None,
                 send_redirects: Optional[pulumi.Input[builtins.bool]] = None,
                 sip_module: Optional[pulumi.Input[builtins.bool]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 syn_cookies: Optional[pulumi.Input[builtins.bool]] = None,
                 tcp_close_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_close_wait_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_established_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_fin_wait_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_last_ack_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_syn_recv_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_syn_sent_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_time_wait_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tftp_module: Optional[pulumi.Input[builtins.bool]] = None,
                 timeout_setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 udp_other_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 udp_stream_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 unbind_wan_monitors: Optional[pulumi.Input[builtins.bool]] = None,
                 upnp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 upnp_nat_pmp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 upnp_secure_mode: Optional[pulumi.Input[builtins.bool]] = None,
                 upnp_wan_interface: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a SettingUsg resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SettingUsgArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SettingUsg resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SettingUsgArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingUsgArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 _h323_module: Optional[pulumi.Input[builtins.bool]] = None,
                 _offload_l2_blocking: Optional[pulumi.Input[builtins.bool]] = None,
                 arp_cache_base_reachable: Optional[pulumi.Input[builtins.int]] = None,
                 arp_cache_timeout: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 broadcast_ping: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcp_relay_agents_packets: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_relay_hop_count: Optional[pulumi.Input[builtins.int]] = None,
                 dhcp_relay_max_size: Optional[pulumi.Input[builtins.int]] = None,
                 dhcp_relay_port: Optional[pulumi.Input[builtins.int]] = None,
                 dhcp_relay_server1: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_relay_server2: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_relay_server3: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_relay_server4: Optional[pulumi.Input[builtins.str]] = None,
                 dhcp_relay_server5: Optional[pulumi.Input[builtins.str]] = None,
                 dhcpd_hostfile_update: Optional[pulumi.Input[builtins.bool]] = None,
                 dhcpd_use_dnsmasq: Optional[pulumi.Input[builtins.bool]] = None,
                 dns_verification: Optional[pulumi.Input[Union['SettingUsgDNSVerificationArgs', 'SettingUsgDNSVerificationArgsDict']]] = None,
                 dnsmasq_all_servers: Optional[pulumi.Input[builtins.bool]] = None,
                 echo_server: Optional[pulumi.Input[builtins.str]] = None,
                 ftp_module: Optional[pulumi.Input[builtins.bool]] = None,
                 geo_ip_filtering_block: Optional[pulumi.Input[builtins.str]] = None,
                 geo_ip_filtering_countries: Optional[pulumi.Input[builtins.str]] = None,
                 geo_ip_filtering_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 geo_ip_filtering_traffic_direction: Optional[pulumi.Input[builtins.str]] = None,
                 gre_module: Optional[pulumi.Input[builtins.bool]] = None,
                 icmp_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 lldp_enable_all: Optional[pulumi.Input[builtins.bool]] = None,
                 mdns_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mss_clamp: Optional[pulumi.Input[builtins.str]] = None,
                 mss_clamp_mss: Optional[pulumi.Input[builtins.int]] = None,
                 offload_accounting: Optional[pulumi.Input[builtins.bool]] = None,
                 offload_sch: Optional[pulumi.Input[builtins.bool]] = None,
                 other_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 pptp_module: Optional[pulumi.Input[builtins.bool]] = None,
                 receive_redirects: Optional[pulumi.Input[builtins.bool]] = None,
                 send_redirects: Optional[pulumi.Input[builtins.bool]] = None,
                 sip_module: Optional[pulumi.Input[builtins.bool]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 syn_cookies: Optional[pulumi.Input[builtins.bool]] = None,
                 tcp_close_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_close_wait_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_established_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_fin_wait_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_last_ack_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_syn_recv_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_syn_sent_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tcp_time_wait_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tftp_module: Optional[pulumi.Input[builtins.bool]] = None,
                 timeout_setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 udp_other_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 udp_stream_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 unbind_wan_monitors: Optional[pulumi.Input[builtins.bool]] = None,
                 upnp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 upnp_nat_pmp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 upnp_secure_mode: Optional[pulumi.Input[builtins.bool]] = None,
                 upnp_wan_interface: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingUsgArgs.__new__(SettingUsgArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["_h323_module"] = _h323_module
            __props__.__dict__["_offload_l2_blocking"] = _offload_l2_blocking
            __props__.__dict__["arp_cache_base_reachable"] = arp_cache_base_reachable
            __props__.__dict__["arp_cache_timeout"] = arp_cache_timeout
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["broadcast_ping"] = broadcast_ping
            __props__.__dict__["dhcp_relay_agents_packets"] = dhcp_relay_agents_packets
            __props__.__dict__["dhcp_relay_hop_count"] = dhcp_relay_hop_count
            __props__.__dict__["dhcp_relay_max_size"] = dhcp_relay_max_size
            __props__.__dict__["dhcp_relay_port"] = dhcp_relay_port
            __props__.__dict__["dhcp_relay_server1"] = dhcp_relay_server1
            __props__.__dict__["dhcp_relay_server2"] = dhcp_relay_server2
            __props__.__dict__["dhcp_relay_server3"] = dhcp_relay_server3
            __props__.__dict__["dhcp_relay_server4"] = dhcp_relay_server4
            __props__.__dict__["dhcp_relay_server5"] = dhcp_relay_server5
            __props__.__dict__["dhcpd_hostfile_update"] = dhcpd_hostfile_update
            __props__.__dict__["dhcpd_use_dnsmasq"] = dhcpd_use_dnsmasq
            __props__.__dict__["dns_verification"] = dns_verification
            __props__.__dict__["dnsmasq_all_servers"] = dnsmasq_all_servers
            __props__.__dict__["echo_server"] = echo_server
            __props__.__dict__["ftp_module"] = ftp_module
            __props__.__dict__["geo_ip_filtering_block"] = geo_ip_filtering_block
            __props__.__dict__["geo_ip_filtering_countries"] = geo_ip_filtering_countries
            __props__.__dict__["geo_ip_filtering_enabled"] = geo_ip_filtering_enabled
            __props__.__dict__["geo_ip_filtering_traffic_direction"] = geo_ip_filtering_traffic_direction
            __props__.__dict__["gre_module"] = gre_module
            __props__.__dict__["icmp_timeout"] = icmp_timeout
            __props__.__dict__["key"] = key
            __props__.__dict__["lldp_enable_all"] = lldp_enable_all
            __props__.__dict__["mdns_enabled"] = mdns_enabled
            __props__.__dict__["mss_clamp"] = mss_clamp
            __props__.__dict__["mss_clamp_mss"] = mss_clamp_mss
            __props__.__dict__["offload_accounting"] = offload_accounting
            __props__.__dict__["offload_sch"] = offload_sch
            __props__.__dict__["other_timeout"] = other_timeout
            __props__.__dict__["pptp_module"] = pptp_module
            __props__.__dict__["receive_redirects"] = receive_redirects
            __props__.__dict__["send_redirects"] = send_redirects
            __props__.__dict__["sip_module"] = sip_module
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["syn_cookies"] = syn_cookies
            __props__.__dict__["tcp_close_timeout"] = tcp_close_timeout
            __props__.__dict__["tcp_close_wait_timeout"] = tcp_close_wait_timeout
            __props__.__dict__["tcp_established_timeout"] = tcp_established_timeout
            __props__.__dict__["tcp_fin_wait_timeout"] = tcp_fin_wait_timeout
            __props__.__dict__["tcp_last_ack_timeout"] = tcp_last_ack_timeout
            __props__.__dict__["tcp_syn_recv_timeout"] = tcp_syn_recv_timeout
            __props__.__dict__["tcp_syn_sent_timeout"] = tcp_syn_sent_timeout
            __props__.__dict__["tcp_time_wait_timeout"] = tcp_time_wait_timeout
            __props__.__dict__["tftp_module"] = tftp_module
            __props__.__dict__["timeout_setting_preference"] = timeout_setting_preference
            __props__.__dict__["udp_other_timeout"] = udp_other_timeout
            __props__.__dict__["udp_stream_timeout"] = udp_stream_timeout
            __props__.__dict__["unbind_wan_monitors"] = unbind_wan_monitors
            __props__.__dict__["upnp_enabled"] = upnp_enabled
            __props__.__dict__["upnp_nat_pmp_enabled"] = upnp_nat_pmp_enabled
            __props__.__dict__["upnp_secure_mode"] = upnp_secure_mode
            __props__.__dict__["upnp_wan_interface"] = upnp_wan_interface
        super(SettingUsg, __self__).__init__(
            'unifi-native:usg:SettingUsg',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SettingUsg':
        """
        Get an existing SettingUsg resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SettingUsgArgs.__new__(SettingUsgArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["_h323_module"] = None
        __props__.__dict__["_offload_l2_blocking"] = None
        __props__.__dict__["arp_cache_base_reachable"] = None
        __props__.__dict__["arp_cache_timeout"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["broadcast_ping"] = None
        __props__.__dict__["dhcp_relay_agents_packets"] = None
        __props__.__dict__["dhcp_relay_hop_count"] = None
        __props__.__dict__["dhcp_relay_max_size"] = None
        __props__.__dict__["dhcp_relay_port"] = None
        __props__.__dict__["dhcp_relay_server1"] = None
        __props__.__dict__["dhcp_relay_server2"] = None
        __props__.__dict__["dhcp_relay_server3"] = None
        __props__.__dict__["dhcp_relay_server4"] = None
        __props__.__dict__["dhcp_relay_server5"] = None
        __props__.__dict__["dhcpd_hostfile_update"] = None
        __props__.__dict__["dhcpd_use_dnsmasq"] = None
        __props__.__dict__["dns_verification"] = None
        __props__.__dict__["dnsmasq_all_servers"] = None
        __props__.__dict__["echo_server"] = None
        __props__.__dict__["ftp_module"] = None
        __props__.__dict__["geo_ip_filtering_block"] = None
        __props__.__dict__["geo_ip_filtering_countries"] = None
        __props__.__dict__["geo_ip_filtering_enabled"] = None
        __props__.__dict__["geo_ip_filtering_traffic_direction"] = None
        __props__.__dict__["gre_module"] = None
        __props__.__dict__["icmp_timeout"] = None
        __props__.__dict__["key"] = None
        __props__.__dict__["lldp_enable_all"] = None
        __props__.__dict__["mdns_enabled"] = None
        __props__.__dict__["mss_clamp"] = None
        __props__.__dict__["mss_clamp_mss"] = None
        __props__.__dict__["offload_accounting"] = None
        __props__.__dict__["offload_sch"] = None
        __props__.__dict__["other_timeout"] = None
        __props__.__dict__["pptp_module"] = None
        __props__.__dict__["receive_redirects"] = None
        __props__.__dict__["send_redirects"] = None
        __props__.__dict__["sip_module"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["syn_cookies"] = None
        __props__.__dict__["tcp_close_timeout"] = None
        __props__.__dict__["tcp_close_wait_timeout"] = None
        __props__.__dict__["tcp_established_timeout"] = None
        __props__.__dict__["tcp_fin_wait_timeout"] = None
        __props__.__dict__["tcp_last_ack_timeout"] = None
        __props__.__dict__["tcp_syn_recv_timeout"] = None
        __props__.__dict__["tcp_syn_sent_timeout"] = None
        __props__.__dict__["tcp_time_wait_timeout"] = None
        __props__.__dict__["tftp_module"] = None
        __props__.__dict__["timeout_setting_preference"] = None
        __props__.__dict__["udp_other_timeout"] = None
        __props__.__dict__["udp_stream_timeout"] = None
        __props__.__dict__["unbind_wan_monitors"] = None
        __props__.__dict__["upnp_enabled"] = None
        __props__.__dict__["upnp_nat_pmp_enabled"] = None
        __props__.__dict__["upnp_secure_mode"] = None
        __props__.__dict__["upnp_wan_interface"] = None
        return SettingUsg(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="_h323Module")
    def _h323_module(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "_h323_module")

    @property
    @pulumi.getter(name="_offloadL2Blocking")
    def _offload_l2_blocking(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "_offload_l2_blocking")

    @property
    @pulumi.getter(name="arpCacheBaseReachable")
    def arp_cache_base_reachable(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "arp_cache_base_reachable")

    @property
    @pulumi.getter(name="arpCacheTimeout")
    def arp_cache_timeout(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "arp_cache_timeout")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="broadcastPing")
    def broadcast_ping(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "broadcast_ping")

    @property
    @pulumi.getter(name="dhcpRelayAgentsPackets")
    def dhcp_relay_agents_packets(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcp_relay_agents_packets")

    @property
    @pulumi.getter(name="dhcpRelayHopCount")
    def dhcp_relay_hop_count(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "dhcp_relay_hop_count")

    @property
    @pulumi.getter(name="dhcpRelayMaxSize")
    def dhcp_relay_max_size(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "dhcp_relay_max_size")

    @property
    @pulumi.getter(name="dhcpRelayPort")
    def dhcp_relay_port(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "dhcp_relay_port")

    @property
    @pulumi.getter(name="dhcpRelayServer1")
    def dhcp_relay_server1(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcp_relay_server1")

    @property
    @pulumi.getter(name="dhcpRelayServer2")
    def dhcp_relay_server2(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcp_relay_server2")

    @property
    @pulumi.getter(name="dhcpRelayServer3")
    def dhcp_relay_server3(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcp_relay_server3")

    @property
    @pulumi.getter(name="dhcpRelayServer4")
    def dhcp_relay_server4(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcp_relay_server4")

    @property
    @pulumi.getter(name="dhcpRelayServer5")
    def dhcp_relay_server5(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dhcp_relay_server5")

    @property
    @pulumi.getter(name="dhcpdHostfileUpdate")
    def dhcpd_hostfile_update(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcpd_hostfile_update")

    @property
    @pulumi.getter(name="dhcpdUseDnsmasq")
    def dhcpd_use_dnsmasq(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dhcpd_use_dnsmasq")

    @property
    @pulumi.getter(name="dnsVerification")
    def dns_verification(self) -> pulumi.Output[Optional['outputs.SettingUsgDNSVerification']]:
        return pulumi.get(self, "dns_verification")

    @property
    @pulumi.getter(name="dnsmasqAllServers")
    def dnsmasq_all_servers(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dnsmasq_all_servers")

    @property
    @pulumi.getter(name="echoServer")
    def echo_server(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "echo_server")

    @property
    @pulumi.getter(name="ftpModule")
    def ftp_module(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "ftp_module")

    @property
    @pulumi.getter(name="geoIpFilteringBlock")
    def geo_ip_filtering_block(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "geo_ip_filtering_block")

    @property
    @pulumi.getter(name="geoIpFilteringCountries")
    def geo_ip_filtering_countries(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "geo_ip_filtering_countries")

    @property
    @pulumi.getter(name="geoIpFilteringEnabled")
    def geo_ip_filtering_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "geo_ip_filtering_enabled")

    @property
    @pulumi.getter(name="geoIpFilteringTrafficDirection")
    def geo_ip_filtering_traffic_direction(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "geo_ip_filtering_traffic_direction")

    @property
    @pulumi.getter(name="greModule")
    def gre_module(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "gre_module")

    @property
    @pulumi.getter(name="icmpTimeout")
    def icmp_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "icmp_timeout")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="lldpEnableAll")
    def lldp_enable_all(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "lldp_enable_all")

    @property
    @pulumi.getter(name="mdnsEnabled")
    def mdns_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "mdns_enabled")

    @property
    @pulumi.getter(name="mssClamp")
    def mss_clamp(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "mss_clamp")

    @property
    @pulumi.getter(name="mssClampMss")
    def mss_clamp_mss(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "mss_clamp_mss")

    @property
    @pulumi.getter(name="offloadAccounting")
    def offload_accounting(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "offload_accounting")

    @property
    @pulumi.getter(name="offloadSch")
    def offload_sch(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "offload_sch")

    @property
    @pulumi.getter(name="otherTimeout")
    def other_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "other_timeout")

    @property
    @pulumi.getter(name="pptpModule")
    def pptp_module(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "pptp_module")

    @property
    @pulumi.getter(name="receiveRedirects")
    def receive_redirects(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "receive_redirects")

    @property
    @pulumi.getter(name="sendRedirects")
    def send_redirects(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "send_redirects")

    @property
    @pulumi.getter(name="sipModule")
    def sip_module(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "sip_module")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="synCookies")
    def syn_cookies(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "syn_cookies")

    @property
    @pulumi.getter(name="tcpCloseTimeout")
    def tcp_close_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "tcp_close_timeout")

    @property
    @pulumi.getter(name="tcpCloseWaitTimeout")
    def tcp_close_wait_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "tcp_close_wait_timeout")

    @property
    @pulumi.getter(name="tcpEstablishedTimeout")
    def tcp_established_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "tcp_established_timeout")

    @property
    @pulumi.getter(name="tcpFinWaitTimeout")
    def tcp_fin_wait_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "tcp_fin_wait_timeout")

    @property
    @pulumi.getter(name="tcpLastAckTimeout")
    def tcp_last_ack_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "tcp_last_ack_timeout")

    @property
    @pulumi.getter(name="tcpSynRecvTimeout")
    def tcp_syn_recv_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "tcp_syn_recv_timeout")

    @property
    @pulumi.getter(name="tcpSynSentTimeout")
    def tcp_syn_sent_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "tcp_syn_sent_timeout")

    @property
    @pulumi.getter(name="tcpTimeWaitTimeout")
    def tcp_time_wait_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "tcp_time_wait_timeout")

    @property
    @pulumi.getter(name="tftpModule")
    def tftp_module(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "tftp_module")

    @property
    @pulumi.getter(name="timeoutSettingPreference")
    def timeout_setting_preference(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "timeout_setting_preference")

    @property
    @pulumi.getter(name="udpOtherTimeout")
    def udp_other_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "udp_other_timeout")

    @property
    @pulumi.getter(name="udpStreamTimeout")
    def udp_stream_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "udp_stream_timeout")

    @property
    @pulumi.getter(name="unbindWanMonitors")
    def unbind_wan_monitors(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "unbind_wan_monitors")

    @property
    @pulumi.getter(name="upnpEnabled")
    def upnp_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "upnp_enabled")

    @property
    @pulumi.getter(name="upnpNatPmpEnabled")
    def upnp_nat_pmp_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "upnp_nat_pmp_enabled")

    @property
    @pulumi.getter(name="upnpSecureMode")
    def upnp_secure_mode(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "upnp_secure_mode")

    @property
    @pulumi.getter(name="upnpWanInterface")
    def upnp_wan_interface(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "upnp_wan_interface")

