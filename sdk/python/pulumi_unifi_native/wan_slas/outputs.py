# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'WanAlertThresholdDto',
    'WanMonitorDto',
    'WanMonitorDtoMonitorIdProperties',
    'WanSlaDto',
]

@pulumi.output_type
class WanAlertThresholdDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jitterThreshold":
            suggest = "jitter_threshold"
        elif key == "latencyThreshold":
            suggest = "latency_threshold"
        elif key == "lossThreshold":
            suggest = "loss_threshold"
        elif key == "thresholdPolicy":
            suggest = "threshold_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WanAlertThresholdDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WanAlertThresholdDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WanAlertThresholdDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jitter_threshold: Optional[builtins.int] = None,
                 latency_threshold: Optional[builtins.int] = None,
                 loss_threshold: Optional[builtins.int] = None,
                 threshold_policy: Optional['WanAlertThresholdDtoThresholdPolicy'] = None):
        if jitter_threshold is not None:
            pulumi.set(__self__, "jitter_threshold", jitter_threshold)
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if loss_threshold is not None:
            pulumi.set(__self__, "loss_threshold", loss_threshold)
        if threshold_policy is not None:
            pulumi.set(__self__, "threshold_policy", threshold_policy)

    @property
    @pulumi.getter(name="jitterThreshold")
    def jitter_threshold(self) -> Optional[builtins.int]:
        return pulumi.get(self, "jitter_threshold")

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[builtins.int]:
        return pulumi.get(self, "latency_threshold")

    @property
    @pulumi.getter(name="lossThreshold")
    def loss_threshold(self) -> Optional[builtins.int]:
        return pulumi.get(self, "loss_threshold")

    @property
    @pulumi.getter(name="thresholdPolicy")
    def threshold_policy(self) -> Optional['WanAlertThresholdDtoThresholdPolicy']:
        return pulumi.get(self, "threshold_policy")


@pulumi.output_type
class WanMonitorDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monitorId":
            suggest = "monitor_id"
        elif key == "timePeriod":
            suggest = "time_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WanMonitorDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WanMonitorDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WanMonitorDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert: 'outputs.WanAlertThresholdDto',
                 domain: Optional[builtins.str] = None,
                 interval: Optional[builtins.int] = None,
                 monitor_id: Optional['outputs.WanMonitorDtoMonitorIdProperties'] = None,
                 target: Optional[builtins.str] = None,
                 time_period: Optional[builtins.int] = None,
                 type: Optional['WanMonitorDtoType'] = None):
        pulumi.set(__self__, "alert", alert)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if monitor_id is not None:
            pulumi.set(__self__, "monitor_id", monitor_id)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if time_period is not None:
            pulumi.set(__self__, "time_period", time_period)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def alert(self) -> 'outputs.WanAlertThresholdDto':
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def domain(self) -> Optional[builtins.str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def interval(self) -> Optional[builtins.int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> Optional['outputs.WanMonitorDtoMonitorIdProperties']:
        return pulumi.get(self, "monitor_id")

    @property
    @pulumi.getter
    def target(self) -> Optional[builtins.str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="timePeriod")
    def time_period(self) -> Optional[builtins.int]:
        return pulumi.get(self, "time_period")

    @property
    @pulumi.getter
    def type(self) -> Optional['WanMonitorDtoType']:
        return pulumi.get(self, "type")


@pulumi.output_type
class WanMonitorDtoMonitorIdProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asInt":
            suggest = "as_int"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WanMonitorDtoMonitorIdProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WanMonitorDtoMonitorIdProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WanMonitorDtoMonitorIdProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_int: Optional[builtins.int] = None,
                 empty: Optional[builtins.bool] = None,
                 present: Optional[builtins.bool] = None):
        if as_int is not None:
            pulumi.set(__self__, "as_int", as_int)
        if empty is not None:
            pulumi.set(__self__, "empty", empty)
        if present is not None:
            pulumi.set(__self__, "present", present)

    @property
    @pulumi.getter(name="asInt")
    def as_int(self) -> Optional[builtins.int]:
        return pulumi.get(self, "as_int")

    @property
    @pulumi.getter
    def empty(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "empty")

    @property
    @pulumi.getter
    def present(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "present")


@pulumi.output_type
class WanSlaDto(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 monitor_down_threshold: Optional[builtins.int] = None,
                 monitor_health_type: Optional['WanSlaDtoMonitorHealthType'] = None,
                 monitors: Optional[Sequence['outputs.WanMonitorDto']] = None,
                 name: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monitor_down_threshold is not None:
            pulumi.set(__self__, "monitor_down_threshold", monitor_down_threshold)
        if monitor_health_type is not None:
            pulumi.set(__self__, "monitor_health_type", monitor_health_type)
        if monitors is not None:
            pulumi.set(__self__, "monitors", monitors)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monitorDownThreshold")
    def monitor_down_threshold(self) -> Optional[builtins.int]:
        return pulumi.get(self, "monitor_down_threshold")

    @property
    @pulumi.getter(name="monitorHealthType")
    def monitor_health_type(self) -> Optional['WanSlaDtoMonitorHealthType']:
        return pulumi.get(self, "monitor_health_type")

    @property
    @pulumi.getter
    def monitors(self) -> Optional[Sequence['outputs.WanMonitorDto']]:
        return pulumi.get(self, "monitors")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")


