# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'WanAlertThresholdDtoArgs',
    'WanAlertThresholdDtoArgsDict',
    'WanMonitorDtoMonitorIdPropertiesArgs',
    'WanMonitorDtoMonitorIdPropertiesArgsDict',
    'WanMonitorDtoArgs',
    'WanMonitorDtoArgsDict',
]

MYPY = False

if not MYPY:
    class WanAlertThresholdDtoArgsDict(TypedDict):
        jitter_threshold: NotRequired[pulumi.Input[builtins.int]]
        latency_threshold: NotRequired[pulumi.Input[builtins.int]]
        loss_threshold: NotRequired[pulumi.Input[builtins.int]]
        threshold_policy: NotRequired[pulumi.Input['WanAlertThresholdDtoThresholdPolicy']]
elif False:
    WanAlertThresholdDtoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WanAlertThresholdDtoArgs:
    def __init__(__self__, *,
                 jitter_threshold: Optional[pulumi.Input[builtins.int]] = None,
                 latency_threshold: Optional[pulumi.Input[builtins.int]] = None,
                 loss_threshold: Optional[pulumi.Input[builtins.int]] = None,
                 threshold_policy: Optional[pulumi.Input['WanAlertThresholdDtoThresholdPolicy']] = None):
        if jitter_threshold is not None:
            pulumi.set(__self__, "jitter_threshold", jitter_threshold)
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if loss_threshold is not None:
            pulumi.set(__self__, "loss_threshold", loss_threshold)
        if threshold_policy is not None:
            pulumi.set(__self__, "threshold_policy", threshold_policy)

    @property
    @pulumi.getter(name="jitterThreshold")
    def jitter_threshold(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "jitter_threshold")

    @jitter_threshold.setter
    def jitter_threshold(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "jitter_threshold", value)

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "latency_threshold")

    @latency_threshold.setter
    def latency_threshold(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "latency_threshold", value)

    @property
    @pulumi.getter(name="lossThreshold")
    def loss_threshold(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "loss_threshold")

    @loss_threshold.setter
    def loss_threshold(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "loss_threshold", value)

    @property
    @pulumi.getter(name="thresholdPolicy")
    def threshold_policy(self) -> Optional[pulumi.Input['WanAlertThresholdDtoThresholdPolicy']]:
        return pulumi.get(self, "threshold_policy")

    @threshold_policy.setter
    def threshold_policy(self, value: Optional[pulumi.Input['WanAlertThresholdDtoThresholdPolicy']]):
        pulumi.set(self, "threshold_policy", value)


if not MYPY:
    class WanMonitorDtoMonitorIdPropertiesArgsDict(TypedDict):
        as_int: NotRequired[pulumi.Input[builtins.int]]
        empty: NotRequired[pulumi.Input[builtins.bool]]
        present: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    WanMonitorDtoMonitorIdPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WanMonitorDtoMonitorIdPropertiesArgs:
    def __init__(__self__, *,
                 as_int: Optional[pulumi.Input[builtins.int]] = None,
                 empty: Optional[pulumi.Input[builtins.bool]] = None,
                 present: Optional[pulumi.Input[builtins.bool]] = None):
        if as_int is not None:
            pulumi.set(__self__, "as_int", as_int)
        if empty is not None:
            pulumi.set(__self__, "empty", empty)
        if present is not None:
            pulumi.set(__self__, "present", present)

    @property
    @pulumi.getter(name="asInt")
    def as_int(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "as_int")

    @as_int.setter
    def as_int(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "as_int", value)

    @property
    @pulumi.getter
    def empty(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "empty")

    @empty.setter
    def empty(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "empty", value)

    @property
    @pulumi.getter
    def present(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "present")

    @present.setter
    def present(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "present", value)


if not MYPY:
    class WanMonitorDtoArgsDict(TypedDict):
        alert: pulumi.Input['WanAlertThresholdDtoArgsDict']
        domain: NotRequired[pulumi.Input[builtins.str]]
        interval: NotRequired[pulumi.Input[builtins.int]]
        monitor_id: NotRequired[pulumi.Input['WanMonitorDtoMonitorIdPropertiesArgsDict']]
        target: NotRequired[pulumi.Input[builtins.str]]
        time_period: NotRequired[pulumi.Input[builtins.int]]
        type: NotRequired[pulumi.Input['WanMonitorDtoType']]
elif False:
    WanMonitorDtoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WanMonitorDtoArgs:
    def __init__(__self__, *,
                 alert: pulumi.Input['WanAlertThresholdDtoArgs'],
                 domain: Optional[pulumi.Input[builtins.str]] = None,
                 interval: Optional[pulumi.Input[builtins.int]] = None,
                 monitor_id: Optional[pulumi.Input['WanMonitorDtoMonitorIdPropertiesArgs']] = None,
                 target: Optional[pulumi.Input[builtins.str]] = None,
                 time_period: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input['WanMonitorDtoType']] = None):
        pulumi.set(__self__, "alert", alert)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if monitor_id is not None:
            pulumi.set(__self__, "monitor_id", monitor_id)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if time_period is not None:
            pulumi.set(__self__, "time_period", time_period)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def alert(self) -> pulumi.Input['WanAlertThresholdDtoArgs']:
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: pulumi.Input['WanAlertThresholdDtoArgs']):
        pulumi.set(self, "alert", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> Optional[pulumi.Input['WanMonitorDtoMonitorIdPropertiesArgs']]:
        return pulumi.get(self, "monitor_id")

    @monitor_id.setter
    def monitor_id(self, value: Optional[pulumi.Input['WanMonitorDtoMonitorIdPropertiesArgs']]):
        pulumi.set(self, "monitor_id", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="timePeriod")
    def time_period(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "time_period")

    @time_period.setter
    def time_period(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "time_period", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['WanMonitorDtoType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['WanMonitorDtoType']]):
        pulumi.set(self, "type", value)


