# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AccountArgs', 'Account']

@pulumi.input_type
class AccountArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 filter_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ip: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 tunnel_config_type: Optional[pulumi.Input[builtins.str]] = None,
                 tunnel_medium_type: Optional[pulumi.Input[builtins.int]] = None,
                 tunnel_type: Optional[pulumi.Input[builtins.int]] = None,
                 ulp_user_id: Optional[pulumi.Input[builtins.str]] = None,
                 vlan: Optional[pulumi.Input[builtins.int]] = None,
                 x_password: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Account resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if filter_ids is not None:
            pulumi.set(__self__, "filter_ids", filter_ids)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networkconf_id is not None:
            pulumi.set(__self__, "networkconf_id", networkconf_id)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if tunnel_config_type is not None:
            pulumi.set(__self__, "tunnel_config_type", tunnel_config_type)
        if tunnel_medium_type is not None:
            pulumi.set(__self__, "tunnel_medium_type", tunnel_medium_type)
        if tunnel_type is not None:
            pulumi.set(__self__, "tunnel_type", tunnel_type)
        if ulp_user_id is not None:
            pulumi.set(__self__, "ulp_user_id", ulp_user_id)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if x_password is not None:
            pulumi.set(__self__, "x_password", x_password)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter(name="filterIds")
    def filter_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "filter_ids")

    @filter_ids.setter
    def filter_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "filter_ids", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkconfId")
    def networkconf_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "networkconf_id")

    @networkconf_id.setter
    def networkconf_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "networkconf_id", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="tunnelConfigType")
    def tunnel_config_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "tunnel_config_type")

    @tunnel_config_type.setter
    def tunnel_config_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tunnel_config_type", value)

    @property
    @pulumi.getter(name="tunnelMediumType")
    def tunnel_medium_type(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "tunnel_medium_type")

    @tunnel_medium_type.setter
    def tunnel_medium_type(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "tunnel_medium_type", value)

    @property
    @pulumi.getter(name="tunnelType")
    def tunnel_type(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "tunnel_type")

    @tunnel_type.setter
    def tunnel_type(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "tunnel_type", value)

    @property
    @pulumi.getter(name="ulpUserId")
    def ulp_user_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ulp_user_id")

    @ulp_user_id.setter
    def ulp_user_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ulp_user_id", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter(name="xPassword")
    def x_password(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_password")

    @x_password.setter
    def x_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_password", value)


@pulumi.type_token("unifi-native:account:Account")
class Account(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 filter_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ip: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 tunnel_config_type: Optional[pulumi.Input[builtins.str]] = None,
                 tunnel_medium_type: Optional[pulumi.Input[builtins.int]] = None,
                 tunnel_type: Optional[pulumi.Input[builtins.int]] = None,
                 ulp_user_id: Optional[pulumi.Input[builtins.str]] = None,
                 vlan: Optional[pulumi.Input[builtins.int]] = None,
                 x_password: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a Account resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AccountArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Account resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 filter_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ip: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 tunnel_config_type: Optional[pulumi.Input[builtins.str]] = None,
                 tunnel_medium_type: Optional[pulumi.Input[builtins.int]] = None,
                 tunnel_type: Optional[pulumi.Input[builtins.int]] = None,
                 ulp_user_id: Optional[pulumi.Input[builtins.str]] = None,
                 vlan: Optional[pulumi.Input[builtins.int]] = None,
                 x_password: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountArgs.__new__(AccountArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["filter_ids"] = filter_ids
            __props__.__dict__["ip"] = ip
            __props__.__dict__["name"] = name
            __props__.__dict__["networkconf_id"] = networkconf_id
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["tunnel_config_type"] = tunnel_config_type
            __props__.__dict__["tunnel_medium_type"] = tunnel_medium_type
            __props__.__dict__["tunnel_type"] = tunnel_type
            __props__.__dict__["ulp_user_id"] = ulp_user_id
            __props__.__dict__["vlan"] = vlan
            __props__.__dict__["x_password"] = None if x_password is None else pulumi.Output.secret(x_password)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["xPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Account, __self__).__init__(
            'unifi-native:account:Account',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Account':
        """
        Get an existing Account resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AccountArgs.__new__(AccountArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["filter_ids"] = None
        __props__.__dict__["ip"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["networkconf_id"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["tunnel_config_type"] = None
        __props__.__dict__["tunnel_medium_type"] = None
        __props__.__dict__["tunnel_type"] = None
        __props__.__dict__["ulp_user_id"] = None
        __props__.__dict__["vlan"] = None
        __props__.__dict__["x_password"] = None
        return Account(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="filterIds")
    def filter_ids(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "filter_ids")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkconfId")
    def networkconf_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "networkconf_id")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="tunnelConfigType")
    def tunnel_config_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "tunnel_config_type")

    @property
    @pulumi.getter(name="tunnelMediumType")
    def tunnel_medium_type(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "tunnel_medium_type")

    @property
    @pulumi.getter(name="tunnelType")
    def tunnel_type(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "tunnel_type")

    @property
    @pulumi.getter(name="ulpUserId")
    def ulp_user_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ulp_user_id")

    @property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="xPassword")
    def x_password(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_password")

