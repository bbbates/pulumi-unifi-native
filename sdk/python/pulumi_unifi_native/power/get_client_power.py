# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetClientPowerResult',
    'AwaitableGetClientPowerResult',
    'get_client_power',
    'get_client_power_output',
]

@pulumi.output_type
class GetClientPowerResult:
    def __init__(__self__, current_amperes=None, power_watts=None, voltage_volts=None):
        if current_amperes and not isinstance(current_amperes, float):
            raise TypeError("Expected argument 'current_amperes' to be a float")
        pulumi.set(__self__, "current_amperes", current_amperes)
        if power_watts and not isinstance(power_watts, float):
            raise TypeError("Expected argument 'power_watts' to be a float")
        pulumi.set(__self__, "power_watts", power_watts)
        if voltage_volts and not isinstance(voltage_volts, float):
            raise TypeError("Expected argument 'voltage_volts' to be a float")
        pulumi.set(__self__, "voltage_volts", voltage_volts)

    @property
    @pulumi.getter(name="currentAmperes")
    def current_amperes(self) -> Optional[builtins.float]:
        return pulumi.get(self, "current_amperes")

    @property
    @pulumi.getter(name="powerWatts")
    def power_watts(self) -> Optional[builtins.float]:
        return pulumi.get(self, "power_watts")

    @property
    @pulumi.getter(name="voltageVolts")
    def voltage_volts(self) -> Optional[builtins.float]:
        return pulumi.get(self, "voltage_volts")


class AwaitableGetClientPowerResult(GetClientPowerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClientPowerResult(
            current_amperes=self.current_amperes,
            power_watts=self.power_watts,
            voltage_volts=self.voltage_volts)


def get_client_power(client_mac: Optional[builtins.str] = None,
                     site_name: Optional[builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClientPowerResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clientMac'] = client_mac
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:power:getClientPower', __args__, opts=opts, typ=GetClientPowerResult).value

    return AwaitableGetClientPowerResult(
        current_amperes=pulumi.get(__ret__, 'current_amperes'),
        power_watts=pulumi.get(__ret__, 'power_watts'),
        voltage_volts=pulumi.get(__ret__, 'voltage_volts'))
def get_client_power_output(client_mac: Optional[pulumi.Input[builtins.str]] = None,
                            site_name: Optional[pulumi.Input[builtins.str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetClientPowerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clientMac'] = client_mac
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:power:getClientPower', __args__, opts=opts, typ=GetClientPowerResult)
    return __ret__.apply(lambda __response__: GetClientPowerResult(
        current_amperes=pulumi.get(__response__, 'current_amperes'),
        power_watts=pulumi.get(__response__, 'power_watts'),
        voltage_volts=pulumi.get(__response__, 'voltage_volts')))
