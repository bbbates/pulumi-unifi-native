# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['AclRuleArgs', 'AclRule']

@pulumi.input_type
class AclRuleArgs:
    def __init__(__self__, *,
                 acl_index: pulumi.Input[builtins.int],
                 action: pulumi.Input['Action'],
                 specific_enforcers: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 traffic_destination: pulumi.Input['AclRuleTrafficEndpointDtoArgs'],
                 traffic_source: pulumi.Input['AclRuleTrafficEndpointDtoArgs'],
                 type: pulumi.Input['Type'],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ip_acl_protocol: Optional[pulumi.Input['IpAclProtocol']] = None,
                 mac_acl_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a AclRule resource.
        """
        pulumi.set(__self__, "acl_index", acl_index)
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "specific_enforcers", specific_enforcers)
        pulumi.set(__self__, "traffic_destination", traffic_destination)
        pulumi.set(__self__, "traffic_source", traffic_source)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ip_acl_protocol is not None:
            pulumi.set(__self__, "ip_acl_protocol", ip_acl_protocol)
        if mac_acl_network_id is not None:
            pulumi.set(__self__, "mac_acl_network_id", mac_acl_network_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)

    @property
    @pulumi.getter(name="aclIndex")
    def acl_index(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "acl_index")

    @acl_index.setter
    def acl_index(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "acl_index", value)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['Action']:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['Action']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="specificEnforcers")
    def specific_enforcers(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "specific_enforcers")

    @specific_enforcers.setter
    def specific_enforcers(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "specific_enforcers", value)

    @property
    @pulumi.getter(name="trafficDestination")
    def traffic_destination(self) -> pulumi.Input['AclRuleTrafficEndpointDtoArgs']:
        return pulumi.get(self, "traffic_destination")

    @traffic_destination.setter
    def traffic_destination(self, value: pulumi.Input['AclRuleTrafficEndpointDtoArgs']):
        pulumi.set(self, "traffic_destination", value)

    @property
    @pulumi.getter(name="trafficSource")
    def traffic_source(self) -> pulumi.Input['AclRuleTrafficEndpointDtoArgs']:
        return pulumi.get(self, "traffic_source")

    @traffic_source.setter
    def traffic_source(self, value: pulumi.Input['AclRuleTrafficEndpointDtoArgs']):
        pulumi.set(self, "traffic_source", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['Type']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['Type']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ipAclProtocol")
    def ip_acl_protocol(self) -> Optional[pulumi.Input['IpAclProtocol']]:
        return pulumi.get(self, "ip_acl_protocol")

    @ip_acl_protocol.setter
    def ip_acl_protocol(self, value: Optional[pulumi.Input['IpAclProtocol']]):
        pulumi.set(self, "ip_acl_protocol", value)

    @property
    @pulumi.getter(name="macAclNetworkId")
    def mac_acl_network_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "mac_acl_network_id")

    @mac_acl_network_id.setter
    def mac_acl_network_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mac_acl_network_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)


@pulumi.type_token("unifi-native:acl-rules:AclRule")
class AclRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 acl_index: Optional[pulumi.Input[builtins.int]] = None,
                 action: Optional[pulumi.Input['Action']] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ip_acl_protocol: Optional[pulumi.Input['IpAclProtocol']] = None,
                 mac_acl_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 specific_enforcers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 traffic_destination: Optional[pulumi.Input[Union['AclRuleTrafficEndpointDtoArgs', 'AclRuleTrafficEndpointDtoArgsDict']]] = None,
                 traffic_source: Optional[pulumi.Input[Union['AclRuleTrafficEndpointDtoArgs', 'AclRuleTrafficEndpointDtoArgsDict']]] = None,
                 type: Optional[pulumi.Input['Type']] = None,
                 __props__=None):
        """
        Create a AclRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AclRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AclRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AclRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AclRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 acl_index: Optional[pulumi.Input[builtins.int]] = None,
                 action: Optional[pulumi.Input['Action']] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ip_acl_protocol: Optional[pulumi.Input['IpAclProtocol']] = None,
                 mac_acl_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 specific_enforcers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 traffic_destination: Optional[pulumi.Input[Union['AclRuleTrafficEndpointDtoArgs', 'AclRuleTrafficEndpointDtoArgsDict']]] = None,
                 traffic_source: Optional[pulumi.Input[Union['AclRuleTrafficEndpointDtoArgs', 'AclRuleTrafficEndpointDtoArgsDict']]] = None,
                 type: Optional[pulumi.Input['Type']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AclRuleArgs.__new__(AclRuleArgs)

            __props__.__dict__["id"] = id
            if acl_index is None and not opts.urn:
                raise TypeError("Missing required property 'acl_index'")
            __props__.__dict__["acl_index"] = acl_index
            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["ip_acl_protocol"] = ip_acl_protocol
            __props__.__dict__["mac_acl_network_id"] = mac_acl_network_id
            __props__.__dict__["name"] = name
            __props__.__dict__["site_name"] = site_name
            if specific_enforcers is None and not opts.urn:
                raise TypeError("Missing required property 'specific_enforcers'")
            __props__.__dict__["specific_enforcers"] = specific_enforcers
            if traffic_destination is None and not opts.urn:
                raise TypeError("Missing required property 'traffic_destination'")
            __props__.__dict__["traffic_destination"] = traffic_destination
            if traffic_source is None and not opts.urn:
                raise TypeError("Missing required property 'traffic_source'")
            __props__.__dict__["traffic_source"] = traffic_source
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(AclRule, __self__).__init__(
            'unifi-native:acl-rules:AclRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AclRule':
        """
        Get an existing AclRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AclRuleArgs.__new__(AclRuleArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["acl_index"] = None
        __props__.__dict__["action"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["ip_acl_protocol"] = None
        __props__.__dict__["mac_acl_network_id"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["specific_enforcers"] = None
        __props__.__dict__["traffic_destination"] = None
        __props__.__dict__["traffic_source"] = None
        __props__.__dict__["type"] = None
        return AclRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="aclIndex")
    def acl_index(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "acl_index")

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output['Action']:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ipAclProtocol")
    def ip_acl_protocol(self) -> pulumi.Output[Optional['IpAclProtocol']]:
        return pulumi.get(self, "ip_acl_protocol")

    @property
    @pulumi.getter(name="macAclNetworkId")
    def mac_acl_network_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "mac_acl_network_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="specificEnforcers")
    def specific_enforcers(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "specific_enforcers")

    @property
    @pulumi.getter(name="trafficDestination")
    def traffic_destination(self) -> pulumi.Output['outputs.AclRuleTrafficEndpointDto']:
        return pulumi.get(self, "traffic_destination")

    @property
    @pulumi.getter(name="trafficSource")
    def traffic_source(self) -> pulumi.Output['outputs.AclRuleTrafficEndpointDto']:
        return pulumi.get(self, "traffic_source")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output['Type']:
        return pulumi.get(self, "type")

