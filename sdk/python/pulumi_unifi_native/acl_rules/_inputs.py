# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'AclRuleTrafficEndpointDtoArgs',
    'AclRuleTrafficEndpointDtoArgsDict',
]

MYPY = False

if not MYPY:
    class AclRuleTrafficEndpointDtoArgsDict(TypedDict):
        type: pulumi.Input['AclRuleTrafficEndpointDtoType']
        ips_or_subnets: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        mac_mask: NotRequired[pulumi.Input[builtins.str]]
        network_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        ports: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]
        specific_mac_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    AclRuleTrafficEndpointDtoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AclRuleTrafficEndpointDtoArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['AclRuleTrafficEndpointDtoType'],
                 ips_or_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 mac_mask: Optional[pulumi.Input[builtins.str]] = None,
                 network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 specific_mac_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        pulumi.set(__self__, "type", type)
        if ips_or_subnets is not None:
            pulumi.set(__self__, "ips_or_subnets", ips_or_subnets)
        if mac_mask is not None:
            pulumi.set(__self__, "mac_mask", mac_mask)
        if network_ids is not None:
            pulumi.set(__self__, "network_ids", network_ids)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if specific_mac_addresses is not None:
            pulumi.set(__self__, "specific_mac_addresses", specific_mac_addresses)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['AclRuleTrafficEndpointDtoType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['AclRuleTrafficEndpointDtoType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="ipsOrSubnets")
    def ips_or_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "ips_or_subnets")

    @ips_or_subnets.setter
    def ips_or_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ips_or_subnets", value)

    @property
    @pulumi.getter(name="macMask")
    def mac_mask(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "mac_mask")

    @mac_mask.setter
    def mac_mask(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mac_mask", value)

    @property
    @pulumi.getter(name="networkIds")
    def network_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "network_ids")

    @network_ids.setter
    def network_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "network_ids", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="specificMacAddresses")
    def specific_mac_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "specific_mac_addresses")

    @specific_mac_addresses.setter
    def specific_mac_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "specific_mac_addresses", value)


