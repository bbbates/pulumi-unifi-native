# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AclRuleDto',
    'AclRuleTrafficEndpointDto',
]

@pulumi.output_type
class AclRuleDto(dict):
    def __init__(__self__, *,
                 acl_index: builtins.int,
                 action: 'AclRuleDtoAction',
                 specific_enforcers: Sequence[builtins.str],
                 traffic_destination: 'outputs.AclRuleTrafficEndpointDto',
                 traffic_source: 'outputs.AclRuleTrafficEndpointDto',
                 type: 'AclRuleDtoType',
                 id: Optional[builtins.str] = None,
                 description: Optional[builtins.str] = None,
                 enabled: Optional[builtins.bool] = None,
                 ip_acl_protocol: Optional['AclRuleDtoIpAclProtocol'] = None,
                 mac_acl_network_id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None):
        pulumi.set(__self__, "acl_index", acl_index)
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "specific_enforcers", specific_enforcers)
        pulumi.set(__self__, "traffic_destination", traffic_destination)
        pulumi.set(__self__, "traffic_source", traffic_source)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ip_acl_protocol is not None:
            pulumi.set(__self__, "ip_acl_protocol", ip_acl_protocol)
        if mac_acl_network_id is not None:
            pulumi.set(__self__, "mac_acl_network_id", mac_acl_network_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="aclIndex")
    def acl_index(self) -> builtins.int:
        return pulumi.get(self, "acl_index")

    @property
    @pulumi.getter
    def action(self) -> 'AclRuleDtoAction':
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="specificEnforcers")
    def specific_enforcers(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "specific_enforcers")

    @property
    @pulumi.getter(name="trafficDestination")
    def traffic_destination(self) -> 'outputs.AclRuleTrafficEndpointDto':
        return pulumi.get(self, "traffic_destination")

    @property
    @pulumi.getter(name="trafficSource")
    def traffic_source(self) -> 'outputs.AclRuleTrafficEndpointDto':
        return pulumi.get(self, "traffic_source")

    @property
    @pulumi.getter
    def type(self) -> 'AclRuleDtoType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ipAclProtocol")
    def ip_acl_protocol(self) -> Optional['AclRuleDtoIpAclProtocol']:
        return pulumi.get(self, "ip_acl_protocol")

    @property
    @pulumi.getter(name="macAclNetworkId")
    def mac_acl_network_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac_acl_network_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class AclRuleTrafficEndpointDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipsOrSubnets":
            suggest = "ips_or_subnets"
        elif key == "macMask":
            suggest = "mac_mask"
        elif key == "networkIds":
            suggest = "network_ids"
        elif key == "specificMacAddresses":
            suggest = "specific_mac_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AclRuleTrafficEndpointDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AclRuleTrafficEndpointDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AclRuleTrafficEndpointDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: 'AclRuleTrafficEndpointDtoType',
                 ips_or_subnets: Optional[Sequence[builtins.str]] = None,
                 mac_mask: Optional[builtins.str] = None,
                 network_ids: Optional[Sequence[builtins.str]] = None,
                 ports: Optional[Sequence[builtins.int]] = None,
                 specific_mac_addresses: Optional[Sequence[builtins.str]] = None):
        pulumi.set(__self__, "type", type)
        if ips_or_subnets is not None:
            pulumi.set(__self__, "ips_or_subnets", ips_or_subnets)
        if mac_mask is not None:
            pulumi.set(__self__, "mac_mask", mac_mask)
        if network_ids is not None:
            pulumi.set(__self__, "network_ids", network_ids)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if specific_mac_addresses is not None:
            pulumi.set(__self__, "specific_mac_addresses", specific_mac_addresses)

    @property
    @pulumi.getter
    def type(self) -> 'AclRuleTrafficEndpointDtoType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="ipsOrSubnets")
    def ips_or_subnets(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "ips_or_subnets")

    @property
    @pulumi.getter(name="macMask")
    def mac_mask(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac_mask")

    @property
    @pulumi.getter(name="networkIds")
    def network_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "network_ids")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="specificMacAddresses")
    def specific_mac_addresses(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "specific_mac_addresses")


