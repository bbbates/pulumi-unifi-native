# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'SettingDohCustomServersArgs',
    'SettingDohCustomServersArgsDict',
]

MYPY = False

if not MYPY:
    class SettingDohCustomServersArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[builtins.bool]]
        sdns_stamp: NotRequired[pulumi.Input[builtins.str]]
        server_name: NotRequired[pulumi.Input[builtins.str]]
elif False:
    SettingDohCustomServersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingDohCustomServersArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 sdns_stamp: Optional[pulumi.Input[builtins.str]] = None,
                 server_name: Optional[pulumi.Input[builtins.str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if sdns_stamp is not None:
            pulumi.set(__self__, "sdns_stamp", sdns_stamp)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="sdnsStamp")
    def sdns_stamp(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "sdns_stamp")

    @sdns_stamp.setter
    def sdns_stamp(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sdns_stamp", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server_name", value)


