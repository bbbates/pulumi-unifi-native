# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 allow_insecure: Optional[pulumi.Input[builtins.bool]] = None,
                 api_host: Optional[pulumi.Input[builtins.str]] = None,
                 api_key: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[builtins.bool] allow_insecure: Implicitly trust the Unifi API server's TLS certificate. This is useful for testing, but should not be used in production.
        :param pulumi.Input[builtins.str] api_host: The URL Host name or IP Address for the Unifi API, e.g. 10.1.1.1.
        :param pulumi.Input[builtins.str] api_key: The Unifi API key.
        :param pulumi.Input[builtins.str] site_id: The Human readable Stack identifier (e.g. 'notDefault') for the Unifi site to manage. Defaults to 'default'
        """
        if allow_insecure is None:
            allow_insecure = _utilities.get_env_bool('UNIFI_ALLOW_INSECURE')
        if allow_insecure is not None:
            pulumi.set(__self__, "allow_insecure", allow_insecure)
        if api_host is None:
            api_host = _utilities.get_env('UNIFI_API_HOST')
        if api_host is not None:
            pulumi.set(__self__, "api_host", api_host)
        if api_key is None:
            api_key = _utilities.get_env('UNIFI_APIKEY')
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if site_id is None:
            site_id = (_utilities.get_env('UNIFI_SITE') or 'default')
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)

    @property
    @pulumi.getter(name="allowInsecure")
    def allow_insecure(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Implicitly trust the Unifi API server's TLS certificate. This is useful for testing, but should not be used in production.
        """
        return pulumi.get(self, "allow_insecure")

    @allow_insecure.setter
    def allow_insecure(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_insecure", value)

    @property
    @pulumi.getter(name="apiHost")
    def api_host(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The URL Host name or IP Address for the Unifi API, e.g. 10.1.1.1.
        """
        return pulumi.get(self, "api_host")

    @api_host.setter
    def api_host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "api_host", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Unifi API key.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Human readable Stack identifier (e.g. 'notDefault') for the Unifi site to manage. Defaults to 'default'
        """
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)


@pulumi.type_token("pulumi:providers:unifi-native")
class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_insecure: Optional[pulumi.Input[builtins.bool]] = None,
                 api_host: Optional[pulumi.Input[builtins.str]] = None,
                 api_key: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        The provider type for the Unifi package.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] allow_insecure: Implicitly trust the Unifi API server's TLS certificate. This is useful for testing, but should not be used in production.
        :param pulumi.Input[builtins.str] api_host: The URL Host name or IP Address for the Unifi API, e.g. 10.1.1.1.
        :param pulumi.Input[builtins.str] api_key: The Unifi API key.
        :param pulumi.Input[builtins.str] site_id: The Human readable Stack identifier (e.g. 'notDefault') for the Unifi site to manage. Defaults to 'default'
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the Unifi package.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_insecure: Optional[pulumi.Input[builtins.bool]] = None,
                 api_host: Optional[pulumi.Input[builtins.str]] = None,
                 api_key: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if allow_insecure is None:
                allow_insecure = _utilities.get_env_bool('UNIFI_ALLOW_INSECURE')
            __props__.__dict__["allow_insecure"] = pulumi.Output.from_input(allow_insecure).apply(pulumi.runtime.to_json) if allow_insecure is not None else None
            if api_host is None:
                api_host = _utilities.get_env('UNIFI_API_HOST')
            __props__.__dict__["api_host"] = api_host
            if api_key is None:
                api_key = _utilities.get_env('UNIFI_APIKEY')
            __props__.__dict__["api_key"] = None if api_key is None else pulumi.Output.secret(api_key)
            if site_id is None:
                site_id = (_utilities.get_env('UNIFI_SITE') or 'default')
            __props__.__dict__["site_id"] = site_id
        super(Provider, __self__).__init__(
            'unifi-native',
            resource_name,
            __props__,
            opts)

