# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetSettingResult',
    'AwaitableGetSettingResult',
    'get_setting',
    'get_setting_output',
]

@pulumi.output_type
class GetSettingResult:
    def __init__(__self__, auto_upgrade=None, auto_upgrade_hour=None, direct_connect_enabled=None, direct_connect_supported=None):
        if auto_upgrade and not isinstance(auto_upgrade, bool):
            raise TypeError("Expected argument 'auto_upgrade' to be a bool")
        pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        if auto_upgrade_hour and not isinstance(auto_upgrade_hour, int):
            raise TypeError("Expected argument 'auto_upgrade_hour' to be a int")
        pulumi.set(__self__, "auto_upgrade_hour", auto_upgrade_hour)
        if direct_connect_enabled and not isinstance(direct_connect_enabled, bool):
            raise TypeError("Expected argument 'direct_connect_enabled' to be a bool")
        pulumi.set(__self__, "direct_connect_enabled", direct_connect_enabled)
        if direct_connect_supported and not isinstance(direct_connect_supported, bool):
            raise TypeError("Expected argument 'direct_connect_supported' to be a bool")
        pulumi.set(__self__, "direct_connect_supported", direct_connect_supported)

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "auto_upgrade")

    @property
    @pulumi.getter(name="autoUpgradeHour")
    def auto_upgrade_hour(self) -> Optional[builtins.int]:
        return pulumi.get(self, "auto_upgrade_hour")

    @property
    @pulumi.getter(name="directConnectEnabled")
    def direct_connect_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "direct_connect_enabled")

    @property
    @pulumi.getter(name="directConnectSupported")
    def direct_connect_supported(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "direct_connect_supported")


class AwaitableGetSettingResult(GetSettingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSettingResult(
            auto_upgrade=self.auto_upgrade,
            auto_upgrade_hour=self.auto_upgrade_hour,
            direct_connect_enabled=self.direct_connect_enabled,
            direct_connect_supported=self.direct_connect_supported)


def get_setting(site_name: Optional[builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSettingResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:mgmt:getSetting', __args__, opts=opts, typ=GetSettingResult).value

    return AwaitableGetSettingResult(
        auto_upgrade=pulumi.get(__ret__, 'auto_upgrade'),
        auto_upgrade_hour=pulumi.get(__ret__, 'auto_upgrade_hour'),
        direct_connect_enabled=pulumi.get(__ret__, 'direct_connect_enabled'),
        direct_connect_supported=pulumi.get(__ret__, 'direct_connect_supported'))
def get_setting_output(site_name: Optional[pulumi.Input[builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSettingResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:mgmt:getSetting', __args__, opts=opts, typ=GetSettingResult)
    return __ret__.apply(lambda __response__: GetSettingResult(
        auto_upgrade=pulumi.get(__response__, 'auto_upgrade'),
        auto_upgrade_hour=pulumi.get(__response__, 'auto_upgrade_hour'),
        direct_connect_enabled=pulumi.get(__response__, 'direct_connect_enabled'),
        direct_connect_supported=pulumi.get(__response__, 'direct_connect_supported')))
