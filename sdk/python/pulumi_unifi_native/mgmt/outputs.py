# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'Meta',
    'SettingMgmt',
    'SettingMgmtXSshKeys',
]

@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


@pulumi.output_type
class SettingMgmt(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 advanced_feature_enabled: Optional[builtins.bool] = None,
                 alert_enabled: Optional[builtins.bool] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 auto_upgrade: Optional[builtins.bool] = None,
                 auto_upgrade_hour: Optional[builtins.int] = None,
                 boot_sound: Optional[builtins.bool] = None,
                 debug_tools_enabled: Optional[builtins.bool] = None,
                 direct_connect_enabled: Optional[builtins.bool] = None,
                 key: Optional[builtins.str] = None,
                 led_enabled: Optional[builtins.bool] = None,
                 outdoor_mode_enabled: Optional[builtins.bool] = None,
                 site_id: Optional[builtins.str] = None,
                 unifi_idp_enabled: Optional[builtins.bool] = None,
                 wifiman_enabled: Optional[builtins.bool] = None,
                 x_mgmt_key: Optional[builtins.str] = None,
                 x_ssh_auth_password_enabled: Optional[builtins.bool] = None,
                 x_ssh_bind_wildcard: Optional[builtins.bool] = None,
                 x_ssh_enabled: Optional[builtins.bool] = None,
                 x_ssh_keys: Optional[Sequence['outputs.SettingMgmtXSshKeys']] = None,
                 x_ssh_md5passwd: Optional[builtins.str] = None,
                 x_ssh_password: Optional[builtins.str] = None,
                 x_ssh_sha512passwd: Optional[builtins.str] = None,
                 x_ssh_username: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if advanced_feature_enabled is not None:
            pulumi.set(__self__, "advanced_feature_enabled", advanced_feature_enabled)
        if alert_enabled is not None:
            pulumi.set(__self__, "alert_enabled", alert_enabled)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if auto_upgrade is not None:
            pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        if auto_upgrade_hour is not None:
            pulumi.set(__self__, "auto_upgrade_hour", auto_upgrade_hour)
        if boot_sound is not None:
            pulumi.set(__self__, "boot_sound", boot_sound)
        if debug_tools_enabled is not None:
            pulumi.set(__self__, "debug_tools_enabled", debug_tools_enabled)
        if direct_connect_enabled is not None:
            pulumi.set(__self__, "direct_connect_enabled", direct_connect_enabled)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if led_enabled is not None:
            pulumi.set(__self__, "led_enabled", led_enabled)
        if outdoor_mode_enabled is not None:
            pulumi.set(__self__, "outdoor_mode_enabled", outdoor_mode_enabled)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if unifi_idp_enabled is not None:
            pulumi.set(__self__, "unifi_idp_enabled", unifi_idp_enabled)
        if wifiman_enabled is not None:
            pulumi.set(__self__, "wifiman_enabled", wifiman_enabled)
        if x_mgmt_key is not None:
            pulumi.set(__self__, "x_mgmt_key", x_mgmt_key)
        if x_ssh_auth_password_enabled is not None:
            pulumi.set(__self__, "x_ssh_auth_password_enabled", x_ssh_auth_password_enabled)
        if x_ssh_bind_wildcard is not None:
            pulumi.set(__self__, "x_ssh_bind_wildcard", x_ssh_bind_wildcard)
        if x_ssh_enabled is not None:
            pulumi.set(__self__, "x_ssh_enabled", x_ssh_enabled)
        if x_ssh_keys is not None:
            pulumi.set(__self__, "x_ssh_keys", x_ssh_keys)
        if x_ssh_md5passwd is not None:
            pulumi.set(__self__, "x_ssh_md5passwd", x_ssh_md5passwd)
        if x_ssh_password is not None:
            pulumi.set(__self__, "x_ssh_password", x_ssh_password)
        if x_ssh_sha512passwd is not None:
            pulumi.set(__self__, "x_ssh_sha512passwd", x_ssh_sha512passwd)
        if x_ssh_username is not None:
            pulumi.set(__self__, "x_ssh_username", x_ssh_username)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="advancedFeatureEnabled")
    def advanced_feature_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "advanced_feature_enabled")

    @property
    @pulumi.getter(name="alertEnabled")
    def alert_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "alert_enabled")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "auto_upgrade")

    @property
    @pulumi.getter(name="autoUpgradeHour")
    def auto_upgrade_hour(self) -> Optional[builtins.int]:
        return pulumi.get(self, "auto_upgrade_hour")

    @property
    @pulumi.getter(name="bootSound")
    def boot_sound(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "boot_sound")

    @property
    @pulumi.getter(name="debugToolsEnabled")
    def debug_tools_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "debug_tools_enabled")

    @property
    @pulumi.getter(name="directConnectEnabled")
    def direct_connect_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "direct_connect_enabled")

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="ledEnabled")
    def led_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "led_enabled")

    @property
    @pulumi.getter(name="outdoorModeEnabled")
    def outdoor_mode_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "outdoor_mode_enabled")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="unifiIdpEnabled")
    def unifi_idp_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "unifi_idp_enabled")

    @property
    @pulumi.getter(name="wifimanEnabled")
    def wifiman_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "wifiman_enabled")

    @property
    @pulumi.getter(name="xMgmtKey")
    def x_mgmt_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_mgmt_key")

    @property
    @pulumi.getter(name="xSshAuthPasswordEnabled")
    def x_ssh_auth_password_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "x_ssh_auth_password_enabled")

    @property
    @pulumi.getter(name="xSshBindWildcard")
    def x_ssh_bind_wildcard(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "x_ssh_bind_wildcard")

    @property
    @pulumi.getter(name="xSshEnabled")
    def x_ssh_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "x_ssh_enabled")

    @property
    @pulumi.getter(name="xSshKeys")
    def x_ssh_keys(self) -> Optional[Sequence['outputs.SettingMgmtXSshKeys']]:
        return pulumi.get(self, "x_ssh_keys")

    @property
    @pulumi.getter(name="xSshMd5passwd")
    def x_ssh_md5passwd(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_ssh_md5passwd")

    @property
    @pulumi.getter(name="xSshPassword")
    def x_ssh_password(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_ssh_password")

    @property
    @pulumi.getter(name="xSshSha512passwd")
    def x_ssh_sha512passwd(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_ssh_sha512passwd")

    @property
    @pulumi.getter(name="xSshUsername")
    def x_ssh_username(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_ssh_username")


@pulumi.output_type
class SettingMgmtXSshKeys(dict):
    def __init__(__self__, *,
                 comment: Optional[builtins.str] = None,
                 date: Optional[builtins.str] = None,
                 fingerprint: Optional[builtins.str] = None,
                 key: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[builtins.str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def date(self) -> Optional[builtins.str]:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[builtins.str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")


