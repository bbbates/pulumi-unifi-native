# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SettingMgmtArgs', 'SettingMgmt']

@pulumi.input_type
class SettingMgmtArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 _x_ssh_md5passwd: Optional[pulumi.Input[builtins.str]] = None,
                 _x_ssh_sha512passwd: Optional[pulumi.Input[builtins.str]] = None,
                 advanced_feature_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 alert_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_upgrade: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_upgrade_hour: Optional[pulumi.Input[builtins.int]] = None,
                 boot_sound: Optional[pulumi.Input[builtins.bool]] = None,
                 debug_tools_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 direct_connect_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 led_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 outdoor_mode_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 unifi_idp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wifiman_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 x_mgmt_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_ssh_auth_password_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 x_ssh_bind_wildcard: Optional[pulumi.Input[builtins.bool]] = None,
                 x_ssh_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 x_ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input['SettingMgmtXSshKeysArgs']]]] = None,
                 x_ssh_password: Optional[pulumi.Input[builtins.str]] = None,
                 x_ssh_username: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a SettingMgmt resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if _x_ssh_md5passwd is not None:
            pulumi.set(__self__, "_x_ssh_md5passwd", _x_ssh_md5passwd)
        if _x_ssh_sha512passwd is not None:
            pulumi.set(__self__, "_x_ssh_sha512passwd", _x_ssh_sha512passwd)
        if advanced_feature_enabled is not None:
            pulumi.set(__self__, "advanced_feature_enabled", advanced_feature_enabled)
        if alert_enabled is not None:
            pulumi.set(__self__, "alert_enabled", alert_enabled)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if auto_upgrade is not None:
            pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        if auto_upgrade_hour is not None:
            pulumi.set(__self__, "auto_upgrade_hour", auto_upgrade_hour)
        if boot_sound is not None:
            pulumi.set(__self__, "boot_sound", boot_sound)
        if debug_tools_enabled is not None:
            pulumi.set(__self__, "debug_tools_enabled", debug_tools_enabled)
        if direct_connect_enabled is not None:
            pulumi.set(__self__, "direct_connect_enabled", direct_connect_enabled)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if led_enabled is not None:
            pulumi.set(__self__, "led_enabled", led_enabled)
        if outdoor_mode_enabled is not None:
            pulumi.set(__self__, "outdoor_mode_enabled", outdoor_mode_enabled)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if unifi_idp_enabled is not None:
            pulumi.set(__self__, "unifi_idp_enabled", unifi_idp_enabled)
        if wifiman_enabled is not None:
            pulumi.set(__self__, "wifiman_enabled", wifiman_enabled)
        if x_mgmt_key is not None:
            pulumi.set(__self__, "x_mgmt_key", x_mgmt_key)
        if x_ssh_auth_password_enabled is not None:
            pulumi.set(__self__, "x_ssh_auth_password_enabled", x_ssh_auth_password_enabled)
        if x_ssh_bind_wildcard is not None:
            pulumi.set(__self__, "x_ssh_bind_wildcard", x_ssh_bind_wildcard)
        if x_ssh_enabled is not None:
            pulumi.set(__self__, "x_ssh_enabled", x_ssh_enabled)
        if x_ssh_keys is not None:
            pulumi.set(__self__, "x_ssh_keys", x_ssh_keys)
        if x_ssh_password is not None:
            pulumi.set(__self__, "x_ssh_password", x_ssh_password)
        if x_ssh_username is not None:
            pulumi.set(__self__, "x_ssh_username", x_ssh_username)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="_xSshMd5passwd")
    def _x_ssh_md5passwd(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "_x_ssh_md5passwd")

    @_x_ssh_md5passwd.setter
    def _x_ssh_md5passwd(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "_x_ssh_md5passwd", value)

    @property
    @pulumi.getter(name="_xSshSha512passwd")
    def _x_ssh_sha512passwd(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "_x_ssh_sha512passwd")

    @_x_ssh_sha512passwd.setter
    def _x_ssh_sha512passwd(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "_x_ssh_sha512passwd", value)

    @property
    @pulumi.getter(name="advancedFeatureEnabled")
    def advanced_feature_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "advanced_feature_enabled")

    @advanced_feature_enabled.setter
    def advanced_feature_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "advanced_feature_enabled", value)

    @property
    @pulumi.getter(name="alertEnabled")
    def alert_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "alert_enabled")

    @alert_enabled.setter
    def alert_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "alert_enabled", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "auto_upgrade")

    @auto_upgrade.setter
    def auto_upgrade(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "auto_upgrade", value)

    @property
    @pulumi.getter(name="autoUpgradeHour")
    def auto_upgrade_hour(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "auto_upgrade_hour")

    @auto_upgrade_hour.setter
    def auto_upgrade_hour(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "auto_upgrade_hour", value)

    @property
    @pulumi.getter(name="bootSound")
    def boot_sound(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "boot_sound")

    @boot_sound.setter
    def boot_sound(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "boot_sound", value)

    @property
    @pulumi.getter(name="debugToolsEnabled")
    def debug_tools_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "debug_tools_enabled")

    @debug_tools_enabled.setter
    def debug_tools_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "debug_tools_enabled", value)

    @property
    @pulumi.getter(name="directConnectEnabled")
    def direct_connect_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "direct_connect_enabled")

    @direct_connect_enabled.setter
    def direct_connect_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "direct_connect_enabled", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="ledEnabled")
    def led_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "led_enabled")

    @led_enabled.setter
    def led_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "led_enabled", value)

    @property
    @pulumi.getter(name="outdoorModeEnabled")
    def outdoor_mode_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "outdoor_mode_enabled")

    @outdoor_mode_enabled.setter
    def outdoor_mode_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "outdoor_mode_enabled", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="unifiIdpEnabled")
    def unifi_idp_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "unifi_idp_enabled")

    @unifi_idp_enabled.setter
    def unifi_idp_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "unifi_idp_enabled", value)

    @property
    @pulumi.getter(name="wifimanEnabled")
    def wifiman_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "wifiman_enabled")

    @wifiman_enabled.setter
    def wifiman_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "wifiman_enabled", value)

    @property
    @pulumi.getter(name="xMgmtKey")
    def x_mgmt_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_mgmt_key")

    @x_mgmt_key.setter
    def x_mgmt_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_mgmt_key", value)

    @property
    @pulumi.getter(name="xSshAuthPasswordEnabled")
    def x_ssh_auth_password_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "x_ssh_auth_password_enabled")

    @x_ssh_auth_password_enabled.setter
    def x_ssh_auth_password_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "x_ssh_auth_password_enabled", value)

    @property
    @pulumi.getter(name="xSshBindWildcard")
    def x_ssh_bind_wildcard(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "x_ssh_bind_wildcard")

    @x_ssh_bind_wildcard.setter
    def x_ssh_bind_wildcard(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "x_ssh_bind_wildcard", value)

    @property
    @pulumi.getter(name="xSshEnabled")
    def x_ssh_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "x_ssh_enabled")

    @x_ssh_enabled.setter
    def x_ssh_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "x_ssh_enabled", value)

    @property
    @pulumi.getter(name="xSshKeys")
    def x_ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingMgmtXSshKeysArgs']]]]:
        return pulumi.get(self, "x_ssh_keys")

    @x_ssh_keys.setter
    def x_ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingMgmtXSshKeysArgs']]]]):
        pulumi.set(self, "x_ssh_keys", value)

    @property
    @pulumi.getter(name="xSshPassword")
    def x_ssh_password(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_ssh_password")

    @x_ssh_password.setter
    def x_ssh_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_ssh_password", value)

    @property
    @pulumi.getter(name="xSshUsername")
    def x_ssh_username(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_ssh_username")

    @x_ssh_username.setter
    def x_ssh_username(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_ssh_username", value)


@pulumi.type_token("unifi-native:mgmt:SettingMgmt")
class SettingMgmt(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 _x_ssh_md5passwd: Optional[pulumi.Input[builtins.str]] = None,
                 _x_ssh_sha512passwd: Optional[pulumi.Input[builtins.str]] = None,
                 advanced_feature_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 alert_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_upgrade: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_upgrade_hour: Optional[pulumi.Input[builtins.int]] = None,
                 boot_sound: Optional[pulumi.Input[builtins.bool]] = None,
                 debug_tools_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 direct_connect_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 led_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 outdoor_mode_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 unifi_idp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wifiman_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 x_mgmt_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_ssh_auth_password_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 x_ssh_bind_wildcard: Optional[pulumi.Input[builtins.bool]] = None,
                 x_ssh_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 x_ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingMgmtXSshKeysArgs', 'SettingMgmtXSshKeysArgsDict']]]]] = None,
                 x_ssh_password: Optional[pulumi.Input[builtins.str]] = None,
                 x_ssh_username: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a SettingMgmt resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SettingMgmtArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SettingMgmt resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SettingMgmtArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingMgmtArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 _x_ssh_md5passwd: Optional[pulumi.Input[builtins.str]] = None,
                 _x_ssh_sha512passwd: Optional[pulumi.Input[builtins.str]] = None,
                 advanced_feature_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 alert_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_upgrade: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_upgrade_hour: Optional[pulumi.Input[builtins.int]] = None,
                 boot_sound: Optional[pulumi.Input[builtins.bool]] = None,
                 debug_tools_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 direct_connect_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 led_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 outdoor_mode_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 unifi_idp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wifiman_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 x_mgmt_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_ssh_auth_password_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 x_ssh_bind_wildcard: Optional[pulumi.Input[builtins.bool]] = None,
                 x_ssh_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 x_ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingMgmtXSshKeysArgs', 'SettingMgmtXSshKeysArgsDict']]]]] = None,
                 x_ssh_password: Optional[pulumi.Input[builtins.str]] = None,
                 x_ssh_username: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingMgmtArgs.__new__(SettingMgmtArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["_x_ssh_md5passwd"] = _x_ssh_md5passwd
            __props__.__dict__["_x_ssh_sha512passwd"] = _x_ssh_sha512passwd
            __props__.__dict__["advanced_feature_enabled"] = advanced_feature_enabled
            __props__.__dict__["alert_enabled"] = alert_enabled
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["auto_upgrade"] = auto_upgrade
            __props__.__dict__["auto_upgrade_hour"] = auto_upgrade_hour
            __props__.__dict__["boot_sound"] = boot_sound
            __props__.__dict__["debug_tools_enabled"] = debug_tools_enabled
            __props__.__dict__["direct_connect_enabled"] = direct_connect_enabled
            __props__.__dict__["key"] = key
            __props__.__dict__["led_enabled"] = led_enabled
            __props__.__dict__["outdoor_mode_enabled"] = outdoor_mode_enabled
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["unifi_idp_enabled"] = unifi_idp_enabled
            __props__.__dict__["wifiman_enabled"] = wifiman_enabled
            __props__.__dict__["x_mgmt_key"] = x_mgmt_key
            __props__.__dict__["x_ssh_auth_password_enabled"] = x_ssh_auth_password_enabled
            __props__.__dict__["x_ssh_bind_wildcard"] = x_ssh_bind_wildcard
            __props__.__dict__["x_ssh_enabled"] = x_ssh_enabled
            __props__.__dict__["x_ssh_keys"] = x_ssh_keys
            __props__.__dict__["x_ssh_password"] = x_ssh_password
            __props__.__dict__["x_ssh_username"] = x_ssh_username
        super(SettingMgmt, __self__).__init__(
            'unifi-native:mgmt:SettingMgmt',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SettingMgmt':
        """
        Get an existing SettingMgmt resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SettingMgmtArgs.__new__(SettingMgmtArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["_x_ssh_md5passwd"] = None
        __props__.__dict__["_x_ssh_sha512passwd"] = None
        __props__.__dict__["advanced_feature_enabled"] = None
        __props__.__dict__["alert_enabled"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["auto_upgrade"] = None
        __props__.__dict__["auto_upgrade_hour"] = None
        __props__.__dict__["boot_sound"] = None
        __props__.__dict__["debug_tools_enabled"] = None
        __props__.__dict__["direct_connect_enabled"] = None
        __props__.__dict__["key"] = None
        __props__.__dict__["led_enabled"] = None
        __props__.__dict__["outdoor_mode_enabled"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["unifi_idp_enabled"] = None
        __props__.__dict__["wifiman_enabled"] = None
        __props__.__dict__["x_mgmt_key"] = None
        __props__.__dict__["x_ssh_auth_password_enabled"] = None
        __props__.__dict__["x_ssh_bind_wildcard"] = None
        __props__.__dict__["x_ssh_enabled"] = None
        __props__.__dict__["x_ssh_keys"] = None
        __props__.__dict__["x_ssh_password"] = None
        __props__.__dict__["x_ssh_username"] = None
        return SettingMgmt(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="_xSshMd5passwd")
    def _x_ssh_md5passwd(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "_x_ssh_md5passwd")

    @property
    @pulumi.getter(name="_xSshSha512passwd")
    def _x_ssh_sha512passwd(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "_x_ssh_sha512passwd")

    @property
    @pulumi.getter(name="advancedFeatureEnabled")
    def advanced_feature_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "advanced_feature_enabled")

    @property
    @pulumi.getter(name="alertEnabled")
    def alert_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "alert_enabled")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "auto_upgrade")

    @property
    @pulumi.getter(name="autoUpgradeHour")
    def auto_upgrade_hour(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "auto_upgrade_hour")

    @property
    @pulumi.getter(name="bootSound")
    def boot_sound(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "boot_sound")

    @property
    @pulumi.getter(name="debugToolsEnabled")
    def debug_tools_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "debug_tools_enabled")

    @property
    @pulumi.getter(name="directConnectEnabled")
    def direct_connect_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "direct_connect_enabled")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="ledEnabled")
    def led_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "led_enabled")

    @property
    @pulumi.getter(name="outdoorModeEnabled")
    def outdoor_mode_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "outdoor_mode_enabled")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="unifiIdpEnabled")
    def unifi_idp_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "unifi_idp_enabled")

    @property
    @pulumi.getter(name="wifimanEnabled")
    def wifiman_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "wifiman_enabled")

    @property
    @pulumi.getter(name="xMgmtKey")
    def x_mgmt_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_mgmt_key")

    @property
    @pulumi.getter(name="xSshAuthPasswordEnabled")
    def x_ssh_auth_password_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "x_ssh_auth_password_enabled")

    @property
    @pulumi.getter(name="xSshBindWildcard")
    def x_ssh_bind_wildcard(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "x_ssh_bind_wildcard")

    @property
    @pulumi.getter(name="xSshEnabled")
    def x_ssh_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "x_ssh_enabled")

    @property
    @pulumi.getter(name="xSshKeys")
    def x_ssh_keys(self) -> pulumi.Output[Optional[Sequence['outputs.SettingMgmtXSshKeys']]]:
        return pulumi.get(self, "x_ssh_keys")

    @property
    @pulumi.getter(name="xSshPassword")
    def x_ssh_password(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_ssh_password")

    @property
    @pulumi.getter(name="xSshUsername")
    def x_ssh_username(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_ssh_username")

