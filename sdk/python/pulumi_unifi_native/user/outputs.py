# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'Meta',
    'User',
]

@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


@pulumi.output_type
class User(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 blocked: Optional[builtins.bool] = None,
                 dev_id_override: Optional[builtins.int] = None,
                 fixed_ap_enabled: Optional[builtins.bool] = None,
                 fixed_ap_mac: Optional[builtins.str] = None,
                 fixed_ip: Optional[builtins.str] = None,
                 hostname: Optional[builtins.str] = None,
                 ip: Optional[builtins.str] = None,
                 last_seen: Optional[builtins.int] = None,
                 local_dns_record: Optional[builtins.str] = None,
                 local_dns_record_enabled: Optional[builtins.bool] = None,
                 mac: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 network_id: Optional[builtins.str] = None,
                 note: Optional[builtins.str] = None,
                 site_id: Optional[builtins.str] = None,
                 use_fixedip: Optional[builtins.bool] = None,
                 usergroup_id: Optional[builtins.str] = None,
                 virtual_network_override_enabled: Optional[builtins.bool] = None,
                 virtual_network_override_id: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if blocked is not None:
            pulumi.set(__self__, "blocked", blocked)
        if dev_id_override is not None:
            pulumi.set(__self__, "dev_id_override", dev_id_override)
        if fixed_ap_enabled is not None:
            pulumi.set(__self__, "fixed_ap_enabled", fixed_ap_enabled)
        if fixed_ap_mac is not None:
            pulumi.set(__self__, "fixed_ap_mac", fixed_ap_mac)
        if fixed_ip is not None:
            pulumi.set(__self__, "fixed_ip", fixed_ip)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if last_seen is not None:
            pulumi.set(__self__, "last_seen", last_seen)
        if local_dns_record is not None:
            pulumi.set(__self__, "local_dns_record", local_dns_record)
        if local_dns_record_enabled is not None:
            pulumi.set(__self__, "local_dns_record_enabled", local_dns_record_enabled)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if use_fixedip is not None:
            pulumi.set(__self__, "use_fixedip", use_fixedip)
        if usergroup_id is not None:
            pulumi.set(__self__, "usergroup_id", usergroup_id)
        if virtual_network_override_enabled is not None:
            pulumi.set(__self__, "virtual_network_override_enabled", virtual_network_override_enabled)
        if virtual_network_override_id is not None:
            pulumi.set(__self__, "virtual_network_override_id", virtual_network_override_id)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter
    def blocked(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "blocked")

    @property
    @pulumi.getter(name="devIdOverride")
    def dev_id_override(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dev_id_override")

    @property
    @pulumi.getter(name="fixedApEnabled")
    def fixed_ap_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "fixed_ap_enabled")

    @property
    @pulumi.getter(name="fixedApMac")
    def fixed_ap_mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "fixed_ap_mac")

    @property
    @pulumi.getter(name="fixedIp")
    def fixed_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "fixed_ip")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[builtins.str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> Optional[builtins.int]:
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter(name="localDnsRecord")
    def local_dns_record(self) -> Optional[builtins.str]:
        return pulumi.get(self, "local_dns_record")

    @property
    @pulumi.getter(name="localDnsRecordEnabled")
    def local_dns_record_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "local_dns_record_enabled")

    @property
    @pulumi.getter
    def mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def note(self) -> Optional[builtins.str]:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="useFixedip")
    def use_fixedip(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "use_fixedip")

    @property
    @pulumi.getter(name="usergroupId")
    def usergroup_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "usergroup_id")

    @property
    @pulumi.getter(name="virtualNetworkOverrideEnabled")
    def virtual_network_override_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "virtual_network_override_enabled")

    @property
    @pulumi.getter(name="virtualNetworkOverrideId")
    def virtual_network_override_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "virtual_network_override_id")


