# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['StackingGroupArgs', 'StackingGroup']

@pulumi.input_type
class StackingGroupArgs:
    def __init__(__self__, *,
                 lag_groups: pulumi.Input[Sequence[pulumi.Input['StackingLagGroupDtoArgs']]],
                 links: pulumi.Input[Sequence[pulumi.Input['StackingLinkDtoArgs']]],
                 units: pulumi.Input[Sequence[pulumi.Input['StackingUnitDtoArgs']]],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a StackingGroup resource.
        """
        pulumi.set(__self__, "lag_groups", lag_groups)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "units", units)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)

    @property
    @pulumi.getter(name="lagGroups")
    def lag_groups(self) -> pulumi.Input[Sequence[pulumi.Input['StackingLagGroupDtoArgs']]]:
        return pulumi.get(self, "lag_groups")

    @lag_groups.setter
    def lag_groups(self, value: pulumi.Input[Sequence[pulumi.Input['StackingLagGroupDtoArgs']]]):
        pulumi.set(self, "lag_groups", value)

    @property
    @pulumi.getter
    def links(self) -> pulumi.Input[Sequence[pulumi.Input['StackingLinkDtoArgs']]]:
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: pulumi.Input[Sequence[pulumi.Input['StackingLinkDtoArgs']]]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def units(self) -> pulumi.Input[Sequence[pulumi.Input['StackingUnitDtoArgs']]]:
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: pulumi.Input[Sequence[pulumi.Input['StackingUnitDtoArgs']]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)


@pulumi.type_token("unifi-native:stacking:StackingGroup")
class StackingGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 lag_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StackingLagGroupDtoArgs', 'StackingLagGroupDtoArgsDict']]]]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StackingLinkDtoArgs', 'StackingLinkDtoArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 units: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StackingUnitDtoArgs', 'StackingUnitDtoArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a StackingGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StackingGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a StackingGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StackingGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StackingGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 lag_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StackingLagGroupDtoArgs', 'StackingLagGroupDtoArgsDict']]]]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StackingLinkDtoArgs', 'StackingLinkDtoArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 units: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StackingUnitDtoArgs', 'StackingUnitDtoArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StackingGroupArgs.__new__(StackingGroupArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["description"] = description
            if lag_groups is None and not opts.urn:
                raise TypeError("Missing required property 'lag_groups'")
            __props__.__dict__["lag_groups"] = lag_groups
            if links is None and not opts.urn:
                raise TypeError("Missing required property 'links'")
            __props__.__dict__["links"] = links
            __props__.__dict__["name"] = name
            __props__.__dict__["site_name"] = site_name
            if units is None and not opts.urn:
                raise TypeError("Missing required property 'units'")
            __props__.__dict__["units"] = units
        super(StackingGroup, __self__).__init__(
            'unifi-native:stacking:StackingGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'StackingGroup':
        """
        Get an existing StackingGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = StackingGroupArgs.__new__(StackingGroupArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["lag_groups"] = None
        __props__.__dict__["links"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["units"] = None
        return StackingGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="lagGroups")
    def lag_groups(self) -> pulumi.Output[Sequence['outputs.StackingLagGroupDto']]:
        return pulumi.get(self, "lag_groups")

    @property
    @pulumi.getter
    def links(self) -> pulumi.Output[Sequence['outputs.StackingLinkDto']]:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def units(self) -> pulumi.Output[Sequence['outputs.StackingUnitDto']]:
        return pulumi.get(self, "units")

