# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'NATRuleFilterArgs',
    'NATRuleFilterArgsDict',
]

MYPY = False

if not MYPY:
    class NATRuleFilterArgsDict(TypedDict):
        filter_type: pulumi.Input['NATRuleFilterFilterType']
        address: NotRequired[pulumi.Input[builtins.str]]
        firewall_group_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        invert_address: NotRequired[pulumi.Input[builtins.bool]]
        invert_port: NotRequired[pulumi.Input[builtins.bool]]
        network_conf_id: NotRequired[pulumi.Input[builtins.str]]
        port: NotRequired[pulumi.Input[builtins.str]]
elif False:
    NATRuleFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NATRuleFilterArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input['NATRuleFilterFilterType'],
                 address: Optional[pulumi.Input[builtins.str]] = None,
                 firewall_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 invert_address: Optional[pulumi.Input[builtins.bool]] = None,
                 invert_port: Optional[pulumi.Input[builtins.bool]] = None,
                 network_conf_id: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if firewall_group_ids is not None:
            pulumi.set(__self__, "firewall_group_ids", firewall_group_ids)
        if invert_address is not None:
            pulumi.set(__self__, "invert_address", invert_address)
        if invert_port is not None:
            pulumi.set(__self__, "invert_port", invert_port)
        if network_conf_id is not None:
            pulumi.set(__self__, "network_conf_id", network_conf_id)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input['NATRuleFilterFilterType']:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input['NATRuleFilterFilterType']):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="firewallGroupIds")
    def firewall_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "firewall_group_ids")

    @firewall_group_ids.setter
    def firewall_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "firewall_group_ids", value)

    @property
    @pulumi.getter(name="invertAddress")
    def invert_address(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "invert_address")

    @invert_address.setter
    def invert_address(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "invert_address", value)

    @property
    @pulumi.getter(name="invertPort")
    def invert_port(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "invert_port")

    @invert_port.setter
    def invert_port(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "invert_port", value)

    @property
    @pulumi.getter(name="networkConfId")
    def network_conf_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "network_conf_id")

    @network_conf_id.setter
    def network_conf_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "network_conf_id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "port", value)


