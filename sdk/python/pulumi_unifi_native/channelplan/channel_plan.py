# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ChannelPlanArgs', 'ChannelPlan']

@pulumi.input_type
class ChannelPlanArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 ap_blacklisted_channels: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelPlanApBlacklistedChannelsArgs']]]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 conf_source: Optional[pulumi.Input[builtins.str]] = None,
                 coupling: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelPlanCouplingArgs']]]] = None,
                 date: Optional[pulumi.Input[builtins.str]] = None,
                 fitness: Optional[pulumi.Input[builtins.float]] = None,
                 note: Optional[pulumi.Input[builtins.str]] = None,
                 radio: Optional[pulumi.Input[builtins.str]] = None,
                 radio_table: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelPlanRadioTableArgs']]]] = None,
                 satisfaction: Optional[pulumi.Input[builtins.float]] = None,
                 satisfaction_table: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelPlanSatisfactionTableArgs']]]] = None,
                 site_blacklisted_channels: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelPlanSiteBlacklistedChannelsArgs']]]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a ChannelPlan resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ap_blacklisted_channels is not None:
            pulumi.set(__self__, "ap_blacklisted_channels", ap_blacklisted_channels)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if conf_source is not None:
            pulumi.set(__self__, "conf_source", conf_source)
        if coupling is not None:
            pulumi.set(__self__, "coupling", coupling)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if fitness is not None:
            pulumi.set(__self__, "fitness", fitness)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if radio is not None:
            pulumi.set(__self__, "radio", radio)
        if radio_table is not None:
            pulumi.set(__self__, "radio_table", radio_table)
        if satisfaction is not None:
            pulumi.set(__self__, "satisfaction", satisfaction)
        if satisfaction_table is not None:
            pulumi.set(__self__, "satisfaction_table", satisfaction_table)
        if site_blacklisted_channels is not None:
            pulumi.set(__self__, "site_blacklisted_channels", site_blacklisted_channels)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="apBlacklistedChannels")
    def ap_blacklisted_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ChannelPlanApBlacklistedChannelsArgs']]]]:
        return pulumi.get(self, "ap_blacklisted_channels")

    @ap_blacklisted_channels.setter
    def ap_blacklisted_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelPlanApBlacklistedChannelsArgs']]]]):
        pulumi.set(self, "ap_blacklisted_channels", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter(name="confSource")
    def conf_source(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "conf_source")

    @conf_source.setter
    def conf_source(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "conf_source", value)

    @property
    @pulumi.getter
    def coupling(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ChannelPlanCouplingArgs']]]]:
        return pulumi.get(self, "coupling")

    @coupling.setter
    def coupling(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelPlanCouplingArgs']]]]):
        pulumi.set(self, "coupling", value)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def fitness(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "fitness")

    @fitness.setter
    def fitness(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "fitness", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter
    def radio(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "radio")

    @radio.setter
    def radio(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "radio", value)

    @property
    @pulumi.getter(name="radioTable")
    def radio_table(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ChannelPlanRadioTableArgs']]]]:
        return pulumi.get(self, "radio_table")

    @radio_table.setter
    def radio_table(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelPlanRadioTableArgs']]]]):
        pulumi.set(self, "radio_table", value)

    @property
    @pulumi.getter
    def satisfaction(self) -> Optional[pulumi.Input[builtins.float]]:
        return pulumi.get(self, "satisfaction")

    @satisfaction.setter
    def satisfaction(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "satisfaction", value)

    @property
    @pulumi.getter(name="satisfactionTable")
    def satisfaction_table(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ChannelPlanSatisfactionTableArgs']]]]:
        return pulumi.get(self, "satisfaction_table")

    @satisfaction_table.setter
    def satisfaction_table(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelPlanSatisfactionTableArgs']]]]):
        pulumi.set(self, "satisfaction_table", value)

    @property
    @pulumi.getter(name="siteBlacklistedChannels")
    def site_blacklisted_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ChannelPlanSiteBlacklistedChannelsArgs']]]]:
        return pulumi.get(self, "site_blacklisted_channels")

    @site_blacklisted_channels.setter
    def site_blacklisted_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ChannelPlanSiteBlacklistedChannelsArgs']]]]):
        pulumi.set(self, "site_blacklisted_channels", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)


@pulumi.type_token("unifi-native:channelplan:ChannelPlan")
class ChannelPlan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 ap_blacklisted_channels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChannelPlanApBlacklistedChannelsArgs', 'ChannelPlanApBlacklistedChannelsArgsDict']]]]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 conf_source: Optional[pulumi.Input[builtins.str]] = None,
                 coupling: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChannelPlanCouplingArgs', 'ChannelPlanCouplingArgsDict']]]]] = None,
                 date: Optional[pulumi.Input[builtins.str]] = None,
                 fitness: Optional[pulumi.Input[builtins.float]] = None,
                 note: Optional[pulumi.Input[builtins.str]] = None,
                 radio: Optional[pulumi.Input[builtins.str]] = None,
                 radio_table: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChannelPlanRadioTableArgs', 'ChannelPlanRadioTableArgsDict']]]]] = None,
                 satisfaction: Optional[pulumi.Input[builtins.float]] = None,
                 satisfaction_table: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChannelPlanSatisfactionTableArgs', 'ChannelPlanSatisfactionTableArgsDict']]]]] = None,
                 site_blacklisted_channels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChannelPlanSiteBlacklistedChannelsArgs', 'ChannelPlanSiteBlacklistedChannelsArgsDict']]]]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a ChannelPlan resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ChannelPlanArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ChannelPlan resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ChannelPlanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ChannelPlanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 ap_blacklisted_channels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChannelPlanApBlacklistedChannelsArgs', 'ChannelPlanApBlacklistedChannelsArgsDict']]]]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 conf_source: Optional[pulumi.Input[builtins.str]] = None,
                 coupling: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChannelPlanCouplingArgs', 'ChannelPlanCouplingArgsDict']]]]] = None,
                 date: Optional[pulumi.Input[builtins.str]] = None,
                 fitness: Optional[pulumi.Input[builtins.float]] = None,
                 note: Optional[pulumi.Input[builtins.str]] = None,
                 radio: Optional[pulumi.Input[builtins.str]] = None,
                 radio_table: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChannelPlanRadioTableArgs', 'ChannelPlanRadioTableArgsDict']]]]] = None,
                 satisfaction: Optional[pulumi.Input[builtins.float]] = None,
                 satisfaction_table: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChannelPlanSatisfactionTableArgs', 'ChannelPlanSatisfactionTableArgsDict']]]]] = None,
                 site_blacklisted_channels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ChannelPlanSiteBlacklistedChannelsArgs', 'ChannelPlanSiteBlacklistedChannelsArgsDict']]]]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ChannelPlanArgs.__new__(ChannelPlanArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["ap_blacklisted_channels"] = ap_blacklisted_channels
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["conf_source"] = conf_source
            __props__.__dict__["coupling"] = coupling
            __props__.__dict__["date"] = date
            __props__.__dict__["fitness"] = fitness
            __props__.__dict__["note"] = note
            __props__.__dict__["radio"] = radio
            __props__.__dict__["radio_table"] = radio_table
            __props__.__dict__["satisfaction"] = satisfaction
            __props__.__dict__["satisfaction_table"] = satisfaction_table
            __props__.__dict__["site_blacklisted_channels"] = site_blacklisted_channels
            __props__.__dict__["site_id"] = site_id
        super(ChannelPlan, __self__).__init__(
            'unifi-native:channelplan:ChannelPlan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ChannelPlan':
        """
        Get an existing ChannelPlan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ChannelPlanArgs.__new__(ChannelPlanArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["ap_blacklisted_channels"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["conf_source"] = None
        __props__.__dict__["coupling"] = None
        __props__.__dict__["date"] = None
        __props__.__dict__["fitness"] = None
        __props__.__dict__["note"] = None
        __props__.__dict__["radio"] = None
        __props__.__dict__["radio_table"] = None
        __props__.__dict__["satisfaction"] = None
        __props__.__dict__["satisfaction_table"] = None
        __props__.__dict__["site_blacklisted_channels"] = None
        __props__.__dict__["site_id"] = None
        return ChannelPlan(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="apBlacklistedChannels")
    def ap_blacklisted_channels(self) -> pulumi.Output[Optional[Sequence['outputs.ChannelPlanApBlacklistedChannels']]]:
        return pulumi.get(self, "ap_blacklisted_channels")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="confSource")
    def conf_source(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "conf_source")

    @property
    @pulumi.getter
    def coupling(self) -> pulumi.Output[Optional[Sequence['outputs.ChannelPlanCoupling']]]:
        return pulumi.get(self, "coupling")

    @property
    @pulumi.getter
    def date(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def fitness(self) -> pulumi.Output[Optional[builtins.float]]:
        return pulumi.get(self, "fitness")

    @property
    @pulumi.getter
    def note(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter
    def radio(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "radio")

    @property
    @pulumi.getter(name="radioTable")
    def radio_table(self) -> pulumi.Output[Optional[Sequence['outputs.ChannelPlanRadioTable']]]:
        return pulumi.get(self, "radio_table")

    @property
    @pulumi.getter
    def satisfaction(self) -> pulumi.Output[Optional[builtins.float]]:
        return pulumi.get(self, "satisfaction")

    @property
    @pulumi.getter(name="satisfactionTable")
    def satisfaction_table(self) -> pulumi.Output[Optional[Sequence['outputs.ChannelPlanSatisfactionTable']]]:
        return pulumi.get(self, "satisfaction_table")

    @property
    @pulumi.getter(name="siteBlacklistedChannels")
    def site_blacklisted_channels(self) -> pulumi.Output[Optional[Sequence['outputs.ChannelPlanSiteBlacklistedChannels']]]:
        return pulumi.get(self, "site_blacklisted_channels")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

