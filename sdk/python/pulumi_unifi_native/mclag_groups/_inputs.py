# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'LinkAggregationGroupPairDtoArgs',
    'LinkAggregationGroupPairDtoArgsDict',
    'McLagPeersDtoArgs',
    'McLagPeersDtoArgsDict',
]

MYPY = False

if not MYPY:
    class LinkAggregationGroupPairDtoArgsDict(TypedDict):
        bottom: pulumi.Input[Sequence[pulumi.Input[builtins.int]]]
        top: pulumi.Input[Sequence[pulumi.Input[builtins.int]]]
        mc_lag_index: NotRequired[pulumi.Input[builtins.int]]
elif False:
    LinkAggregationGroupPairDtoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LinkAggregationGroupPairDtoArgs:
    def __init__(__self__, *,
                 bottom: pulumi.Input[Sequence[pulumi.Input[builtins.int]]],
                 top: pulumi.Input[Sequence[pulumi.Input[builtins.int]]],
                 mc_lag_index: Optional[pulumi.Input[builtins.int]] = None):
        pulumi.set(__self__, "bottom", bottom)
        pulumi.set(__self__, "top", top)
        if mc_lag_index is not None:
            pulumi.set(__self__, "mc_lag_index", mc_lag_index)

    @property
    @pulumi.getter
    def bottom(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.int]]]:
        return pulumi.get(self, "bottom")

    @bottom.setter
    def bottom(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.int]]]):
        pulumi.set(self, "bottom", value)

    @property
    @pulumi.getter
    def top(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.int]]]:
        return pulumi.get(self, "top")

    @top.setter
    def top(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.int]]]):
        pulumi.set(self, "top", value)

    @property
    @pulumi.getter(name="mcLagIndex")
    def mc_lag_index(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "mc_lag_index")

    @mc_lag_index.setter
    def mc_lag_index(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "mc_lag_index", value)


if not MYPY:
    class McLagPeersDtoArgsDict(TypedDict):
        bottom: pulumi.Input[builtins.str]
        top: pulumi.Input[builtins.str]
elif False:
    McLagPeersDtoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class McLagPeersDtoArgs:
    def __init__(__self__, *,
                 bottom: pulumi.Input[builtins.str],
                 top: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "bottom", bottom)
        pulumi.set(__self__, "top", top)

    @property
    @pulumi.getter
    def bottom(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "bottom")

    @bottom.setter
    def bottom(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "bottom", value)

    @property
    @pulumi.getter
    def top(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "top")

    @top.setter
    def top(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "top", value)


