# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['McLagGroupArgs', 'McLagGroup']

@pulumi.input_type
class McLagGroupArgs:
    def __init__(__self__, *,
                 mc_link: pulumi.Input['LinkAggregationGroupPairDtoArgs'],
                 peers: pulumi.Input['McLagPeersDtoArgs'],
                 target_links: pulumi.Input[Sequence[pulumi.Input['LinkAggregationGroupPairDtoArgs']]],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 stacking: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a McLagGroup resource.
        """
        pulumi.set(__self__, "mc_link", mc_link)
        pulumi.set(__self__, "peers", peers)
        pulumi.set(__self__, "target_links", target_links)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if site_name is not None:
            pulumi.set(__self__, "site_name", site_name)
        if stacking is not None:
            pulumi.set(__self__, "stacking", stacking)

    @property
    @pulumi.getter(name="mcLink")
    def mc_link(self) -> pulumi.Input['LinkAggregationGroupPairDtoArgs']:
        return pulumi.get(self, "mc_link")

    @mc_link.setter
    def mc_link(self, value: pulumi.Input['LinkAggregationGroupPairDtoArgs']):
        pulumi.set(self, "mc_link", value)

    @property
    @pulumi.getter
    def peers(self) -> pulumi.Input['McLagPeersDtoArgs']:
        return pulumi.get(self, "peers")

    @peers.setter
    def peers(self, value: pulumi.Input['McLagPeersDtoArgs']):
        pulumi.set(self, "peers", value)

    @property
    @pulumi.getter(name="targetLinks")
    def target_links(self) -> pulumi.Input[Sequence[pulumi.Input['LinkAggregationGroupPairDtoArgs']]]:
        return pulumi.get(self, "target_links")

    @target_links.setter
    def target_links(self, value: pulumi.Input[Sequence[pulumi.Input['LinkAggregationGroupPairDtoArgs']]]):
        pulumi.set(self, "target_links", value)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="siteName")
    def site_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_name")

    @site_name.setter
    def site_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_name", value)

    @property
    @pulumi.getter
    def stacking(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "stacking")

    @stacking.setter
    def stacking(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "stacking", value)


@pulumi.type_token("unifi-native:mclag-groups:McLagGroup")
class McLagGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 mc_link: Optional[pulumi.Input[Union['LinkAggregationGroupPairDtoArgs', 'LinkAggregationGroupPairDtoArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 peers: Optional[pulumi.Input[Union['McLagPeersDtoArgs', 'McLagPeersDtoArgsDict']]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 stacking: Optional[pulumi.Input[builtins.bool]] = None,
                 target_links: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LinkAggregationGroupPairDtoArgs', 'LinkAggregationGroupPairDtoArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a McLagGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: McLagGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a McLagGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param McLagGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(McLagGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 mc_link: Optional[pulumi.Input[Union['LinkAggregationGroupPairDtoArgs', 'LinkAggregationGroupPairDtoArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 peers: Optional[pulumi.Input[Union['McLagPeersDtoArgs', 'McLagPeersDtoArgsDict']]] = None,
                 site_name: Optional[pulumi.Input[builtins.str]] = None,
                 stacking: Optional[pulumi.Input[builtins.bool]] = None,
                 target_links: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LinkAggregationGroupPairDtoArgs', 'LinkAggregationGroupPairDtoArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = McLagGroupArgs.__new__(McLagGroupArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["description"] = description
            if mc_link is None and not opts.urn:
                raise TypeError("Missing required property 'mc_link'")
            __props__.__dict__["mc_link"] = mc_link
            __props__.__dict__["name"] = name
            if peers is None and not opts.urn:
                raise TypeError("Missing required property 'peers'")
            __props__.__dict__["peers"] = peers
            __props__.__dict__["site_name"] = site_name
            __props__.__dict__["stacking"] = stacking
            if target_links is None and not opts.urn:
                raise TypeError("Missing required property 'target_links'")
            __props__.__dict__["target_links"] = target_links
        super(McLagGroup, __self__).__init__(
            'unifi-native:mclag-groups:McLagGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'McLagGroup':
        """
        Get an existing McLagGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = McLagGroupArgs.__new__(McLagGroupArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["mc_link"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["peers"] = None
        __props__.__dict__["stacking"] = None
        __props__.__dict__["target_links"] = None
        return McLagGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="mcLink")
    def mc_link(self) -> pulumi.Output['outputs.LinkAggregationGroupPairDto']:
        return pulumi.get(self, "mc_link")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def peers(self) -> pulumi.Output['outputs.McLagPeersDto']:
        return pulumi.get(self, "peers")

    @property
    @pulumi.getter
    def stacking(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "stacking")

    @property
    @pulumi.getter(name="targetLinks")
    def target_links(self) -> pulumi.Output[Sequence['outputs.LinkAggregationGroupPairDto']]:
        return pulumi.get(self, "target_links")

