# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'LinkAggregationGroupPairDto',
    'McLagGroupDto',
    'McLagPeersDto',
]

@pulumi.output_type
class LinkAggregationGroupPairDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mcLagIndex":
            suggest = "mc_lag_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LinkAggregationGroupPairDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LinkAggregationGroupPairDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LinkAggregationGroupPairDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bottom: Sequence[builtins.int],
                 top: Sequence[builtins.int],
                 mc_lag_index: Optional[builtins.int] = None):
        pulumi.set(__self__, "bottom", bottom)
        pulumi.set(__self__, "top", top)
        if mc_lag_index is not None:
            pulumi.set(__self__, "mc_lag_index", mc_lag_index)

    @property
    @pulumi.getter
    def bottom(self) -> Sequence[builtins.int]:
        return pulumi.get(self, "bottom")

    @property
    @pulumi.getter
    def top(self) -> Sequence[builtins.int]:
        return pulumi.get(self, "top")

    @property
    @pulumi.getter(name="mcLagIndex")
    def mc_lag_index(self) -> Optional[builtins.int]:
        return pulumi.get(self, "mc_lag_index")


@pulumi.output_type
class McLagGroupDto(dict):
    def __init__(__self__, *,
                 mc_link: 'outputs.LinkAggregationGroupPairDto',
                 peers: 'outputs.McLagPeersDto',
                 target_links: Sequence['outputs.LinkAggregationGroupPairDto'],
                 id: Optional[builtins.str] = None,
                 description: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 stacking: Optional[builtins.bool] = None):
        pulumi.set(__self__, "mc_link", mc_link)
        pulumi.set(__self__, "peers", peers)
        pulumi.set(__self__, "target_links", target_links)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stacking is not None:
            pulumi.set(__self__, "stacking", stacking)

    @property
    @pulumi.getter(name="mcLink")
    def mc_link(self) -> 'outputs.LinkAggregationGroupPairDto':
        return pulumi.get(self, "mc_link")

    @property
    @pulumi.getter
    def peers(self) -> 'outputs.McLagPeersDto':
        return pulumi.get(self, "peers")

    @property
    @pulumi.getter(name="targetLinks")
    def target_links(self) -> Sequence['outputs.LinkAggregationGroupPairDto']:
        return pulumi.get(self, "target_links")

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def stacking(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "stacking")


@pulumi.output_type
class McLagPeersDto(dict):
    def __init__(__self__, *,
                 bottom: builtins.str,
                 top: builtins.str):
        pulumi.set(__self__, "bottom", bottom)
        pulumi.set(__self__, "top", top)

    @property
    @pulumi.getter
    def bottom(self) -> builtins.str:
        return pulumi.get(self, "bottom")

    @property
    @pulumi.getter
    def top(self) -> builtins.str:
        return pulumi.get(self, "top")


