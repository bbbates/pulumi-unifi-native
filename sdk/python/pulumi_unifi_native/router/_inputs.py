# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'OSPFAreaArgs',
    'OSPFAreaArgsDict',
    'OSPFInterfaceArgs',
    'OSPFInterfaceArgsDict',
    'OSPFMD5AuthenticationKeyArgs',
    'OSPFMD5AuthenticationKeyArgsDict',
]

MYPY = False

if not MYPY:
    class OSPFAreaArgsDict(TypedDict):
        area_id: pulumi.Input[builtins.str]
        area_type: pulumi.Input['OSPFAreaAreaType']
        name: pulumi.Input[builtins.str]
        network_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    OSPFAreaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OSPFAreaArgs:
    def __init__(__self__, *,
                 area_id: pulumi.Input[builtins.str],
                 area_type: pulumi.Input['OSPFAreaAreaType'],
                 name: pulumi.Input[builtins.str],
                 network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        pulumi.set(__self__, "area_id", area_id)
        pulumi.set(__self__, "area_type", area_type)
        pulumi.set(__self__, "name", name)
        if network_ids is not None:
            pulumi.set(__self__, "network_ids", network_ids)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "area_id")

    @area_id.setter
    def area_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "area_id", value)

    @property
    @pulumi.getter(name="areaType")
    def area_type(self) -> pulumi.Input['OSPFAreaAreaType']:
        return pulumi.get(self, "area_type")

    @area_type.setter
    def area_type(self, value: pulumi.Input['OSPFAreaAreaType']):
        pulumi.set(self, "area_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkIds")
    def network_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "network_ids")

    @network_ids.setter
    def network_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "network_ids", value)


if not MYPY:
    class OSPFInterfaceArgsDict(TypedDict):
        authentication_type: pulumi.Input['OSPFInterfaceAuthenticationType']
        network_id: pulumi.Input[builtins.str]
        cost: NotRequired[pulumi.Input[builtins.int]]
        dead_interval: NotRequired[pulumi.Input[builtins.int]]
        hello_interval: NotRequired[pulumi.Input[builtins.int]]
        md5_authentication_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input['OSPFMD5AuthenticationKeyArgsDict']]]]
        passive_interface: NotRequired[pulumi.Input[builtins.bool]]
        plain_text_authentication_key: NotRequired[pulumi.Input[builtins.str]]
        priority: NotRequired[pulumi.Input[builtins.int]]
elif False:
    OSPFInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OSPFInterfaceArgs:
    def __init__(__self__, *,
                 authentication_type: pulumi.Input['OSPFInterfaceAuthenticationType'],
                 network_id: pulumi.Input[builtins.str],
                 cost: Optional[pulumi.Input[builtins.int]] = None,
                 dead_interval: Optional[pulumi.Input[builtins.int]] = None,
                 hello_interval: Optional[pulumi.Input[builtins.int]] = None,
                 md5_authentication_keys: Optional[pulumi.Input[Sequence[pulumi.Input['OSPFMD5AuthenticationKeyArgs']]]] = None,
                 passive_interface: Optional[pulumi.Input[builtins.bool]] = None,
                 plain_text_authentication_key: Optional[pulumi.Input[builtins.str]] = None,
                 priority: Optional[pulumi.Input[builtins.int]] = None):
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "network_id", network_id)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if md5_authentication_keys is not None:
            pulumi.set(__self__, "md5_authentication_keys", md5_authentication_keys)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if plain_text_authentication_key is not None:
            pulumi.set(__self__, "plain_text_authentication_key", plain_text_authentication_key)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> pulumi.Input['OSPFInterfaceAuthenticationType']:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: pulumi.Input['OSPFInterfaceAuthenticationType']):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dead_interval", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter(name="md5AuthenticationKeys")
    def md5_authentication_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OSPFMD5AuthenticationKeyArgs']]]]:
        return pulumi.get(self, "md5_authentication_keys")

    @md5_authentication_keys.setter
    def md5_authentication_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OSPFMD5AuthenticationKeyArgs']]]]):
        pulumi.set(self, "md5_authentication_keys", value)

    @property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "passive_interface")

    @passive_interface.setter
    def passive_interface(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "passive_interface", value)

    @property
    @pulumi.getter(name="plainTextAuthenticationKey")
    def plain_text_authentication_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "plain_text_authentication_key")

    @plain_text_authentication_key.setter
    def plain_text_authentication_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "plain_text_authentication_key", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "priority", value)


if not MYPY:
    class OSPFMD5AuthenticationKeyArgsDict(TypedDict):
        key: pulumi.Input[builtins.str]
        id: NotRequired[pulumi.Input[builtins.int]]
elif False:
    OSPFMD5AuthenticationKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OSPFMD5AuthenticationKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[builtins.str],
                 id: Optional[pulumi.Input[builtins.int]] = None):
        pulumi.set(__self__, "key", key)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "id", value)


