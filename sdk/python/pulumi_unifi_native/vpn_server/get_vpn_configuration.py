# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetVpnConfigurationResult',
    'AwaitableGetVpnConfigurationResult',
    'get_vpn_configuration',
    'get_vpn_configuration_output',
]

@pulumi.output_type
class GetVpnConfigurationResult:
    def __init__(__self__, by_defaultopenvpn_for_backward_compatibility=None, renegotiate_data_channel_key_after_n_seconds_open_vpn_only=None, required_only_for_open_vpn=None, server_key_for_open_vpn_or_private_key_of_wire_guard_server=None, vpn_server_protocol=None, custom_routing=None, default_dns_suffix=None, dns=None, enabled=None, ip_subnet=None, ipv6_subnet=None, local_wan_ip=None, mac_connection_time_seconds=None, masquerade_enabled=None, name=None, networkconf_id=None, public_gateway_port=None, radius=None, server_port=None, strict_client_common_name=None, sync_public_ip=None, uid_policy_enabled=None, uid_policy_name=None, uid_workspace_url=None):
        if by_defaultopenvpn_for_backward_compatibility and not isinstance(by_defaultopenvpn_for_backward_compatibility, str):
            raise TypeError("Expected argument 'by_defaultopenvpn_for_backward_compatibility' to be a str")
        pulumi.set(__self__, "by_defaultopenvpn_for_backward_compatibility", by_defaultopenvpn_for_backward_compatibility)
        if renegotiate_data_channel_key_after_n_seconds_open_vpn_only and not isinstance(renegotiate_data_channel_key_after_n_seconds_open_vpn_only, int):
            raise TypeError("Expected argument 'renegotiate_data_channel_key_after_n_seconds_open_vpn_only' to be a int")
        pulumi.set(__self__, "renegotiate_data_channel_key_after_n_seconds_open_vpn_only", renegotiate_data_channel_key_after_n_seconds_open_vpn_only)
        if required_only_for_open_vpn and not isinstance(required_only_for_open_vpn, str):
            raise TypeError("Expected argument 'required_only_for_open_vpn' to be a str")
        pulumi.set(__self__, "required_only_for_open_vpn", required_only_for_open_vpn)
        if server_key_for_open_vpn_or_private_key_of_wire_guard_server and not isinstance(server_key_for_open_vpn_or_private_key_of_wire_guard_server, str):
            raise TypeError("Expected argument 'server_key_for_open_vpn_or_private_key_of_wire_guard_server' to be a str")
        pulumi.set(__self__, "server_key_for_open_vpn_or_private_key_of_wire_guard_server", server_key_for_open_vpn_or_private_key_of_wire_guard_server)
        if vpn_server_protocol and not isinstance(vpn_server_protocol, str):
            raise TypeError("Expected argument 'vpn_server_protocol' to be a str")
        pulumi.set(__self__, "vpn_server_protocol", vpn_server_protocol)
        if custom_routing and not isinstance(custom_routing, list):
            raise TypeError("Expected argument 'custom_routing' to be a list")
        pulumi.set(__self__, "custom_routing", custom_routing)
        if default_dns_suffix and not isinstance(default_dns_suffix, str):
            raise TypeError("Expected argument 'default_dns_suffix' to be a str")
        pulumi.set(__self__, "default_dns_suffix", default_dns_suffix)
        if dns and not isinstance(dns, list):
            raise TypeError("Expected argument 'dns' to be a list")
        pulumi.set(__self__, "dns", dns)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if ip_subnet and not isinstance(ip_subnet, str):
            raise TypeError("Expected argument 'ip_subnet' to be a str")
        pulumi.set(__self__, "ip_subnet", ip_subnet)
        if ipv6_subnet and not isinstance(ipv6_subnet, str):
            raise TypeError("Expected argument 'ipv6_subnet' to be a str")
        pulumi.set(__self__, "ipv6_subnet", ipv6_subnet)
        if local_wan_ip and not isinstance(local_wan_ip, str):
            raise TypeError("Expected argument 'local_wan_ip' to be a str")
        pulumi.set(__self__, "local_wan_ip", local_wan_ip)
        if mac_connection_time_seconds and not isinstance(mac_connection_time_seconds, int):
            raise TypeError("Expected argument 'mac_connection_time_seconds' to be a int")
        pulumi.set(__self__, "mac_connection_time_seconds", mac_connection_time_seconds)
        if masquerade_enabled and not isinstance(masquerade_enabled, bool):
            raise TypeError("Expected argument 'masquerade_enabled' to be a bool")
        pulumi.set(__self__, "masquerade_enabled", masquerade_enabled)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if networkconf_id and not isinstance(networkconf_id, str):
            raise TypeError("Expected argument 'networkconf_id' to be a str")
        pulumi.set(__self__, "networkconf_id", networkconf_id)
        if public_gateway_port and not isinstance(public_gateway_port, int):
            raise TypeError("Expected argument 'public_gateway_port' to be a int")
        pulumi.set(__self__, "public_gateway_port", public_gateway_port)
        if radius and not isinstance(radius, dict):
            raise TypeError("Expected argument 'radius' to be a dict")
        pulumi.set(__self__, "radius", radius)
        if server_port and not isinstance(server_port, int):
            raise TypeError("Expected argument 'server_port' to be a int")
        pulumi.set(__self__, "server_port", server_port)
        if strict_client_common_name and not isinstance(strict_client_common_name, bool):
            raise TypeError("Expected argument 'strict_client_common_name' to be a bool")
        pulumi.set(__self__, "strict_client_common_name", strict_client_common_name)
        if sync_public_ip and not isinstance(sync_public_ip, bool):
            raise TypeError("Expected argument 'sync_public_ip' to be a bool")
        pulumi.set(__self__, "sync_public_ip", sync_public_ip)
        if uid_policy_enabled and not isinstance(uid_policy_enabled, bool):
            raise TypeError("Expected argument 'uid_policy_enabled' to be a bool")
        pulumi.set(__self__, "uid_policy_enabled", uid_policy_enabled)
        if uid_policy_name and not isinstance(uid_policy_name, str):
            raise TypeError("Expected argument 'uid_policy_name' to be a str")
        pulumi.set(__self__, "uid_policy_name", uid_policy_name)
        if uid_workspace_url and not isinstance(uid_workspace_url, str):
            raise TypeError("Expected argument 'uid_workspace_url' to be a str")
        pulumi.set(__self__, "uid_workspace_url", uid_workspace_url)

    @property
    @pulumi.getter(name="ByDefaultopenvpnForBackwardCompatibility")
    def by_defaultopenvpn_for_backward_compatibility(self) -> Optional['UIDVPNServerConfigurationByDefaultopenvpnForBackwardCompatibility']:
        return pulumi.get(self, "by_defaultopenvpn_for_backward_compatibility")

    @property
    @pulumi.getter(name="RenegotiateDataChannelKeyAfterNSecondsOpenVPNOnly")
    def renegotiate_data_channel_key_after_n_seconds_open_vpn_only(self) -> Optional[builtins.int]:
        return pulumi.get(self, "renegotiate_data_channel_key_after_n_seconds_open_vpn_only")

    @property
    @pulumi.getter(name="RequiredOnlyForOpenVPN")
    def required_only_for_open_vpn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "required_only_for_open_vpn")

    @property
    @pulumi.getter(name="ServerKeyForOpenVPNOrPrivateKeyOfWireGuardServer")
    def server_key_for_open_vpn_or_private_key_of_wire_guard_server(self) -> Optional[builtins.str]:
        return pulumi.get(self, "server_key_for_open_vpn_or_private_key_of_wire_guard_server")

    @property
    @pulumi.getter(name="VPNServerProtocol")
    def vpn_server_protocol(self) -> Optional['UIDVPNServerConfigurationVPNServerProtocol']:
        return pulumi.get(self, "vpn_server_protocol")

    @property
    @pulumi.getter(name="customRouting")
    def custom_routing(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "custom_routing")

    @property
    @pulumi.getter(name="defaultDnsSuffix")
    def default_dns_suffix(self) -> Optional[builtins.str]:
        return pulumi.get(self, "default_dns_suffix")

    @property
    @pulumi.getter
    def dns(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipv6Subnet")
    def ipv6_subnet(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipv6_subnet")

    @property
    @pulumi.getter(name="localWanIp")
    def local_wan_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "local_wan_ip")

    @property
    @pulumi.getter(name="macConnectionTimeSeconds")
    def mac_connection_time_seconds(self) -> Optional[builtins.int]:
        return pulumi.get(self, "mac_connection_time_seconds")

    @property
    @pulumi.getter(name="masqueradeEnabled")
    def masquerade_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "masquerade_enabled")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkconfId")
    def networkconf_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "networkconf_id")

    @property
    @pulumi.getter(name="publicGatewayPort")
    def public_gateway_port(self) -> Optional[builtins.int]:
        """
        If VPN is behind NAT, user can set a port forward on a 3rd party gateway. In this case, the UID App may use this port to connect to the VPN
        """
        return pulumi.get(self, "public_gateway_port")

    @property
    @pulumi.getter
    def radius(self) -> Optional['outputs.UidVpnServerRadiusConfigurationDto']:
        return pulumi.get(self, "radius")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "server_port")

    @property
    @pulumi.getter(name="strictClientCommonName")
    def strict_client_common_name(self) -> Optional[builtins.bool]:
        """
        If true, then client certificate's common name must match client's username. Effective for the server mode only (OpenVPN only)
        """
        return pulumi.get(self, "strict_client_common_name")

    @property
    @pulumi.getter(name="syncPublicIp")
    def sync_public_ip(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "sync_public_ip")

    @property
    @pulumi.getter(name="uidPolicyEnabled")
    def uid_policy_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "uid_policy_enabled")

    @property
    @pulumi.getter(name="uidPolicyName")
    def uid_policy_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "uid_policy_name")

    @property
    @pulumi.getter(name="uidWorkspaceUrl")
    def uid_workspace_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "uid_workspace_url")


class AwaitableGetVpnConfigurationResult(GetVpnConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVpnConfigurationResult(
            by_defaultopenvpn_for_backward_compatibility=self.by_defaultopenvpn_for_backward_compatibility,
            renegotiate_data_channel_key_after_n_seconds_open_vpn_only=self.renegotiate_data_channel_key_after_n_seconds_open_vpn_only,
            required_only_for_open_vpn=self.required_only_for_open_vpn,
            server_key_for_open_vpn_or_private_key_of_wire_guard_server=self.server_key_for_open_vpn_or_private_key_of_wire_guard_server,
            vpn_server_protocol=self.vpn_server_protocol,
            custom_routing=self.custom_routing,
            default_dns_suffix=self.default_dns_suffix,
            dns=self.dns,
            enabled=self.enabled,
            ip_subnet=self.ip_subnet,
            ipv6_subnet=self.ipv6_subnet,
            local_wan_ip=self.local_wan_ip,
            mac_connection_time_seconds=self.mac_connection_time_seconds,
            masquerade_enabled=self.masquerade_enabled,
            name=self.name,
            networkconf_id=self.networkconf_id,
            public_gateway_port=self.public_gateway_port,
            radius=self.radius,
            server_port=self.server_port,
            strict_client_common_name=self.strict_client_common_name,
            sync_public_ip=self.sync_public_ip,
            uid_policy_enabled=self.uid_policy_enabled,
            uid_policy_name=self.uid_policy_name,
            uid_workspace_url=self.uid_workspace_url)


def get_vpn_configuration(site_name: Optional[builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVpnConfigurationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi-native:vpn-server:getVpnConfiguration', __args__, opts=opts, typ=GetVpnConfigurationResult).value

    return AwaitableGetVpnConfigurationResult(
        by_defaultopenvpn_for_backward_compatibility=pulumi.get(__ret__, 'by_defaultopenvpn_for_backward_compatibility'),
        renegotiate_data_channel_key_after_n_seconds_open_vpn_only=pulumi.get(__ret__, 'renegotiate_data_channel_key_after_n_seconds_open_vpn_only'),
        required_only_for_open_vpn=pulumi.get(__ret__, 'required_only_for_open_vpn'),
        server_key_for_open_vpn_or_private_key_of_wire_guard_server=pulumi.get(__ret__, 'server_key_for_open_vpn_or_private_key_of_wire_guard_server'),
        vpn_server_protocol=pulumi.get(__ret__, 'vpn_server_protocol'),
        custom_routing=pulumi.get(__ret__, 'custom_routing'),
        default_dns_suffix=pulumi.get(__ret__, 'default_dns_suffix'),
        dns=pulumi.get(__ret__, 'dns'),
        enabled=pulumi.get(__ret__, 'enabled'),
        ip_subnet=pulumi.get(__ret__, 'ip_subnet'),
        ipv6_subnet=pulumi.get(__ret__, 'ipv6_subnet'),
        local_wan_ip=pulumi.get(__ret__, 'local_wan_ip'),
        mac_connection_time_seconds=pulumi.get(__ret__, 'mac_connection_time_seconds'),
        masquerade_enabled=pulumi.get(__ret__, 'masquerade_enabled'),
        name=pulumi.get(__ret__, 'name'),
        networkconf_id=pulumi.get(__ret__, 'networkconf_id'),
        public_gateway_port=pulumi.get(__ret__, 'public_gateway_port'),
        radius=pulumi.get(__ret__, 'radius'),
        server_port=pulumi.get(__ret__, 'server_port'),
        strict_client_common_name=pulumi.get(__ret__, 'strict_client_common_name'),
        sync_public_ip=pulumi.get(__ret__, 'sync_public_ip'),
        uid_policy_enabled=pulumi.get(__ret__, 'uid_policy_enabled'),
        uid_policy_name=pulumi.get(__ret__, 'uid_policy_name'),
        uid_workspace_url=pulumi.get(__ret__, 'uid_workspace_url'))
def get_vpn_configuration_output(site_name: Optional[pulumi.Input[builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVpnConfigurationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['siteName'] = site_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi-native:vpn-server:getVpnConfiguration', __args__, opts=opts, typ=GetVpnConfigurationResult)
    return __ret__.apply(lambda __response__: GetVpnConfigurationResult(
        by_defaultopenvpn_for_backward_compatibility=pulumi.get(__response__, 'by_defaultopenvpn_for_backward_compatibility'),
        renegotiate_data_channel_key_after_n_seconds_open_vpn_only=pulumi.get(__response__, 'renegotiate_data_channel_key_after_n_seconds_open_vpn_only'),
        required_only_for_open_vpn=pulumi.get(__response__, 'required_only_for_open_vpn'),
        server_key_for_open_vpn_or_private_key_of_wire_guard_server=pulumi.get(__response__, 'server_key_for_open_vpn_or_private_key_of_wire_guard_server'),
        vpn_server_protocol=pulumi.get(__response__, 'vpn_server_protocol'),
        custom_routing=pulumi.get(__response__, 'custom_routing'),
        default_dns_suffix=pulumi.get(__response__, 'default_dns_suffix'),
        dns=pulumi.get(__response__, 'dns'),
        enabled=pulumi.get(__response__, 'enabled'),
        ip_subnet=pulumi.get(__response__, 'ip_subnet'),
        ipv6_subnet=pulumi.get(__response__, 'ipv6_subnet'),
        local_wan_ip=pulumi.get(__response__, 'local_wan_ip'),
        mac_connection_time_seconds=pulumi.get(__response__, 'mac_connection_time_seconds'),
        masquerade_enabled=pulumi.get(__response__, 'masquerade_enabled'),
        name=pulumi.get(__response__, 'name'),
        networkconf_id=pulumi.get(__response__, 'networkconf_id'),
        public_gateway_port=pulumi.get(__response__, 'public_gateway_port'),
        radius=pulumi.get(__response__, 'radius'),
        server_port=pulumi.get(__response__, 'server_port'),
        strict_client_common_name=pulumi.get(__response__, 'strict_client_common_name'),
        sync_public_ip=pulumi.get(__response__, 'sync_public_ip'),
        uid_policy_enabled=pulumi.get(__response__, 'uid_policy_enabled'),
        uid_policy_name=pulumi.get(__response__, 'uid_policy_name'),
        uid_workspace_url=pulumi.get(__response__, 'uid_workspace_url')))
