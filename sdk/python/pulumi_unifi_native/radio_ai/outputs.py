# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'Meta',
    'SettingRadioAi',
    'SettingRadioAiChannelsBlacklist',
    'SettingRadioAiRadiosConfiguration',
]

@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


@pulumi.output_type
class SettingRadioAi(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 _channels6e: Optional[Sequence[builtins.int]] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 auto_adjust_channels_to_country: Optional[builtins.bool] = None,
                 auto_channel_presets_type: Optional[builtins.str] = None,
                 channels_blacklist: Optional[Sequence['outputs.SettingRadioAiChannelsBlacklist']] = None,
                 channels_na: Optional[Sequence[builtins.int]] = None,
                 channels_ng: Optional[Sequence[builtins.int]] = None,
                 cron_expr: Optional[builtins.str] = None,
                 default: Optional[builtins.bool] = None,
                 enabled: Optional[builtins.bool] = None,
                 exclude_devices: Optional[Sequence[builtins.str]] = None,
                 ht_modes_na: Optional[Sequence[builtins.int]] = None,
                 ht_modes_ng: Optional[Sequence[builtins.int]] = None,
                 key: Optional[builtins.str] = None,
                 optimize: Optional[Sequence[builtins.str]] = None,
                 radios: Optional[Sequence[builtins.str]] = None,
                 radios_configuration: Optional[Sequence['outputs.SettingRadioAiRadiosConfiguration']] = None,
                 setting_preference: Optional[builtins.str] = None,
                 site_id: Optional[builtins.str] = None,
                 use_xy: Optional[builtins.bool] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if _channels6e is not None:
            pulumi.set(__self__, "_channels6e", _channels6e)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if auto_adjust_channels_to_country is not None:
            pulumi.set(__self__, "auto_adjust_channels_to_country", auto_adjust_channels_to_country)
        if auto_channel_presets_type is not None:
            pulumi.set(__self__, "auto_channel_presets_type", auto_channel_presets_type)
        if channels_blacklist is not None:
            pulumi.set(__self__, "channels_blacklist", channels_blacklist)
        if channels_na is not None:
            pulumi.set(__self__, "channels_na", channels_na)
        if channels_ng is not None:
            pulumi.set(__self__, "channels_ng", channels_ng)
        if cron_expr is not None:
            pulumi.set(__self__, "cron_expr", cron_expr)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_devices is not None:
            pulumi.set(__self__, "exclude_devices", exclude_devices)
        if ht_modes_na is not None:
            pulumi.set(__self__, "ht_modes_na", ht_modes_na)
        if ht_modes_ng is not None:
            pulumi.set(__self__, "ht_modes_ng", ht_modes_ng)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if optimize is not None:
            pulumi.set(__self__, "optimize", optimize)
        if radios is not None:
            pulumi.set(__self__, "radios", radios)
        if radios_configuration is not None:
            pulumi.set(__self__, "radios_configuration", radios_configuration)
        if setting_preference is not None:
            pulumi.set(__self__, "setting_preference", setting_preference)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if use_xy is not None:
            pulumi.set(__self__, "use_xy", use_xy)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def _channels6e(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "_channels6e")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="autoAdjustChannelsToCountry")
    def auto_adjust_channels_to_country(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "auto_adjust_channels_to_country")

    @property
    @pulumi.getter(name="autoChannelPresetsType")
    def auto_channel_presets_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "auto_channel_presets_type")

    @property
    @pulumi.getter(name="channelsBlacklist")
    def channels_blacklist(self) -> Optional[Sequence['outputs.SettingRadioAiChannelsBlacklist']]:
        return pulumi.get(self, "channels_blacklist")

    @property
    @pulumi.getter(name="channelsNa")
    def channels_na(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "channels_na")

    @property
    @pulumi.getter(name="channelsNg")
    def channels_ng(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "channels_ng")

    @property
    @pulumi.getter(name="cronExpr")
    def cron_expr(self) -> Optional[builtins.str]:
        return pulumi.get(self, "cron_expr")

    @property
    @pulumi.getter
    def default(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="excludeDevices")
    def exclude_devices(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "exclude_devices")

    @property
    @pulumi.getter(name="htModesNa")
    def ht_modes_na(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ht_modes_na")

    @property
    @pulumi.getter(name="htModesNg")
    def ht_modes_ng(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ht_modes_ng")

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def optimize(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "optimize")

    @property
    @pulumi.getter
    def radios(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "radios")

    @property
    @pulumi.getter(name="radiosConfiguration")
    def radios_configuration(self) -> Optional[Sequence['outputs.SettingRadioAiRadiosConfiguration']]:
        return pulumi.get(self, "radios_configuration")

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> Optional[builtins.str]:
        return pulumi.get(self, "setting_preference")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="useXY")
    def use_xy(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "use_xy")


@pulumi.output_type
class SettingRadioAiChannelsBlacklist(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelWidth":
            suggest = "channel_width"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingRadioAiChannelsBlacklist. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingRadioAiChannelsBlacklist.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingRadioAiChannelsBlacklist.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel: Optional[builtins.int] = None,
                 channel_width: Optional[builtins.int] = None,
                 radio: Optional[builtins.str] = None):
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channel_width is not None:
            pulumi.set(__self__, "channel_width", channel_width)
        if radio is not None:
            pulumi.set(__self__, "radio", radio)

    @property
    @pulumi.getter
    def channel(self) -> Optional[builtins.int]:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="channelWidth")
    def channel_width(self) -> Optional[builtins.int]:
        return pulumi.get(self, "channel_width")

    @property
    @pulumi.getter
    def radio(self) -> Optional[builtins.str]:
        return pulumi.get(self, "radio")


@pulumi.output_type
class SettingRadioAiRadiosConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelWidth":
            suggest = "channel_width"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingRadioAiRadiosConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingRadioAiRadiosConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingRadioAiRadiosConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel_width: Optional[builtins.int] = None,
                 dfs: Optional[builtins.bool] = None,
                 radio: Optional[builtins.str] = None):
        if channel_width is not None:
            pulumi.set(__self__, "channel_width", channel_width)
        if dfs is not None:
            pulumi.set(__self__, "dfs", dfs)
        if radio is not None:
            pulumi.set(__self__, "radio", radio)

    @property
    @pulumi.getter(name="channelWidth")
    def channel_width(self) -> Optional[builtins.int]:
        return pulumi.get(self, "channel_width")

    @property
    @pulumi.getter
    def dfs(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dfs")

    @property
    @pulumi.getter
    def radio(self) -> Optional[builtins.str]:
        return pulumi.get(self, "radio")


