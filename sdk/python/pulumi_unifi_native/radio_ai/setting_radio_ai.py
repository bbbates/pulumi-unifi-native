# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SettingRadioAiArgs', 'SettingRadioAi']

@pulumi.input_type
class SettingRadioAiArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_adjust_channels_to_country: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_channel_presets_type: Optional[pulumi.Input[builtins.str]] = None,
                 channels6e: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 channels_blacklist: Optional[pulumi.Input[Sequence[pulumi.Input['SettingRadioAiChannelsBlacklistArgs']]]] = None,
                 channels_na: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 channels_ng: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 cron_expr: Optional[pulumi.Input[builtins.str]] = None,
                 default: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 exclude_devices: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ht_modes_na: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 ht_modes_ng: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 optimize: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 radios: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 radios_configuration: Optional[pulumi.Input[Sequence[pulumi.Input['SettingRadioAiRadiosConfigurationArgs']]]] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 use_xy: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a SettingRadioAi resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if auto_adjust_channels_to_country is not None:
            pulumi.set(__self__, "auto_adjust_channels_to_country", auto_adjust_channels_to_country)
        if auto_channel_presets_type is not None:
            pulumi.set(__self__, "auto_channel_presets_type", auto_channel_presets_type)
        if channels6e is not None:
            pulumi.set(__self__, "channels6e", channels6e)
        if channels_blacklist is not None:
            pulumi.set(__self__, "channels_blacklist", channels_blacklist)
        if channels_na is not None:
            pulumi.set(__self__, "channels_na", channels_na)
        if channels_ng is not None:
            pulumi.set(__self__, "channels_ng", channels_ng)
        if cron_expr is not None:
            pulumi.set(__self__, "cron_expr", cron_expr)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_devices is not None:
            pulumi.set(__self__, "exclude_devices", exclude_devices)
        if ht_modes_na is not None:
            pulumi.set(__self__, "ht_modes_na", ht_modes_na)
        if ht_modes_ng is not None:
            pulumi.set(__self__, "ht_modes_ng", ht_modes_ng)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if optimize is not None:
            pulumi.set(__self__, "optimize", optimize)
        if radios is not None:
            pulumi.set(__self__, "radios", radios)
        if radios_configuration is not None:
            pulumi.set(__self__, "radios_configuration", radios_configuration)
        if setting_preference is not None:
            pulumi.set(__self__, "setting_preference", setting_preference)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if use_xy is not None:
            pulumi.set(__self__, "use_xy", use_xy)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter(name="autoAdjustChannelsToCountry")
    def auto_adjust_channels_to_country(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "auto_adjust_channels_to_country")

    @auto_adjust_channels_to_country.setter
    def auto_adjust_channels_to_country(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "auto_adjust_channels_to_country", value)

    @property
    @pulumi.getter(name="autoChannelPresetsType")
    def auto_channel_presets_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "auto_channel_presets_type")

    @auto_channel_presets_type.setter
    def auto_channel_presets_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "auto_channel_presets_type", value)

    @property
    @pulumi.getter
    def channels6e(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        return pulumi.get(self, "channels6e")

    @channels6e.setter
    def channels6e(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "channels6e", value)

    @property
    @pulumi.getter(name="channelsBlacklist")
    def channels_blacklist(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingRadioAiChannelsBlacklistArgs']]]]:
        return pulumi.get(self, "channels_blacklist")

    @channels_blacklist.setter
    def channels_blacklist(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingRadioAiChannelsBlacklistArgs']]]]):
        pulumi.set(self, "channels_blacklist", value)

    @property
    @pulumi.getter(name="channelsNa")
    def channels_na(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        return pulumi.get(self, "channels_na")

    @channels_na.setter
    def channels_na(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "channels_na", value)

    @property
    @pulumi.getter(name="channelsNg")
    def channels_ng(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        return pulumi.get(self, "channels_ng")

    @channels_ng.setter
    def channels_ng(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "channels_ng", value)

    @property
    @pulumi.getter(name="cronExpr")
    def cron_expr(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "cron_expr")

    @cron_expr.setter
    def cron_expr(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cron_expr", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="excludeDevices")
    def exclude_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "exclude_devices")

    @exclude_devices.setter
    def exclude_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "exclude_devices", value)

    @property
    @pulumi.getter(name="htModesNa")
    def ht_modes_na(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        return pulumi.get(self, "ht_modes_na")

    @ht_modes_na.setter
    def ht_modes_na(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "ht_modes_na", value)

    @property
    @pulumi.getter(name="htModesNg")
    def ht_modes_ng(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        return pulumi.get(self, "ht_modes_ng")

    @ht_modes_ng.setter
    def ht_modes_ng(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "ht_modes_ng", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def optimize(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "optimize")

    @optimize.setter
    def optimize(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "optimize", value)

    @property
    @pulumi.getter
    def radios(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "radios")

    @radios.setter
    def radios(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "radios", value)

    @property
    @pulumi.getter(name="radiosConfiguration")
    def radios_configuration(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingRadioAiRadiosConfigurationArgs']]]]:
        return pulumi.get(self, "radios_configuration")

    @radios_configuration.setter
    def radios_configuration(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingRadioAiRadiosConfigurationArgs']]]]):
        pulumi.set(self, "radios_configuration", value)

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "setting_preference")

    @setting_preference.setter
    def setting_preference(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "setting_preference", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="useXY")
    def use_xy(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "use_xy")

    @use_xy.setter
    def use_xy(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "use_xy", value)


@pulumi.type_token("unifi-native:radio_ai:SettingRadioAi")
class SettingRadioAi(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_adjust_channels_to_country: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_channel_presets_type: Optional[pulumi.Input[builtins.str]] = None,
                 channels6e: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 channels_blacklist: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingRadioAiChannelsBlacklistArgs', 'SettingRadioAiChannelsBlacklistArgsDict']]]]] = None,
                 channels_na: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 channels_ng: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 cron_expr: Optional[pulumi.Input[builtins.str]] = None,
                 default: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 exclude_devices: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ht_modes_na: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 ht_modes_ng: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 optimize: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 radios: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 radios_configuration: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingRadioAiRadiosConfigurationArgs', 'SettingRadioAiRadiosConfigurationArgsDict']]]]] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 use_xy: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        Create a SettingRadioAi resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SettingRadioAiArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SettingRadioAi resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SettingRadioAiArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingRadioAiArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_adjust_channels_to_country: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_channel_presets_type: Optional[pulumi.Input[builtins.str]] = None,
                 channels6e: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 channels_blacklist: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingRadioAiChannelsBlacklistArgs', 'SettingRadioAiChannelsBlacklistArgsDict']]]]] = None,
                 channels_na: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 channels_ng: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 cron_expr: Optional[pulumi.Input[builtins.str]] = None,
                 default: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 exclude_devices: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ht_modes_na: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 ht_modes_ng: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 optimize: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 radios: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 radios_configuration: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingRadioAiRadiosConfigurationArgs', 'SettingRadioAiRadiosConfigurationArgsDict']]]]] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 use_xy: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingRadioAiArgs.__new__(SettingRadioAiArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["auto_adjust_channels_to_country"] = auto_adjust_channels_to_country
            __props__.__dict__["auto_channel_presets_type"] = auto_channel_presets_type
            __props__.__dict__["channels6e"] = channels6e
            __props__.__dict__["channels_blacklist"] = channels_blacklist
            __props__.__dict__["channels_na"] = channels_na
            __props__.__dict__["channels_ng"] = channels_ng
            __props__.__dict__["cron_expr"] = cron_expr
            __props__.__dict__["default"] = default
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["exclude_devices"] = exclude_devices
            __props__.__dict__["ht_modes_na"] = ht_modes_na
            __props__.__dict__["ht_modes_ng"] = ht_modes_ng
            __props__.__dict__["key"] = key
            __props__.__dict__["optimize"] = optimize
            __props__.__dict__["radios"] = radios
            __props__.__dict__["radios_configuration"] = radios_configuration
            __props__.__dict__["setting_preference"] = setting_preference
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["use_xy"] = use_xy
        super(SettingRadioAi, __self__).__init__(
            'unifi-native:radio_ai:SettingRadioAi',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SettingRadioAi':
        """
        Get an existing SettingRadioAi resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SettingRadioAiArgs.__new__(SettingRadioAiArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["auto_adjust_channels_to_country"] = None
        __props__.__dict__["auto_channel_presets_type"] = None
        __props__.__dict__["channels6e"] = None
        __props__.__dict__["channels_blacklist"] = None
        __props__.__dict__["channels_na"] = None
        __props__.__dict__["channels_ng"] = None
        __props__.__dict__["cron_expr"] = None
        __props__.__dict__["default"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["exclude_devices"] = None
        __props__.__dict__["ht_modes_na"] = None
        __props__.__dict__["ht_modes_ng"] = None
        __props__.__dict__["key"] = None
        __props__.__dict__["optimize"] = None
        __props__.__dict__["radios"] = None
        __props__.__dict__["radios_configuration"] = None
        __props__.__dict__["setting_preference"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["use_xy"] = None
        return SettingRadioAi(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="autoAdjustChannelsToCountry")
    def auto_adjust_channels_to_country(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "auto_adjust_channels_to_country")

    @property
    @pulumi.getter(name="autoChannelPresetsType")
    def auto_channel_presets_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "auto_channel_presets_type")

    @property
    @pulumi.getter
    def channels6e(self) -> pulumi.Output[Optional[Sequence[builtins.int]]]:
        return pulumi.get(self, "channels6e")

    @property
    @pulumi.getter(name="channelsBlacklist")
    def channels_blacklist(self) -> pulumi.Output[Optional[Sequence['outputs.SettingRadioAiChannelsBlacklist']]]:
        return pulumi.get(self, "channels_blacklist")

    @property
    @pulumi.getter(name="channelsNa")
    def channels_na(self) -> pulumi.Output[Optional[Sequence[builtins.int]]]:
        return pulumi.get(self, "channels_na")

    @property
    @pulumi.getter(name="channelsNg")
    def channels_ng(self) -> pulumi.Output[Optional[Sequence[builtins.int]]]:
        return pulumi.get(self, "channels_ng")

    @property
    @pulumi.getter(name="cronExpr")
    def cron_expr(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "cron_expr")

    @property
    @pulumi.getter
    def default(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="excludeDevices")
    def exclude_devices(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "exclude_devices")

    @property
    @pulumi.getter(name="htModesNa")
    def ht_modes_na(self) -> pulumi.Output[Optional[Sequence[builtins.int]]]:
        return pulumi.get(self, "ht_modes_na")

    @property
    @pulumi.getter(name="htModesNg")
    def ht_modes_ng(self) -> pulumi.Output[Optional[Sequence[builtins.int]]]:
        return pulumi.get(self, "ht_modes_ng")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def optimize(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "optimize")

    @property
    @pulumi.getter
    def radios(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "radios")

    @property
    @pulumi.getter(name="radiosConfiguration")
    def radios_configuration(self) -> pulumi.Output[Optional[Sequence['outputs.SettingRadioAiRadiosConfiguration']]]:
        return pulumi.get(self, "radios_configuration")

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "setting_preference")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="useXY")
    def use_xy(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "use_xy")

