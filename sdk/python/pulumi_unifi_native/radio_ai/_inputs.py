# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'SettingRadioAiChannelsBlacklistArgs',
    'SettingRadioAiChannelsBlacklistArgsDict',
    'SettingRadioAiRadiosConfigurationArgs',
    'SettingRadioAiRadiosConfigurationArgsDict',
]

MYPY = False

if not MYPY:
    class SettingRadioAiChannelsBlacklistArgsDict(TypedDict):
        channel: NotRequired[pulumi.Input[builtins.int]]
        channel_width: NotRequired[pulumi.Input[builtins.int]]
        radio: NotRequired[pulumi.Input[builtins.str]]
elif False:
    SettingRadioAiChannelsBlacklistArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingRadioAiChannelsBlacklistArgs:
    def __init__(__self__, *,
                 channel: Optional[pulumi.Input[builtins.int]] = None,
                 channel_width: Optional[pulumi.Input[builtins.int]] = None,
                 radio: Optional[pulumi.Input[builtins.str]] = None):
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channel_width is not None:
            pulumi.set(__self__, "channel_width", channel_width)
        if radio is not None:
            pulumi.set(__self__, "radio", radio)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter(name="channelWidth")
    def channel_width(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "channel_width")

    @channel_width.setter
    def channel_width(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "channel_width", value)

    @property
    @pulumi.getter
    def radio(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "radio")

    @radio.setter
    def radio(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "radio", value)


if not MYPY:
    class SettingRadioAiRadiosConfigurationArgsDict(TypedDict):
        channel_width: NotRequired[pulumi.Input[builtins.int]]
        dfs: NotRequired[pulumi.Input[builtins.bool]]
        radio: NotRequired[pulumi.Input[builtins.str]]
elif False:
    SettingRadioAiRadiosConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingRadioAiRadiosConfigurationArgs:
    def __init__(__self__, *,
                 channel_width: Optional[pulumi.Input[builtins.int]] = None,
                 dfs: Optional[pulumi.Input[builtins.bool]] = None,
                 radio: Optional[pulumi.Input[builtins.str]] = None):
        if channel_width is not None:
            pulumi.set(__self__, "channel_width", channel_width)
        if dfs is not None:
            pulumi.set(__self__, "dfs", dfs)
        if radio is not None:
            pulumi.set(__self__, "radio", radio)

    @property
    @pulumi.getter(name="channelWidth")
    def channel_width(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "channel_width")

    @channel_width.setter
    def channel_width(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "channel_width", value)

    @property
    @pulumi.getter
    def dfs(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dfs")

    @dfs.setter
    def dfs(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dfs", value)

    @property
    @pulumi.getter
    def radio(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "radio")

    @radio.setter
    def radio(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "radio", value)


