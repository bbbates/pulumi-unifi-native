# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'Meta',
    'Network',
    'NetworkIGMPQuerierSwitches',
    'NetworkNATOutboundIPAddresses',
    'NetworkWANDHCPOptions',
    'NetworkWANProviderCapabilities',
]

@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


@pulumi.output_type
class Network(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 _dhcpdv6_allow_slaac: Optional[builtins.bool] = None,
                 _dhcpdv6_dns1: Optional[builtins.str] = None,
                 _dhcpdv6_dns2: Optional[builtins.str] = None,
                 _dhcpdv6_dns3: Optional[builtins.str] = None,
                 _dhcpdv6_dns4: Optional[builtins.str] = None,
                 _dhcpdv6_dns_auto: Optional[builtins.bool] = None,
                 _dhcpdv6_enabled: Optional[builtins.bool] = None,
                 _dhcpdv6_leasetime: Optional[builtins.int] = None,
                 _dhcpdv6_start: Optional[builtins.str] = None,
                 _dhcpdv6_stop: Optional[builtins.str] = None,
                 _ipsec_separate_ikev2_networks: Optional[builtins.bool] = None,
                 _ipv6_client_address_assignment: Optional[builtins.str] = None,
                 _ipv6_interface_type: Optional[builtins.str] = None,
                 _ipv6_pd_auto_prefixid_enabled: Optional[builtins.bool] = None,
                 _ipv6_pd_interface: Optional[builtins.str] = None,
                 _ipv6_pd_prefixid: Optional[builtins.str] = None,
                 _ipv6_pd_start: Optional[builtins.str] = None,
                 _ipv6_pd_stop: Optional[builtins.str] = None,
                 _ipv6_ra_enabled: Optional[builtins.bool] = None,
                 _ipv6_ra_preferred_lifetime: Optional[builtins.int] = None,
                 _ipv6_ra_priority: Optional[builtins.str] = None,
                 _ipv6_ra_valid_lifetime: Optional[builtins.int] = None,
                 _ipv6_setting_preference: Optional[builtins.str] = None,
                 _ipv6_single_network_interface: Optional[builtins.str] = None,
                 _ipv6_subnet: Optional[builtins.str] = None,
                 _ipv6_wan_delegation_type: Optional[builtins.str] = None,
                 _l2tp_allow_weak_ciphers: Optional[builtins.bool] = None,
                 _l2tp_interface: Optional[builtins.str] = None,
                 _l2tp_local_wan_ip: Optional[builtins.str] = None,
                 _wan_dhcpv6_pd_size: Optional[builtins.int] = None,
                 _wan_ipv6_dns1: Optional[builtins.str] = None,
                 _wan_ipv6_dns2: Optional[builtins.str] = None,
                 _wan_ipv6_dns_preference: Optional[builtins.str] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 auto_scale_enabled: Optional[builtins.bool] = None,
                 dhcp_relay_enabled: Optional[builtins.bool] = None,
                 dhcpd_boot_enabled: Optional[builtins.bool] = None,
                 dhcpd_boot_filename: Optional[builtins.str] = None,
                 dhcpd_boot_server: Optional[builtins.str] = None,
                 dhcpd_conflict_checking: Optional[builtins.bool] = None,
                 dhcpd_dns1: Optional[builtins.str] = None,
                 dhcpd_dns2: Optional[builtins.str] = None,
                 dhcpd_dns3: Optional[builtins.str] = None,
                 dhcpd_dns4: Optional[builtins.str] = None,
                 dhcpd_dns_enabled: Optional[builtins.bool] = None,
                 dhcpd_enabled: Optional[builtins.bool] = None,
                 dhcpd_gateway: Optional[builtins.str] = None,
                 dhcpd_gateway_enabled: Optional[builtins.bool] = None,
                 dhcpd_ip1: Optional[builtins.str] = None,
                 dhcpd_ip2: Optional[builtins.str] = None,
                 dhcpd_ip3: Optional[builtins.str] = None,
                 dhcpd_leasetime: Optional[builtins.int] = None,
                 dhcpd_mac1: Optional[builtins.str] = None,
                 dhcpd_mac2: Optional[builtins.str] = None,
                 dhcpd_mac3: Optional[builtins.str] = None,
                 dhcpd_ntp1: Optional[builtins.str] = None,
                 dhcpd_ntp2: Optional[builtins.str] = None,
                 dhcpd_ntp_enabled: Optional[builtins.bool] = None,
                 dhcpd_start: Optional[builtins.str] = None,
                 dhcpd_stop: Optional[builtins.str] = None,
                 dhcpd_tftp_server: Optional[builtins.str] = None,
                 dhcpd_time_offset: Optional[builtins.int] = None,
                 dhcpd_time_offset_enabled: Optional[builtins.bool] = None,
                 dhcpd_unifi_controller: Optional[builtins.str] = None,
                 dhcpd_wins1: Optional[builtins.str] = None,
                 dhcpd_wins2: Optional[builtins.str] = None,
                 dhcpd_wins_enabled: Optional[builtins.bool] = None,
                 dhcpd_wpad_url: Optional[builtins.str] = None,
                 dhcpguard_enabled: Optional[builtins.bool] = None,
                 domain_name: Optional[builtins.str] = None,
                 dpi_enabled: Optional[builtins.bool] = None,
                 dpigroup_id: Optional[builtins.str] = None,
                 enabled: Optional[builtins.bool] = None,
                 exposed_to_site_vpn: Optional[builtins.bool] = None,
                 firewall_zone_id: Optional[builtins.str] = None,
                 gateway_device: Optional[builtins.str] = None,
                 gateway_type: Optional[builtins.str] = None,
                 igmp_fastleave: Optional[builtins.bool] = None,
                 igmp_flood_unknown_multicast: Optional[builtins.bool] = None,
                 igmp_groupmembership: Optional[builtins.int] = None,
                 igmp_maxresponse: Optional[builtins.int] = None,
                 igmp_mcrtrexpiretime: Optional[builtins.int] = None,
                 igmp_proxy_downstream_networkconf_ids: Optional[Sequence[builtins.str]] = None,
                 igmp_proxy_for: Optional[builtins.str] = None,
                 igmp_proxy_upstream: Optional[builtins.bool] = None,
                 igmp_querier_switches: Optional[Sequence['outputs.NetworkIGMPQuerierSwitches']] = None,
                 igmp_snooping: Optional[builtins.bool] = None,
                 igmp_supression: Optional[builtins.bool] = None,
                 interface_mtu: Optional[builtins.int] = None,
                 interface_mtu_enabled: Optional[builtins.bool] = None,
                 internet_access_enabled: Optional[builtins.bool] = None,
                 ip_subnet: Optional[builtins.str] = None,
                 ipsec_dh_group: Optional[builtins.int] = None,
                 ipsec_dynamic_routing: Optional[builtins.bool] = None,
                 ipsec_encryption: Optional[builtins.str] = None,
                 ipsec_esp_dh_group: Optional[builtins.int] = None,
                 ipsec_esp_encryption: Optional[builtins.str] = None,
                 ipsec_esp_hash: Optional[builtins.str] = None,
                 ipsec_esp_lifetime: Optional[builtins.str] = None,
                 ipsec_hash: Optional[builtins.str] = None,
                 ipsec_ike_dh_group: Optional[builtins.int] = None,
                 ipsec_ike_encryption: Optional[builtins.str] = None,
                 ipsec_ike_hash: Optional[builtins.str] = None,
                 ipsec_ike_lifetime: Optional[builtins.str] = None,
                 ipsec_interface: Optional[builtins.str] = None,
                 ipsec_key_exchange: Optional[builtins.str] = None,
                 ipsec_local_identifier: Optional[builtins.str] = None,
                 ipsec_local_identifier_enabled: Optional[builtins.bool] = None,
                 ipsec_local_ip: Optional[builtins.str] = None,
                 ipsec_peer_ip: Optional[builtins.str] = None,
                 ipsec_pfs: Optional[builtins.bool] = None,
                 ipsec_profile: Optional[builtins.str] = None,
                 ipsec_remote_identifier: Optional[builtins.str] = None,
                 ipsec_remote_identifier_enabled: Optional[builtins.bool] = None,
                 ipsec_tunnel_ip: Optional[builtins.str] = None,
                 ipsec_tunnel_ip_enabled: Optional[builtins.bool] = None,
                 is_nat: Optional[builtins.bool] = None,
                 local_port: Optional[builtins.int] = None,
                 lte_lan_enabled: Optional[builtins.bool] = None,
                 mac_override: Optional[builtins.str] = None,
                 mac_override_enabled: Optional[builtins.bool] = None,
                 mdns_enabled: Optional[builtins.bool] = None,
                 name: Optional[builtins.str] = None,
                 nat_outbound_ip_addresses: Optional[Sequence['outputs.NetworkNATOutboundIPAddresses']] = None,
                 network_isolation_enabled: Optional[builtins.bool] = None,
                 networkgroup: Optional[builtins.str] = None,
                 openvpn_configuration: Optional[builtins.str] = None,
                 openvpn_configuration_filename: Optional[builtins.str] = None,
                 openvpn_encryption_cipher: Optional[builtins.str] = None,
                 openvpn_interface: Optional[builtins.str] = None,
                 openvpn_local_address: Optional[builtins.str] = None,
                 openvpn_local_port: Optional[builtins.int] = None,
                 openvpn_local_wan_ip: Optional[builtins.str] = None,
                 openvpn_mode: Optional[builtins.str] = None,
                 openvpn_remote_address: Optional[builtins.str] = None,
                 openvpn_remote_host: Optional[builtins.str] = None,
                 openvpn_remote_port: Optional[builtins.int] = None,
                 openvpn_username: Optional[builtins.str] = None,
                 pptpc_require_mppe: Optional[builtins.bool] = None,
                 pptpc_route_distance: Optional[builtins.int] = None,
                 pptpc_server_ip: Optional[builtins.str] = None,
                 pptpc_username: Optional[builtins.str] = None,
                 priority: Optional[builtins.int] = None,
                 purpose: Optional[builtins.str] = None,
                 radiusprofile_id: Optional[builtins.str] = None,
                 remote_site_id: Optional[builtins.str] = None,
                 remote_site_subnets: Optional[Sequence[builtins.str]] = None,
                 remote_vpn_dynamic_subnets_enabled: Optional[builtins.bool] = None,
                 remote_vpn_subnets: Optional[Sequence[builtins.str]] = None,
                 report_wan_event: Optional[builtins.bool] = None,
                 require_mschapv2: Optional[builtins.bool] = None,
                 route_distance: Optional[builtins.int] = None,
                 sdwan_remote_site_id: Optional[builtins.str] = None,
                 setting_preference: Optional[builtins.str] = None,
                 single_network_lan: Optional[builtins.str] = None,
                 site_id: Optional[builtins.str] = None,
                 uid_policy_enabled: Optional[builtins.bool] = None,
                 uid_policy_name: Optional[builtins.str] = None,
                 uid_public_gateway_port: Optional[builtins.int] = None,
                 uid_traffic_rules_allowed_ips_and_hostnames: Optional[Sequence[builtins.str]] = None,
                 uid_traffic_rules_enabled: Optional[builtins.bool] = None,
                 uid_vpn_custom_routing: Optional[Sequence[builtins.str]] = None,
                 uid_vpn_default_dns_suffix: Optional[builtins.str] = None,
                 uid_vpn_masquerade_enabled: Optional[builtins.bool] = None,
                 uid_vpn_max_connection_time_seconds: Optional[builtins.int] = None,
                 uid_vpn_sync_public_ip: Optional[builtins.bool] = None,
                 uid_vpn_type: Optional[builtins.str] = None,
                 uid_workspace_url: Optional[builtins.str] = None,
                 upnp_lan_enabled: Optional[builtins.bool] = None,
                 usergroup_id: Optional[builtins.str] = None,
                 vlan: Optional[builtins.int] = None,
                 vlan_enabled: Optional[builtins.bool] = None,
                 vpn_client_configuration_remote_ip_override: Optional[builtins.str] = None,
                 vpn_client_configuration_remote_ip_override_enabled: Optional[builtins.bool] = None,
                 vpn_client_default_route: Optional[builtins.bool] = None,
                 vpn_client_pull_dns: Optional[builtins.bool] = None,
                 vpn_protocol: Optional[builtins.str] = None,
                 vpn_type: Optional[builtins.str] = None,
                 vrrp_ip_subnet_gw1: Optional[builtins.str] = None,
                 vrrp_ip_subnet_gw2: Optional[builtins.str] = None,
                 vrrp_vrid: Optional[builtins.int] = None,
                 wan_dhcp_cos: Optional[builtins.int] = None,
                 wan_dhcp_options: Optional[Sequence['outputs.NetworkWANDHCPOptions']] = None,
                 wan_dns1: Optional[builtins.str] = None,
                 wan_dns2: Optional[builtins.str] = None,
                 wan_dns3: Optional[builtins.str] = None,
                 wan_dns4: Optional[builtins.str] = None,
                 wan_dns_preference: Optional[builtins.str] = None,
                 wan_dslite_remote_host: Optional[builtins.str] = None,
                 wan_egress_qos: Optional[builtins.int] = None,
                 wan_failover_priority: Optional[builtins.int] = None,
                 wan_gateway: Optional[builtins.str] = None,
                 wan_gateway_v6: Optional[builtins.str] = None,
                 wan_ip: Optional[builtins.str] = None,
                 wan_ip_aliases: Optional[Sequence[builtins.str]] = None,
                 wan_ipv6: Optional[builtins.str] = None,
                 wan_load_balance_type: Optional[builtins.str] = None,
                 wan_load_balance_weight: Optional[builtins.int] = None,
                 wan_netmask: Optional[builtins.str] = None,
                 wan_networkgroup: Optional[builtins.str] = None,
                 wan_pppoe_password_enabled: Optional[builtins.bool] = None,
                 wan_pppoe_username_enabled: Optional[builtins.bool] = None,
                 wan_prefixlen: Optional[builtins.int] = None,
                 wan_provider_capabilities: Optional['outputs.NetworkWANProviderCapabilities'] = None,
                 wan_smartq_down_rate: Optional[builtins.int] = None,
                 wan_smartq_enabled: Optional[builtins.bool] = None,
                 wan_smartq_up_rate: Optional[builtins.int] = None,
                 wan_type: Optional[builtins.str] = None,
                 wan_type_v6: Optional[builtins.str] = None,
                 wan_username: Optional[builtins.str] = None,
                 wan_vlan: Optional[builtins.int] = None,
                 wan_vlan_enabled: Optional[builtins.bool] = None,
                 wireguard_client_configuration_file: Optional[builtins.str] = None,
                 wireguard_client_configuration_filename: Optional[builtins.str] = None,
                 wireguard_client_mode: Optional[builtins.str] = None,
                 wireguard_client_peer_ip: Optional[builtins.str] = None,
                 wireguard_client_peer_port: Optional[builtins.int] = None,
                 wireguard_client_peer_public_key: Optional[builtins.str] = None,
                 wireguard_client_preshared_key: Optional[builtins.str] = None,
                 wireguard_client_preshared_key_enabled: Optional[builtins.bool] = None,
                 wireguard_interface: Optional[builtins.str] = None,
                 wireguard_local_wan_ip: Optional[builtins.str] = None,
                 wireguard_public_key: Optional[builtins.str] = None,
                 x_auth_key: Optional[builtins.str] = None,
                 x_ca_crt: Optional[builtins.str] = None,
                 x_ca_key: Optional[builtins.str] = None,
                 x_dh_key: Optional[builtins.str] = None,
                 x_ipsec_pre_shared_key: Optional[builtins.str] = None,
                 x_openvpn_password: Optional[builtins.str] = None,
                 x_openvpn_shared_secret_key: Optional[builtins.str] = None,
                 x_pptpc_password: Optional[builtins.str] = None,
                 x_server_crt: Optional[builtins.str] = None,
                 x_server_key: Optional[builtins.str] = None,
                 x_shared_client_crt: Optional[builtins.str] = None,
                 x_shared_client_key: Optional[builtins.str] = None,
                 x_wan_password: Optional[builtins.str] = None,
                 x_wireguard_private_key: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if _dhcpdv6_allow_slaac is not None:
            pulumi.set(__self__, "_dhcpdv6_allow_slaac", _dhcpdv6_allow_slaac)
        if _dhcpdv6_dns1 is not None:
            pulumi.set(__self__, "_dhcpdv6_dns1", _dhcpdv6_dns1)
        if _dhcpdv6_dns2 is not None:
            pulumi.set(__self__, "_dhcpdv6_dns2", _dhcpdv6_dns2)
        if _dhcpdv6_dns3 is not None:
            pulumi.set(__self__, "_dhcpdv6_dns3", _dhcpdv6_dns3)
        if _dhcpdv6_dns4 is not None:
            pulumi.set(__self__, "_dhcpdv6_dns4", _dhcpdv6_dns4)
        if _dhcpdv6_dns_auto is not None:
            pulumi.set(__self__, "_dhcpdv6_dns_auto", _dhcpdv6_dns_auto)
        if _dhcpdv6_enabled is not None:
            pulumi.set(__self__, "_dhcpdv6_enabled", _dhcpdv6_enabled)
        if _dhcpdv6_leasetime is not None:
            pulumi.set(__self__, "_dhcpdv6_leasetime", _dhcpdv6_leasetime)
        if _dhcpdv6_start is not None:
            pulumi.set(__self__, "_dhcpdv6_start", _dhcpdv6_start)
        if _dhcpdv6_stop is not None:
            pulumi.set(__self__, "_dhcpdv6_stop", _dhcpdv6_stop)
        if _ipsec_separate_ikev2_networks is not None:
            pulumi.set(__self__, "_ipsec_separate_ikev2_networks", _ipsec_separate_ikev2_networks)
        if _ipv6_client_address_assignment is not None:
            pulumi.set(__self__, "_ipv6_client_address_assignment", _ipv6_client_address_assignment)
        if _ipv6_interface_type is not None:
            pulumi.set(__self__, "_ipv6_interface_type", _ipv6_interface_type)
        if _ipv6_pd_auto_prefixid_enabled is not None:
            pulumi.set(__self__, "_ipv6_pd_auto_prefixid_enabled", _ipv6_pd_auto_prefixid_enabled)
        if _ipv6_pd_interface is not None:
            pulumi.set(__self__, "_ipv6_pd_interface", _ipv6_pd_interface)
        if _ipv6_pd_prefixid is not None:
            pulumi.set(__self__, "_ipv6_pd_prefixid", _ipv6_pd_prefixid)
        if _ipv6_pd_start is not None:
            pulumi.set(__self__, "_ipv6_pd_start", _ipv6_pd_start)
        if _ipv6_pd_stop is not None:
            pulumi.set(__self__, "_ipv6_pd_stop", _ipv6_pd_stop)
        if _ipv6_ra_enabled is not None:
            pulumi.set(__self__, "_ipv6_ra_enabled", _ipv6_ra_enabled)
        if _ipv6_ra_preferred_lifetime is not None:
            pulumi.set(__self__, "_ipv6_ra_preferred_lifetime", _ipv6_ra_preferred_lifetime)
        if _ipv6_ra_priority is not None:
            pulumi.set(__self__, "_ipv6_ra_priority", _ipv6_ra_priority)
        if _ipv6_ra_valid_lifetime is not None:
            pulumi.set(__self__, "_ipv6_ra_valid_lifetime", _ipv6_ra_valid_lifetime)
        if _ipv6_setting_preference is not None:
            pulumi.set(__self__, "_ipv6_setting_preference", _ipv6_setting_preference)
        if _ipv6_single_network_interface is not None:
            pulumi.set(__self__, "_ipv6_single_network_interface", _ipv6_single_network_interface)
        if _ipv6_subnet is not None:
            pulumi.set(__self__, "_ipv6_subnet", _ipv6_subnet)
        if _ipv6_wan_delegation_type is not None:
            pulumi.set(__self__, "_ipv6_wan_delegation_type", _ipv6_wan_delegation_type)
        if _l2tp_allow_weak_ciphers is not None:
            pulumi.set(__self__, "_l2tp_allow_weak_ciphers", _l2tp_allow_weak_ciphers)
        if _l2tp_interface is not None:
            pulumi.set(__self__, "_l2tp_interface", _l2tp_interface)
        if _l2tp_local_wan_ip is not None:
            pulumi.set(__self__, "_l2tp_local_wan_ip", _l2tp_local_wan_ip)
        if _wan_dhcpv6_pd_size is not None:
            pulumi.set(__self__, "_wan_dhcpv6_pd_size", _wan_dhcpv6_pd_size)
        if _wan_ipv6_dns1 is not None:
            pulumi.set(__self__, "_wan_ipv6_dns1", _wan_ipv6_dns1)
        if _wan_ipv6_dns2 is not None:
            pulumi.set(__self__, "_wan_ipv6_dns2", _wan_ipv6_dns2)
        if _wan_ipv6_dns_preference is not None:
            pulumi.set(__self__, "_wan_ipv6_dns_preference", _wan_ipv6_dns_preference)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if auto_scale_enabled is not None:
            pulumi.set(__self__, "auto_scale_enabled", auto_scale_enabled)
        if dhcp_relay_enabled is not None:
            pulumi.set(__self__, "dhcp_relay_enabled", dhcp_relay_enabled)
        if dhcpd_boot_enabled is not None:
            pulumi.set(__self__, "dhcpd_boot_enabled", dhcpd_boot_enabled)
        if dhcpd_boot_filename is not None:
            pulumi.set(__self__, "dhcpd_boot_filename", dhcpd_boot_filename)
        if dhcpd_boot_server is not None:
            pulumi.set(__self__, "dhcpd_boot_server", dhcpd_boot_server)
        if dhcpd_conflict_checking is not None:
            pulumi.set(__self__, "dhcpd_conflict_checking", dhcpd_conflict_checking)
        if dhcpd_dns1 is not None:
            pulumi.set(__self__, "dhcpd_dns1", dhcpd_dns1)
        if dhcpd_dns2 is not None:
            pulumi.set(__self__, "dhcpd_dns2", dhcpd_dns2)
        if dhcpd_dns3 is not None:
            pulumi.set(__self__, "dhcpd_dns3", dhcpd_dns3)
        if dhcpd_dns4 is not None:
            pulumi.set(__self__, "dhcpd_dns4", dhcpd_dns4)
        if dhcpd_dns_enabled is not None:
            pulumi.set(__self__, "dhcpd_dns_enabled", dhcpd_dns_enabled)
        if dhcpd_enabled is not None:
            pulumi.set(__self__, "dhcpd_enabled", dhcpd_enabled)
        if dhcpd_gateway is not None:
            pulumi.set(__self__, "dhcpd_gateway", dhcpd_gateway)
        if dhcpd_gateway_enabled is not None:
            pulumi.set(__self__, "dhcpd_gateway_enabled", dhcpd_gateway_enabled)
        if dhcpd_ip1 is not None:
            pulumi.set(__self__, "dhcpd_ip1", dhcpd_ip1)
        if dhcpd_ip2 is not None:
            pulumi.set(__self__, "dhcpd_ip2", dhcpd_ip2)
        if dhcpd_ip3 is not None:
            pulumi.set(__self__, "dhcpd_ip3", dhcpd_ip3)
        if dhcpd_leasetime is not None:
            pulumi.set(__self__, "dhcpd_leasetime", dhcpd_leasetime)
        if dhcpd_mac1 is not None:
            pulumi.set(__self__, "dhcpd_mac1", dhcpd_mac1)
        if dhcpd_mac2 is not None:
            pulumi.set(__self__, "dhcpd_mac2", dhcpd_mac2)
        if dhcpd_mac3 is not None:
            pulumi.set(__self__, "dhcpd_mac3", dhcpd_mac3)
        if dhcpd_ntp1 is not None:
            pulumi.set(__self__, "dhcpd_ntp1", dhcpd_ntp1)
        if dhcpd_ntp2 is not None:
            pulumi.set(__self__, "dhcpd_ntp2", dhcpd_ntp2)
        if dhcpd_ntp_enabled is not None:
            pulumi.set(__self__, "dhcpd_ntp_enabled", dhcpd_ntp_enabled)
        if dhcpd_start is not None:
            pulumi.set(__self__, "dhcpd_start", dhcpd_start)
        if dhcpd_stop is not None:
            pulumi.set(__self__, "dhcpd_stop", dhcpd_stop)
        if dhcpd_tftp_server is not None:
            pulumi.set(__self__, "dhcpd_tftp_server", dhcpd_tftp_server)
        if dhcpd_time_offset is not None:
            pulumi.set(__self__, "dhcpd_time_offset", dhcpd_time_offset)
        if dhcpd_time_offset_enabled is not None:
            pulumi.set(__self__, "dhcpd_time_offset_enabled", dhcpd_time_offset_enabled)
        if dhcpd_unifi_controller is not None:
            pulumi.set(__self__, "dhcpd_unifi_controller", dhcpd_unifi_controller)
        if dhcpd_wins1 is not None:
            pulumi.set(__self__, "dhcpd_wins1", dhcpd_wins1)
        if dhcpd_wins2 is not None:
            pulumi.set(__self__, "dhcpd_wins2", dhcpd_wins2)
        if dhcpd_wins_enabled is not None:
            pulumi.set(__self__, "dhcpd_wins_enabled", dhcpd_wins_enabled)
        if dhcpd_wpad_url is not None:
            pulumi.set(__self__, "dhcpd_wpad_url", dhcpd_wpad_url)
        if dhcpguard_enabled is not None:
            pulumi.set(__self__, "dhcpguard_enabled", dhcpguard_enabled)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if dpi_enabled is not None:
            pulumi.set(__self__, "dpi_enabled", dpi_enabled)
        if dpigroup_id is not None:
            pulumi.set(__self__, "dpigroup_id", dpigroup_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exposed_to_site_vpn is not None:
            pulumi.set(__self__, "exposed_to_site_vpn", exposed_to_site_vpn)
        if firewall_zone_id is not None:
            pulumi.set(__self__, "firewall_zone_id", firewall_zone_id)
        if gateway_device is not None:
            pulumi.set(__self__, "gateway_device", gateway_device)
        if gateway_type is not None:
            pulumi.set(__self__, "gateway_type", gateway_type)
        if igmp_fastleave is not None:
            pulumi.set(__self__, "igmp_fastleave", igmp_fastleave)
        if igmp_flood_unknown_multicast is not None:
            pulumi.set(__self__, "igmp_flood_unknown_multicast", igmp_flood_unknown_multicast)
        if igmp_groupmembership is not None:
            pulumi.set(__self__, "igmp_groupmembership", igmp_groupmembership)
        if igmp_maxresponse is not None:
            pulumi.set(__self__, "igmp_maxresponse", igmp_maxresponse)
        if igmp_mcrtrexpiretime is not None:
            pulumi.set(__self__, "igmp_mcrtrexpiretime", igmp_mcrtrexpiretime)
        if igmp_proxy_downstream_networkconf_ids is not None:
            pulumi.set(__self__, "igmp_proxy_downstream_networkconf_ids", igmp_proxy_downstream_networkconf_ids)
        if igmp_proxy_for is not None:
            pulumi.set(__self__, "igmp_proxy_for", igmp_proxy_for)
        if igmp_proxy_upstream is not None:
            pulumi.set(__self__, "igmp_proxy_upstream", igmp_proxy_upstream)
        if igmp_querier_switches is not None:
            pulumi.set(__self__, "igmp_querier_switches", igmp_querier_switches)
        if igmp_snooping is not None:
            pulumi.set(__self__, "igmp_snooping", igmp_snooping)
        if igmp_supression is not None:
            pulumi.set(__self__, "igmp_supression", igmp_supression)
        if interface_mtu is not None:
            pulumi.set(__self__, "interface_mtu", interface_mtu)
        if interface_mtu_enabled is not None:
            pulumi.set(__self__, "interface_mtu_enabled", interface_mtu_enabled)
        if internet_access_enabled is not None:
            pulumi.set(__self__, "internet_access_enabled", internet_access_enabled)
        if ip_subnet is not None:
            pulumi.set(__self__, "ip_subnet", ip_subnet)
        if ipsec_dh_group is not None:
            pulumi.set(__self__, "ipsec_dh_group", ipsec_dh_group)
        if ipsec_dynamic_routing is not None:
            pulumi.set(__self__, "ipsec_dynamic_routing", ipsec_dynamic_routing)
        if ipsec_encryption is not None:
            pulumi.set(__self__, "ipsec_encryption", ipsec_encryption)
        if ipsec_esp_dh_group is not None:
            pulumi.set(__self__, "ipsec_esp_dh_group", ipsec_esp_dh_group)
        if ipsec_esp_encryption is not None:
            pulumi.set(__self__, "ipsec_esp_encryption", ipsec_esp_encryption)
        if ipsec_esp_hash is not None:
            pulumi.set(__self__, "ipsec_esp_hash", ipsec_esp_hash)
        if ipsec_esp_lifetime is not None:
            pulumi.set(__self__, "ipsec_esp_lifetime", ipsec_esp_lifetime)
        if ipsec_hash is not None:
            pulumi.set(__self__, "ipsec_hash", ipsec_hash)
        if ipsec_ike_dh_group is not None:
            pulumi.set(__self__, "ipsec_ike_dh_group", ipsec_ike_dh_group)
        if ipsec_ike_encryption is not None:
            pulumi.set(__self__, "ipsec_ike_encryption", ipsec_ike_encryption)
        if ipsec_ike_hash is not None:
            pulumi.set(__self__, "ipsec_ike_hash", ipsec_ike_hash)
        if ipsec_ike_lifetime is not None:
            pulumi.set(__self__, "ipsec_ike_lifetime", ipsec_ike_lifetime)
        if ipsec_interface is not None:
            pulumi.set(__self__, "ipsec_interface", ipsec_interface)
        if ipsec_key_exchange is not None:
            pulumi.set(__self__, "ipsec_key_exchange", ipsec_key_exchange)
        if ipsec_local_identifier is not None:
            pulumi.set(__self__, "ipsec_local_identifier", ipsec_local_identifier)
        if ipsec_local_identifier_enabled is not None:
            pulumi.set(__self__, "ipsec_local_identifier_enabled", ipsec_local_identifier_enabled)
        if ipsec_local_ip is not None:
            pulumi.set(__self__, "ipsec_local_ip", ipsec_local_ip)
        if ipsec_peer_ip is not None:
            pulumi.set(__self__, "ipsec_peer_ip", ipsec_peer_ip)
        if ipsec_pfs is not None:
            pulumi.set(__self__, "ipsec_pfs", ipsec_pfs)
        if ipsec_profile is not None:
            pulumi.set(__self__, "ipsec_profile", ipsec_profile)
        if ipsec_remote_identifier is not None:
            pulumi.set(__self__, "ipsec_remote_identifier", ipsec_remote_identifier)
        if ipsec_remote_identifier_enabled is not None:
            pulumi.set(__self__, "ipsec_remote_identifier_enabled", ipsec_remote_identifier_enabled)
        if ipsec_tunnel_ip is not None:
            pulumi.set(__self__, "ipsec_tunnel_ip", ipsec_tunnel_ip)
        if ipsec_tunnel_ip_enabled is not None:
            pulumi.set(__self__, "ipsec_tunnel_ip_enabled", ipsec_tunnel_ip_enabled)
        if is_nat is not None:
            pulumi.set(__self__, "is_nat", is_nat)
        if local_port is not None:
            pulumi.set(__self__, "local_port", local_port)
        if lte_lan_enabled is not None:
            pulumi.set(__self__, "lte_lan_enabled", lte_lan_enabled)
        if mac_override is not None:
            pulumi.set(__self__, "mac_override", mac_override)
        if mac_override_enabled is not None:
            pulumi.set(__self__, "mac_override_enabled", mac_override_enabled)
        if mdns_enabled is not None:
            pulumi.set(__self__, "mdns_enabled", mdns_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat_outbound_ip_addresses is not None:
            pulumi.set(__self__, "nat_outbound_ip_addresses", nat_outbound_ip_addresses)
        if network_isolation_enabled is not None:
            pulumi.set(__self__, "network_isolation_enabled", network_isolation_enabled)
        if networkgroup is not None:
            pulumi.set(__self__, "networkgroup", networkgroup)
        if openvpn_configuration is not None:
            pulumi.set(__self__, "openvpn_configuration", openvpn_configuration)
        if openvpn_configuration_filename is not None:
            pulumi.set(__self__, "openvpn_configuration_filename", openvpn_configuration_filename)
        if openvpn_encryption_cipher is not None:
            pulumi.set(__self__, "openvpn_encryption_cipher", openvpn_encryption_cipher)
        if openvpn_interface is not None:
            pulumi.set(__self__, "openvpn_interface", openvpn_interface)
        if openvpn_local_address is not None:
            pulumi.set(__self__, "openvpn_local_address", openvpn_local_address)
        if openvpn_local_port is not None:
            pulumi.set(__self__, "openvpn_local_port", openvpn_local_port)
        if openvpn_local_wan_ip is not None:
            pulumi.set(__self__, "openvpn_local_wan_ip", openvpn_local_wan_ip)
        if openvpn_mode is not None:
            pulumi.set(__self__, "openvpn_mode", openvpn_mode)
        if openvpn_remote_address is not None:
            pulumi.set(__self__, "openvpn_remote_address", openvpn_remote_address)
        if openvpn_remote_host is not None:
            pulumi.set(__self__, "openvpn_remote_host", openvpn_remote_host)
        if openvpn_remote_port is not None:
            pulumi.set(__self__, "openvpn_remote_port", openvpn_remote_port)
        if openvpn_username is not None:
            pulumi.set(__self__, "openvpn_username", openvpn_username)
        if pptpc_require_mppe is not None:
            pulumi.set(__self__, "pptpc_require_mppe", pptpc_require_mppe)
        if pptpc_route_distance is not None:
            pulumi.set(__self__, "pptpc_route_distance", pptpc_route_distance)
        if pptpc_server_ip is not None:
            pulumi.set(__self__, "pptpc_server_ip", pptpc_server_ip)
        if pptpc_username is not None:
            pulumi.set(__self__, "pptpc_username", pptpc_username)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if purpose is not None:
            pulumi.set(__self__, "purpose", purpose)
        if radiusprofile_id is not None:
            pulumi.set(__self__, "radiusprofile_id", radiusprofile_id)
        if remote_site_id is not None:
            pulumi.set(__self__, "remote_site_id", remote_site_id)
        if remote_site_subnets is not None:
            pulumi.set(__self__, "remote_site_subnets", remote_site_subnets)
        if remote_vpn_dynamic_subnets_enabled is not None:
            pulumi.set(__self__, "remote_vpn_dynamic_subnets_enabled", remote_vpn_dynamic_subnets_enabled)
        if remote_vpn_subnets is not None:
            pulumi.set(__self__, "remote_vpn_subnets", remote_vpn_subnets)
        if report_wan_event is not None:
            pulumi.set(__self__, "report_wan_event", report_wan_event)
        if require_mschapv2 is not None:
            pulumi.set(__self__, "require_mschapv2", require_mschapv2)
        if route_distance is not None:
            pulumi.set(__self__, "route_distance", route_distance)
        if sdwan_remote_site_id is not None:
            pulumi.set(__self__, "sdwan_remote_site_id", sdwan_remote_site_id)
        if setting_preference is not None:
            pulumi.set(__self__, "setting_preference", setting_preference)
        if single_network_lan is not None:
            pulumi.set(__self__, "single_network_lan", single_network_lan)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if uid_policy_enabled is not None:
            pulumi.set(__self__, "uid_policy_enabled", uid_policy_enabled)
        if uid_policy_name is not None:
            pulumi.set(__self__, "uid_policy_name", uid_policy_name)
        if uid_public_gateway_port is not None:
            pulumi.set(__self__, "uid_public_gateway_port", uid_public_gateway_port)
        if uid_traffic_rules_allowed_ips_and_hostnames is not None:
            pulumi.set(__self__, "uid_traffic_rules_allowed_ips_and_hostnames", uid_traffic_rules_allowed_ips_and_hostnames)
        if uid_traffic_rules_enabled is not None:
            pulumi.set(__self__, "uid_traffic_rules_enabled", uid_traffic_rules_enabled)
        if uid_vpn_custom_routing is not None:
            pulumi.set(__self__, "uid_vpn_custom_routing", uid_vpn_custom_routing)
        if uid_vpn_default_dns_suffix is not None:
            pulumi.set(__self__, "uid_vpn_default_dns_suffix", uid_vpn_default_dns_suffix)
        if uid_vpn_masquerade_enabled is not None:
            pulumi.set(__self__, "uid_vpn_masquerade_enabled", uid_vpn_masquerade_enabled)
        if uid_vpn_max_connection_time_seconds is not None:
            pulumi.set(__self__, "uid_vpn_max_connection_time_seconds", uid_vpn_max_connection_time_seconds)
        if uid_vpn_sync_public_ip is not None:
            pulumi.set(__self__, "uid_vpn_sync_public_ip", uid_vpn_sync_public_ip)
        if uid_vpn_type is not None:
            pulumi.set(__self__, "uid_vpn_type", uid_vpn_type)
        if uid_workspace_url is not None:
            pulumi.set(__self__, "uid_workspace_url", uid_workspace_url)
        if upnp_lan_enabled is not None:
            pulumi.set(__self__, "upnp_lan_enabled", upnp_lan_enabled)
        if usergroup_id is not None:
            pulumi.set(__self__, "usergroup_id", usergroup_id)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vlan_enabled is not None:
            pulumi.set(__self__, "vlan_enabled", vlan_enabled)
        if vpn_client_configuration_remote_ip_override is not None:
            pulumi.set(__self__, "vpn_client_configuration_remote_ip_override", vpn_client_configuration_remote_ip_override)
        if vpn_client_configuration_remote_ip_override_enabled is not None:
            pulumi.set(__self__, "vpn_client_configuration_remote_ip_override_enabled", vpn_client_configuration_remote_ip_override_enabled)
        if vpn_client_default_route is not None:
            pulumi.set(__self__, "vpn_client_default_route", vpn_client_default_route)
        if vpn_client_pull_dns is not None:
            pulumi.set(__self__, "vpn_client_pull_dns", vpn_client_pull_dns)
        if vpn_protocol is not None:
            pulumi.set(__self__, "vpn_protocol", vpn_protocol)
        if vpn_type is not None:
            pulumi.set(__self__, "vpn_type", vpn_type)
        if vrrp_ip_subnet_gw1 is not None:
            pulumi.set(__self__, "vrrp_ip_subnet_gw1", vrrp_ip_subnet_gw1)
        if vrrp_ip_subnet_gw2 is not None:
            pulumi.set(__self__, "vrrp_ip_subnet_gw2", vrrp_ip_subnet_gw2)
        if vrrp_vrid is not None:
            pulumi.set(__self__, "vrrp_vrid", vrrp_vrid)
        if wan_dhcp_cos is not None:
            pulumi.set(__self__, "wan_dhcp_cos", wan_dhcp_cos)
        if wan_dhcp_options is not None:
            pulumi.set(__self__, "wan_dhcp_options", wan_dhcp_options)
        if wan_dns1 is not None:
            pulumi.set(__self__, "wan_dns1", wan_dns1)
        if wan_dns2 is not None:
            pulumi.set(__self__, "wan_dns2", wan_dns2)
        if wan_dns3 is not None:
            pulumi.set(__self__, "wan_dns3", wan_dns3)
        if wan_dns4 is not None:
            pulumi.set(__self__, "wan_dns4", wan_dns4)
        if wan_dns_preference is not None:
            pulumi.set(__self__, "wan_dns_preference", wan_dns_preference)
        if wan_dslite_remote_host is not None:
            pulumi.set(__self__, "wan_dslite_remote_host", wan_dslite_remote_host)
        if wan_egress_qos is not None:
            pulumi.set(__self__, "wan_egress_qos", wan_egress_qos)
        if wan_failover_priority is not None:
            pulumi.set(__self__, "wan_failover_priority", wan_failover_priority)
        if wan_gateway is not None:
            pulumi.set(__self__, "wan_gateway", wan_gateway)
        if wan_gateway_v6 is not None:
            pulumi.set(__self__, "wan_gateway_v6", wan_gateway_v6)
        if wan_ip is not None:
            pulumi.set(__self__, "wan_ip", wan_ip)
        if wan_ip_aliases is not None:
            pulumi.set(__self__, "wan_ip_aliases", wan_ip_aliases)
        if wan_ipv6 is not None:
            pulumi.set(__self__, "wan_ipv6", wan_ipv6)
        if wan_load_balance_type is not None:
            pulumi.set(__self__, "wan_load_balance_type", wan_load_balance_type)
        if wan_load_balance_weight is not None:
            pulumi.set(__self__, "wan_load_balance_weight", wan_load_balance_weight)
        if wan_netmask is not None:
            pulumi.set(__self__, "wan_netmask", wan_netmask)
        if wan_networkgroup is not None:
            pulumi.set(__self__, "wan_networkgroup", wan_networkgroup)
        if wan_pppoe_password_enabled is not None:
            pulumi.set(__self__, "wan_pppoe_password_enabled", wan_pppoe_password_enabled)
        if wan_pppoe_username_enabled is not None:
            pulumi.set(__self__, "wan_pppoe_username_enabled", wan_pppoe_username_enabled)
        if wan_prefixlen is not None:
            pulumi.set(__self__, "wan_prefixlen", wan_prefixlen)
        if wan_provider_capabilities is not None:
            pulumi.set(__self__, "wan_provider_capabilities", wan_provider_capabilities)
        if wan_smartq_down_rate is not None:
            pulumi.set(__self__, "wan_smartq_down_rate", wan_smartq_down_rate)
        if wan_smartq_enabled is not None:
            pulumi.set(__self__, "wan_smartq_enabled", wan_smartq_enabled)
        if wan_smartq_up_rate is not None:
            pulumi.set(__self__, "wan_smartq_up_rate", wan_smartq_up_rate)
        if wan_type is not None:
            pulumi.set(__self__, "wan_type", wan_type)
        if wan_type_v6 is not None:
            pulumi.set(__self__, "wan_type_v6", wan_type_v6)
        if wan_username is not None:
            pulumi.set(__self__, "wan_username", wan_username)
        if wan_vlan is not None:
            pulumi.set(__self__, "wan_vlan", wan_vlan)
        if wan_vlan_enabled is not None:
            pulumi.set(__self__, "wan_vlan_enabled", wan_vlan_enabled)
        if wireguard_client_configuration_file is not None:
            pulumi.set(__self__, "wireguard_client_configuration_file", wireguard_client_configuration_file)
        if wireguard_client_configuration_filename is not None:
            pulumi.set(__self__, "wireguard_client_configuration_filename", wireguard_client_configuration_filename)
        if wireguard_client_mode is not None:
            pulumi.set(__self__, "wireguard_client_mode", wireguard_client_mode)
        if wireguard_client_peer_ip is not None:
            pulumi.set(__self__, "wireguard_client_peer_ip", wireguard_client_peer_ip)
        if wireguard_client_peer_port is not None:
            pulumi.set(__self__, "wireguard_client_peer_port", wireguard_client_peer_port)
        if wireguard_client_peer_public_key is not None:
            pulumi.set(__self__, "wireguard_client_peer_public_key", wireguard_client_peer_public_key)
        if wireguard_client_preshared_key is not None:
            pulumi.set(__self__, "wireguard_client_preshared_key", wireguard_client_preshared_key)
        if wireguard_client_preshared_key_enabled is not None:
            pulumi.set(__self__, "wireguard_client_preshared_key_enabled", wireguard_client_preshared_key_enabled)
        if wireguard_interface is not None:
            pulumi.set(__self__, "wireguard_interface", wireguard_interface)
        if wireguard_local_wan_ip is not None:
            pulumi.set(__self__, "wireguard_local_wan_ip", wireguard_local_wan_ip)
        if wireguard_public_key is not None:
            pulumi.set(__self__, "wireguard_public_key", wireguard_public_key)
        if x_auth_key is not None:
            pulumi.set(__self__, "x_auth_key", x_auth_key)
        if x_ca_crt is not None:
            pulumi.set(__self__, "x_ca_crt", x_ca_crt)
        if x_ca_key is not None:
            pulumi.set(__self__, "x_ca_key", x_ca_key)
        if x_dh_key is not None:
            pulumi.set(__self__, "x_dh_key", x_dh_key)
        if x_ipsec_pre_shared_key is not None:
            pulumi.set(__self__, "x_ipsec_pre_shared_key", x_ipsec_pre_shared_key)
        if x_openvpn_password is not None:
            pulumi.set(__self__, "x_openvpn_password", x_openvpn_password)
        if x_openvpn_shared_secret_key is not None:
            pulumi.set(__self__, "x_openvpn_shared_secret_key", x_openvpn_shared_secret_key)
        if x_pptpc_password is not None:
            pulumi.set(__self__, "x_pptpc_password", x_pptpc_password)
        if x_server_crt is not None:
            pulumi.set(__self__, "x_server_crt", x_server_crt)
        if x_server_key is not None:
            pulumi.set(__self__, "x_server_key", x_server_key)
        if x_shared_client_crt is not None:
            pulumi.set(__self__, "x_shared_client_crt", x_shared_client_crt)
        if x_shared_client_key is not None:
            pulumi.set(__self__, "x_shared_client_key", x_shared_client_key)
        if x_wan_password is not None:
            pulumi.set(__self__, "x_wan_password", x_wan_password)
        if x_wireguard_private_key is not None:
            pulumi.set(__self__, "x_wireguard_private_key", x_wireguard_private_key)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="_dhcpdv6AllowSlaac")
    def _dhcpdv6_allow_slaac(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "_dhcpdv6_allow_slaac")

    @property
    @pulumi.getter(name="_dhcpdv6Dns1")
    def _dhcpdv6_dns1(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_dhcpdv6_dns1")

    @property
    @pulumi.getter(name="_dhcpdv6Dns2")
    def _dhcpdv6_dns2(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_dhcpdv6_dns2")

    @property
    @pulumi.getter(name="_dhcpdv6Dns3")
    def _dhcpdv6_dns3(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_dhcpdv6_dns3")

    @property
    @pulumi.getter(name="_dhcpdv6Dns4")
    def _dhcpdv6_dns4(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_dhcpdv6_dns4")

    @property
    @pulumi.getter(name="_dhcpdv6DnsAuto")
    def _dhcpdv6_dns_auto(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "_dhcpdv6_dns_auto")

    @property
    @pulumi.getter(name="_dhcpdv6Enabled")
    def _dhcpdv6_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "_dhcpdv6_enabled")

    @property
    @pulumi.getter(name="_dhcpdv6Leasetime")
    def _dhcpdv6_leasetime(self) -> Optional[builtins.int]:
        return pulumi.get(self, "_dhcpdv6_leasetime")

    @property
    @pulumi.getter(name="_dhcpdv6Start")
    def _dhcpdv6_start(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_dhcpdv6_start")

    @property
    @pulumi.getter(name="_dhcpdv6Stop")
    def _dhcpdv6_stop(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_dhcpdv6_stop")

    @property
    @pulumi.getter(name="_ipsecSeparateIkev2Networks")
    def _ipsec_separate_ikev2_networks(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "_ipsec_separate_ikev2_networks")

    @property
    @pulumi.getter(name="_ipv6ClientAddressAssignment")
    def _ipv6_client_address_assignment(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_ipv6_client_address_assignment")

    @property
    @pulumi.getter(name="_ipv6InterfaceType")
    def _ipv6_interface_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_ipv6_interface_type")

    @property
    @pulumi.getter(name="_ipv6PdAutoPrefixidEnabled")
    def _ipv6_pd_auto_prefixid_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "_ipv6_pd_auto_prefixid_enabled")

    @property
    @pulumi.getter(name="_ipv6PdInterface")
    def _ipv6_pd_interface(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_ipv6_pd_interface")

    @property
    @pulumi.getter(name="_ipv6PdPrefixid")
    def _ipv6_pd_prefixid(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_ipv6_pd_prefixid")

    @property
    @pulumi.getter(name="_ipv6PdStart")
    def _ipv6_pd_start(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_ipv6_pd_start")

    @property
    @pulumi.getter(name="_ipv6PdStop")
    def _ipv6_pd_stop(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_ipv6_pd_stop")

    @property
    @pulumi.getter(name="_ipv6RaEnabled")
    def _ipv6_ra_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "_ipv6_ra_enabled")

    @property
    @pulumi.getter(name="_ipv6RaPreferredLifetime")
    def _ipv6_ra_preferred_lifetime(self) -> Optional[builtins.int]:
        return pulumi.get(self, "_ipv6_ra_preferred_lifetime")

    @property
    @pulumi.getter(name="_ipv6RaPriority")
    def _ipv6_ra_priority(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_ipv6_ra_priority")

    @property
    @pulumi.getter(name="_ipv6RaValidLifetime")
    def _ipv6_ra_valid_lifetime(self) -> Optional[builtins.int]:
        return pulumi.get(self, "_ipv6_ra_valid_lifetime")

    @property
    @pulumi.getter(name="_ipv6SettingPreference")
    def _ipv6_setting_preference(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_ipv6_setting_preference")

    @property
    @pulumi.getter(name="_ipv6SingleNetworkInterface")
    def _ipv6_single_network_interface(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_ipv6_single_network_interface")

    @property
    @pulumi.getter(name="_ipv6Subnet")
    def _ipv6_subnet(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_ipv6_subnet")

    @property
    @pulumi.getter(name="_ipv6WanDelegationType")
    def _ipv6_wan_delegation_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_ipv6_wan_delegation_type")

    @property
    @pulumi.getter(name="_l2tpAllowWeakCiphers")
    def _l2tp_allow_weak_ciphers(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "_l2tp_allow_weak_ciphers")

    @property
    @pulumi.getter(name="_l2tpInterface")
    def _l2tp_interface(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_l2tp_interface")

    @property
    @pulumi.getter(name="_l2tpLocalWanIp")
    def _l2tp_local_wan_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_l2tp_local_wan_ip")

    @property
    @pulumi.getter(name="_wanDhcpv6PdSize")
    def _wan_dhcpv6_pd_size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "_wan_dhcpv6_pd_size")

    @property
    @pulumi.getter(name="_wanIpv6Dns1")
    def _wan_ipv6_dns1(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_wan_ipv6_dns1")

    @property
    @pulumi.getter(name="_wanIpv6Dns2")
    def _wan_ipv6_dns2(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_wan_ipv6_dns2")

    @property
    @pulumi.getter(name="_wanIpv6DnsPreference")
    def _wan_ipv6_dns_preference(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_wan_ipv6_dns_preference")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="autoScaleEnabled")
    def auto_scale_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "auto_scale_enabled")

    @property
    @pulumi.getter(name="dhcpRelayEnabled")
    def dhcp_relay_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dhcp_relay_enabled")

    @property
    @pulumi.getter(name="dhcpdBootEnabled")
    def dhcpd_boot_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dhcpd_boot_enabled")

    @property
    @pulumi.getter(name="dhcpdBootFilename")
    def dhcpd_boot_filename(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_boot_filename")

    @property
    @pulumi.getter(name="dhcpdBootServer")
    def dhcpd_boot_server(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_boot_server")

    @property
    @pulumi.getter(name="dhcpdConflictChecking")
    def dhcpd_conflict_checking(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dhcpd_conflict_checking")

    @property
    @pulumi.getter(name="dhcpdDns1")
    def dhcpd_dns1(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_dns1")

    @property
    @pulumi.getter(name="dhcpdDns2")
    def dhcpd_dns2(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_dns2")

    @property
    @pulumi.getter(name="dhcpdDns3")
    def dhcpd_dns3(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_dns3")

    @property
    @pulumi.getter(name="dhcpdDns4")
    def dhcpd_dns4(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_dns4")

    @property
    @pulumi.getter(name="dhcpdDnsEnabled")
    def dhcpd_dns_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dhcpd_dns_enabled")

    @property
    @pulumi.getter(name="dhcpdEnabled")
    def dhcpd_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dhcpd_enabled")

    @property
    @pulumi.getter(name="dhcpdGateway")
    def dhcpd_gateway(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_gateway")

    @property
    @pulumi.getter(name="dhcpdGatewayEnabled")
    def dhcpd_gateway_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dhcpd_gateway_enabled")

    @property
    @pulumi.getter(name="dhcpdIp1")
    def dhcpd_ip1(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_ip1")

    @property
    @pulumi.getter(name="dhcpdIp2")
    def dhcpd_ip2(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_ip2")

    @property
    @pulumi.getter(name="dhcpdIp3")
    def dhcpd_ip3(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_ip3")

    @property
    @pulumi.getter(name="dhcpdLeasetime")
    def dhcpd_leasetime(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dhcpd_leasetime")

    @property
    @pulumi.getter(name="dhcpdMac1")
    def dhcpd_mac1(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_mac1")

    @property
    @pulumi.getter(name="dhcpdMac2")
    def dhcpd_mac2(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_mac2")

    @property
    @pulumi.getter(name="dhcpdMac3")
    def dhcpd_mac3(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_mac3")

    @property
    @pulumi.getter(name="dhcpdNtp1")
    def dhcpd_ntp1(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_ntp1")

    @property
    @pulumi.getter(name="dhcpdNtp2")
    def dhcpd_ntp2(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_ntp2")

    @property
    @pulumi.getter(name="dhcpdNtpEnabled")
    def dhcpd_ntp_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dhcpd_ntp_enabled")

    @property
    @pulumi.getter(name="dhcpdStart")
    def dhcpd_start(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_start")

    @property
    @pulumi.getter(name="dhcpdStop")
    def dhcpd_stop(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_stop")

    @property
    @pulumi.getter(name="dhcpdTftpServer")
    def dhcpd_tftp_server(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_tftp_server")

    @property
    @pulumi.getter(name="dhcpdTimeOffset")
    def dhcpd_time_offset(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dhcpd_time_offset")

    @property
    @pulumi.getter(name="dhcpdTimeOffsetEnabled")
    def dhcpd_time_offset_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dhcpd_time_offset_enabled")

    @property
    @pulumi.getter(name="dhcpdUnifiController")
    def dhcpd_unifi_controller(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_unifi_controller")

    @property
    @pulumi.getter(name="dhcpdWins1")
    def dhcpd_wins1(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_wins1")

    @property
    @pulumi.getter(name="dhcpdWins2")
    def dhcpd_wins2(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_wins2")

    @property
    @pulumi.getter(name="dhcpdWinsEnabled")
    def dhcpd_wins_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dhcpd_wins_enabled")

    @property
    @pulumi.getter(name="dhcpdWpadUrl")
    def dhcpd_wpad_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dhcpd_wpad_url")

    @property
    @pulumi.getter(name="dhcpguardEnabled")
    def dhcpguard_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dhcpguard_enabled")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="dpiEnabled")
    def dpi_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "dpi_enabled")

    @property
    @pulumi.getter(name="dpigroupId")
    def dpigroup_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dpigroup_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exposedToSiteVpn")
    def exposed_to_site_vpn(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "exposed_to_site_vpn")

    @property
    @pulumi.getter(name="firewallZoneId")
    def firewall_zone_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "firewall_zone_id")

    @property
    @pulumi.getter(name="gatewayDevice")
    def gateway_device(self) -> Optional[builtins.str]:
        return pulumi.get(self, "gateway_device")

    @property
    @pulumi.getter(name="gatewayType")
    def gateway_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "gateway_type")

    @property
    @pulumi.getter(name="igmpFastleave")
    def igmp_fastleave(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "igmp_fastleave")

    @property
    @pulumi.getter(name="igmpFloodUnknownMulticast")
    def igmp_flood_unknown_multicast(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "igmp_flood_unknown_multicast")

    @property
    @pulumi.getter(name="igmpGroupmembership")
    def igmp_groupmembership(self) -> Optional[builtins.int]:
        return pulumi.get(self, "igmp_groupmembership")

    @property
    @pulumi.getter(name="igmpMaxresponse")
    def igmp_maxresponse(self) -> Optional[builtins.int]:
        return pulumi.get(self, "igmp_maxresponse")

    @property
    @pulumi.getter(name="igmpMcrtrexpiretime")
    def igmp_mcrtrexpiretime(self) -> Optional[builtins.int]:
        return pulumi.get(self, "igmp_mcrtrexpiretime")

    @property
    @pulumi.getter(name="igmpProxyDownstreamNetworkconfIds")
    def igmp_proxy_downstream_networkconf_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "igmp_proxy_downstream_networkconf_ids")

    @property
    @pulumi.getter(name="igmpProxyFor")
    def igmp_proxy_for(self) -> Optional[builtins.str]:
        return pulumi.get(self, "igmp_proxy_for")

    @property
    @pulumi.getter(name="igmpProxyUpstream")
    def igmp_proxy_upstream(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "igmp_proxy_upstream")

    @property
    @pulumi.getter(name="igmpQuerierSwitches")
    def igmp_querier_switches(self) -> Optional[Sequence['outputs.NetworkIGMPQuerierSwitches']]:
        return pulumi.get(self, "igmp_querier_switches")

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "igmp_snooping")

    @property
    @pulumi.getter(name="igmpSupression")
    def igmp_supression(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "igmp_supression")

    @property
    @pulumi.getter(name="interfaceMtu")
    def interface_mtu(self) -> Optional[builtins.int]:
        return pulumi.get(self, "interface_mtu")

    @property
    @pulumi.getter(name="interfaceMtuEnabled")
    def interface_mtu_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "interface_mtu_enabled")

    @property
    @pulumi.getter(name="internetAccessEnabled")
    def internet_access_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "internet_access_enabled")

    @property
    @pulumi.getter(name="ipSubnet")
    def ip_subnet(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip_subnet")

    @property
    @pulumi.getter(name="ipsecDhGroup")
    def ipsec_dh_group(self) -> Optional[builtins.int]:
        return pulumi.get(self, "ipsec_dh_group")

    @property
    @pulumi.getter(name="ipsecDynamicRouting")
    def ipsec_dynamic_routing(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "ipsec_dynamic_routing")

    @property
    @pulumi.getter(name="ipsecEncryption")
    def ipsec_encryption(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipsec_encryption")

    @property
    @pulumi.getter(name="ipsecEspDhGroup")
    def ipsec_esp_dh_group(self) -> Optional[builtins.int]:
        return pulumi.get(self, "ipsec_esp_dh_group")

    @property
    @pulumi.getter(name="ipsecEspEncryption")
    def ipsec_esp_encryption(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipsec_esp_encryption")

    @property
    @pulumi.getter(name="ipsecEspHash")
    def ipsec_esp_hash(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipsec_esp_hash")

    @property
    @pulumi.getter(name="ipsecEspLifetime")
    def ipsec_esp_lifetime(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipsec_esp_lifetime")

    @property
    @pulumi.getter(name="ipsecHash")
    def ipsec_hash(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipsec_hash")

    @property
    @pulumi.getter(name="ipsecIkeDhGroup")
    def ipsec_ike_dh_group(self) -> Optional[builtins.int]:
        return pulumi.get(self, "ipsec_ike_dh_group")

    @property
    @pulumi.getter(name="ipsecIkeEncryption")
    def ipsec_ike_encryption(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipsec_ike_encryption")

    @property
    @pulumi.getter(name="ipsecIkeHash")
    def ipsec_ike_hash(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipsec_ike_hash")

    @property
    @pulumi.getter(name="ipsecIkeLifetime")
    def ipsec_ike_lifetime(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipsec_ike_lifetime")

    @property
    @pulumi.getter(name="ipsecInterface")
    def ipsec_interface(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipsec_interface")

    @property
    @pulumi.getter(name="ipsecKeyExchange")
    def ipsec_key_exchange(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipsec_key_exchange")

    @property
    @pulumi.getter(name="ipsecLocalIdentifier")
    def ipsec_local_identifier(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipsec_local_identifier")

    @property
    @pulumi.getter(name="ipsecLocalIdentifierEnabled")
    def ipsec_local_identifier_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "ipsec_local_identifier_enabled")

    @property
    @pulumi.getter(name="ipsecLocalIp")
    def ipsec_local_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipsec_local_ip")

    @property
    @pulumi.getter(name="ipsecPeerIp")
    def ipsec_peer_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipsec_peer_ip")

    @property
    @pulumi.getter(name="ipsecPfs")
    def ipsec_pfs(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "ipsec_pfs")

    @property
    @pulumi.getter(name="ipsecProfile")
    def ipsec_profile(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipsec_profile")

    @property
    @pulumi.getter(name="ipsecRemoteIdentifier")
    def ipsec_remote_identifier(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipsec_remote_identifier")

    @property
    @pulumi.getter(name="ipsecRemoteIdentifierEnabled")
    def ipsec_remote_identifier_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "ipsec_remote_identifier_enabled")

    @property
    @pulumi.getter(name="ipsecTunnelIp")
    def ipsec_tunnel_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ipsec_tunnel_ip")

    @property
    @pulumi.getter(name="ipsecTunnelIpEnabled")
    def ipsec_tunnel_ip_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "ipsec_tunnel_ip_enabled")

    @property
    @pulumi.getter(name="isNat")
    def is_nat(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "is_nat")

    @property
    @pulumi.getter(name="localPort")
    def local_port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "local_port")

    @property
    @pulumi.getter(name="lteLanEnabled")
    def lte_lan_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "lte_lan_enabled")

    @property
    @pulumi.getter(name="macOverride")
    def mac_override(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mac_override")

    @property
    @pulumi.getter(name="macOverrideEnabled")
    def mac_override_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "mac_override_enabled")

    @property
    @pulumi.getter(name="mdnsEnabled")
    def mdns_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "mdns_enabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="natOutboundIpAddresses")
    def nat_outbound_ip_addresses(self) -> Optional[Sequence['outputs.NetworkNATOutboundIPAddresses']]:
        return pulumi.get(self, "nat_outbound_ip_addresses")

    @property
    @pulumi.getter(name="networkIsolationEnabled")
    def network_isolation_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "network_isolation_enabled")

    @property
    @pulumi.getter
    def networkgroup(self) -> Optional[builtins.str]:
        return pulumi.get(self, "networkgroup")

    @property
    @pulumi.getter(name="openvpnConfiguration")
    def openvpn_configuration(self) -> Optional[builtins.str]:
        return pulumi.get(self, "openvpn_configuration")

    @property
    @pulumi.getter(name="openvpnConfigurationFilename")
    def openvpn_configuration_filename(self) -> Optional[builtins.str]:
        return pulumi.get(self, "openvpn_configuration_filename")

    @property
    @pulumi.getter(name="openvpnEncryptionCipher")
    def openvpn_encryption_cipher(self) -> Optional[builtins.str]:
        return pulumi.get(self, "openvpn_encryption_cipher")

    @property
    @pulumi.getter(name="openvpnInterface")
    def openvpn_interface(self) -> Optional[builtins.str]:
        return pulumi.get(self, "openvpn_interface")

    @property
    @pulumi.getter(name="openvpnLocalAddress")
    def openvpn_local_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "openvpn_local_address")

    @property
    @pulumi.getter(name="openvpnLocalPort")
    def openvpn_local_port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "openvpn_local_port")

    @property
    @pulumi.getter(name="openvpnLocalWanIp")
    def openvpn_local_wan_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "openvpn_local_wan_ip")

    @property
    @pulumi.getter(name="openvpnMode")
    def openvpn_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "openvpn_mode")

    @property
    @pulumi.getter(name="openvpnRemoteAddress")
    def openvpn_remote_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "openvpn_remote_address")

    @property
    @pulumi.getter(name="openvpnRemoteHost")
    def openvpn_remote_host(self) -> Optional[builtins.str]:
        return pulumi.get(self, "openvpn_remote_host")

    @property
    @pulumi.getter(name="openvpnRemotePort")
    def openvpn_remote_port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "openvpn_remote_port")

    @property
    @pulumi.getter(name="openvpnUsername")
    def openvpn_username(self) -> Optional[builtins.str]:
        return pulumi.get(self, "openvpn_username")

    @property
    @pulumi.getter(name="pptpcRequireMppe")
    def pptpc_require_mppe(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "pptpc_require_mppe")

    @property
    @pulumi.getter(name="pptpcRouteDistance")
    def pptpc_route_distance(self) -> Optional[builtins.int]:
        return pulumi.get(self, "pptpc_route_distance")

    @property
    @pulumi.getter(name="pptpcServerIp")
    def pptpc_server_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "pptpc_server_ip")

    @property
    @pulumi.getter(name="pptpcUsername")
    def pptpc_username(self) -> Optional[builtins.str]:
        return pulumi.get(self, "pptpc_username")

    @property
    @pulumi.getter
    def priority(self) -> Optional[builtins.int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def purpose(self) -> Optional[builtins.str]:
        return pulumi.get(self, "purpose")

    @property
    @pulumi.getter(name="radiusprofileId")
    def radiusprofile_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "radiusprofile_id")

    @property
    @pulumi.getter(name="remoteSiteId")
    def remote_site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "remote_site_id")

    @property
    @pulumi.getter(name="remoteSiteSubnets")
    def remote_site_subnets(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "remote_site_subnets")

    @property
    @pulumi.getter(name="remoteVpnDynamicSubnetsEnabled")
    def remote_vpn_dynamic_subnets_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "remote_vpn_dynamic_subnets_enabled")

    @property
    @pulumi.getter(name="remoteVpnSubnets")
    def remote_vpn_subnets(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "remote_vpn_subnets")

    @property
    @pulumi.getter(name="reportWanEvent")
    def report_wan_event(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "report_wan_event")

    @property
    @pulumi.getter(name="requireMschapv2")
    def require_mschapv2(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "require_mschapv2")

    @property
    @pulumi.getter(name="routeDistance")
    def route_distance(self) -> Optional[builtins.int]:
        return pulumi.get(self, "route_distance")

    @property
    @pulumi.getter(name="sdwanRemoteSiteId")
    def sdwan_remote_site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "sdwan_remote_site_id")

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> Optional[builtins.str]:
        return pulumi.get(self, "setting_preference")

    @property
    @pulumi.getter(name="singleNetworkLan")
    def single_network_lan(self) -> Optional[builtins.str]:
        return pulumi.get(self, "single_network_lan")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="uidPolicyEnabled")
    def uid_policy_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "uid_policy_enabled")

    @property
    @pulumi.getter(name="uidPolicyName")
    def uid_policy_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "uid_policy_name")

    @property
    @pulumi.getter(name="uidPublicGatewayPort")
    def uid_public_gateway_port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "uid_public_gateway_port")

    @property
    @pulumi.getter(name="uidTrafficRulesAllowedIpsAndHostnames")
    def uid_traffic_rules_allowed_ips_and_hostnames(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "uid_traffic_rules_allowed_ips_and_hostnames")

    @property
    @pulumi.getter(name="uidTrafficRulesEnabled")
    def uid_traffic_rules_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "uid_traffic_rules_enabled")

    @property
    @pulumi.getter(name="uidVpnCustomRouting")
    def uid_vpn_custom_routing(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "uid_vpn_custom_routing")

    @property
    @pulumi.getter(name="uidVpnDefaultDnsSuffix")
    def uid_vpn_default_dns_suffix(self) -> Optional[builtins.str]:
        return pulumi.get(self, "uid_vpn_default_dns_suffix")

    @property
    @pulumi.getter(name="uidVpnMasqueradeEnabled")
    def uid_vpn_masquerade_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "uid_vpn_masquerade_enabled")

    @property
    @pulumi.getter(name="uidVpnMaxConnectionTimeSeconds")
    def uid_vpn_max_connection_time_seconds(self) -> Optional[builtins.int]:
        return pulumi.get(self, "uid_vpn_max_connection_time_seconds")

    @property
    @pulumi.getter(name="uidVpnSyncPublicIp")
    def uid_vpn_sync_public_ip(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "uid_vpn_sync_public_ip")

    @property
    @pulumi.getter(name="uidVpnType")
    def uid_vpn_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "uid_vpn_type")

    @property
    @pulumi.getter(name="uidWorkspaceUrl")
    def uid_workspace_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "uid_workspace_url")

    @property
    @pulumi.getter(name="upnpLanEnabled")
    def upnp_lan_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "upnp_lan_enabled")

    @property
    @pulumi.getter(name="usergroupId")
    def usergroup_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "usergroup_id")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[builtins.int]:
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="vlanEnabled")
    def vlan_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "vlan_enabled")

    @property
    @pulumi.getter(name="vpnClientConfigurationRemoteIpOverride")
    def vpn_client_configuration_remote_ip_override(self) -> Optional[builtins.str]:
        return pulumi.get(self, "vpn_client_configuration_remote_ip_override")

    @property
    @pulumi.getter(name="vpnClientConfigurationRemoteIpOverrideEnabled")
    def vpn_client_configuration_remote_ip_override_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "vpn_client_configuration_remote_ip_override_enabled")

    @property
    @pulumi.getter(name="vpnClientDefaultRoute")
    def vpn_client_default_route(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "vpn_client_default_route")

    @property
    @pulumi.getter(name="vpnClientPullDns")
    def vpn_client_pull_dns(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "vpn_client_pull_dns")

    @property
    @pulumi.getter(name="vpnProtocol")
    def vpn_protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "vpn_protocol")

    @property
    @pulumi.getter(name="vpnType")
    def vpn_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "vpn_type")

    @property
    @pulumi.getter(name="vrrpIpSubnetGw1")
    def vrrp_ip_subnet_gw1(self) -> Optional[builtins.str]:
        return pulumi.get(self, "vrrp_ip_subnet_gw1")

    @property
    @pulumi.getter(name="vrrpIpSubnetGw2")
    def vrrp_ip_subnet_gw2(self) -> Optional[builtins.str]:
        return pulumi.get(self, "vrrp_ip_subnet_gw2")

    @property
    @pulumi.getter(name="vrrpVrid")
    def vrrp_vrid(self) -> Optional[builtins.int]:
        return pulumi.get(self, "vrrp_vrid")

    @property
    @pulumi.getter(name="wanDhcpCos")
    def wan_dhcp_cos(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wan_dhcp_cos")

    @property
    @pulumi.getter(name="wanDhcpOptions")
    def wan_dhcp_options(self) -> Optional[Sequence['outputs.NetworkWANDHCPOptions']]:
        return pulumi.get(self, "wan_dhcp_options")

    @property
    @pulumi.getter(name="wanDns1")
    def wan_dns1(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_dns1")

    @property
    @pulumi.getter(name="wanDns2")
    def wan_dns2(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_dns2")

    @property
    @pulumi.getter(name="wanDns3")
    def wan_dns3(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_dns3")

    @property
    @pulumi.getter(name="wanDns4")
    def wan_dns4(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_dns4")

    @property
    @pulumi.getter(name="wanDnsPreference")
    def wan_dns_preference(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_dns_preference")

    @property
    @pulumi.getter(name="wanDsliteRemoteHost")
    def wan_dslite_remote_host(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_dslite_remote_host")

    @property
    @pulumi.getter(name="wanEgressQos")
    def wan_egress_qos(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wan_egress_qos")

    @property
    @pulumi.getter(name="wanFailoverPriority")
    def wan_failover_priority(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wan_failover_priority")

    @property
    @pulumi.getter(name="wanGateway")
    def wan_gateway(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_gateway")

    @property
    @pulumi.getter(name="wanGatewayV6")
    def wan_gateway_v6(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_gateway_v6")

    @property
    @pulumi.getter(name="wanIp")
    def wan_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_ip")

    @property
    @pulumi.getter(name="wanIpAliases")
    def wan_ip_aliases(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "wan_ip_aliases")

    @property
    @pulumi.getter(name="wanIpv6")
    def wan_ipv6(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_ipv6")

    @property
    @pulumi.getter(name="wanLoadBalanceType")
    def wan_load_balance_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_load_balance_type")

    @property
    @pulumi.getter(name="wanLoadBalanceWeight")
    def wan_load_balance_weight(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wan_load_balance_weight")

    @property
    @pulumi.getter(name="wanNetmask")
    def wan_netmask(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_netmask")

    @property
    @pulumi.getter(name="wanNetworkgroup")
    def wan_networkgroup(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_networkgroup")

    @property
    @pulumi.getter(name="wanPppoePasswordEnabled")
    def wan_pppoe_password_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "wan_pppoe_password_enabled")

    @property
    @pulumi.getter(name="wanPppoeUsernameEnabled")
    def wan_pppoe_username_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "wan_pppoe_username_enabled")

    @property
    @pulumi.getter(name="wanPrefixlen")
    def wan_prefixlen(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wan_prefixlen")

    @property
    @pulumi.getter(name="wanProviderCapabilities")
    def wan_provider_capabilities(self) -> Optional['outputs.NetworkWANProviderCapabilities']:
        return pulumi.get(self, "wan_provider_capabilities")

    @property
    @pulumi.getter(name="wanSmartqDownRate")
    def wan_smartq_down_rate(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wan_smartq_down_rate")

    @property
    @pulumi.getter(name="wanSmartqEnabled")
    def wan_smartq_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "wan_smartq_enabled")

    @property
    @pulumi.getter(name="wanSmartqUpRate")
    def wan_smartq_up_rate(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wan_smartq_up_rate")

    @property
    @pulumi.getter(name="wanType")
    def wan_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_type")

    @property
    @pulumi.getter(name="wanTypeV6")
    def wan_type_v6(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_type_v6")

    @property
    @pulumi.getter(name="wanUsername")
    def wan_username(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_username")

    @property
    @pulumi.getter(name="wanVlan")
    def wan_vlan(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wan_vlan")

    @property
    @pulumi.getter(name="wanVlanEnabled")
    def wan_vlan_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "wan_vlan_enabled")

    @property
    @pulumi.getter(name="wireguardClientConfigurationFile")
    def wireguard_client_configuration_file(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wireguard_client_configuration_file")

    @property
    @pulumi.getter(name="wireguardClientConfigurationFilename")
    def wireguard_client_configuration_filename(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wireguard_client_configuration_filename")

    @property
    @pulumi.getter(name="wireguardClientMode")
    def wireguard_client_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wireguard_client_mode")

    @property
    @pulumi.getter(name="wireguardClientPeerIp")
    def wireguard_client_peer_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wireguard_client_peer_ip")

    @property
    @pulumi.getter(name="wireguardClientPeerPort")
    def wireguard_client_peer_port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "wireguard_client_peer_port")

    @property
    @pulumi.getter(name="wireguardClientPeerPublicKey")
    def wireguard_client_peer_public_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wireguard_client_peer_public_key")

    @property
    @pulumi.getter(name="wireguardClientPresharedKey")
    def wireguard_client_preshared_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wireguard_client_preshared_key")

    @property
    @pulumi.getter(name="wireguardClientPresharedKeyEnabled")
    def wireguard_client_preshared_key_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "wireguard_client_preshared_key_enabled")

    @property
    @pulumi.getter(name="wireguardInterface")
    def wireguard_interface(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wireguard_interface")

    @property
    @pulumi.getter(name="wireguardLocalWanIp")
    def wireguard_local_wan_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wireguard_local_wan_ip")

    @property
    @pulumi.getter(name="wireguardPublicKey")
    def wireguard_public_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wireguard_public_key")

    @property
    @pulumi.getter(name="xAuthKey")
    def x_auth_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_auth_key")

    @property
    @pulumi.getter(name="xCaCrt")
    def x_ca_crt(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_ca_crt")

    @property
    @pulumi.getter(name="xCaKey")
    def x_ca_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_ca_key")

    @property
    @pulumi.getter(name="xDhKey")
    def x_dh_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_dh_key")

    @property
    @pulumi.getter(name="xIpsecPreSharedKey")
    def x_ipsec_pre_shared_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_ipsec_pre_shared_key")

    @property
    @pulumi.getter(name="xOpenvpnPassword")
    def x_openvpn_password(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_openvpn_password")

    @property
    @pulumi.getter(name="xOpenvpnSharedSecretKey")
    def x_openvpn_shared_secret_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_openvpn_shared_secret_key")

    @property
    @pulumi.getter(name="xPptpcPassword")
    def x_pptpc_password(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_pptpc_password")

    @property
    @pulumi.getter(name="xServerCrt")
    def x_server_crt(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_server_crt")

    @property
    @pulumi.getter(name="xServerKey")
    def x_server_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_server_key")

    @property
    @pulumi.getter(name="xSharedClientCrt")
    def x_shared_client_crt(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_shared_client_crt")

    @property
    @pulumi.getter(name="xSharedClientKey")
    def x_shared_client_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_shared_client_key")

    @property
    @pulumi.getter(name="xWanPassword")
    def x_wan_password(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_wan_password")

    @property
    @pulumi.getter(name="xWireguardPrivateKey")
    def x_wireguard_private_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "x_wireguard_private_key")


@pulumi.output_type
class NetworkIGMPQuerierSwitches(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "querierAddress":
            suggest = "querier_address"
        elif key == "switchMac":
            suggest = "switch_mac"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkIGMPQuerierSwitches. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkIGMPQuerierSwitches.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkIGMPQuerierSwitches.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 querier_address: Optional[builtins.str] = None,
                 switch_mac: Optional[builtins.str] = None):
        if querier_address is not None:
            pulumi.set(__self__, "querier_address", querier_address)
        if switch_mac is not None:
            pulumi.set(__self__, "switch_mac", switch_mac)

    @property
    @pulumi.getter(name="querierAddress")
    def querier_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "querier_address")

    @property
    @pulumi.getter(name="switchMac")
    def switch_mac(self) -> Optional[builtins.str]:
        return pulumi.get(self, "switch_mac")


@pulumi.output_type
class NetworkNATOutboundIPAddresses(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressPool":
            suggest = "ip_address_pool"
        elif key == "wanNetworkGroup":
            suggest = "wan_network_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkNATOutboundIPAddresses. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkNATOutboundIPAddresses.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkNATOutboundIPAddresses.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[builtins.str] = None,
                 ip_address_pool: Optional[Sequence[builtins.str]] = None,
                 mode: Optional[builtins.str] = None,
                 wan_network_group: Optional[builtins.str] = None):
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_pool is not None:
            pulumi.set(__self__, "ip_address_pool", ip_address_pool)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if wan_network_group is not None:
            pulumi.set(__self__, "wan_network_group", wan_network_group)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipAddressPool")
    def ip_address_pool(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "ip_address_pool")

    @property
    @pulumi.getter
    def mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="wanNetworkGroup")
    def wan_network_group(self) -> Optional[builtins.str]:
        return pulumi.get(self, "wan_network_group")


@pulumi.output_type
class NetworkWANDHCPOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "optionNumber":
            suggest = "option_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkWANDHCPOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkWANDHCPOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkWANDHCPOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 option_number: Optional[builtins.int] = None,
                 value: Optional[builtins.str] = None):
        if option_number is not None:
            pulumi.set(__self__, "option_number", option_number)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="optionNumber")
    def option_number(self) -> Optional[builtins.int]:
        return pulumi.get(self, "option_number")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NetworkWANProviderCapabilities(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadKilobitsPerSecond":
            suggest = "download_kilobits_per_second"
        elif key == "uploadKilobitsPerSecond":
            suggest = "upload_kilobits_per_second"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkWANProviderCapabilities. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkWANProviderCapabilities.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkWANProviderCapabilities.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_kilobits_per_second: Optional[builtins.int] = None,
                 upload_kilobits_per_second: Optional[builtins.int] = None):
        if download_kilobits_per_second is not None:
            pulumi.set(__self__, "download_kilobits_per_second", download_kilobits_per_second)
        if upload_kilobits_per_second is not None:
            pulumi.set(__self__, "upload_kilobits_per_second", upload_kilobits_per_second)

    @property
    @pulumi.getter(name="downloadKilobitsPerSecond")
    def download_kilobits_per_second(self) -> Optional[builtins.int]:
        return pulumi.get(self, "download_kilobits_per_second")

    @property
    @pulumi.getter(name="uploadKilobitsPerSecond")
    def upload_kilobits_per_second(self) -> Optional[builtins.int]:
        return pulumi.get(self, "upload_kilobits_per_second")


