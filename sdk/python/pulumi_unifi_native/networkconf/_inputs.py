# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'NetworkIGMPQuerierSwitchesArgs',
    'NetworkIGMPQuerierSwitchesArgsDict',
    'NetworkNATOutboundIPAddressesArgs',
    'NetworkNATOutboundIPAddressesArgsDict',
    'NetworkWANDHCPOptionsArgs',
    'NetworkWANDHCPOptionsArgsDict',
    'NetworkWANProviderCapabilitiesArgs',
    'NetworkWANProviderCapabilitiesArgsDict',
]

MYPY = False

if not MYPY:
    class NetworkIGMPQuerierSwitchesArgsDict(TypedDict):
        querier_address: NotRequired[pulumi.Input[builtins.str]]
        switch_mac: NotRequired[pulumi.Input[builtins.str]]
elif False:
    NetworkIGMPQuerierSwitchesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkIGMPQuerierSwitchesArgs:
    def __init__(__self__, *,
                 querier_address: Optional[pulumi.Input[builtins.str]] = None,
                 switch_mac: Optional[pulumi.Input[builtins.str]] = None):
        if querier_address is not None:
            pulumi.set(__self__, "querier_address", querier_address)
        if switch_mac is not None:
            pulumi.set(__self__, "switch_mac", switch_mac)

    @property
    @pulumi.getter(name="querierAddress")
    def querier_address(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "querier_address")

    @querier_address.setter
    def querier_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "querier_address", value)

    @property
    @pulumi.getter(name="switchMac")
    def switch_mac(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "switch_mac")

    @switch_mac.setter
    def switch_mac(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "switch_mac", value)


if not MYPY:
    class NetworkNATOutboundIPAddressesArgsDict(TypedDict):
        ip_address: NotRequired[pulumi.Input[builtins.str]]
        ip_address_pool: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        mode: NotRequired[pulumi.Input[builtins.str]]
        wan_network_group: NotRequired[pulumi.Input[builtins.str]]
elif False:
    NetworkNATOutboundIPAddressesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkNATOutboundIPAddressesArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[builtins.str]] = None,
                 ip_address_pool: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 wan_network_group: Optional[pulumi.Input[builtins.str]] = None):
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_pool is not None:
            pulumi.set(__self__, "ip_address_pool", ip_address_pool)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if wan_network_group is not None:
            pulumi.set(__self__, "wan_network_group", wan_network_group)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="ipAddressPool")
    def ip_address_pool(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "ip_address_pool")

    @ip_address_pool.setter
    def ip_address_pool(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ip_address_pool", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="wanNetworkGroup")
    def wan_network_group(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wan_network_group")

    @wan_network_group.setter
    def wan_network_group(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wan_network_group", value)


if not MYPY:
    class NetworkWANDHCPOptionsArgsDict(TypedDict):
        option_number: NotRequired[pulumi.Input[builtins.int]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    NetworkWANDHCPOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkWANDHCPOptionsArgs:
    def __init__(__self__, *,
                 option_number: Optional[pulumi.Input[builtins.int]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if option_number is not None:
            pulumi.set(__self__, "option_number", option_number)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="optionNumber")
    def option_number(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "option_number")

    @option_number.setter
    def option_number(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "option_number", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NetworkWANProviderCapabilitiesArgsDict(TypedDict):
        download_kilobits_per_second: NotRequired[pulumi.Input[builtins.int]]
        upload_kilobits_per_second: NotRequired[pulumi.Input[builtins.int]]
elif False:
    NetworkWANProviderCapabilitiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkWANProviderCapabilitiesArgs:
    def __init__(__self__, *,
                 download_kilobits_per_second: Optional[pulumi.Input[builtins.int]] = None,
                 upload_kilobits_per_second: Optional[pulumi.Input[builtins.int]] = None):
        if download_kilobits_per_second is not None:
            pulumi.set(__self__, "download_kilobits_per_second", download_kilobits_per_second)
        if upload_kilobits_per_second is not None:
            pulumi.set(__self__, "upload_kilobits_per_second", upload_kilobits_per_second)

    @property
    @pulumi.getter(name="downloadKilobitsPerSecond")
    def download_kilobits_per_second(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "download_kilobits_per_second")

    @download_kilobits_per_second.setter
    def download_kilobits_per_second(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "download_kilobits_per_second", value)

    @property
    @pulumi.getter(name="uploadKilobitsPerSecond")
    def upload_kilobits_per_second(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "upload_kilobits_per_second")

    @upload_kilobits_per_second.setter
    def upload_kilobits_per_second(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "upload_kilobits_per_second", value)


