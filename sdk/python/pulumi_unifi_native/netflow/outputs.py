# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'Meta',
    'SettingNetflow',
]

@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


@pulumi.output_type
class SettingNetflow(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 auto_engine_id_enabled: Optional[builtins.bool] = None,
                 enabled: Optional[builtins.bool] = None,
                 engine_id: Optional[builtins.int] = None,
                 export_frequency: Optional[builtins.int] = None,
                 key: Optional[builtins.str] = None,
                 network_ids: Optional[Sequence[builtins.str]] = None,
                 port: Optional[builtins.int] = None,
                 refresh_rate: Optional[builtins.int] = None,
                 sampling_mode: Optional[builtins.str] = None,
                 sampling_rate: Optional[builtins.int] = None,
                 server: Optional[builtins.str] = None,
                 site_id: Optional[builtins.str] = None,
                 version: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if auto_engine_id_enabled is not None:
            pulumi.set(__self__, "auto_engine_id_enabled", auto_engine_id_enabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if engine_id is not None:
            pulumi.set(__self__, "engine_id", engine_id)
        if export_frequency is not None:
            pulumi.set(__self__, "export_frequency", export_frequency)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if network_ids is not None:
            pulumi.set(__self__, "network_ids", network_ids)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if sampling_mode is not None:
            pulumi.set(__self__, "sampling_mode", sampling_mode)
        if sampling_rate is not None:
            pulumi.set(__self__, "sampling_rate", sampling_rate)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="autoEngineIdEnabled")
    def auto_engine_id_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "auto_engine_id_enabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "engine_id")

    @property
    @pulumi.getter(name="exportFrequency")
    def export_frequency(self) -> Optional[builtins.int]:
        return pulumi.get(self, "export_frequency")

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="networkIds")
    def network_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "network_ids")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[builtins.int]:
        return pulumi.get(self, "refresh_rate")

    @property
    @pulumi.getter(name="samplingMode")
    def sampling_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "sampling_mode")

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> Optional[builtins.int]:
        return pulumi.get(self, "sampling_rate")

    @property
    @pulumi.getter
    def server(self) -> Optional[builtins.str]:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.int]:
        return pulumi.get(self, "version")


