# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'Meta',
    'PortProfile',
    'PortProfileQOSMarking',
    'PortProfileQOSMatching',
    'PortProfileQOSPolicies',
    'PortProfileQOSProfile',
]

@pulumi.output_type
class Meta(dict):
    def __init__(__self__, *,
                 msg: Optional[builtins.str] = None,
                 rc: Optional[builtins.str] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if rc is not None:
            pulumi.set(__self__, "rc", rc)

    @property
    @pulumi.getter
    def msg(self) -> Optional[builtins.str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def rc(self) -> Optional[builtins.str]:
        return pulumi.get(self, "rc")


@pulumi.output_type
class PortProfile(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 _dot1x_ctrl: Optional[builtins.str] = None,
                 _dot1x_idle_timeout: Optional[builtins.int] = None,
                 _priority_queue1_level: Optional[builtins.int] = None,
                 _priority_queue2_level: Optional[builtins.int] = None,
                 _priority_queue3_level: Optional[builtins.int] = None,
                 _priority_queue4_level: Optional[builtins.int] = None,
                 attr_hidden: Optional[builtins.bool] = None,
                 attr_hidden_id: Optional[builtins.str] = None,
                 attr_no_delete: Optional[builtins.bool] = None,
                 attr_no_edit: Optional[builtins.bool] = None,
                 autoneg: Optional[builtins.bool] = None,
                 egress_rate_limit_kbps: Optional[builtins.int] = None,
                 egress_rate_limit_kbps_enabled: Optional[builtins.bool] = None,
                 excluded_networkconf_ids: Optional[Sequence[builtins.str]] = None,
                 fec_mode: Optional[builtins.str] = None,
                 forward: Optional[builtins.str] = None,
                 full_duplex: Optional[builtins.bool] = None,
                 isolation: Optional[builtins.bool] = None,
                 lldpmed_enabled: Optional[builtins.bool] = None,
                 lldpmed_notify_enabled: Optional[builtins.bool] = None,
                 multicast_router_networkconf_ids: Optional[Sequence[builtins.str]] = None,
                 name: Optional[builtins.str] = None,
                 native_networkconf_id: Optional[builtins.str] = None,
                 op_mode: Optional[builtins.str] = None,
                 poe_mode: Optional[builtins.str] = None,
                 port_keepalive_enabled: Optional[builtins.bool] = None,
                 port_security_enabled: Optional[builtins.bool] = None,
                 port_security_mac_address: Optional[Sequence[builtins.str]] = None,
                 qos_profile: Optional['outputs.PortProfileQOSProfile'] = None,
                 setting_preference: Optional[builtins.str] = None,
                 site_id: Optional[builtins.str] = None,
                 speed: Optional[builtins.int] = None,
                 stormctrl_bcast_enabled: Optional[builtins.bool] = None,
                 stormctrl_bcast_level: Optional[builtins.int] = None,
                 stormctrl_bcast_rate: Optional[builtins.int] = None,
                 stormctrl_mcast_enabled: Optional[builtins.bool] = None,
                 stormctrl_mcast_level: Optional[builtins.int] = None,
                 stormctrl_mcast_rate: Optional[builtins.int] = None,
                 stormctrl_type: Optional[builtins.str] = None,
                 stormctrl_ucast_enabled: Optional[builtins.bool] = None,
                 stormctrl_ucast_level: Optional[builtins.int] = None,
                 stormctrl_ucast_rate: Optional[builtins.int] = None,
                 stp_port_mode: Optional[builtins.bool] = None,
                 tagged_vlan_mgmt: Optional[builtins.str] = None,
                 voice_networkconf_id: Optional[builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if _dot1x_ctrl is not None:
            pulumi.set(__self__, "_dot1x_ctrl", _dot1x_ctrl)
        if _dot1x_idle_timeout is not None:
            pulumi.set(__self__, "_dot1x_idle_timeout", _dot1x_idle_timeout)
        if _priority_queue1_level is not None:
            pulumi.set(__self__, "_priority_queue1_level", _priority_queue1_level)
        if _priority_queue2_level is not None:
            pulumi.set(__self__, "_priority_queue2_level", _priority_queue2_level)
        if _priority_queue3_level is not None:
            pulumi.set(__self__, "_priority_queue3_level", _priority_queue3_level)
        if _priority_queue4_level is not None:
            pulumi.set(__self__, "_priority_queue4_level", _priority_queue4_level)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if autoneg is not None:
            pulumi.set(__self__, "autoneg", autoneg)
        if egress_rate_limit_kbps is not None:
            pulumi.set(__self__, "egress_rate_limit_kbps", egress_rate_limit_kbps)
        if egress_rate_limit_kbps_enabled is not None:
            pulumi.set(__self__, "egress_rate_limit_kbps_enabled", egress_rate_limit_kbps_enabled)
        if excluded_networkconf_ids is not None:
            pulumi.set(__self__, "excluded_networkconf_ids", excluded_networkconf_ids)
        if fec_mode is not None:
            pulumi.set(__self__, "fec_mode", fec_mode)
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if full_duplex is not None:
            pulumi.set(__self__, "full_duplex", full_duplex)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if lldpmed_enabled is not None:
            pulumi.set(__self__, "lldpmed_enabled", lldpmed_enabled)
        if lldpmed_notify_enabled is not None:
            pulumi.set(__self__, "lldpmed_notify_enabled", lldpmed_notify_enabled)
        if multicast_router_networkconf_ids is not None:
            pulumi.set(__self__, "multicast_router_networkconf_ids", multicast_router_networkconf_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if native_networkconf_id is not None:
            pulumi.set(__self__, "native_networkconf_id", native_networkconf_id)
        if op_mode is not None:
            pulumi.set(__self__, "op_mode", op_mode)
        if poe_mode is not None:
            pulumi.set(__self__, "poe_mode", poe_mode)
        if port_keepalive_enabled is not None:
            pulumi.set(__self__, "port_keepalive_enabled", port_keepalive_enabled)
        if port_security_enabled is not None:
            pulumi.set(__self__, "port_security_enabled", port_security_enabled)
        if port_security_mac_address is not None:
            pulumi.set(__self__, "port_security_mac_address", port_security_mac_address)
        if qos_profile is not None:
            pulumi.set(__self__, "qos_profile", qos_profile)
        if setting_preference is not None:
            pulumi.set(__self__, "setting_preference", setting_preference)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if stormctrl_bcast_enabled is not None:
            pulumi.set(__self__, "stormctrl_bcast_enabled", stormctrl_bcast_enabled)
        if stormctrl_bcast_level is not None:
            pulumi.set(__self__, "stormctrl_bcast_level", stormctrl_bcast_level)
        if stormctrl_bcast_rate is not None:
            pulumi.set(__self__, "stormctrl_bcast_rate", stormctrl_bcast_rate)
        if stormctrl_mcast_enabled is not None:
            pulumi.set(__self__, "stormctrl_mcast_enabled", stormctrl_mcast_enabled)
        if stormctrl_mcast_level is not None:
            pulumi.set(__self__, "stormctrl_mcast_level", stormctrl_mcast_level)
        if stormctrl_mcast_rate is not None:
            pulumi.set(__self__, "stormctrl_mcast_rate", stormctrl_mcast_rate)
        if stormctrl_type is not None:
            pulumi.set(__self__, "stormctrl_type", stormctrl_type)
        if stormctrl_ucast_enabled is not None:
            pulumi.set(__self__, "stormctrl_ucast_enabled", stormctrl_ucast_enabled)
        if stormctrl_ucast_level is not None:
            pulumi.set(__self__, "stormctrl_ucast_level", stormctrl_ucast_level)
        if stormctrl_ucast_rate is not None:
            pulumi.set(__self__, "stormctrl_ucast_rate", stormctrl_ucast_rate)
        if stp_port_mode is not None:
            pulumi.set(__self__, "stp_port_mode", stp_port_mode)
        if tagged_vlan_mgmt is not None:
            pulumi.set(__self__, "tagged_vlan_mgmt", tagged_vlan_mgmt)
        if voice_networkconf_id is not None:
            pulumi.set(__self__, "voice_networkconf_id", voice_networkconf_id)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="_dot1xCtrl")
    def _dot1x_ctrl(self) -> Optional[builtins.str]:
        return pulumi.get(self, "_dot1x_ctrl")

    @property
    @pulumi.getter(name="_dot1xIdleTimeout")
    def _dot1x_idle_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "_dot1x_idle_timeout")

    @property
    @pulumi.getter(name="_priorityQueue1Level")
    def _priority_queue1_level(self) -> Optional[builtins.int]:
        return pulumi.get(self, "_priority_queue1_level")

    @property
    @pulumi.getter(name="_priorityQueue2Level")
    def _priority_queue2_level(self) -> Optional[builtins.int]:
        return pulumi.get(self, "_priority_queue2_level")

    @property
    @pulumi.getter(name="_priorityQueue3Level")
    def _priority_queue3_level(self) -> Optional[builtins.int]:
        return pulumi.get(self, "_priority_queue3_level")

    @property
    @pulumi.getter(name="_priorityQueue4Level")
    def _priority_queue4_level(self) -> Optional[builtins.int]:
        return pulumi.get(self, "_priority_queue4_level")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter
    def autoneg(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "autoneg")

    @property
    @pulumi.getter(name="egressRateLimitKbps")
    def egress_rate_limit_kbps(self) -> Optional[builtins.int]:
        return pulumi.get(self, "egress_rate_limit_kbps")

    @property
    @pulumi.getter(name="egressRateLimitKbpsEnabled")
    def egress_rate_limit_kbps_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "egress_rate_limit_kbps_enabled")

    @property
    @pulumi.getter(name="excludedNetworkconfIds")
    def excluded_networkconf_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "excluded_networkconf_ids")

    @property
    @pulumi.getter(name="fecMode")
    def fec_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "fec_mode")

    @property
    @pulumi.getter
    def forward(self) -> Optional[builtins.str]:
        return pulumi.get(self, "forward")

    @property
    @pulumi.getter(name="fullDuplex")
    def full_duplex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "full_duplex")

    @property
    @pulumi.getter
    def isolation(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "isolation")

    @property
    @pulumi.getter(name="lldpmedEnabled")
    def lldpmed_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "lldpmed_enabled")

    @property
    @pulumi.getter(name="lldpmedNotifyEnabled")
    def lldpmed_notify_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "lldpmed_notify_enabled")

    @property
    @pulumi.getter(name="multicastRouterNetworkconfIds")
    def multicast_router_networkconf_ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "multicast_router_networkconf_ids")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nativeNetworkconfId")
    def native_networkconf_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "native_networkconf_id")

    @property
    @pulumi.getter(name="opMode")
    def op_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "op_mode")

    @property
    @pulumi.getter(name="poeMode")
    def poe_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "poe_mode")

    @property
    @pulumi.getter(name="portKeepaliveEnabled")
    def port_keepalive_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "port_keepalive_enabled")

    @property
    @pulumi.getter(name="portSecurityEnabled")
    def port_security_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "port_security_enabled")

    @property
    @pulumi.getter(name="portSecurityMacAddress")
    def port_security_mac_address(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "port_security_mac_address")

    @property
    @pulumi.getter(name="qosProfile")
    def qos_profile(self) -> Optional['outputs.PortProfileQOSProfile']:
        return pulumi.get(self, "qos_profile")

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> Optional[builtins.str]:
        return pulumi.get(self, "setting_preference")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def speed(self) -> Optional[builtins.int]:
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter(name="stormctrlBcastEnabled")
    def stormctrl_bcast_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "stormctrl_bcast_enabled")

    @property
    @pulumi.getter(name="stormctrlBcastLevel")
    def stormctrl_bcast_level(self) -> Optional[builtins.int]:
        return pulumi.get(self, "stormctrl_bcast_level")

    @property
    @pulumi.getter(name="stormctrlBcastRate")
    def stormctrl_bcast_rate(self) -> Optional[builtins.int]:
        return pulumi.get(self, "stormctrl_bcast_rate")

    @property
    @pulumi.getter(name="stormctrlMcastEnabled")
    def stormctrl_mcast_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "stormctrl_mcast_enabled")

    @property
    @pulumi.getter(name="stormctrlMcastLevel")
    def stormctrl_mcast_level(self) -> Optional[builtins.int]:
        return pulumi.get(self, "stormctrl_mcast_level")

    @property
    @pulumi.getter(name="stormctrlMcastRate")
    def stormctrl_mcast_rate(self) -> Optional[builtins.int]:
        return pulumi.get(self, "stormctrl_mcast_rate")

    @property
    @pulumi.getter(name="stormctrlType")
    def stormctrl_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "stormctrl_type")

    @property
    @pulumi.getter(name="stormctrlUcastEnabled")
    def stormctrl_ucast_enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "stormctrl_ucast_enabled")

    @property
    @pulumi.getter(name="stormctrlUcastLevel")
    def stormctrl_ucast_level(self) -> Optional[builtins.int]:
        return pulumi.get(self, "stormctrl_ucast_level")

    @property
    @pulumi.getter(name="stormctrlUcastRate")
    def stormctrl_ucast_rate(self) -> Optional[builtins.int]:
        return pulumi.get(self, "stormctrl_ucast_rate")

    @property
    @pulumi.getter(name="stpPortMode")
    def stp_port_mode(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "stp_port_mode")

    @property
    @pulumi.getter(name="taggedVlanMgmt")
    def tagged_vlan_mgmt(self) -> Optional[builtins.str]:
        return pulumi.get(self, "tagged_vlan_mgmt")

    @property
    @pulumi.getter(name="voiceNetworkconfId")
    def voice_networkconf_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "voice_networkconf_id")


@pulumi.output_type
class PortProfileQOSMarking(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosCode":
            suggest = "cos_code"
        elif key == "dscpCode":
            suggest = "dscp_code"
        elif key == "ipPrecedenceCode":
            suggest = "ip_precedence_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortProfileQOSMarking. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortProfileQOSMarking.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortProfileQOSMarking.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cos_code: Optional[builtins.int] = None,
                 dscp_code: Optional[builtins.int] = None,
                 ip_precedence_code: Optional[builtins.int] = None,
                 queue: Optional[builtins.int] = None):
        if cos_code is not None:
            pulumi.set(__self__, "cos_code", cos_code)
        if dscp_code is not None:
            pulumi.set(__self__, "dscp_code", dscp_code)
        if ip_precedence_code is not None:
            pulumi.set(__self__, "ip_precedence_code", ip_precedence_code)
        if queue is not None:
            pulumi.set(__self__, "queue", queue)

    @property
    @pulumi.getter(name="cosCode")
    def cos_code(self) -> Optional[builtins.int]:
        return pulumi.get(self, "cos_code")

    @property
    @pulumi.getter(name="dscpCode")
    def dscp_code(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dscp_code")

    @property
    @pulumi.getter(name="ipPrecedenceCode")
    def ip_precedence_code(self) -> Optional[builtins.int]:
        return pulumi.get(self, "ip_precedence_code")

    @property
    @pulumi.getter
    def queue(self) -> Optional[builtins.int]:
        return pulumi.get(self, "queue")


@pulumi.output_type
class PortProfileQOSMatching(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosCode":
            suggest = "cos_code"
        elif key == "dscpCode":
            suggest = "dscp_code"
        elif key == "dstPort":
            suggest = "dst_port"
        elif key == "ipPrecedenceCode":
            suggest = "ip_precedence_code"
        elif key == "srcPort":
            suggest = "src_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortProfileQOSMatching. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortProfileQOSMatching.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortProfileQOSMatching.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cos_code: Optional[builtins.int] = None,
                 dscp_code: Optional[builtins.int] = None,
                 dst_port: Optional[builtins.int] = None,
                 ip_precedence_code: Optional[builtins.int] = None,
                 protocol: Optional[builtins.str] = None,
                 src_port: Optional[builtins.int] = None):
        if cos_code is not None:
            pulumi.set(__self__, "cos_code", cos_code)
        if dscp_code is not None:
            pulumi.set(__self__, "dscp_code", dscp_code)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if ip_precedence_code is not None:
            pulumi.set(__self__, "ip_precedence_code", ip_precedence_code)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="cosCode")
    def cos_code(self) -> Optional[builtins.int]:
        return pulumi.get(self, "cos_code")

    @property
    @pulumi.getter(name="dscpCode")
    def dscp_code(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dscp_code")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter(name="ipPrecedenceCode")
    def ip_precedence_code(self) -> Optional[builtins.int]:
        return pulumi.get(self, "ip_precedence_code")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[builtins.str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[builtins.int]:
        return pulumi.get(self, "src_port")


@pulumi.output_type
class PortProfileQOSPolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "qosMarking":
            suggest = "qos_marking"
        elif key == "qosMatching":
            suggest = "qos_matching"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortProfileQOSPolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortProfileQOSPolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortProfileQOSPolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 qos_marking: Optional['outputs.PortProfileQOSMarking'] = None,
                 qos_matching: Optional['outputs.PortProfileQOSMatching'] = None):
        if qos_marking is not None:
            pulumi.set(__self__, "qos_marking", qos_marking)
        if qos_matching is not None:
            pulumi.set(__self__, "qos_matching", qos_matching)

    @property
    @pulumi.getter(name="qosMarking")
    def qos_marking(self) -> Optional['outputs.PortProfileQOSMarking']:
        return pulumi.get(self, "qos_marking")

    @property
    @pulumi.getter(name="qosMatching")
    def qos_matching(self) -> Optional['outputs.PortProfileQOSMatching']:
        return pulumi.get(self, "qos_matching")


@pulumi.output_type
class PortProfileQOSProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "qosPolicies":
            suggest = "qos_policies"
        elif key == "qosProfileMode":
            suggest = "qos_profile_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortProfileQOSProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortProfileQOSProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortProfileQOSProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 qos_policies: Optional[Sequence['outputs.PortProfileQOSPolicies']] = None,
                 qos_profile_mode: Optional[builtins.str] = None):
        if qos_policies is not None:
            pulumi.set(__self__, "qos_policies", qos_policies)
        if qos_profile_mode is not None:
            pulumi.set(__self__, "qos_profile_mode", qos_profile_mode)

    @property
    @pulumi.getter(name="qosPolicies")
    def qos_policies(self) -> Optional[Sequence['outputs.PortProfileQOSPolicies']]:
        return pulumi.get(self, "qos_policies")

    @property
    @pulumi.getter(name="qosProfileMode")
    def qos_profile_mode(self) -> Optional[builtins.str]:
        return pulumi.get(self, "qos_profile_mode")


