# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WlanArgs', 'Wlan']

@pulumi.input_type
class WlanArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 ap_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ap_group_mode: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auth_cache: Optional[pulumi.Input[builtins.bool]] = None,
                 b_supported: Optional[pulumi.Input[builtins.bool]] = None,
                 bc_filter_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 bc_filter_list: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 bss_transition: Optional[pulumi.Input[builtins.bool]] = None,
                 country_beacon: Optional[pulumi.Input[builtins.bool]] = None,
                 dpi_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dpigroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 dtim6e: Optional[pulumi.Input[builtins.int]] = None,
                 dtim_mode: Optional[pulumi.Input[builtins.str]] = None,
                 dtim_na: Optional[pulumi.Input[builtins.int]] = None,
                 dtim_ng: Optional[pulumi.Input[builtins.int]] = None,
                 element_adopt: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 enhanced_iot: Optional[pulumi.Input[builtins.bool]] = None,
                 fast_roaming_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 group_rekey: Optional[pulumi.Input[builtins.int]] = None,
                 hide_ssid: Optional[pulumi.Input[builtins.bool]] = None,
                 hotspot2: Optional[pulumi.Input['WLANHotspot2Args']] = None,
                 hotspot2conf_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 iapp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_guest: Optional[pulumi.Input[builtins.bool]] = None,
                 l2_isolation: Optional[pulumi.Input[builtins.bool]] = None,
                 log_level: Optional[pulumi.Input[builtins.str]] = None,
                 mac_filter_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mac_filter_list: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 mac_filter_policy: Optional[pulumi.Input[builtins.str]] = None,
                 mcastenhance_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 minrate_na_advertising_rates: Optional[pulumi.Input[builtins.bool]] = None,
                 minrate_na_data_rate_kbps: Optional[pulumi.Input[builtins.int]] = None,
                 minrate_na_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 minrate_ng_advertising_rates: Optional[pulumi.Input[builtins.bool]] = None,
                 minrate_ng_data_rate_kbps: Optional[pulumi.Input[builtins.int]] = None,
                 minrate_ng_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 minrate_setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 mlo_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 name_combine_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name_combine_suffix: Optional[pulumi.Input[builtins.str]] = None,
                 nas_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 nas_identifier_type: Optional[pulumi.Input[builtins.str]] = None,
                 networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 no2ghz_oui: Optional[pulumi.Input[builtins.bool]] = None,
                 optimize_iot_wifi_connectivity: Optional[pulumi.Input[builtins.bool]] = None,
                 p2p: Optional[pulumi.Input[builtins.bool]] = None,
                 p2p_cross_connect: Optional[pulumi.Input[builtins.bool]] = None,
                 pmf_cipher: Optional[pulumi.Input[builtins.str]] = None,
                 pmf_mode: Optional[pulumi.Input[builtins.str]] = None,
                 priority: Optional[pulumi.Input[builtins.str]] = None,
                 private_preshared_keys: Optional[pulumi.Input[Sequence[pulumi.Input['WLANPrivatePresharedKeysArgs']]]] = None,
                 private_preshared_keys_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 proxy_arp: Optional[pulumi.Input[builtins.bool]] = None,
                 radius_das_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 radius_mac_auth_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 radius_macacl_empty_password: Optional[pulumi.Input[builtins.bool]] = None,
                 radius_macacl_format: Optional[pulumi.Input[builtins.str]] = None,
                 radiusprofile_id: Optional[pulumi.Input[builtins.str]] = None,
                 roam_cluster_id: Optional[pulumi.Input[builtins.int]] = None,
                 rrm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 sae_anti_clogging: Optional[pulumi.Input[builtins.int]] = None,
                 sae_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 sae_psk: Optional[pulumi.Input[Sequence[pulumi.Input['WLANSaePskArgs']]]] = None,
                 sae_psk_vlan_required: Optional[pulumi.Input[builtins.bool]] = None,
                 sae_sync: Optional[pulumi.Input[builtins.int]] = None,
                 schedule: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 schedule_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 schedule_reversed: Optional[pulumi.Input[builtins.bool]] = None,
                 schedule_with_duration: Optional[pulumi.Input[Sequence[pulumi.Input['WLANScheduleWithDurationArgs']]]] = None,
                 security: Optional[pulumi.Input[builtins.str]] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 tdls_prohibit: Optional[pulumi.Input[builtins.bool]] = None,
                 uapsd_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_workspace_url: Optional[pulumi.Input[builtins.str]] = None,
                 usergroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 vlan: Optional[pulumi.Input[builtins.int]] = None,
                 vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wep_idx: Optional[pulumi.Input[builtins.int]] = None,
                 wlan_band: Optional[pulumi.Input[builtins.str]] = None,
                 wlan_bands: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 wlangroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 wpa3_enhanced192: Optional[pulumi.Input[builtins.bool]] = None,
                 wpa3_fast_roaming: Optional[pulumi.Input[builtins.bool]] = None,
                 wpa3_support: Optional[pulumi.Input[builtins.bool]] = None,
                 wpa3_transition: Optional[pulumi.Input[builtins.bool]] = None,
                 wpa_enc: Optional[pulumi.Input[builtins.str]] = None,
                 wpa_mode: Optional[pulumi.Input[builtins.str]] = None,
                 wpa_psk_radius: Optional[pulumi.Input[builtins.str]] = None,
                 x_iapp_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_passphrase: Optional[pulumi.Input[builtins.str]] = None,
                 x_wep: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Wlan resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ap_group_ids is not None:
            pulumi.set(__self__, "ap_group_ids", ap_group_ids)
        if ap_group_mode is not None:
            pulumi.set(__self__, "ap_group_mode", ap_group_mode)
        if attr_hidden is not None:
            pulumi.set(__self__, "attr_hidden", attr_hidden)
        if attr_hidden_id is not None:
            pulumi.set(__self__, "attr_hidden_id", attr_hidden_id)
        if attr_no_delete is not None:
            pulumi.set(__self__, "attr_no_delete", attr_no_delete)
        if attr_no_edit is not None:
            pulumi.set(__self__, "attr_no_edit", attr_no_edit)
        if auth_cache is not None:
            pulumi.set(__self__, "auth_cache", auth_cache)
        if b_supported is not None:
            pulumi.set(__self__, "b_supported", b_supported)
        if bc_filter_enabled is not None:
            pulumi.set(__self__, "bc_filter_enabled", bc_filter_enabled)
        if bc_filter_list is not None:
            pulumi.set(__self__, "bc_filter_list", bc_filter_list)
        if bss_transition is not None:
            pulumi.set(__self__, "bss_transition", bss_transition)
        if country_beacon is not None:
            pulumi.set(__self__, "country_beacon", country_beacon)
        if dpi_enabled is not None:
            pulumi.set(__self__, "dpi_enabled", dpi_enabled)
        if dpigroup_id is not None:
            pulumi.set(__self__, "dpigroup_id", dpigroup_id)
        if dtim6e is not None:
            pulumi.set(__self__, "dtim6e", dtim6e)
        if dtim_mode is not None:
            pulumi.set(__self__, "dtim_mode", dtim_mode)
        if dtim_na is not None:
            pulumi.set(__self__, "dtim_na", dtim_na)
        if dtim_ng is not None:
            pulumi.set(__self__, "dtim_ng", dtim_ng)
        if element_adopt is not None:
            pulumi.set(__self__, "element_adopt", element_adopt)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enhanced_iot is not None:
            pulumi.set(__self__, "enhanced_iot", enhanced_iot)
        if fast_roaming_enabled is not None:
            pulumi.set(__self__, "fast_roaming_enabled", fast_roaming_enabled)
        if group_rekey is not None:
            pulumi.set(__self__, "group_rekey", group_rekey)
        if hide_ssid is not None:
            pulumi.set(__self__, "hide_ssid", hide_ssid)
        if hotspot2 is not None:
            pulumi.set(__self__, "hotspot2", hotspot2)
        if hotspot2conf_enabled is not None:
            pulumi.set(__self__, "hotspot2conf_enabled", hotspot2conf_enabled)
        if iapp_enabled is not None:
            pulumi.set(__self__, "iapp_enabled", iapp_enabled)
        if is_guest is not None:
            pulumi.set(__self__, "is_guest", is_guest)
        if l2_isolation is not None:
            pulumi.set(__self__, "l2_isolation", l2_isolation)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if mac_filter_enabled is not None:
            pulumi.set(__self__, "mac_filter_enabled", mac_filter_enabled)
        if mac_filter_list is not None:
            pulumi.set(__self__, "mac_filter_list", mac_filter_list)
        if mac_filter_policy is not None:
            pulumi.set(__self__, "mac_filter_policy", mac_filter_policy)
        if mcastenhance_enabled is not None:
            pulumi.set(__self__, "mcastenhance_enabled", mcastenhance_enabled)
        if minrate_na_advertising_rates is not None:
            pulumi.set(__self__, "minrate_na_advertising_rates", minrate_na_advertising_rates)
        if minrate_na_data_rate_kbps is not None:
            pulumi.set(__self__, "minrate_na_data_rate_kbps", minrate_na_data_rate_kbps)
        if minrate_na_enabled is not None:
            pulumi.set(__self__, "minrate_na_enabled", minrate_na_enabled)
        if minrate_ng_advertising_rates is not None:
            pulumi.set(__self__, "minrate_ng_advertising_rates", minrate_ng_advertising_rates)
        if minrate_ng_data_rate_kbps is not None:
            pulumi.set(__self__, "minrate_ng_data_rate_kbps", minrate_ng_data_rate_kbps)
        if minrate_ng_enabled is not None:
            pulumi.set(__self__, "minrate_ng_enabled", minrate_ng_enabled)
        if minrate_setting_preference is not None:
            pulumi.set(__self__, "minrate_setting_preference", minrate_setting_preference)
        if mlo_enabled is not None:
            pulumi.set(__self__, "mlo_enabled", mlo_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_combine_enabled is not None:
            pulumi.set(__self__, "name_combine_enabled", name_combine_enabled)
        if name_combine_suffix is not None:
            pulumi.set(__self__, "name_combine_suffix", name_combine_suffix)
        if nas_identifier is not None:
            pulumi.set(__self__, "nas_identifier", nas_identifier)
        if nas_identifier_type is not None:
            pulumi.set(__self__, "nas_identifier_type", nas_identifier_type)
        if networkconf_id is not None:
            pulumi.set(__self__, "networkconf_id", networkconf_id)
        if no2ghz_oui is not None:
            pulumi.set(__self__, "no2ghz_oui", no2ghz_oui)
        if optimize_iot_wifi_connectivity is not None:
            pulumi.set(__self__, "optimize_iot_wifi_connectivity", optimize_iot_wifi_connectivity)
        if p2p is not None:
            pulumi.set(__self__, "p2p", p2p)
        if p2p_cross_connect is not None:
            pulumi.set(__self__, "p2p_cross_connect", p2p_cross_connect)
        if pmf_cipher is not None:
            pulumi.set(__self__, "pmf_cipher", pmf_cipher)
        if pmf_mode is not None:
            pulumi.set(__self__, "pmf_mode", pmf_mode)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if private_preshared_keys is not None:
            pulumi.set(__self__, "private_preshared_keys", private_preshared_keys)
        if private_preshared_keys_enabled is not None:
            pulumi.set(__self__, "private_preshared_keys_enabled", private_preshared_keys_enabled)
        if proxy_arp is not None:
            pulumi.set(__self__, "proxy_arp", proxy_arp)
        if radius_das_enabled is not None:
            pulumi.set(__self__, "radius_das_enabled", radius_das_enabled)
        if radius_mac_auth_enabled is not None:
            pulumi.set(__self__, "radius_mac_auth_enabled", radius_mac_auth_enabled)
        if radius_macacl_empty_password is not None:
            pulumi.set(__self__, "radius_macacl_empty_password", radius_macacl_empty_password)
        if radius_macacl_format is not None:
            pulumi.set(__self__, "radius_macacl_format", radius_macacl_format)
        if radiusprofile_id is not None:
            pulumi.set(__self__, "radiusprofile_id", radiusprofile_id)
        if roam_cluster_id is not None:
            pulumi.set(__self__, "roam_cluster_id", roam_cluster_id)
        if rrm_enabled is not None:
            pulumi.set(__self__, "rrm_enabled", rrm_enabled)
        if sae_anti_clogging is not None:
            pulumi.set(__self__, "sae_anti_clogging", sae_anti_clogging)
        if sae_groups is not None:
            pulumi.set(__self__, "sae_groups", sae_groups)
        if sae_psk is not None:
            pulumi.set(__self__, "sae_psk", sae_psk)
        if sae_psk_vlan_required is not None:
            pulumi.set(__self__, "sae_psk_vlan_required", sae_psk_vlan_required)
        if sae_sync is not None:
            pulumi.set(__self__, "sae_sync", sae_sync)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if schedule_enabled is not None:
            pulumi.set(__self__, "schedule_enabled", schedule_enabled)
        if schedule_reversed is not None:
            pulumi.set(__self__, "schedule_reversed", schedule_reversed)
        if schedule_with_duration is not None:
            pulumi.set(__self__, "schedule_with_duration", schedule_with_duration)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if setting_preference is not None:
            pulumi.set(__self__, "setting_preference", setting_preference)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if tdls_prohibit is not None:
            pulumi.set(__self__, "tdls_prohibit", tdls_prohibit)
        if uapsd_enabled is not None:
            pulumi.set(__self__, "uapsd_enabled", uapsd_enabled)
        if uid_workspace_url is not None:
            pulumi.set(__self__, "uid_workspace_url", uid_workspace_url)
        if usergroup_id is not None:
            pulumi.set(__self__, "usergroup_id", usergroup_id)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vlan_enabled is not None:
            pulumi.set(__self__, "vlan_enabled", vlan_enabled)
        if wep_idx is not None:
            pulumi.set(__self__, "wep_idx", wep_idx)
        if wlan_band is not None:
            pulumi.set(__self__, "wlan_band", wlan_band)
        if wlan_bands is not None:
            pulumi.set(__self__, "wlan_bands", wlan_bands)
        if wlangroup_id is not None:
            pulumi.set(__self__, "wlangroup_id", wlangroup_id)
        if wpa3_enhanced192 is not None:
            pulumi.set(__self__, "wpa3_enhanced192", wpa3_enhanced192)
        if wpa3_fast_roaming is not None:
            pulumi.set(__self__, "wpa3_fast_roaming", wpa3_fast_roaming)
        if wpa3_support is not None:
            pulumi.set(__self__, "wpa3_support", wpa3_support)
        if wpa3_transition is not None:
            pulumi.set(__self__, "wpa3_transition", wpa3_transition)
        if wpa_enc is not None:
            pulumi.set(__self__, "wpa_enc", wpa_enc)
        if wpa_mode is not None:
            pulumi.set(__self__, "wpa_mode", wpa_mode)
        if wpa_psk_radius is not None:
            pulumi.set(__self__, "wpa_psk_radius", wpa_psk_radius)
        if x_iapp_key is not None:
            pulumi.set(__self__, "x_iapp_key", x_iapp_key)
        if x_passphrase is not None:
            pulumi.set(__self__, "x_passphrase", x_passphrase)
        if x_wep is not None:
            pulumi.set(__self__, "x_wep", x_wep)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="apGroupIds")
    def ap_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "ap_group_ids")

    @ap_group_ids.setter
    def ap_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ap_group_ids", value)

    @property
    @pulumi.getter(name="apGroupMode")
    def ap_group_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ap_group_mode")

    @ap_group_mode.setter
    def ap_group_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ap_group_mode", value)

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @attr_hidden.setter
    def attr_hidden(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_hidden", value)

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @attr_hidden_id.setter
    def attr_hidden_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "attr_hidden_id", value)

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @attr_no_delete.setter
    def attr_no_delete(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_delete", value)

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @attr_no_edit.setter
    def attr_no_edit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "attr_no_edit", value)

    @property
    @pulumi.getter(name="authCache")
    def auth_cache(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "auth_cache")

    @auth_cache.setter
    def auth_cache(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "auth_cache", value)

    @property
    @pulumi.getter(name="bSupported")
    def b_supported(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "b_supported")

    @b_supported.setter
    def b_supported(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "b_supported", value)

    @property
    @pulumi.getter(name="bcFilterEnabled")
    def bc_filter_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "bc_filter_enabled")

    @bc_filter_enabled.setter
    def bc_filter_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "bc_filter_enabled", value)

    @property
    @pulumi.getter(name="bcFilterList")
    def bc_filter_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "bc_filter_list")

    @bc_filter_list.setter
    def bc_filter_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "bc_filter_list", value)

    @property
    @pulumi.getter(name="bssTransition")
    def bss_transition(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "bss_transition")

    @bss_transition.setter
    def bss_transition(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "bss_transition", value)

    @property
    @pulumi.getter(name="countryBeacon")
    def country_beacon(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "country_beacon")

    @country_beacon.setter
    def country_beacon(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "country_beacon", value)

    @property
    @pulumi.getter(name="dpiEnabled")
    def dpi_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "dpi_enabled")

    @dpi_enabled.setter
    def dpi_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dpi_enabled", value)

    @property
    @pulumi.getter(name="dpigroupId")
    def dpigroup_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dpigroup_id")

    @dpigroup_id.setter
    def dpigroup_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dpigroup_id", value)

    @property
    @pulumi.getter
    def dtim6e(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dtim6e")

    @dtim6e.setter
    def dtim6e(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dtim6e", value)

    @property
    @pulumi.getter(name="dtimMode")
    def dtim_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dtim_mode")

    @dtim_mode.setter
    def dtim_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dtim_mode", value)

    @property
    @pulumi.getter(name="dtimNa")
    def dtim_na(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dtim_na")

    @dtim_na.setter
    def dtim_na(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dtim_na", value)

    @property
    @pulumi.getter(name="dtimNg")
    def dtim_ng(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "dtim_ng")

    @dtim_ng.setter
    def dtim_ng(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "dtim_ng", value)

    @property
    @pulumi.getter(name="elementAdopt")
    def element_adopt(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "element_adopt")

    @element_adopt.setter
    def element_adopt(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "element_adopt", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="enhancedIot")
    def enhanced_iot(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enhanced_iot")

    @enhanced_iot.setter
    def enhanced_iot(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enhanced_iot", value)

    @property
    @pulumi.getter(name="fastRoamingEnabled")
    def fast_roaming_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "fast_roaming_enabled")

    @fast_roaming_enabled.setter
    def fast_roaming_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "fast_roaming_enabled", value)

    @property
    @pulumi.getter(name="groupRekey")
    def group_rekey(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "group_rekey")

    @group_rekey.setter
    def group_rekey(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "group_rekey", value)

    @property
    @pulumi.getter(name="hideSsid")
    def hide_ssid(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "hide_ssid")

    @hide_ssid.setter
    def hide_ssid(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "hide_ssid", value)

    @property
    @pulumi.getter
    def hotspot2(self) -> Optional[pulumi.Input['WLANHotspot2Args']]:
        return pulumi.get(self, "hotspot2")

    @hotspot2.setter
    def hotspot2(self, value: Optional[pulumi.Input['WLANHotspot2Args']]):
        pulumi.set(self, "hotspot2", value)

    @property
    @pulumi.getter(name="hotspot2confEnabled")
    def hotspot2conf_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "hotspot2conf_enabled")

    @hotspot2conf_enabled.setter
    def hotspot2conf_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "hotspot2conf_enabled", value)

    @property
    @pulumi.getter(name="iappEnabled")
    def iapp_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "iapp_enabled")

    @iapp_enabled.setter
    def iapp_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "iapp_enabled", value)

    @property
    @pulumi.getter(name="isGuest")
    def is_guest(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_guest")

    @is_guest.setter
    def is_guest(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_guest", value)

    @property
    @pulumi.getter(name="l2Isolation")
    def l2_isolation(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "l2_isolation")

    @l2_isolation.setter
    def l2_isolation(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "l2_isolation", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="macFilterEnabled")
    def mac_filter_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "mac_filter_enabled")

    @mac_filter_enabled.setter
    def mac_filter_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "mac_filter_enabled", value)

    @property
    @pulumi.getter(name="macFilterList")
    def mac_filter_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "mac_filter_list")

    @mac_filter_list.setter
    def mac_filter_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "mac_filter_list", value)

    @property
    @pulumi.getter(name="macFilterPolicy")
    def mac_filter_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "mac_filter_policy")

    @mac_filter_policy.setter
    def mac_filter_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mac_filter_policy", value)

    @property
    @pulumi.getter(name="mcastenhanceEnabled")
    def mcastenhance_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "mcastenhance_enabled")

    @mcastenhance_enabled.setter
    def mcastenhance_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "mcastenhance_enabled", value)

    @property
    @pulumi.getter(name="minrateNaAdvertisingRates")
    def minrate_na_advertising_rates(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "minrate_na_advertising_rates")

    @minrate_na_advertising_rates.setter
    def minrate_na_advertising_rates(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "minrate_na_advertising_rates", value)

    @property
    @pulumi.getter(name="minrateNaDataRateKbps")
    def minrate_na_data_rate_kbps(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "minrate_na_data_rate_kbps")

    @minrate_na_data_rate_kbps.setter
    def minrate_na_data_rate_kbps(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "minrate_na_data_rate_kbps", value)

    @property
    @pulumi.getter(name="minrateNaEnabled")
    def minrate_na_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "minrate_na_enabled")

    @minrate_na_enabled.setter
    def minrate_na_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "minrate_na_enabled", value)

    @property
    @pulumi.getter(name="minrateNgAdvertisingRates")
    def minrate_ng_advertising_rates(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "minrate_ng_advertising_rates")

    @minrate_ng_advertising_rates.setter
    def minrate_ng_advertising_rates(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "minrate_ng_advertising_rates", value)

    @property
    @pulumi.getter(name="minrateNgDataRateKbps")
    def minrate_ng_data_rate_kbps(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "minrate_ng_data_rate_kbps")

    @minrate_ng_data_rate_kbps.setter
    def minrate_ng_data_rate_kbps(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "minrate_ng_data_rate_kbps", value)

    @property
    @pulumi.getter(name="minrateNgEnabled")
    def minrate_ng_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "minrate_ng_enabled")

    @minrate_ng_enabled.setter
    def minrate_ng_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "minrate_ng_enabled", value)

    @property
    @pulumi.getter(name="minrateSettingPreference")
    def minrate_setting_preference(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "minrate_setting_preference")

    @minrate_setting_preference.setter
    def minrate_setting_preference(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "minrate_setting_preference", value)

    @property
    @pulumi.getter(name="mloEnabled")
    def mlo_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "mlo_enabled")

    @mlo_enabled.setter
    def mlo_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "mlo_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameCombineEnabled")
    def name_combine_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "name_combine_enabled")

    @name_combine_enabled.setter
    def name_combine_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "name_combine_enabled", value)

    @property
    @pulumi.getter(name="nameCombineSuffix")
    def name_combine_suffix(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name_combine_suffix")

    @name_combine_suffix.setter
    def name_combine_suffix(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name_combine_suffix", value)

    @property
    @pulumi.getter(name="nasIdentifier")
    def nas_identifier(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "nas_identifier")

    @nas_identifier.setter
    def nas_identifier(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "nas_identifier", value)

    @property
    @pulumi.getter(name="nasIdentifierType")
    def nas_identifier_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "nas_identifier_type")

    @nas_identifier_type.setter
    def nas_identifier_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "nas_identifier_type", value)

    @property
    @pulumi.getter(name="networkconfId")
    def networkconf_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "networkconf_id")

    @networkconf_id.setter
    def networkconf_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "networkconf_id", value)

    @property
    @pulumi.getter(name="no2ghzOui")
    def no2ghz_oui(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "no2ghz_oui")

    @no2ghz_oui.setter
    def no2ghz_oui(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "no2ghz_oui", value)

    @property
    @pulumi.getter(name="optimizeIotWifiConnectivity")
    def optimize_iot_wifi_connectivity(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "optimize_iot_wifi_connectivity")

    @optimize_iot_wifi_connectivity.setter
    def optimize_iot_wifi_connectivity(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "optimize_iot_wifi_connectivity", value)

    @property
    @pulumi.getter
    def p2p(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "p2p")

    @p2p.setter
    def p2p(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "p2p", value)

    @property
    @pulumi.getter(name="p2pCrossConnect")
    def p2p_cross_connect(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "p2p_cross_connect")

    @p2p_cross_connect.setter
    def p2p_cross_connect(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "p2p_cross_connect", value)

    @property
    @pulumi.getter(name="pmfCipher")
    def pmf_cipher(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "pmf_cipher")

    @pmf_cipher.setter
    def pmf_cipher(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pmf_cipher", value)

    @property
    @pulumi.getter(name="pmfMode")
    def pmf_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "pmf_mode")

    @pmf_mode.setter
    def pmf_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pmf_mode", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="privatePresharedKeys")
    def private_preshared_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WLANPrivatePresharedKeysArgs']]]]:
        return pulumi.get(self, "private_preshared_keys")

    @private_preshared_keys.setter
    def private_preshared_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WLANPrivatePresharedKeysArgs']]]]):
        pulumi.set(self, "private_preshared_keys", value)

    @property
    @pulumi.getter(name="privatePresharedKeysEnabled")
    def private_preshared_keys_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "private_preshared_keys_enabled")

    @private_preshared_keys_enabled.setter
    def private_preshared_keys_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "private_preshared_keys_enabled", value)

    @property
    @pulumi.getter(name="proxyArp")
    def proxy_arp(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "proxy_arp")

    @proxy_arp.setter
    def proxy_arp(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "proxy_arp", value)

    @property
    @pulumi.getter(name="radiusDasEnabled")
    def radius_das_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "radius_das_enabled")

    @radius_das_enabled.setter
    def radius_das_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "radius_das_enabled", value)

    @property
    @pulumi.getter(name="radiusMacAuthEnabled")
    def radius_mac_auth_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "radius_mac_auth_enabled")

    @radius_mac_auth_enabled.setter
    def radius_mac_auth_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "radius_mac_auth_enabled", value)

    @property
    @pulumi.getter(name="radiusMacaclEmptyPassword")
    def radius_macacl_empty_password(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "radius_macacl_empty_password")

    @radius_macacl_empty_password.setter
    def radius_macacl_empty_password(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "radius_macacl_empty_password", value)

    @property
    @pulumi.getter(name="radiusMacaclFormat")
    def radius_macacl_format(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "radius_macacl_format")

    @radius_macacl_format.setter
    def radius_macacl_format(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "radius_macacl_format", value)

    @property
    @pulumi.getter(name="radiusprofileId")
    def radiusprofile_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "radiusprofile_id")

    @radiusprofile_id.setter
    def radiusprofile_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "radiusprofile_id", value)

    @property
    @pulumi.getter(name="roamClusterId")
    def roam_cluster_id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "roam_cluster_id")

    @roam_cluster_id.setter
    def roam_cluster_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "roam_cluster_id", value)

    @property
    @pulumi.getter(name="rrmEnabled")
    def rrm_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "rrm_enabled")

    @rrm_enabled.setter
    def rrm_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "rrm_enabled", value)

    @property
    @pulumi.getter(name="saeAntiClogging")
    def sae_anti_clogging(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "sae_anti_clogging")

    @sae_anti_clogging.setter
    def sae_anti_clogging(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "sae_anti_clogging", value)

    @property
    @pulumi.getter(name="saeGroups")
    def sae_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        return pulumi.get(self, "sae_groups")

    @sae_groups.setter
    def sae_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "sae_groups", value)

    @property
    @pulumi.getter(name="saePsk")
    def sae_psk(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WLANSaePskArgs']]]]:
        return pulumi.get(self, "sae_psk")

    @sae_psk.setter
    def sae_psk(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WLANSaePskArgs']]]]):
        pulumi.set(self, "sae_psk", value)

    @property
    @pulumi.getter(name="saePskVlanRequired")
    def sae_psk_vlan_required(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "sae_psk_vlan_required")

    @sae_psk_vlan_required.setter
    def sae_psk_vlan_required(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sae_psk_vlan_required", value)

    @property
    @pulumi.getter(name="saeSync")
    def sae_sync(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "sae_sync")

    @sae_sync.setter
    def sae_sync(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "sae_sync", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="scheduleEnabled")
    def schedule_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "schedule_enabled")

    @schedule_enabled.setter
    def schedule_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "schedule_enabled", value)

    @property
    @pulumi.getter(name="scheduleReversed")
    def schedule_reversed(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "schedule_reversed")

    @schedule_reversed.setter
    def schedule_reversed(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "schedule_reversed", value)

    @property
    @pulumi.getter(name="scheduleWithDuration")
    def schedule_with_duration(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WLANScheduleWithDurationArgs']]]]:
        return pulumi.get(self, "schedule_with_duration")

    @schedule_with_duration.setter
    def schedule_with_duration(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WLANScheduleWithDurationArgs']]]]):
        pulumi.set(self, "schedule_with_duration", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "setting_preference")

    @setting_preference.setter
    def setting_preference(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "setting_preference", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="tdlsProhibit")
    def tdls_prohibit(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "tdls_prohibit")

    @tdls_prohibit.setter
    def tdls_prohibit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "tdls_prohibit", value)

    @property
    @pulumi.getter(name="uapsdEnabled")
    def uapsd_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "uapsd_enabled")

    @uapsd_enabled.setter
    def uapsd_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "uapsd_enabled", value)

    @property
    @pulumi.getter(name="uidWorkspaceUrl")
    def uid_workspace_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "uid_workspace_url")

    @uid_workspace_url.setter
    def uid_workspace_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uid_workspace_url", value)

    @property
    @pulumi.getter(name="usergroupId")
    def usergroup_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "usergroup_id")

    @usergroup_id.setter
    def usergroup_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "usergroup_id", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter(name="vlanEnabled")
    def vlan_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "vlan_enabled")

    @vlan_enabled.setter
    def vlan_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "vlan_enabled", value)

    @property
    @pulumi.getter(name="wepIdx")
    def wep_idx(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "wep_idx")

    @wep_idx.setter
    def wep_idx(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "wep_idx", value)

    @property
    @pulumi.getter(name="wlanBand")
    def wlan_band(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wlan_band")

    @wlan_band.setter
    def wlan_band(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wlan_band", value)

    @property
    @pulumi.getter(name="wlanBands")
    def wlan_bands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "wlan_bands")

    @wlan_bands.setter
    def wlan_bands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "wlan_bands", value)

    @property
    @pulumi.getter(name="wlangroupId")
    def wlangroup_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wlangroup_id")

    @wlangroup_id.setter
    def wlangroup_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wlangroup_id", value)

    @property
    @pulumi.getter(name="wpa3Enhanced192")
    def wpa3_enhanced192(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "wpa3_enhanced192")

    @wpa3_enhanced192.setter
    def wpa3_enhanced192(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "wpa3_enhanced192", value)

    @property
    @pulumi.getter(name="wpa3FastRoaming")
    def wpa3_fast_roaming(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "wpa3_fast_roaming")

    @wpa3_fast_roaming.setter
    def wpa3_fast_roaming(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "wpa3_fast_roaming", value)

    @property
    @pulumi.getter(name="wpa3Support")
    def wpa3_support(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "wpa3_support")

    @wpa3_support.setter
    def wpa3_support(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "wpa3_support", value)

    @property
    @pulumi.getter(name="wpa3Transition")
    def wpa3_transition(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "wpa3_transition")

    @wpa3_transition.setter
    def wpa3_transition(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "wpa3_transition", value)

    @property
    @pulumi.getter(name="wpaEnc")
    def wpa_enc(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wpa_enc")

    @wpa_enc.setter
    def wpa_enc(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wpa_enc", value)

    @property
    @pulumi.getter(name="wpaMode")
    def wpa_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wpa_mode")

    @wpa_mode.setter
    def wpa_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wpa_mode", value)

    @property
    @pulumi.getter(name="wpaPskRadius")
    def wpa_psk_radius(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "wpa_psk_radius")

    @wpa_psk_radius.setter
    def wpa_psk_radius(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "wpa_psk_radius", value)

    @property
    @pulumi.getter(name="xIappKey")
    def x_iapp_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_iapp_key")

    @x_iapp_key.setter
    def x_iapp_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_iapp_key", value)

    @property
    @pulumi.getter(name="xPassphrase")
    def x_passphrase(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_passphrase")

    @x_passphrase.setter
    def x_passphrase(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_passphrase", value)

    @property
    @pulumi.getter(name="xWep")
    def x_wep(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "x_wep")

    @x_wep.setter
    def x_wep(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "x_wep", value)


@pulumi.type_token("unifi-native:wlanconf:Wlan")
class Wlan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 ap_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ap_group_mode: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auth_cache: Optional[pulumi.Input[builtins.bool]] = None,
                 b_supported: Optional[pulumi.Input[builtins.bool]] = None,
                 bc_filter_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 bc_filter_list: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 bss_transition: Optional[pulumi.Input[builtins.bool]] = None,
                 country_beacon: Optional[pulumi.Input[builtins.bool]] = None,
                 dpi_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dpigroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 dtim6e: Optional[pulumi.Input[builtins.int]] = None,
                 dtim_mode: Optional[pulumi.Input[builtins.str]] = None,
                 dtim_na: Optional[pulumi.Input[builtins.int]] = None,
                 dtim_ng: Optional[pulumi.Input[builtins.int]] = None,
                 element_adopt: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 enhanced_iot: Optional[pulumi.Input[builtins.bool]] = None,
                 fast_roaming_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 group_rekey: Optional[pulumi.Input[builtins.int]] = None,
                 hide_ssid: Optional[pulumi.Input[builtins.bool]] = None,
                 hotspot2: Optional[pulumi.Input[Union['WLANHotspot2Args', 'WLANHotspot2ArgsDict']]] = None,
                 hotspot2conf_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 iapp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_guest: Optional[pulumi.Input[builtins.bool]] = None,
                 l2_isolation: Optional[pulumi.Input[builtins.bool]] = None,
                 log_level: Optional[pulumi.Input[builtins.str]] = None,
                 mac_filter_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mac_filter_list: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 mac_filter_policy: Optional[pulumi.Input[builtins.str]] = None,
                 mcastenhance_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 minrate_na_advertising_rates: Optional[pulumi.Input[builtins.bool]] = None,
                 minrate_na_data_rate_kbps: Optional[pulumi.Input[builtins.int]] = None,
                 minrate_na_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 minrate_ng_advertising_rates: Optional[pulumi.Input[builtins.bool]] = None,
                 minrate_ng_data_rate_kbps: Optional[pulumi.Input[builtins.int]] = None,
                 minrate_ng_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 minrate_setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 mlo_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 name_combine_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name_combine_suffix: Optional[pulumi.Input[builtins.str]] = None,
                 nas_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 nas_identifier_type: Optional[pulumi.Input[builtins.str]] = None,
                 networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 no2ghz_oui: Optional[pulumi.Input[builtins.bool]] = None,
                 optimize_iot_wifi_connectivity: Optional[pulumi.Input[builtins.bool]] = None,
                 p2p: Optional[pulumi.Input[builtins.bool]] = None,
                 p2p_cross_connect: Optional[pulumi.Input[builtins.bool]] = None,
                 pmf_cipher: Optional[pulumi.Input[builtins.str]] = None,
                 pmf_mode: Optional[pulumi.Input[builtins.str]] = None,
                 priority: Optional[pulumi.Input[builtins.str]] = None,
                 private_preshared_keys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WLANPrivatePresharedKeysArgs', 'WLANPrivatePresharedKeysArgsDict']]]]] = None,
                 private_preshared_keys_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 proxy_arp: Optional[pulumi.Input[builtins.bool]] = None,
                 radius_das_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 radius_mac_auth_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 radius_macacl_empty_password: Optional[pulumi.Input[builtins.bool]] = None,
                 radius_macacl_format: Optional[pulumi.Input[builtins.str]] = None,
                 radiusprofile_id: Optional[pulumi.Input[builtins.str]] = None,
                 roam_cluster_id: Optional[pulumi.Input[builtins.int]] = None,
                 rrm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 sae_anti_clogging: Optional[pulumi.Input[builtins.int]] = None,
                 sae_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 sae_psk: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WLANSaePskArgs', 'WLANSaePskArgsDict']]]]] = None,
                 sae_psk_vlan_required: Optional[pulumi.Input[builtins.bool]] = None,
                 sae_sync: Optional[pulumi.Input[builtins.int]] = None,
                 schedule: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 schedule_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 schedule_reversed: Optional[pulumi.Input[builtins.bool]] = None,
                 schedule_with_duration: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WLANScheduleWithDurationArgs', 'WLANScheduleWithDurationArgsDict']]]]] = None,
                 security: Optional[pulumi.Input[builtins.str]] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 tdls_prohibit: Optional[pulumi.Input[builtins.bool]] = None,
                 uapsd_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_workspace_url: Optional[pulumi.Input[builtins.str]] = None,
                 usergroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 vlan: Optional[pulumi.Input[builtins.int]] = None,
                 vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wep_idx: Optional[pulumi.Input[builtins.int]] = None,
                 wlan_band: Optional[pulumi.Input[builtins.str]] = None,
                 wlan_bands: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 wlangroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 wpa3_enhanced192: Optional[pulumi.Input[builtins.bool]] = None,
                 wpa3_fast_roaming: Optional[pulumi.Input[builtins.bool]] = None,
                 wpa3_support: Optional[pulumi.Input[builtins.bool]] = None,
                 wpa3_transition: Optional[pulumi.Input[builtins.bool]] = None,
                 wpa_enc: Optional[pulumi.Input[builtins.str]] = None,
                 wpa_mode: Optional[pulumi.Input[builtins.str]] = None,
                 wpa_psk_radius: Optional[pulumi.Input[builtins.str]] = None,
                 x_iapp_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_passphrase: Optional[pulumi.Input[builtins.str]] = None,
                 x_wep: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a Wlan resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WlanArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Wlan resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WlanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WlanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 ap_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ap_group_mode: Optional[pulumi.Input[builtins.str]] = None,
                 attr_hidden: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_hidden_id: Optional[pulumi.Input[builtins.str]] = None,
                 attr_no_delete: Optional[pulumi.Input[builtins.bool]] = None,
                 attr_no_edit: Optional[pulumi.Input[builtins.bool]] = None,
                 auth_cache: Optional[pulumi.Input[builtins.bool]] = None,
                 b_supported: Optional[pulumi.Input[builtins.bool]] = None,
                 bc_filter_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 bc_filter_list: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 bss_transition: Optional[pulumi.Input[builtins.bool]] = None,
                 country_beacon: Optional[pulumi.Input[builtins.bool]] = None,
                 dpi_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dpigroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 dtim6e: Optional[pulumi.Input[builtins.int]] = None,
                 dtim_mode: Optional[pulumi.Input[builtins.str]] = None,
                 dtim_na: Optional[pulumi.Input[builtins.int]] = None,
                 dtim_ng: Optional[pulumi.Input[builtins.int]] = None,
                 element_adopt: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 enhanced_iot: Optional[pulumi.Input[builtins.bool]] = None,
                 fast_roaming_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 group_rekey: Optional[pulumi.Input[builtins.int]] = None,
                 hide_ssid: Optional[pulumi.Input[builtins.bool]] = None,
                 hotspot2: Optional[pulumi.Input[Union['WLANHotspot2Args', 'WLANHotspot2ArgsDict']]] = None,
                 hotspot2conf_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 iapp_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_guest: Optional[pulumi.Input[builtins.bool]] = None,
                 l2_isolation: Optional[pulumi.Input[builtins.bool]] = None,
                 log_level: Optional[pulumi.Input[builtins.str]] = None,
                 mac_filter_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 mac_filter_list: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 mac_filter_policy: Optional[pulumi.Input[builtins.str]] = None,
                 mcastenhance_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 minrate_na_advertising_rates: Optional[pulumi.Input[builtins.bool]] = None,
                 minrate_na_data_rate_kbps: Optional[pulumi.Input[builtins.int]] = None,
                 minrate_na_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 minrate_ng_advertising_rates: Optional[pulumi.Input[builtins.bool]] = None,
                 minrate_ng_data_rate_kbps: Optional[pulumi.Input[builtins.int]] = None,
                 minrate_ng_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 minrate_setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 mlo_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 name_combine_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name_combine_suffix: Optional[pulumi.Input[builtins.str]] = None,
                 nas_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 nas_identifier_type: Optional[pulumi.Input[builtins.str]] = None,
                 networkconf_id: Optional[pulumi.Input[builtins.str]] = None,
                 no2ghz_oui: Optional[pulumi.Input[builtins.bool]] = None,
                 optimize_iot_wifi_connectivity: Optional[pulumi.Input[builtins.bool]] = None,
                 p2p: Optional[pulumi.Input[builtins.bool]] = None,
                 p2p_cross_connect: Optional[pulumi.Input[builtins.bool]] = None,
                 pmf_cipher: Optional[pulumi.Input[builtins.str]] = None,
                 pmf_mode: Optional[pulumi.Input[builtins.str]] = None,
                 priority: Optional[pulumi.Input[builtins.str]] = None,
                 private_preshared_keys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WLANPrivatePresharedKeysArgs', 'WLANPrivatePresharedKeysArgsDict']]]]] = None,
                 private_preshared_keys_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 proxy_arp: Optional[pulumi.Input[builtins.bool]] = None,
                 radius_das_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 radius_mac_auth_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 radius_macacl_empty_password: Optional[pulumi.Input[builtins.bool]] = None,
                 radius_macacl_format: Optional[pulumi.Input[builtins.str]] = None,
                 radiusprofile_id: Optional[pulumi.Input[builtins.str]] = None,
                 roam_cluster_id: Optional[pulumi.Input[builtins.int]] = None,
                 rrm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 sae_anti_clogging: Optional[pulumi.Input[builtins.int]] = None,
                 sae_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 sae_psk: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WLANSaePskArgs', 'WLANSaePskArgsDict']]]]] = None,
                 sae_psk_vlan_required: Optional[pulumi.Input[builtins.bool]] = None,
                 sae_sync: Optional[pulumi.Input[builtins.int]] = None,
                 schedule: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 schedule_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 schedule_reversed: Optional[pulumi.Input[builtins.bool]] = None,
                 schedule_with_duration: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WLANScheduleWithDurationArgs', 'WLANScheduleWithDurationArgsDict']]]]] = None,
                 security: Optional[pulumi.Input[builtins.str]] = None,
                 setting_preference: Optional[pulumi.Input[builtins.str]] = None,
                 site_id: Optional[pulumi.Input[builtins.str]] = None,
                 tdls_prohibit: Optional[pulumi.Input[builtins.bool]] = None,
                 uapsd_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 uid_workspace_url: Optional[pulumi.Input[builtins.str]] = None,
                 usergroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 vlan: Optional[pulumi.Input[builtins.int]] = None,
                 vlan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 wep_idx: Optional[pulumi.Input[builtins.int]] = None,
                 wlan_band: Optional[pulumi.Input[builtins.str]] = None,
                 wlan_bands: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 wlangroup_id: Optional[pulumi.Input[builtins.str]] = None,
                 wpa3_enhanced192: Optional[pulumi.Input[builtins.bool]] = None,
                 wpa3_fast_roaming: Optional[pulumi.Input[builtins.bool]] = None,
                 wpa3_support: Optional[pulumi.Input[builtins.bool]] = None,
                 wpa3_transition: Optional[pulumi.Input[builtins.bool]] = None,
                 wpa_enc: Optional[pulumi.Input[builtins.str]] = None,
                 wpa_mode: Optional[pulumi.Input[builtins.str]] = None,
                 wpa_psk_radius: Optional[pulumi.Input[builtins.str]] = None,
                 x_iapp_key: Optional[pulumi.Input[builtins.str]] = None,
                 x_passphrase: Optional[pulumi.Input[builtins.str]] = None,
                 x_wep: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WlanArgs.__new__(WlanArgs)

            __props__.__dict__["id"] = id
            __props__.__dict__["ap_group_ids"] = ap_group_ids
            __props__.__dict__["ap_group_mode"] = ap_group_mode
            __props__.__dict__["attr_hidden"] = attr_hidden
            __props__.__dict__["attr_hidden_id"] = attr_hidden_id
            __props__.__dict__["attr_no_delete"] = attr_no_delete
            __props__.__dict__["attr_no_edit"] = attr_no_edit
            __props__.__dict__["auth_cache"] = auth_cache
            __props__.__dict__["b_supported"] = b_supported
            __props__.__dict__["bc_filter_enabled"] = bc_filter_enabled
            __props__.__dict__["bc_filter_list"] = bc_filter_list
            __props__.__dict__["bss_transition"] = bss_transition
            __props__.__dict__["country_beacon"] = country_beacon
            __props__.__dict__["dpi_enabled"] = dpi_enabled
            __props__.__dict__["dpigroup_id"] = dpigroup_id
            __props__.__dict__["dtim6e"] = dtim6e
            __props__.__dict__["dtim_mode"] = dtim_mode
            __props__.__dict__["dtim_na"] = dtim_na
            __props__.__dict__["dtim_ng"] = dtim_ng
            __props__.__dict__["element_adopt"] = element_adopt
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["enhanced_iot"] = enhanced_iot
            __props__.__dict__["fast_roaming_enabled"] = fast_roaming_enabled
            __props__.__dict__["group_rekey"] = group_rekey
            __props__.__dict__["hide_ssid"] = hide_ssid
            __props__.__dict__["hotspot2"] = hotspot2
            __props__.__dict__["hotspot2conf_enabled"] = hotspot2conf_enabled
            __props__.__dict__["iapp_enabled"] = iapp_enabled
            __props__.__dict__["is_guest"] = is_guest
            __props__.__dict__["l2_isolation"] = l2_isolation
            __props__.__dict__["log_level"] = log_level
            __props__.__dict__["mac_filter_enabled"] = mac_filter_enabled
            __props__.__dict__["mac_filter_list"] = mac_filter_list
            __props__.__dict__["mac_filter_policy"] = mac_filter_policy
            __props__.__dict__["mcastenhance_enabled"] = mcastenhance_enabled
            __props__.__dict__["minrate_na_advertising_rates"] = minrate_na_advertising_rates
            __props__.__dict__["minrate_na_data_rate_kbps"] = minrate_na_data_rate_kbps
            __props__.__dict__["minrate_na_enabled"] = minrate_na_enabled
            __props__.__dict__["minrate_ng_advertising_rates"] = minrate_ng_advertising_rates
            __props__.__dict__["minrate_ng_data_rate_kbps"] = minrate_ng_data_rate_kbps
            __props__.__dict__["minrate_ng_enabled"] = minrate_ng_enabled
            __props__.__dict__["minrate_setting_preference"] = minrate_setting_preference
            __props__.__dict__["mlo_enabled"] = mlo_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["name_combine_enabled"] = name_combine_enabled
            __props__.__dict__["name_combine_suffix"] = name_combine_suffix
            __props__.__dict__["nas_identifier"] = nas_identifier
            __props__.__dict__["nas_identifier_type"] = nas_identifier_type
            __props__.__dict__["networkconf_id"] = networkconf_id
            __props__.__dict__["no2ghz_oui"] = no2ghz_oui
            __props__.__dict__["optimize_iot_wifi_connectivity"] = optimize_iot_wifi_connectivity
            __props__.__dict__["p2p"] = p2p
            __props__.__dict__["p2p_cross_connect"] = p2p_cross_connect
            __props__.__dict__["pmf_cipher"] = pmf_cipher
            __props__.__dict__["pmf_mode"] = pmf_mode
            __props__.__dict__["priority"] = priority
            __props__.__dict__["private_preshared_keys"] = private_preshared_keys
            __props__.__dict__["private_preshared_keys_enabled"] = private_preshared_keys_enabled
            __props__.__dict__["proxy_arp"] = proxy_arp
            __props__.__dict__["radius_das_enabled"] = radius_das_enabled
            __props__.__dict__["radius_mac_auth_enabled"] = radius_mac_auth_enabled
            __props__.__dict__["radius_macacl_empty_password"] = radius_macacl_empty_password
            __props__.__dict__["radius_macacl_format"] = radius_macacl_format
            __props__.__dict__["radiusprofile_id"] = radiusprofile_id
            __props__.__dict__["roam_cluster_id"] = roam_cluster_id
            __props__.__dict__["rrm_enabled"] = rrm_enabled
            __props__.__dict__["sae_anti_clogging"] = sae_anti_clogging
            __props__.__dict__["sae_groups"] = sae_groups
            __props__.__dict__["sae_psk"] = sae_psk
            __props__.__dict__["sae_psk_vlan_required"] = sae_psk_vlan_required
            __props__.__dict__["sae_sync"] = sae_sync
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["schedule_enabled"] = schedule_enabled
            __props__.__dict__["schedule_reversed"] = schedule_reversed
            __props__.__dict__["schedule_with_duration"] = schedule_with_duration
            __props__.__dict__["security"] = security
            __props__.__dict__["setting_preference"] = setting_preference
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["tdls_prohibit"] = tdls_prohibit
            __props__.__dict__["uapsd_enabled"] = uapsd_enabled
            __props__.__dict__["uid_workspace_url"] = uid_workspace_url
            __props__.__dict__["usergroup_id"] = usergroup_id
            __props__.__dict__["vlan"] = vlan
            __props__.__dict__["vlan_enabled"] = vlan_enabled
            __props__.__dict__["wep_idx"] = wep_idx
            __props__.__dict__["wlan_band"] = wlan_band
            __props__.__dict__["wlan_bands"] = wlan_bands
            __props__.__dict__["wlangroup_id"] = wlangroup_id
            __props__.__dict__["wpa3_enhanced192"] = wpa3_enhanced192
            __props__.__dict__["wpa3_fast_roaming"] = wpa3_fast_roaming
            __props__.__dict__["wpa3_support"] = wpa3_support
            __props__.__dict__["wpa3_transition"] = wpa3_transition
            __props__.__dict__["wpa_enc"] = wpa_enc
            __props__.__dict__["wpa_mode"] = wpa_mode
            __props__.__dict__["wpa_psk_radius"] = wpa_psk_radius
            __props__.__dict__["x_iapp_key"] = None if x_iapp_key is None else pulumi.Output.secret(x_iapp_key)
            __props__.__dict__["x_passphrase"] = None if x_passphrase is None else pulumi.Output.secret(x_passphrase)
            __props__.__dict__["x_wep"] = None if x_wep is None else pulumi.Output.secret(x_wep)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["xIappKey", "xPassphrase", "xWep"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Wlan, __self__).__init__(
            'unifi-native:wlanconf:Wlan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Wlan':
        """
        Get an existing Wlan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = WlanArgs.__new__(WlanArgs)

        __props__.__dict__["id"] = None
        __props__.__dict__["ap_group_ids"] = None
        __props__.__dict__["ap_group_mode"] = None
        __props__.__dict__["attr_hidden"] = None
        __props__.__dict__["attr_hidden_id"] = None
        __props__.__dict__["attr_no_delete"] = None
        __props__.__dict__["attr_no_edit"] = None
        __props__.__dict__["auth_cache"] = None
        __props__.__dict__["b_supported"] = None
        __props__.__dict__["bc_filter_enabled"] = None
        __props__.__dict__["bc_filter_list"] = None
        __props__.__dict__["bss_transition"] = None
        __props__.__dict__["country_beacon"] = None
        __props__.__dict__["dpi_enabled"] = None
        __props__.__dict__["dpigroup_id"] = None
        __props__.__dict__["dtim6e"] = None
        __props__.__dict__["dtim_mode"] = None
        __props__.__dict__["dtim_na"] = None
        __props__.__dict__["dtim_ng"] = None
        __props__.__dict__["element_adopt"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["enhanced_iot"] = None
        __props__.__dict__["fast_roaming_enabled"] = None
        __props__.__dict__["group_rekey"] = None
        __props__.__dict__["hide_ssid"] = None
        __props__.__dict__["hotspot2"] = None
        __props__.__dict__["hotspot2conf_enabled"] = None
        __props__.__dict__["iapp_enabled"] = None
        __props__.__dict__["is_guest"] = None
        __props__.__dict__["l2_isolation"] = None
        __props__.__dict__["log_level"] = None
        __props__.__dict__["mac_filter_enabled"] = None
        __props__.__dict__["mac_filter_list"] = None
        __props__.__dict__["mac_filter_policy"] = None
        __props__.__dict__["mcastenhance_enabled"] = None
        __props__.__dict__["minrate_na_advertising_rates"] = None
        __props__.__dict__["minrate_na_data_rate_kbps"] = None
        __props__.__dict__["minrate_na_enabled"] = None
        __props__.__dict__["minrate_ng_advertising_rates"] = None
        __props__.__dict__["minrate_ng_data_rate_kbps"] = None
        __props__.__dict__["minrate_ng_enabled"] = None
        __props__.__dict__["minrate_setting_preference"] = None
        __props__.__dict__["mlo_enabled"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["name_combine_enabled"] = None
        __props__.__dict__["name_combine_suffix"] = None
        __props__.__dict__["nas_identifier"] = None
        __props__.__dict__["nas_identifier_type"] = None
        __props__.__dict__["networkconf_id"] = None
        __props__.__dict__["no2ghz_oui"] = None
        __props__.__dict__["optimize_iot_wifi_connectivity"] = None
        __props__.__dict__["p2p"] = None
        __props__.__dict__["p2p_cross_connect"] = None
        __props__.__dict__["pmf_cipher"] = None
        __props__.__dict__["pmf_mode"] = None
        __props__.__dict__["priority"] = None
        __props__.__dict__["private_preshared_keys"] = None
        __props__.__dict__["private_preshared_keys_enabled"] = None
        __props__.__dict__["proxy_arp"] = None
        __props__.__dict__["radius_das_enabled"] = None
        __props__.__dict__["radius_mac_auth_enabled"] = None
        __props__.__dict__["radius_macacl_empty_password"] = None
        __props__.__dict__["radius_macacl_format"] = None
        __props__.__dict__["radiusprofile_id"] = None
        __props__.__dict__["roam_cluster_id"] = None
        __props__.__dict__["rrm_enabled"] = None
        __props__.__dict__["sae_anti_clogging"] = None
        __props__.__dict__["sae_groups"] = None
        __props__.__dict__["sae_psk"] = None
        __props__.__dict__["sae_psk_vlan_required"] = None
        __props__.__dict__["sae_sync"] = None
        __props__.__dict__["schedule"] = None
        __props__.__dict__["schedule_enabled"] = None
        __props__.__dict__["schedule_reversed"] = None
        __props__.__dict__["schedule_with_duration"] = None
        __props__.__dict__["security"] = None
        __props__.__dict__["setting_preference"] = None
        __props__.__dict__["site_id"] = None
        __props__.__dict__["tdls_prohibit"] = None
        __props__.__dict__["uapsd_enabled"] = None
        __props__.__dict__["uid_workspace_url"] = None
        __props__.__dict__["usergroup_id"] = None
        __props__.__dict__["vlan"] = None
        __props__.__dict__["vlan_enabled"] = None
        __props__.__dict__["wep_idx"] = None
        __props__.__dict__["wlan_band"] = None
        __props__.__dict__["wlan_bands"] = None
        __props__.__dict__["wlangroup_id"] = None
        __props__.__dict__["wpa3_enhanced192"] = None
        __props__.__dict__["wpa3_fast_roaming"] = None
        __props__.__dict__["wpa3_support"] = None
        __props__.__dict__["wpa3_transition"] = None
        __props__.__dict__["wpa_enc"] = None
        __props__.__dict__["wpa_mode"] = None
        __props__.__dict__["wpa_psk_radius"] = None
        __props__.__dict__["x_iapp_key"] = None
        __props__.__dict__["x_passphrase"] = None
        __props__.__dict__["x_wep"] = None
        return Wlan(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="apGroupIds")
    def ap_group_ids(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "ap_group_ids")

    @property
    @pulumi.getter(name="apGroupMode")
    def ap_group_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ap_group_mode")

    @property
    @pulumi.getter(name="attrHidden")
    def attr_hidden(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_hidden")

    @property
    @pulumi.getter(name="attrHiddenId")
    def attr_hidden_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "attr_hidden_id")

    @property
    @pulumi.getter(name="attrNoDelete")
    def attr_no_delete(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_delete")

    @property
    @pulumi.getter(name="attrNoEdit")
    def attr_no_edit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "attr_no_edit")

    @property
    @pulumi.getter(name="authCache")
    def auth_cache(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "auth_cache")

    @property
    @pulumi.getter(name="bSupported")
    def b_supported(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "b_supported")

    @property
    @pulumi.getter(name="bcFilterEnabled")
    def bc_filter_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "bc_filter_enabled")

    @property
    @pulumi.getter(name="bcFilterList")
    def bc_filter_list(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "bc_filter_list")

    @property
    @pulumi.getter(name="bssTransition")
    def bss_transition(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "bss_transition")

    @property
    @pulumi.getter(name="countryBeacon")
    def country_beacon(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "country_beacon")

    @property
    @pulumi.getter(name="dpiEnabled")
    def dpi_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "dpi_enabled")

    @property
    @pulumi.getter(name="dpigroupId")
    def dpigroup_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dpigroup_id")

    @property
    @pulumi.getter
    def dtim6e(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "dtim6e")

    @property
    @pulumi.getter(name="dtimMode")
    def dtim_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dtim_mode")

    @property
    @pulumi.getter(name="dtimNa")
    def dtim_na(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "dtim_na")

    @property
    @pulumi.getter(name="dtimNg")
    def dtim_ng(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "dtim_ng")

    @property
    @pulumi.getter(name="elementAdopt")
    def element_adopt(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "element_adopt")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="enhancedIot")
    def enhanced_iot(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enhanced_iot")

    @property
    @pulumi.getter(name="fastRoamingEnabled")
    def fast_roaming_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "fast_roaming_enabled")

    @property
    @pulumi.getter(name="groupRekey")
    def group_rekey(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "group_rekey")

    @property
    @pulumi.getter(name="hideSsid")
    def hide_ssid(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "hide_ssid")

    @property
    @pulumi.getter
    def hotspot2(self) -> pulumi.Output[Optional['outputs.WLANHotspot2']]:
        return pulumi.get(self, "hotspot2")

    @property
    @pulumi.getter(name="hotspot2confEnabled")
    def hotspot2conf_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "hotspot2conf_enabled")

    @property
    @pulumi.getter(name="iappEnabled")
    def iapp_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "iapp_enabled")

    @property
    @pulumi.getter(name="isGuest")
    def is_guest(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "is_guest")

    @property
    @pulumi.getter(name="l2Isolation")
    def l2_isolation(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "l2_isolation")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter(name="macFilterEnabled")
    def mac_filter_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "mac_filter_enabled")

    @property
    @pulumi.getter(name="macFilterList")
    def mac_filter_list(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "mac_filter_list")

    @property
    @pulumi.getter(name="macFilterPolicy")
    def mac_filter_policy(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "mac_filter_policy")

    @property
    @pulumi.getter(name="mcastenhanceEnabled")
    def mcastenhance_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "mcastenhance_enabled")

    @property
    @pulumi.getter(name="minrateNaAdvertisingRates")
    def minrate_na_advertising_rates(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "minrate_na_advertising_rates")

    @property
    @pulumi.getter(name="minrateNaDataRateKbps")
    def minrate_na_data_rate_kbps(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "minrate_na_data_rate_kbps")

    @property
    @pulumi.getter(name="minrateNaEnabled")
    def minrate_na_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "minrate_na_enabled")

    @property
    @pulumi.getter(name="minrateNgAdvertisingRates")
    def minrate_ng_advertising_rates(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "minrate_ng_advertising_rates")

    @property
    @pulumi.getter(name="minrateNgDataRateKbps")
    def minrate_ng_data_rate_kbps(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "minrate_ng_data_rate_kbps")

    @property
    @pulumi.getter(name="minrateNgEnabled")
    def minrate_ng_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "minrate_ng_enabled")

    @property
    @pulumi.getter(name="minrateSettingPreference")
    def minrate_setting_preference(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "minrate_setting_preference")

    @property
    @pulumi.getter(name="mloEnabled")
    def mlo_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "mlo_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCombineEnabled")
    def name_combine_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "name_combine_enabled")

    @property
    @pulumi.getter(name="nameCombineSuffix")
    def name_combine_suffix(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name_combine_suffix")

    @property
    @pulumi.getter(name="nasIdentifier")
    def nas_identifier(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "nas_identifier")

    @property
    @pulumi.getter(name="nasIdentifierType")
    def nas_identifier_type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "nas_identifier_type")

    @property
    @pulumi.getter(name="networkconfId")
    def networkconf_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "networkconf_id")

    @property
    @pulumi.getter(name="no2ghzOui")
    def no2ghz_oui(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "no2ghz_oui")

    @property
    @pulumi.getter(name="optimizeIotWifiConnectivity")
    def optimize_iot_wifi_connectivity(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "optimize_iot_wifi_connectivity")

    @property
    @pulumi.getter
    def p2p(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "p2p")

    @property
    @pulumi.getter(name="p2pCrossConnect")
    def p2p_cross_connect(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "p2p_cross_connect")

    @property
    @pulumi.getter(name="pmfCipher")
    def pmf_cipher(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "pmf_cipher")

    @property
    @pulumi.getter(name="pmfMode")
    def pmf_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "pmf_mode")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="privatePresharedKeys")
    def private_preshared_keys(self) -> pulumi.Output[Optional[Sequence['outputs.WLANPrivatePresharedKeys']]]:
        return pulumi.get(self, "private_preshared_keys")

    @property
    @pulumi.getter(name="privatePresharedKeysEnabled")
    def private_preshared_keys_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "private_preshared_keys_enabled")

    @property
    @pulumi.getter(name="proxyArp")
    def proxy_arp(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "proxy_arp")

    @property
    @pulumi.getter(name="radiusDasEnabled")
    def radius_das_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "radius_das_enabled")

    @property
    @pulumi.getter(name="radiusMacAuthEnabled")
    def radius_mac_auth_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "radius_mac_auth_enabled")

    @property
    @pulumi.getter(name="radiusMacaclEmptyPassword")
    def radius_macacl_empty_password(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "radius_macacl_empty_password")

    @property
    @pulumi.getter(name="radiusMacaclFormat")
    def radius_macacl_format(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "radius_macacl_format")

    @property
    @pulumi.getter(name="radiusprofileId")
    def radiusprofile_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "radiusprofile_id")

    @property
    @pulumi.getter(name="roamClusterId")
    def roam_cluster_id(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "roam_cluster_id")

    @property
    @pulumi.getter(name="rrmEnabled")
    def rrm_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "rrm_enabled")

    @property
    @pulumi.getter(name="saeAntiClogging")
    def sae_anti_clogging(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "sae_anti_clogging")

    @property
    @pulumi.getter(name="saeGroups")
    def sae_groups(self) -> pulumi.Output[Optional[Sequence[builtins.int]]]:
        return pulumi.get(self, "sae_groups")

    @property
    @pulumi.getter(name="saePsk")
    def sae_psk(self) -> pulumi.Output[Optional[Sequence['outputs.WLANSaePsk']]]:
        return pulumi.get(self, "sae_psk")

    @property
    @pulumi.getter(name="saePskVlanRequired")
    def sae_psk_vlan_required(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "sae_psk_vlan_required")

    @property
    @pulumi.getter(name="saeSync")
    def sae_sync(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "sae_sync")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="scheduleEnabled")
    def schedule_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "schedule_enabled")

    @property
    @pulumi.getter(name="scheduleReversed")
    def schedule_reversed(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "schedule_reversed")

    @property
    @pulumi.getter(name="scheduleWithDuration")
    def schedule_with_duration(self) -> pulumi.Output[Optional[Sequence['outputs.WLANScheduleWithDuration']]]:
        return pulumi.get(self, "schedule_with_duration")

    @property
    @pulumi.getter
    def security(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="settingPreference")
    def setting_preference(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "setting_preference")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="tdlsProhibit")
    def tdls_prohibit(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "tdls_prohibit")

    @property
    @pulumi.getter(name="uapsdEnabled")
    def uapsd_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "uapsd_enabled")

    @property
    @pulumi.getter(name="uidWorkspaceUrl")
    def uid_workspace_url(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "uid_workspace_url")

    @property
    @pulumi.getter(name="usergroupId")
    def usergroup_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "usergroup_id")

    @property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="vlanEnabled")
    def vlan_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "vlan_enabled")

    @property
    @pulumi.getter(name="wepIdx")
    def wep_idx(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "wep_idx")

    @property
    @pulumi.getter(name="wlanBand")
    def wlan_band(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wlan_band")

    @property
    @pulumi.getter(name="wlanBands")
    def wlan_bands(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "wlan_bands")

    @property
    @pulumi.getter(name="wlangroupId")
    def wlangroup_id(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wlangroup_id")

    @property
    @pulumi.getter(name="wpa3Enhanced192")
    def wpa3_enhanced192(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "wpa3_enhanced192")

    @property
    @pulumi.getter(name="wpa3FastRoaming")
    def wpa3_fast_roaming(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "wpa3_fast_roaming")

    @property
    @pulumi.getter(name="wpa3Support")
    def wpa3_support(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "wpa3_support")

    @property
    @pulumi.getter(name="wpa3Transition")
    def wpa3_transition(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "wpa3_transition")

    @property
    @pulumi.getter(name="wpaEnc")
    def wpa_enc(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wpa_enc")

    @property
    @pulumi.getter(name="wpaMode")
    def wpa_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wpa_mode")

    @property
    @pulumi.getter(name="wpaPskRadius")
    def wpa_psk_radius(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "wpa_psk_radius")

    @property
    @pulumi.getter(name="xIappKey")
    def x_iapp_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_iapp_key")

    @property
    @pulumi.getter(name="xPassphrase")
    def x_passphrase(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_passphrase")

    @property
    @pulumi.getter(name="xWep")
    def x_wep(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "x_wep")

